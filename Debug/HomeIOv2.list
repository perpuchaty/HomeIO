
HomeIOv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014b80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021ec  08014d10  08014d10  00024d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016efc  08016efc  0003010c  2**0
                  CONTENTS
  4 .ARM          00000000  08016efc  08016efc  0003010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016efc  08016efc  0003010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016efc  08016efc  00026efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016f00  08016f00  00026f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08016f04  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000824c  2000010c  08017010  0003010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008358  08017010  00038358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a44e  00000000  00000000  0003013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006e33  00000000  00000000  0005a58a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f78  00000000  00000000  000613c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001da0  00000000  00000000  00063338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003152f  00000000  00000000  000650d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003449e  00000000  00000000  00096607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7dae  00000000  00000000  000caaa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b2853  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e18  00000000  00000000  001b28a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001bb6bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001bb788  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000010c 	.word	0x2000010c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014cf8 	.word	0x08014cf8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000110 	.word	0x20000110
 80001cc:	08014cf8 	.word	0x08014cf8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <Console_INFO>:
static char DBG_BUFFER[DBG_BUF_LEN];
#endif


void Console_INFO(const char *fmt, ...)
{
 8000280:	b40f      	push	{r0, r1, r2, r3}
 8000282:	b480      	push	{r7}
 8000284:	af00      	add	r7, sp, #0
			HAL_UART_Transmit(DEBUG_PORT, (uint8_t *)(DBG_BUFFER), len, len);

		}
	}
#endif
}
 8000286:	bf00      	nop
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	b004      	add	sp, #16
 8000290:	4770      	bx	lr

08000292 <Console_DEBUG>:

void Console_DEBUG(const char *fmt, ...)
{
 8000292:	b40f      	push	{r0, r1, r2, r3}
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0

			HAL_UART_Transmit(DEBUG_PORT, (uint8_t *)(DBG_BUFFER), len, len);
		}
	}
#endif
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <Console_WARNING>:

void Console_WARNING(const char *fmt, ...)
{
 80002a4:	b40f      	push	{r0, r1, r2, r3}
 80002a6:	b480      	push	{r7}
 80002a8:	af00      	add	r7, sp, #0
			len += sprintf(&DBG_BUFFER[len], "\033[0m\r\n");
			HAL_UART_Transmit(DEBUG_PORT, (uint8_t *)(DBG_BUFFER), len, len);
		}
	}
#endif
}
 80002aa:	bf00      	nop
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	b004      	add	sp, #16
 80002b4:	4770      	bx	lr

080002b6 <EraseFlashPage>:
#include "main.h"
#include "system.h"

// Function to erase a flash page
void EraseFlashPage (uint32_t PageAddress)
{
 80002b6:	b580      	push	{r7, lr}
 80002b8:	b088      	sub	sp, #32
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	6078      	str	r0, [r7, #4]
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]

  // Erase settings
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]
  EraseInitStruct.Page = PageAddress;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	61bb      	str	r3, [r7, #24]
  EraseInitStruct.NbPages = 1;
 80002ca:	2301      	movs	r3, #1
 80002cc:	61fb      	str	r3, [r7, #28]

  HAL_FLASH_Unlock (); // Unlock the flash
 80002ce:	f003 f9d9 	bl	8003684 <HAL_FLASH_Unlock>

  // Erase the page
  if (HAL_FLASHEx_Erase (&EraseInitStruct, &PageError) != HAL_OK)
 80002d2:	f107 020c 	add.w	r2, r7, #12
 80002d6:	f107 0310 	add.w	r3, r7, #16
 80002da:	4611      	mov	r1, r2
 80002dc:	4618      	mov	r0, r3
 80002de:	f003 fab7 	bl	8003850 <HAL_FLASHEx_Erase>
    {
      // Error occurred while erasing the flash page
      // Handle error here
    }

  HAL_FLASH_Lock (); // Lock the flash
 80002e2:	f003 f9f1 	bl	80036c8 <HAL_FLASH_Lock>
}
 80002e6:	bf00      	nop
 80002e8:	3720      	adds	r7, #32
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}

080002ee <ProgramFlash>:

// Function to program flash memory
void ProgramFlash (uint32_t Address, uint8_t *Data, uint32_t DataLength)
{
 80002ee:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80002f2:	b08a      	sub	sp, #40	; 0x28
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	60f8      	str	r0, [r7, #12]
 80002f8:	60b9      	str	r1, [r7, #8]
 80002fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80002fc:	2300      	movs	r3, #0
 80002fe:	74fb      	strb	r3, [r7, #19]

  HAL_FLASH_Unlock (); // Unlock the flash
 8000300:	f003 f9c0 	bl	8003684 <HAL_FLASH_Unlock>

  for (uint32_t i = 0; i < DataLength / 8; ++i)
 8000304:	2300      	movs	r3, #0
 8000306:	627b      	str	r3, [r7, #36]	; 0x24
 8000308:	e03f      	b.n	800038a <ProgramFlash+0x9c>
    {
      uint64_t value = 0;
 800030a:	f04f 0200 	mov.w	r2, #0
 800030e:	f04f 0300 	mov.w	r3, #0
 8000312:	e9c7 2306 	strd	r2, r3, [r7, #24]
      for (int j = 0; j < 8; ++j)
 8000316:	2300      	movs	r3, #0
 8000318:	617b      	str	r3, [r7, #20]
 800031a:	e025      	b.n	8000368 <ProgramFlash+0x7a>
	{
	  value |= ((uint64_t) Data[i * 8 + j] << (j * 8));
 800031c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800031e:	00da      	lsls	r2, r3, #3
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	4413      	add	r3, r2
 8000324:	68ba      	ldr	r2, [r7, #8]
 8000326:	4413      	add	r3, r2
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	b2db      	uxtb	r3, r3
 800032c:	2200      	movs	r2, #0
 800032e:	4698      	mov	r8, r3
 8000330:	4691      	mov	r9, r2
 8000332:	697b      	ldr	r3, [r7, #20]
 8000334:	00db      	lsls	r3, r3, #3
 8000336:	f1a3 0120 	sub.w	r1, r3, #32
 800033a:	f1c3 0220 	rsb	r2, r3, #32
 800033e:	fa09 f503 	lsl.w	r5, r9, r3
 8000342:	fa08 f101 	lsl.w	r1, r8, r1
 8000346:	430d      	orrs	r5, r1
 8000348:	fa28 f202 	lsr.w	r2, r8, r2
 800034c:	4315      	orrs	r5, r2
 800034e:	fa08 f403 	lsl.w	r4, r8, r3
 8000352:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000356:	ea42 0a04 	orr.w	sl, r2, r4
 800035a:	ea43 0b05 	orr.w	fp, r3, r5
 800035e:	e9c7 ab06 	strd	sl, fp, [r7, #24]
      for (int j = 0; j < 8; ++j)
 8000362:	697b      	ldr	r3, [r7, #20]
 8000364:	3301      	adds	r3, #1
 8000366:	617b      	str	r3, [r7, #20]
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	2b07      	cmp	r3, #7
 800036c:	ddd6      	ble.n	800031c <ProgramFlash+0x2e>
	}
      status = HAL_FLASH_Program (FLASH_TYPEPROGRAM_DOUBLEWORD,
				  Address + (i * 8), value);
 800036e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000370:	00da      	lsls	r2, r3, #3
      status = HAL_FLASH_Program (FLASH_TYPEPROGRAM_DOUBLEWORD,
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	18d1      	adds	r1, r2, r3
 8000376:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800037a:	2000      	movs	r0, #0
 800037c:	f003 f916 	bl	80035ac <HAL_FLASH_Program>
 8000380:	4603      	mov	r3, r0
 8000382:	74fb      	strb	r3, [r7, #19]
  for (uint32_t i = 0; i < DataLength / 8; ++i)
 8000384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000386:	3301      	adds	r3, #1
 8000388:	627b      	str	r3, [r7, #36]	; 0x24
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	08db      	lsrs	r3, r3, #3
 800038e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000390:	429a      	cmp	r2, r3
 8000392:	d3ba      	bcc.n	800030a <ProgramFlash+0x1c>
	  // Error occurred while programming flash
	  // Handle error here
	}
    }

  HAL_FLASH_Lock (); // Lock the flash
 8000394:	f003 f998 	bl	80036c8 <HAL_FLASH_Lock>
}
 8000398:	bf00      	nop
 800039a:	3728      	adds	r7, #40	; 0x28
 800039c:	46bd      	mov	sp, r7
 800039e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080003a4 <ProgramSettings>:

void ProgramSettings (struct Settings *settings)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  EraseFlashPage (127); //Erase last page, we are working on 256k CPU, last page is 127 then.
 80003ac:	207f      	movs	r0, #127	; 0x7f
 80003ae:	f7ff ff82 	bl	80002b6 <EraseFlashPage>

  // Calculate the size of the struct
  size_t struct_size = sizeof(struct Settings);
 80003b2:	2330      	movs	r3, #48	; 0x30
 80003b4:	60fb      	str	r3, [r7, #12]

  // Program the settings structure into flash
  ProgramFlash (FLASH_SETTINGS_PAGE_ADDRESS, (uint8_t*) settings, struct_size);
 80003b6:	68fa      	ldr	r2, [r7, #12]
 80003b8:	6879      	ldr	r1, [r7, #4]
 80003ba:	4803      	ldr	r0, [pc, #12]	; (80003c8 <ProgramSettings+0x24>)
 80003bc:	f7ff ff97 	bl	80002ee <ProgramFlash>
}
 80003c0:	bf00      	nop
 80003c2:	3710      	adds	r7, #16
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	0803f800 	.word	0x0803f800

080003cc <ReadSettingsFromFlash>:

void ReadSettingsFromFlash (uint32_t Address, struct Settings *settings)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	6039      	str	r1, [r7, #0]
  // Calculate the size of the struct
  size_t struct_size = sizeof(struct Settings);
 80003d6:	2330      	movs	r3, #48	; 0x30
 80003d8:	60fb      	str	r3, [r7, #12]

  // Copy the data from flash to the struct instance
  memcpy (settings, (struct Settings*) Address, struct_size);
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	68fa      	ldr	r2, [r7, #12]
 80003de:	4619      	mov	r1, r3
 80003e0:	6838      	ldr	r0, [r7, #0]
 80003e2:	f013 f8ad 	bl	8013540 <memcpy>
}
 80003e6:	bf00      	nop
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
	...

080003f0 <setLED>:

#define USE_BRIGHTNESS 1


void setLED (uint8_t led, uint8_t r, uint8_t g, uint8_t b)
{
 80003f0:	b490      	push	{r4, r7}
 80003f2:	b086      	sub	sp, #24
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4604      	mov	r4, r0
 80003f8:	4608      	mov	r0, r1
 80003fa:	4611      	mov	r1, r2
 80003fc:	461a      	mov	r2, r3
 80003fe:	4623      	mov	r3, r4
 8000400:	71fb      	strb	r3, [r7, #7]
 8000402:	4603      	mov	r3, r0
 8000404:	71bb      	strb	r3, [r7, #6]
 8000406:	460b      	mov	r3, r1
 8000408:	717b      	strb	r3, [r7, #5]
 800040a:	4613      	mov	r3, r2
 800040c:	713b      	strb	r3, [r7, #4]
  #if USE_BRIGHTNESS
  	if (registers.rgb_brightness>100)registers.rgb_brightness = 100;
 800040e:	4b33      	ldr	r3, [pc, #204]	; (80004dc <setLED+0xec>)
 8000410:	7d1b      	ldrb	r3, [r3, #20]
 8000412:	2b64      	cmp	r3, #100	; 0x64
 8000414:	d902      	bls.n	800041c <setLED+0x2c>
 8000416:	4b31      	ldr	r3, [pc, #196]	; (80004dc <setLED+0xec>)
 8000418:	2264      	movs	r2, #100	; 0x64
 800041a:	751a      	strb	r2, [r3, #20]
  	g = g*registers.rgb_brightness/100;
 800041c:	797b      	ldrb	r3, [r7, #5]
 800041e:	4a2f      	ldr	r2, [pc, #188]	; (80004dc <setLED+0xec>)
 8000420:	7d12      	ldrb	r2, [r2, #20]
 8000422:	fb02 f303 	mul.w	r3, r2, r3
 8000426:	4a2e      	ldr	r2, [pc, #184]	; (80004e0 <setLED+0xf0>)
 8000428:	fb82 1203 	smull	r1, r2, r2, r3
 800042c:	1152      	asrs	r2, r2, #5
 800042e:	17db      	asrs	r3, r3, #31
 8000430:	1ad3      	subs	r3, r2, r3
 8000432:	717b      	strb	r3, [r7, #5]
  	r = r*registers.rgb_brightness/100;
 8000434:	79bb      	ldrb	r3, [r7, #6]
 8000436:	4a29      	ldr	r2, [pc, #164]	; (80004dc <setLED+0xec>)
 8000438:	7d12      	ldrb	r2, [r2, #20]
 800043a:	fb02 f303 	mul.w	r3, r2, r3
 800043e:	4a28      	ldr	r2, [pc, #160]	; (80004e0 <setLED+0xf0>)
 8000440:	fb82 1203 	smull	r1, r2, r2, r3
 8000444:	1152      	asrs	r2, r2, #5
 8000446:	17db      	asrs	r3, r3, #31
 8000448:	1ad3      	subs	r3, r2, r3
 800044a:	71bb      	strb	r3, [r7, #6]
  	b = b*registers.rgb_brightness/100;
 800044c:	793b      	ldrb	r3, [r7, #4]
 800044e:	4a23      	ldr	r2, [pc, #140]	; (80004dc <setLED+0xec>)
 8000450:	7d12      	ldrb	r2, [r2, #20]
 8000452:	fb02 f303 	mul.w	r3, r2, r3
 8000456:	4a22      	ldr	r2, [pc, #136]	; (80004e0 <setLED+0xf0>)
 8000458:	fb82 1203 	smull	r1, r2, r2, r3
 800045c:	1152      	asrs	r2, r2, #5
 800045e:	17db      	asrs	r3, r3, #31
 8000460:	1ad3      	subs	r3, r2, r3
 8000462:	713b      	strb	r3, [r7, #4]

  #endif
  uint32_t color = g << 16 | r << 8 | b;
 8000464:	797b      	ldrb	r3, [r7, #5]
 8000466:	041a      	lsls	r2, r3, #16
 8000468:	79bb      	ldrb	r3, [r7, #6]
 800046a:	021b      	lsls	r3, r3, #8
 800046c:	431a      	orrs	r2, r3
 800046e:	793b      	ldrb	r3, [r7, #4]
 8000470:	4313      	orrs	r3, r2
 8000472:	60fb      	str	r3, [r7, #12]
  uint8_t indx = 0;
 8000474:	2300      	movs	r3, #0
 8000476:	75fb      	strb	r3, [r7, #23]
  for (int i = 23; i >= 0; i--)
 8000478:	2317      	movs	r3, #23
 800047a:	613b      	str	r3, [r7, #16]
 800047c:	e024      	b.n	80004c8 <setLED+0xd8>
    {
      if (((color >> i) & 0x01) == 1)
 800047e:	68fa      	ldr	r2, [r7, #12]
 8000480:	693b      	ldr	r3, [r7, #16]
 8000482:	fa22 f303 	lsr.w	r3, r2, r3
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	2b00      	cmp	r3, #0
 800048c:	d00b      	beq.n	80004a6 <setLED+0xb6>
	LED_Data[(led*24)+indx] = 248;  // store 1
 800048e:	79fa      	ldrb	r2, [r7, #7]
 8000490:	4613      	mov	r3, r2
 8000492:	005b      	lsls	r3, r3, #1
 8000494:	4413      	add	r3, r2
 8000496:	00db      	lsls	r3, r3, #3
 8000498:	461a      	mov	r2, r3
 800049a:	7dfb      	ldrb	r3, [r7, #23]
 800049c:	4413      	add	r3, r2
 800049e:	4a11      	ldr	r2, [pc, #68]	; (80004e4 <setLED+0xf4>)
 80004a0:	21f8      	movs	r1, #248	; 0xf8
 80004a2:	54d1      	strb	r1, [r2, r3]
 80004a4:	e00a      	b.n	80004bc <setLED+0xcc>
      else
	LED_Data[(led*24)+indx] = 192;  // store 0
 80004a6:	79fa      	ldrb	r2, [r7, #7]
 80004a8:	4613      	mov	r3, r2
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	4413      	add	r3, r2
 80004ae:	00db      	lsls	r3, r3, #3
 80004b0:	461a      	mov	r2, r3
 80004b2:	7dfb      	ldrb	r3, [r7, #23]
 80004b4:	4413      	add	r3, r2
 80004b6:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <setLED+0xf4>)
 80004b8:	21c0      	movs	r1, #192	; 0xc0
 80004ba:	54d1      	strb	r1, [r2, r3]
     indx++;
 80004bc:	7dfb      	ldrb	r3, [r7, #23]
 80004be:	3301      	adds	r3, #1
 80004c0:	75fb      	strb	r3, [r7, #23]
  for (int i = 23; i >= 0; i--)
 80004c2:	693b      	ldr	r3, [r7, #16]
 80004c4:	3b01      	subs	r3, #1
 80004c6:	613b      	str	r3, [r7, #16]
 80004c8:	693b      	ldr	r3, [r7, #16]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	dad7      	bge.n	800047e <setLED+0x8e>
    }

}
 80004ce:	bf00      	nop
 80004d0:	bf00      	nop
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc90      	pop	{r4, r7}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	20000e6c 	.word	0x20000e6c
 80004e0:	51eb851f 	.word	0x51eb851f
 80004e4:	20000128 	.word	0x20000128

080004e8 <ws2812_spi>:
void ws2812_spi ()
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
    for (uint i = 0; i < 100; i++)
 80004ee:	2300      	movs	r3, #0
 80004f0:	607b      	str	r3, [r7, #4]
 80004f2:	e008      	b.n	8000506 <ws2812_spi+0x1e>
    {
	LED_Data[(NUM_LED * 24)+i] = 0;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 80004fa:	4a09      	ldr	r2, [pc, #36]	; (8000520 <ws2812_spi+0x38>)
 80004fc:	2100      	movs	r1, #0
 80004fe:	54d1      	strb	r1, [r2, r3]
    for (uint i = 0; i < 100; i++)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	3301      	adds	r3, #1
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2b63      	cmp	r3, #99	; 0x63
 800050a:	d9f3      	bls.n	80004f4 <ws2812_spi+0xc>
    }
  HAL_SPI_Transmit_DMA(&hspi3, LED_Data, (NUM_LED * 24)+100);
 800050c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000510:	4903      	ldr	r1, [pc, #12]	; (8000520 <ws2812_spi+0x38>)
 8000512:	4804      	ldr	r0, [pc, #16]	; (8000524 <ws2812_spi+0x3c>)
 8000514:	f005 fb54 	bl	8005bc0 <HAL_SPI_Transmit_DMA>
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000128 	.word	0x20000128
 8000524:	20000c8c 	.word	0x20000c8c

08000528 <mch_net_init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void mch_net_init (void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af04      	add	r7, sp, #16
  ip_addr_t mch_myip_addr; /* 192.168.1.2 */
  ip_addr_t gw_addr;
  ip_addr_t netmask; /* 192.168.1.1 */
  lwip_init ();
 800052e:	f008 fdbf 	bl	80090b0 <lwip_init>

  mchdrv_netif.hwaddr_len = 6;
 8000532:	4b85      	ldr	r3, [pc, #532]	; (8000748 <mch_net_init+0x220>)
 8000534:	2206      	movs	r2, #6
 8000536:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  /* demo mac address */
  mchdrv_netif.hwaddr[0] = 0x02; //Locally Administered OUI
 800053a:	4b83      	ldr	r3, [pc, #524]	; (8000748 <mch_net_init+0x220>)
 800053c:	2202      	movs	r2, #2
 800053e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  mchdrv_netif.hwaddr[1] = 0x32;
 8000542:	4b81      	ldr	r3, [pc, #516]	; (8000748 <mch_net_init+0x220>)
 8000544:	2232      	movs	r2, #50	; 0x32
 8000546:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  mchdrv_netif.hwaddr[2] = (current_settings.device_id >> 24) & 0xFF;
 800054a:	4b80      	ldr	r3, [pc, #512]	; (800074c <mch_net_init+0x224>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	0e1b      	lsrs	r3, r3, #24
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4b7d      	ldr	r3, [pc, #500]	; (8000748 <mch_net_init+0x220>)
 8000554:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  mchdrv_netif.hwaddr[3] = (current_settings.device_id >> 16) & 0xFF;
 8000558:	4b7c      	ldr	r3, [pc, #496]	; (800074c <mch_net_init+0x224>)
 800055a:	695b      	ldr	r3, [r3, #20]
 800055c:	0c1b      	lsrs	r3, r3, #16
 800055e:	b2da      	uxtb	r2, r3
 8000560:	4b79      	ldr	r3, [pc, #484]	; (8000748 <mch_net_init+0x220>)
 8000562:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  mchdrv_netif.hwaddr[4] = (current_settings.device_id >> 8) & 0xFF;
 8000566:	4b79      	ldr	r3, [pc, #484]	; (800074c <mch_net_init+0x224>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	0a1b      	lsrs	r3, r3, #8
 800056c:	b2da      	uxtb	r2, r3
 800056e:	4b76      	ldr	r3, [pc, #472]	; (8000748 <mch_net_init+0x220>)
 8000570:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  mchdrv_netif.hwaddr[5] = current_settings.device_id & 0xFF;
 8000574:	4b75      	ldr	r3, [pc, #468]	; (800074c <mch_net_init+0x224>)
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	b2da      	uxtb	r2, r3
 800057a:	4b73      	ldr	r3, [pc, #460]	; (8000748 <mch_net_init+0x220>)
 800057c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  IP4_ADDR(&mch_myip_addr, current_settings.ip_add[0], current_settings.ip_add[1], current_settings.ip_add[2], current_settings.ip_add[3]);
 8000580:	4b72      	ldr	r3, [pc, #456]	; (800074c <mch_net_init+0x224>)
 8000582:	785b      	ldrb	r3, [r3, #1]
 8000584:	061a      	lsls	r2, r3, #24
 8000586:	4b71      	ldr	r3, [pc, #452]	; (800074c <mch_net_init+0x224>)
 8000588:	789b      	ldrb	r3, [r3, #2]
 800058a:	041b      	lsls	r3, r3, #16
 800058c:	431a      	orrs	r2, r3
 800058e:	4b6f      	ldr	r3, [pc, #444]	; (800074c <mch_net_init+0x224>)
 8000590:	78db      	ldrb	r3, [r3, #3]
 8000592:	021b      	lsls	r3, r3, #8
 8000594:	4313      	orrs	r3, r2
 8000596:	4a6d      	ldr	r2, [pc, #436]	; (800074c <mch_net_init+0x224>)
 8000598:	7912      	ldrb	r2, [r2, #4]
 800059a:	4313      	orrs	r3, r2
 800059c:	061a      	lsls	r2, r3, #24
 800059e:	4b6b      	ldr	r3, [pc, #428]	; (800074c <mch_net_init+0x224>)
 80005a0:	785b      	ldrb	r3, [r3, #1]
 80005a2:	0619      	lsls	r1, r3, #24
 80005a4:	4b69      	ldr	r3, [pc, #420]	; (800074c <mch_net_init+0x224>)
 80005a6:	789b      	ldrb	r3, [r3, #2]
 80005a8:	041b      	lsls	r3, r3, #16
 80005aa:	4319      	orrs	r1, r3
 80005ac:	4b67      	ldr	r3, [pc, #412]	; (800074c <mch_net_init+0x224>)
 80005ae:	78db      	ldrb	r3, [r3, #3]
 80005b0:	021b      	lsls	r3, r3, #8
 80005b2:	430b      	orrs	r3, r1
 80005b4:	4965      	ldr	r1, [pc, #404]	; (800074c <mch_net_init+0x224>)
 80005b6:	7909      	ldrb	r1, [r1, #4]
 80005b8:	430b      	orrs	r3, r1
 80005ba:	021b      	lsls	r3, r3, #8
 80005bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80005c0:	431a      	orrs	r2, r3
 80005c2:	4b62      	ldr	r3, [pc, #392]	; (800074c <mch_net_init+0x224>)
 80005c4:	785b      	ldrb	r3, [r3, #1]
 80005c6:	0619      	lsls	r1, r3, #24
 80005c8:	4b60      	ldr	r3, [pc, #384]	; (800074c <mch_net_init+0x224>)
 80005ca:	789b      	ldrb	r3, [r3, #2]
 80005cc:	041b      	lsls	r3, r3, #16
 80005ce:	4319      	orrs	r1, r3
 80005d0:	4b5e      	ldr	r3, [pc, #376]	; (800074c <mch_net_init+0x224>)
 80005d2:	78db      	ldrb	r3, [r3, #3]
 80005d4:	021b      	lsls	r3, r3, #8
 80005d6:	430b      	orrs	r3, r1
 80005d8:	495c      	ldr	r1, [pc, #368]	; (800074c <mch_net_init+0x224>)
 80005da:	7909      	ldrb	r1, [r1, #4]
 80005dc:	430b      	orrs	r3, r1
 80005de:	0a1b      	lsrs	r3, r3, #8
 80005e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80005e4:	431a      	orrs	r2, r3
 80005e6:	4b59      	ldr	r3, [pc, #356]	; (800074c <mch_net_init+0x224>)
 80005e8:	785b      	ldrb	r3, [r3, #1]
 80005ea:	0619      	lsls	r1, r3, #24
 80005ec:	4b57      	ldr	r3, [pc, #348]	; (800074c <mch_net_init+0x224>)
 80005ee:	789b      	ldrb	r3, [r3, #2]
 80005f0:	041b      	lsls	r3, r3, #16
 80005f2:	4319      	orrs	r1, r3
 80005f4:	4b55      	ldr	r3, [pc, #340]	; (800074c <mch_net_init+0x224>)
 80005f6:	78db      	ldrb	r3, [r3, #3]
 80005f8:	021b      	lsls	r3, r3, #8
 80005fa:	430b      	orrs	r3, r1
 80005fc:	4953      	ldr	r1, [pc, #332]	; (800074c <mch_net_init+0x224>)
 80005fe:	7909      	ldrb	r1, [r1, #4]
 8000600:	430b      	orrs	r3, r1
 8000602:	0e1b      	lsrs	r3, r3, #24
 8000604:	4313      	orrs	r3, r2
 8000606:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&gw_addr, current_settings.gateway[0], current_settings.gateway[1], current_settings.gateway[2], current_settings.gateway[3]);
 8000608:	4b50      	ldr	r3, [pc, #320]	; (800074c <mch_net_init+0x224>)
 800060a:	795b      	ldrb	r3, [r3, #5]
 800060c:	061a      	lsls	r2, r3, #24
 800060e:	4b4f      	ldr	r3, [pc, #316]	; (800074c <mch_net_init+0x224>)
 8000610:	799b      	ldrb	r3, [r3, #6]
 8000612:	041b      	lsls	r3, r3, #16
 8000614:	431a      	orrs	r2, r3
 8000616:	4b4d      	ldr	r3, [pc, #308]	; (800074c <mch_net_init+0x224>)
 8000618:	79db      	ldrb	r3, [r3, #7]
 800061a:	021b      	lsls	r3, r3, #8
 800061c:	4313      	orrs	r3, r2
 800061e:	4a4b      	ldr	r2, [pc, #300]	; (800074c <mch_net_init+0x224>)
 8000620:	7a12      	ldrb	r2, [r2, #8]
 8000622:	4313      	orrs	r3, r2
 8000624:	061a      	lsls	r2, r3, #24
 8000626:	4b49      	ldr	r3, [pc, #292]	; (800074c <mch_net_init+0x224>)
 8000628:	795b      	ldrb	r3, [r3, #5]
 800062a:	0619      	lsls	r1, r3, #24
 800062c:	4b47      	ldr	r3, [pc, #284]	; (800074c <mch_net_init+0x224>)
 800062e:	799b      	ldrb	r3, [r3, #6]
 8000630:	041b      	lsls	r3, r3, #16
 8000632:	4319      	orrs	r1, r3
 8000634:	4b45      	ldr	r3, [pc, #276]	; (800074c <mch_net_init+0x224>)
 8000636:	79db      	ldrb	r3, [r3, #7]
 8000638:	021b      	lsls	r3, r3, #8
 800063a:	430b      	orrs	r3, r1
 800063c:	4943      	ldr	r1, [pc, #268]	; (800074c <mch_net_init+0x224>)
 800063e:	7a09      	ldrb	r1, [r1, #8]
 8000640:	430b      	orrs	r3, r1
 8000642:	021b      	lsls	r3, r3, #8
 8000644:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000648:	431a      	orrs	r2, r3
 800064a:	4b40      	ldr	r3, [pc, #256]	; (800074c <mch_net_init+0x224>)
 800064c:	795b      	ldrb	r3, [r3, #5]
 800064e:	0619      	lsls	r1, r3, #24
 8000650:	4b3e      	ldr	r3, [pc, #248]	; (800074c <mch_net_init+0x224>)
 8000652:	799b      	ldrb	r3, [r3, #6]
 8000654:	041b      	lsls	r3, r3, #16
 8000656:	4319      	orrs	r1, r3
 8000658:	4b3c      	ldr	r3, [pc, #240]	; (800074c <mch_net_init+0x224>)
 800065a:	79db      	ldrb	r3, [r3, #7]
 800065c:	021b      	lsls	r3, r3, #8
 800065e:	430b      	orrs	r3, r1
 8000660:	493a      	ldr	r1, [pc, #232]	; (800074c <mch_net_init+0x224>)
 8000662:	7a09      	ldrb	r1, [r1, #8]
 8000664:	430b      	orrs	r3, r1
 8000666:	0a1b      	lsrs	r3, r3, #8
 8000668:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800066c:	431a      	orrs	r2, r3
 800066e:	4b37      	ldr	r3, [pc, #220]	; (800074c <mch_net_init+0x224>)
 8000670:	795b      	ldrb	r3, [r3, #5]
 8000672:	0619      	lsls	r1, r3, #24
 8000674:	4b35      	ldr	r3, [pc, #212]	; (800074c <mch_net_init+0x224>)
 8000676:	799b      	ldrb	r3, [r3, #6]
 8000678:	041b      	lsls	r3, r3, #16
 800067a:	4319      	orrs	r1, r3
 800067c:	4b33      	ldr	r3, [pc, #204]	; (800074c <mch_net_init+0x224>)
 800067e:	79db      	ldrb	r3, [r3, #7]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	430b      	orrs	r3, r1
 8000684:	4931      	ldr	r1, [pc, #196]	; (800074c <mch_net_init+0x224>)
 8000686:	7a09      	ldrb	r1, [r1, #8]
 8000688:	430b      	orrs	r3, r1
 800068a:	0e1b      	lsrs	r3, r3, #24
 800068c:	4313      	orrs	r3, r2
 800068e:	60bb      	str	r3, [r7, #8]
  IP4_ADDR(&netmask, current_settings.netmask[0], current_settings.netmask[1], current_settings.netmask[2], current_settings.netmask[3]);
 8000690:	4b2e      	ldr	r3, [pc, #184]	; (800074c <mch_net_init+0x224>)
 8000692:	7a5b      	ldrb	r3, [r3, #9]
 8000694:	061a      	lsls	r2, r3, #24
 8000696:	4b2d      	ldr	r3, [pc, #180]	; (800074c <mch_net_init+0x224>)
 8000698:	7a9b      	ldrb	r3, [r3, #10]
 800069a:	041b      	lsls	r3, r3, #16
 800069c:	431a      	orrs	r2, r3
 800069e:	4b2b      	ldr	r3, [pc, #172]	; (800074c <mch_net_init+0x224>)
 80006a0:	7adb      	ldrb	r3, [r3, #11]
 80006a2:	021b      	lsls	r3, r3, #8
 80006a4:	4313      	orrs	r3, r2
 80006a6:	4a29      	ldr	r2, [pc, #164]	; (800074c <mch_net_init+0x224>)
 80006a8:	7b12      	ldrb	r2, [r2, #12]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	061a      	lsls	r2, r3, #24
 80006ae:	4b27      	ldr	r3, [pc, #156]	; (800074c <mch_net_init+0x224>)
 80006b0:	7a5b      	ldrb	r3, [r3, #9]
 80006b2:	0619      	lsls	r1, r3, #24
 80006b4:	4b25      	ldr	r3, [pc, #148]	; (800074c <mch_net_init+0x224>)
 80006b6:	7a9b      	ldrb	r3, [r3, #10]
 80006b8:	041b      	lsls	r3, r3, #16
 80006ba:	4319      	orrs	r1, r3
 80006bc:	4b23      	ldr	r3, [pc, #140]	; (800074c <mch_net_init+0x224>)
 80006be:	7adb      	ldrb	r3, [r3, #11]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	430b      	orrs	r3, r1
 80006c4:	4921      	ldr	r1, [pc, #132]	; (800074c <mch_net_init+0x224>)
 80006c6:	7b09      	ldrb	r1, [r1, #12]
 80006c8:	430b      	orrs	r3, r1
 80006ca:	021b      	lsls	r3, r3, #8
 80006cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80006d0:	431a      	orrs	r2, r3
 80006d2:	4b1e      	ldr	r3, [pc, #120]	; (800074c <mch_net_init+0x224>)
 80006d4:	7a5b      	ldrb	r3, [r3, #9]
 80006d6:	0619      	lsls	r1, r3, #24
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <mch_net_init+0x224>)
 80006da:	7a9b      	ldrb	r3, [r3, #10]
 80006dc:	041b      	lsls	r3, r3, #16
 80006de:	4319      	orrs	r1, r3
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <mch_net_init+0x224>)
 80006e2:	7adb      	ldrb	r3, [r3, #11]
 80006e4:	021b      	lsls	r3, r3, #8
 80006e6:	430b      	orrs	r3, r1
 80006e8:	4918      	ldr	r1, [pc, #96]	; (800074c <mch_net_init+0x224>)
 80006ea:	7b09      	ldrb	r1, [r1, #12]
 80006ec:	430b      	orrs	r3, r1
 80006ee:	0a1b      	lsrs	r3, r3, #8
 80006f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80006f4:	431a      	orrs	r2, r3
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <mch_net_init+0x224>)
 80006f8:	7a5b      	ldrb	r3, [r3, #9]
 80006fa:	0619      	lsls	r1, r3, #24
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <mch_net_init+0x224>)
 80006fe:	7a9b      	ldrb	r3, [r3, #10]
 8000700:	041b      	lsls	r3, r3, #16
 8000702:	4319      	orrs	r1, r3
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <mch_net_init+0x224>)
 8000706:	7adb      	ldrb	r3, [r3, #11]
 8000708:	021b      	lsls	r3, r3, #8
 800070a:	430b      	orrs	r3, r1
 800070c:	490f      	ldr	r1, [pc, #60]	; (800074c <mch_net_init+0x224>)
 800070e:	7b09      	ldrb	r1, [r1, #12]
 8000710:	430b      	orrs	r3, r1
 8000712:	0e1b      	lsrs	r3, r3, #24
 8000714:	4313      	orrs	r3, r2
 8000716:	607b      	str	r3, [r7, #4]

  // Add our netif to LWIP (netif_add calls our driver initialization function)
  if (netif_add (&mchdrv_netif, &mch_myip_addr, &netmask, &gw_addr, &mchdrv_hw,
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	1d3a      	adds	r2, r7, #4
 800071e:	f107 010c 	add.w	r1, r7, #12
 8000722:	480b      	ldr	r0, [pc, #44]	; (8000750 <mch_net_init+0x228>)
 8000724:	9002      	str	r0, [sp, #8]
 8000726:	480b      	ldr	r0, [pc, #44]	; (8000754 <mch_net_init+0x22c>)
 8000728:	9001      	str	r0, [sp, #4]
 800072a:	480b      	ldr	r0, [pc, #44]	; (8000758 <mch_net_init+0x230>)
 800072c:	9000      	str	r0, [sp, #0]
 800072e:	4806      	ldr	r0, [pc, #24]	; (8000748 <mch_net_init+0x220>)
 8000730:	f009 f94c 	bl	80099cc <netif_add>
		 mchdrv_init, ethernet_input) == NULL)
    {
      LWIP_ASSERT("mch_net_init: netif_add (mchdrv_init) failed\n", 0);
    }

  netif_set_default (&mchdrv_netif);
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <mch_net_init+0x220>)
 8000736:	f009 fbaf 	bl	8009e98 <netif_set_default>
  netif_set_up (&mchdrv_netif);
 800073a:	4803      	ldr	r0, [pc, #12]	; (8000748 <mch_net_init+0x220>)
 800073c:	f009 fbd0 	bl	8009ee0 <netif_set_up>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000aec 	.word	0x20000aec
 800074c:	20000ea4 	.word	0x20000ea4
 8000750:	08012735 	.word	0x08012735
 8000754:	08013429 	.word	0x08013429
 8000758:	20000b24 	.word	0x20000b24

0800075c <mch_net_poll>:

void mch_net_poll (void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  mchdrv_poll (&mchdrv_netif);
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <mch_net_poll+0x10>)
 8000762:	f012 fe0d 	bl	8013380 <mchdrv_poll>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000aec 	.word	0x20000aec

08000770 <sys_now>:

uint32_t sys_now (void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  return HAL_GetTick ();
 8000774:	f002 fba0 	bl	8002eb8 <HAL_GetTick>
 8000778:	4603      	mov	r3, r0
}
 800077a:	4618      	mov	r0, r3
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000786:	f002 fb2e 	bl	8002de6 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(1000);
 800078a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800078e:	f002 fb9f 	bl	8002ed0 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000792:	f000 f8b1 	bl	80008f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000796:	f000 fb5f 	bl	8000e58 <MX_GPIO_Init>
  MX_DMA_Init();
 800079a:	f000 fb1b 	bl	8000dd4 <MX_DMA_Init>
  MX_SPI1_Init();
 800079e:	f000 f929 	bl	80009f4 <MX_SPI1_Init>
  MX_TIM2_Init();
 80007a2:	f000 fa8b 	bl	8000cbc <MX_TIM2_Init>
  MX_TIM1_Init();
 80007a6:	f000 f9df 	bl	8000b68 <MX_TIM1_Init>
  MX_QUADSPI_Init();
 80007aa:	f000 f8f7 	bl	800099c <MX_QUADSPI_Init>
  MX_SPI2_Init();
 80007ae:	f000 f95f 	bl	8000a70 <MX_SPI2_Init>
  MX_SPI3_Init();
 80007b2:	f000 f99b 	bl	8000aec <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  Console_WARNING ("--RESET--"); //Used only during development. UART2 is PA2 pin, in normal condition PA2 is PWM output.
 80007b6:	4849      	ldr	r0, [pc, #292]	; (80008dc <main+0x15c>)
 80007b8:	f7ff fd74 	bl	80002a4 <Console_WARNING>
  system_init();
 80007bc:	f001 fbe2 	bl	8001f84 <system_init>

  IP4_ADDR(&ip_addr,current_settings.server_address[0], current_settings.server_address[1],current_settings.server_address[2], current_settings.server_address[3]);
 80007c0:	4b47      	ldr	r3, [pc, #284]	; (80008e0 <main+0x160>)
 80007c2:	7b5b      	ldrb	r3, [r3, #13]
 80007c4:	061a      	lsls	r2, r3, #24
 80007c6:	4b46      	ldr	r3, [pc, #280]	; (80008e0 <main+0x160>)
 80007c8:	7b9b      	ldrb	r3, [r3, #14]
 80007ca:	041b      	lsls	r3, r3, #16
 80007cc:	431a      	orrs	r2, r3
 80007ce:	4b44      	ldr	r3, [pc, #272]	; (80008e0 <main+0x160>)
 80007d0:	7bdb      	ldrb	r3, [r3, #15]
 80007d2:	021b      	lsls	r3, r3, #8
 80007d4:	4313      	orrs	r3, r2
 80007d6:	4a42      	ldr	r2, [pc, #264]	; (80008e0 <main+0x160>)
 80007d8:	7c12      	ldrb	r2, [r2, #16]
 80007da:	4313      	orrs	r3, r2
 80007dc:	061a      	lsls	r2, r3, #24
 80007de:	4b40      	ldr	r3, [pc, #256]	; (80008e0 <main+0x160>)
 80007e0:	7b5b      	ldrb	r3, [r3, #13]
 80007e2:	0619      	lsls	r1, r3, #24
 80007e4:	4b3e      	ldr	r3, [pc, #248]	; (80008e0 <main+0x160>)
 80007e6:	7b9b      	ldrb	r3, [r3, #14]
 80007e8:	041b      	lsls	r3, r3, #16
 80007ea:	4319      	orrs	r1, r3
 80007ec:	4b3c      	ldr	r3, [pc, #240]	; (80008e0 <main+0x160>)
 80007ee:	7bdb      	ldrb	r3, [r3, #15]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	430b      	orrs	r3, r1
 80007f4:	493a      	ldr	r1, [pc, #232]	; (80008e0 <main+0x160>)
 80007f6:	7c09      	ldrb	r1, [r1, #16]
 80007f8:	430b      	orrs	r3, r1
 80007fa:	021b      	lsls	r3, r3, #8
 80007fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000800:	431a      	orrs	r2, r3
 8000802:	4b37      	ldr	r3, [pc, #220]	; (80008e0 <main+0x160>)
 8000804:	7b5b      	ldrb	r3, [r3, #13]
 8000806:	0619      	lsls	r1, r3, #24
 8000808:	4b35      	ldr	r3, [pc, #212]	; (80008e0 <main+0x160>)
 800080a:	7b9b      	ldrb	r3, [r3, #14]
 800080c:	041b      	lsls	r3, r3, #16
 800080e:	4319      	orrs	r1, r3
 8000810:	4b33      	ldr	r3, [pc, #204]	; (80008e0 <main+0x160>)
 8000812:	7bdb      	ldrb	r3, [r3, #15]
 8000814:	021b      	lsls	r3, r3, #8
 8000816:	430b      	orrs	r3, r1
 8000818:	4931      	ldr	r1, [pc, #196]	; (80008e0 <main+0x160>)
 800081a:	7c09      	ldrb	r1, [r1, #16]
 800081c:	430b      	orrs	r3, r1
 800081e:	0a1b      	lsrs	r3, r3, #8
 8000820:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000824:	431a      	orrs	r2, r3
 8000826:	4b2e      	ldr	r3, [pc, #184]	; (80008e0 <main+0x160>)
 8000828:	7b5b      	ldrb	r3, [r3, #13]
 800082a:	0619      	lsls	r1, r3, #24
 800082c:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <main+0x160>)
 800082e:	7b9b      	ldrb	r3, [r3, #14]
 8000830:	041b      	lsls	r3, r3, #16
 8000832:	4319      	orrs	r1, r3
 8000834:	4b2a      	ldr	r3, [pc, #168]	; (80008e0 <main+0x160>)
 8000836:	7bdb      	ldrb	r3, [r3, #15]
 8000838:	021b      	lsls	r3, r3, #8
 800083a:	430b      	orrs	r3, r1
 800083c:	4928      	ldr	r1, [pc, #160]	; (80008e0 <main+0x160>)
 800083e:	7c09      	ldrb	r1, [r1, #16]
 8000840:	430b      	orrs	r3, r1
 8000842:	0e1b      	lsrs	r3, r3, #24
 8000844:	4313      	orrs	r3, r2
 8000846:	4a27      	ldr	r2, [pc, #156]	; (80008e4 <main+0x164>)
 8000848:	6013      	str	r3, [r2, #0]

  mch_net_init ();
 800084a:	f7ff fe6d 	bl	8000528 <mch_net_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  system_led(7,LED_STATE_BLINK);
 800084e:	2102      	movs	r1, #2
 8000850:	2007      	movs	r0, #7
 8000852:	f001 fc79 	bl	8002148 <system_led>
  while (1)
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      mch_net_poll ();
 8000856:	f7ff ff81 	bl	800075c <mch_net_poll>
      sys_check_timeouts ();
 800085a:	f00e ffdd 	bl	800f818 <sys_check_timeouts>
      mqtt_client_t *client = mqtt_client_new();
 800085e:	f008 f8a3 	bl	80089a8 <mqtt_client_new>
 8000862:	6038      	str	r0, [r7, #0]
      if (client != NULL)
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d003      	beq.n	8000872 <main+0xf2>
	{
    	  mqtt_client_do_connect(client, FLAG_SUB);
 800086a:	2101      	movs	r1, #1
 800086c:	6838      	ldr	r0, [r7, #0]
 800086e:	f000 fbc5 	bl	8000ffc <mqtt_client_do_connect>
	}
	   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000872:	2100      	movs	r1, #0
 8000874:	481c      	ldr	r0, [pc, #112]	; (80008e8 <main+0x168>)
 8000876:	f005 fdab 	bl	80063d0 <HAL_TIM_PWM_Start>
	   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800087a:	2104      	movs	r1, #4
 800087c:	481a      	ldr	r0, [pc, #104]	; (80008e8 <main+0x168>)
 800087e:	f005 fda7 	bl	80063d0 <HAL_TIM_PWM_Start>
	   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000882:	2108      	movs	r1, #8
 8000884:	4818      	ldr	r0, [pc, #96]	; (80008e8 <main+0x168>)
 8000886:	f005 fda3 	bl	80063d0 <HAL_TIM_PWM_Start>
	   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800088a:	210c      	movs	r1, #12
 800088c:	4817      	ldr	r0, [pc, #92]	; (80008ec <main+0x16c>)
 800088e:	f005 fd9f 	bl	80063d0 <HAL_TIM_PWM_Start>
	   HAL_GPIO_WritePin(CS_ADC_GPIO_Port, CS_ADC_Pin, SET);
 8000892:	2201      	movs	r2, #1
 8000894:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000898:	4815      	ldr	r0, [pc, #84]	; (80008f0 <main+0x170>)
 800089a:	f003 fa91 	bl	8003dc0 <HAL_GPIO_WritePin>
	   uint16_t counter;
	   flags.mqtt_connected=0;
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <main+0x174>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	705a      	strb	r2, [r3, #1]

      while (1)
	{
	  mch_net_poll ();
 80008a4:	f7ff ff5a 	bl	800075c <mch_net_poll>
	  sys_check_timeouts ();
 80008a8:	f00e ffb6 	bl	800f818 <sys_check_timeouts>
	counter++;
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	3301      	adds	r3, #1
 80008b0:	80fb      	strh	r3, [r7, #6]
	if(counter==500 && flags.mqtt_connected==1)
 80008b2:	88fb      	ldrh	r3, [r7, #6]
 80008b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008b8:	d106      	bne.n	80008c8 <main+0x148>
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <main+0x174>)
 80008bc:	785b      	ldrb	r3, [r3, #1]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d102      	bne.n	80008c8 <main+0x148>
	  {
	    system_check_state(client);
 80008c2:	6838      	ldr	r0, [r7, #0]
 80008c4:	f001 fe5e 	bl	8002584 <system_check_state>
	  }
	if(counter==500) 	    counter=0;
 80008c8:	88fb      	ldrh	r3, [r7, #6]
 80008ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008ce:	d101      	bne.n	80008d4 <main+0x154>
 80008d0:	2300      	movs	r3, #0
 80008d2:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(1);
 80008d4:	2001      	movs	r0, #1
 80008d6:	f002 fafb 	bl	8002ed0 <HAL_Delay>
	  mch_net_poll ();
 80008da:	e7e3      	b.n	80008a4 <main+0x124>
 80008dc:	08014d10 	.word	0x08014d10
 80008e0:	20000ea4 	.word	0x20000ea4
 80008e4:	20000e60 	.word	0x20000e60
 80008e8:	20000e14 	.word	0x20000e14
 80008ec:	20000dc8 	.word	0x20000dc8
 80008f0:	48000400 	.word	0x48000400
 80008f4:	20000e64 	.word	0x20000e64

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b096      	sub	sp, #88	; 0x58
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	2244      	movs	r2, #68	; 0x44
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f012 fe42 	bl	8013590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	463b      	mov	r3, r7
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800091a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800091e:	f003 faa7 	bl	8003e70 <HAL_PWREx_ControlVoltageScaling>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000928:	f000 fb4c 	bl	8000fc4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800092c:	2302      	movs	r3, #2
 800092e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000934:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000936:	2310      	movs	r3, #16
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093a:	2302      	movs	r3, #2
 800093c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800093e:	2302      	movs	r3, #2
 8000940:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000942:	2302      	movs	r3, #2
 8000944:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000946:	2308      	movs	r3, #8
 8000948:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800094a:	2307      	movs	r3, #7
 800094c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800094e:	2302      	movs	r3, #2
 8000950:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000952:	2304      	movs	r3, #4
 8000954:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4618      	mov	r0, r3
 800095c:	f003 fddc 	bl	8004518 <HAL_RCC_OscConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000966:	f000 fb2d 	bl	8000fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096a:	230f      	movs	r3, #15
 800096c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096e:	2303      	movs	r3, #3
 8000970:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800097e:	463b      	mov	r3, r7
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f004 f9dc 	bl	8004d40 <HAL_RCC_ClockConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800098e:	f000 fb19 	bl	8000fc4 <Error_Handler>
  }
}
 8000992:	bf00      	nop
 8000994:	3758      	adds	r7, #88	; 0x58
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_QUADSPI_Init+0x50>)
 80009a2:	4a13      	ldr	r2, [pc, #76]	; (80009f0 <MX_QUADSPI_Init+0x54>)
 80009a4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_QUADSPI_Init+0x50>)
 80009a8:	22ff      	movs	r2, #255	; 0xff
 80009aa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_QUADSPI_Init+0x50>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_QUADSPI_Init+0x50>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 31;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_QUADSPI_Init+0x50>)
 80009ba:	221f      	movs	r2, #31
 80009bc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_QUADSPI_Init+0x50>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_QUADSPI_Init+0x50>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_QUADSPI_Init+0x50>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_QUADSPI_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_QUADSPI_Init+0x50>)
 80009d8:	f003 faa0 	bl	8003f1c <HAL_QSPI_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80009e2:	f000 faef 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000b30 	.word	0x20000b30
 80009f0:	a0001000 	.word	0xa0001000

080009f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_SPI1_Init+0x74>)
 80009fa:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <MX_SPI1_Init+0x78>)
 80009fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_SPI1_Init+0x74>)
 8000a00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_SPI1_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <MX_SPI1_Init+0x74>)
 8000a0e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a12:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_SPI1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_SPI1_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_SPI1_Init+0x74>)
 8000a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a26:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_SPI1_Init+0x74>)
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_SPI1_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_SPI1_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_SPI1_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_SPI1_Init+0x74>)
 8000a42:	2207      	movs	r2, #7
 8000a44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_SPI1_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_SPI1_Init+0x74>)
 8000a4e:	2208      	movs	r2, #8
 8000a50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_SPI1_Init+0x74>)
 8000a54:	f004 fb60 	bl	8005118 <HAL_SPI_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a5e:	f000 fab1 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000bc4 	.word	0x20000bc4
 8000a6c:	40013000 	.word	0x40013000

08000a70 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_SPI2_Init+0x74>)
 8000a76:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <MX_SPI2_Init+0x78>)
 8000a78:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_SPI2_Init+0x74>)
 8000a7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a80:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_SPI2_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_SPI2_Init+0x74>)
 8000a8a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a8e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_SPI2_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_SPI2_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_SPI2_Init+0x74>)
 8000a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_SPI2_Init+0x74>)
 8000aa6:	2238      	movs	r2, #56	; 0x38
 8000aa8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_SPI2_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_SPI2_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_SPI2_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_SPI2_Init+0x74>)
 8000abe:	2207      	movs	r2, #7
 8000ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_SPI2_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_SPI2_Init+0x74>)
 8000aca:	2208      	movs	r2, #8
 8000acc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_SPI2_Init+0x74>)
 8000ad0:	f004 fb22 	bl	8005118 <HAL_SPI_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f000 fa73 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000c28 	.word	0x20000c28
 8000ae8:	40003800 	.word	0x40003800

08000aec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <MX_SPI3_Init+0x74>)
 8000af2:	4a1c      	ldr	r2, [pc, #112]	; (8000b64 <MX_SPI3_Init+0x78>)
 8000af4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_SPI3_Init+0x74>)
 8000af8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000afc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_SPI3_Init+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <MX_SPI3_Init+0x74>)
 8000b06:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b0a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_SPI3_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <MX_SPI3_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <MX_SPI3_Init+0x74>)
 8000b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b1e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_SPI3_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_SPI3_Init+0x74>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <MX_SPI3_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <MX_SPI3_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_SPI3_Init+0x74>)
 8000b3a:	2207      	movs	r2, #7
 8000b3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <MX_SPI3_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_SPI3_Init+0x74>)
 8000b46:	2208      	movs	r2, #8
 8000b48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_SPI3_Init+0x74>)
 8000b4c:	f004 fae4 	bl	8005118 <HAL_SPI_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b56:	f000 fa35 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000c8c 	.word	0x20000c8c
 8000b64:	40003c00 	.word	0x40003c00

08000b68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b09a      	sub	sp, #104	; 0x68
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
 8000b98:	615a      	str	r2, [r3, #20]
 8000b9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	222c      	movs	r2, #44	; 0x2c
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f012 fcf4 	bl	8013590 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ba8:	4b42      	ldr	r3, [pc, #264]	; (8000cb4 <MX_TIM1_Init+0x14c>)
 8000baa:	4a43      	ldr	r2, [pc, #268]	; (8000cb8 <MX_TIM1_Init+0x150>)
 8000bac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 8000bae:	4b41      	ldr	r3, [pc, #260]	; (8000cb4 <MX_TIM1_Init+0x14c>)
 8000bb0:	2208      	movs	r2, #8
 8000bb2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb4:	4b3f      	ldr	r3, [pc, #252]	; (8000cb4 <MX_TIM1_Init+0x14c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000bba:	4b3e      	ldr	r3, [pc, #248]	; (8000cb4 <MX_TIM1_Init+0x14c>)
 8000bbc:	2263      	movs	r2, #99	; 0x63
 8000bbe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc0:	4b3c      	ldr	r3, [pc, #240]	; (8000cb4 <MX_TIM1_Init+0x14c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bc6:	4b3b      	ldr	r3, [pc, #236]	; (8000cb4 <MX_TIM1_Init+0x14c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bcc:	4b39      	ldr	r3, [pc, #228]	; (8000cb4 <MX_TIM1_Init+0x14c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bd2:	4838      	ldr	r0, [pc, #224]	; (8000cb4 <MX_TIM1_Init+0x14c>)
 8000bd4:	f005 fb44 	bl	8006260 <HAL_TIM_Base_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000bde:	f000 f9f1 	bl	8000fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000be8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bec:	4619      	mov	r1, r3
 8000bee:	4831      	ldr	r0, [pc, #196]	; (8000cb4 <MX_TIM1_Init+0x14c>)
 8000bf0:	f005 ff00 	bl	80069f4 <HAL_TIM_ConfigClockSource>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000bfa:	f000 f9e3 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bfe:	482d      	ldr	r0, [pc, #180]	; (8000cb4 <MX_TIM1_Init+0x14c>)
 8000c00:	f005 fb85 	bl	800630e <HAL_TIM_PWM_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c0a:	f000 f9db 	bl	8000fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4824      	ldr	r0, [pc, #144]	; (8000cb4 <MX_TIM1_Init+0x14c>)
 8000c22:	f006 fb85 	bl	8007330 <HAL_TIMEx_MasterConfigSynchronization>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000c2c:	f000 f9ca 	bl	8000fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c30:	2360      	movs	r3, #96	; 0x60
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c40:	2300      	movs	r3, #0
 8000c42:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c44:	2300      	movs	r3, #0
 8000c46:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c4c:	220c      	movs	r2, #12
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4818      	ldr	r0, [pc, #96]	; (8000cb4 <MX_TIM1_Init+0x14c>)
 8000c52:	f005 fdbb 	bl	80067cc <HAL_TIM_PWM_ConfigChannel>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000c5c:	f000 f9b2 	bl	8000fc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c78:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	4619      	mov	r1, r3
 8000c94:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <MX_TIM1_Init+0x14c>)
 8000c96:	f006 fbb1 	bl	80073fc <HAL_TIMEx_ConfigBreakDeadTime>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000ca0:	f000 f990 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ca4:	4803      	ldr	r0, [pc, #12]	; (8000cb4 <MX_TIM1_Init+0x14c>)
 8000ca6:	f001 f881 	bl	8001dac <HAL_TIM_MspPostInit>

}
 8000caa:	bf00      	nop
 8000cac:	3768      	adds	r7, #104	; 0x68
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000dc8 	.word	0x20000dc8
 8000cb8:	40012c00 	.word	0x40012c00

08000cbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08e      	sub	sp, #56	; 0x38
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cdc:	463b      	mov	r3, r7
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]
 8000cea:	615a      	str	r2, [r3, #20]
 8000cec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cee:	4b38      	ldr	r3, [pc, #224]	; (8000dd0 <MX_TIM2_Init+0x114>)
 8000cf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160;
 8000cf6:	4b36      	ldr	r3, [pc, #216]	; (8000dd0 <MX_TIM2_Init+0x114>)
 8000cf8:	22a0      	movs	r2, #160	; 0xa0
 8000cfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b34      	ldr	r3, [pc, #208]	; (8000dd0 <MX_TIM2_Init+0x114>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000d02:	4b33      	ldr	r3, [pc, #204]	; (8000dd0 <MX_TIM2_Init+0x114>)
 8000d04:	2263      	movs	r2, #99	; 0x63
 8000d06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d08:	4b31      	ldr	r3, [pc, #196]	; (8000dd0 <MX_TIM2_Init+0x114>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0e:	4b30      	ldr	r3, [pc, #192]	; (8000dd0 <MX_TIM2_Init+0x114>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d14:	482e      	ldr	r0, [pc, #184]	; (8000dd0 <MX_TIM2_Init+0x114>)
 8000d16:	f005 faa3 	bl	8006260 <HAL_TIM_Base_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d20:	f000 f950 	bl	8000fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4827      	ldr	r0, [pc, #156]	; (8000dd0 <MX_TIM2_Init+0x114>)
 8000d32:	f005 fe5f 	bl	80069f4 <HAL_TIM_ConfigClockSource>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000d3c:	f000 f942 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d40:	4823      	ldr	r0, [pc, #140]	; (8000dd0 <MX_TIM2_Init+0x114>)
 8000d42:	f005 fae4 	bl	800630e <HAL_TIM_PWM_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d4c:	f000 f93a 	bl	8000fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	481c      	ldr	r0, [pc, #112]	; (8000dd0 <MX_TIM2_Init+0x114>)
 8000d60:	f006 fae6 	bl	8007330 <HAL_TIMEx_MasterConfigSynchronization>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000d6a:	f000 f92b 	bl	8000fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d6e:	2360      	movs	r3, #96	; 0x60
 8000d70:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d7e:	463b      	mov	r3, r7
 8000d80:	2200      	movs	r2, #0
 8000d82:	4619      	mov	r1, r3
 8000d84:	4812      	ldr	r0, [pc, #72]	; (8000dd0 <MX_TIM2_Init+0x114>)
 8000d86:	f005 fd21 	bl	80067cc <HAL_TIM_PWM_ConfigChannel>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000d90:	f000 f918 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d94:	463b      	mov	r3, r7
 8000d96:	2204      	movs	r2, #4
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <MX_TIM2_Init+0x114>)
 8000d9c:	f005 fd16 	bl	80067cc <HAL_TIM_PWM_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000da6:	f000 f90d 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000daa:	463b      	mov	r3, r7
 8000dac:	2208      	movs	r2, #8
 8000dae:	4619      	mov	r1, r3
 8000db0:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <MX_TIM2_Init+0x114>)
 8000db2:	f005 fd0b 	bl	80067cc <HAL_TIM_PWM_ConfigChannel>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000dbc:	f000 f902 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dc0:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <MX_TIM2_Init+0x114>)
 8000dc2:	f000 fff3 	bl	8001dac <HAL_TIM_MspPostInit>

}
 8000dc6:	bf00      	nop
 8000dc8:	3738      	adds	r7, #56	; 0x38
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000e14 	.word	0x20000e14

08000dd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dda:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <MX_DMA_Init+0x80>)
 8000ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dde:	4a1d      	ldr	r2, [pc, #116]	; (8000e54 <MX_DMA_Init+0x80>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6493      	str	r3, [r2, #72]	; 0x48
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <MX_DMA_Init+0x80>)
 8000de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000df2:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <MX_DMA_Init+0x80>)
 8000df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000df6:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <MX_DMA_Init+0x80>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	6493      	str	r3, [r2, #72]	; 0x48
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_DMA_Init+0x80>)
 8000e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	200e      	movs	r0, #14
 8000e10:	f002 f95d 	bl	80030ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000e14:	200e      	movs	r0, #14
 8000e16:	f002 f976 	bl	8003106 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	200f      	movs	r0, #15
 8000e20:	f002 f955 	bl	80030ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000e24:	200f      	movs	r0, #15
 8000e26:	f002 f96e 	bl	8003106 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2039      	movs	r0, #57	; 0x39
 8000e30:	f002 f94d 	bl	80030ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000e34:	2039      	movs	r0, #57	; 0x39
 8000e36:	f002 f966 	bl	8003106 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2045      	movs	r0, #69	; 0x45
 8000e40:	f002 f945 	bl	80030ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8000e44:	2045      	movs	r0, #69	; 0x45
 8000e46:	f002 f95e 	bl	8003106 <HAL_NVIC_EnableIRQ>

}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000

08000e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6e:	4b51      	ldr	r3, [pc, #324]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	4a50      	ldr	r2, [pc, #320]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7a:	4b4e      	ldr	r3, [pc, #312]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	f003 0304 	and.w	r3, r3, #4
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e86:	4b4b      	ldr	r3, [pc, #300]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	4a4a      	ldr	r2, [pc, #296]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e92:	4b48      	ldr	r3, [pc, #288]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	4b45      	ldr	r3, [pc, #276]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	4a44      	ldr	r2, [pc, #272]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eaa:	4b42      	ldr	r3, [pc, #264]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	4b3f      	ldr	r3, [pc, #252]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	4a3e      	ldr	r2, [pc, #248]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec2:	4b3c      	ldr	r3, [pc, #240]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_DATA_Pin|LED_CLOCK_Pin|LED_LATCH_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000ed4:	4838      	ldr	r0, [pc, #224]	; (8000fb8 <MX_GPIO_Init+0x160>)
 8000ed6:	f002 ff73 	bl	8003dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DOUT1_Pin|DOUT2_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2103      	movs	r1, #3
 8000ede:	4837      	ldr	r0, [pc, #220]	; (8000fbc <MX_GPIO_Init+0x164>)
 8000ee0:	f002 ff6e 	bl	8003dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DOUT3_GPIO_Port, DOUT3_Pin, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2110      	movs	r1, #16
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eec:	f002 ff68 	bl	8003dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_ETH_Pin|CS_ADC_Pin, GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000ef6:	4832      	ldr	r0, [pc, #200]	; (8000fc0 <MX_GPIO_Init+0x168>)
 8000ef8:	f002 ff62 	bl	8003dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_DATA_Pin LED_CLOCK_Pin LED_LATCH_Pin */
  GPIO_InitStruct.Pin = LED_DATA_Pin|LED_CLOCK_Pin|LED_LATCH_Pin;
 8000efc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	4828      	ldr	r0, [pc, #160]	; (8000fb8 <MX_GPIO_Init+0x160>)
 8000f16:	f002 fdc1 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT1_Pin DOUT2_Pin */
  GPIO_InitStruct.Pin = DOUT1_Pin|DOUT2_Pin;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4822      	ldr	r0, [pc, #136]	; (8000fbc <MX_GPIO_Init+0x164>)
 8000f32:	f002 fdb3 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : DOUT3_Pin */
  GPIO_InitStruct.Pin = DOUT3_Pin;
 8000f36:	2310      	movs	r3, #16
 8000f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DOUT3_GPIO_Port, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f50:	f002 fda4 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN3_Pin IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = IN3_Pin|IN1_Pin|IN2_Pin;
 8000f54:	23c4      	movs	r3, #196	; 0xc4
 8000f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f58:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	4815      	ldr	r0, [pc, #84]	; (8000fc0 <MX_GPIO_Init+0x168>)
 8000f6a:	f002 fd97 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_ETH_Pin CS_ADC_Pin */
  GPIO_InitStruct.Pin = CS_ETH_Pin|CS_ADC_Pin;
 8000f6e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <MX_GPIO_Init+0x168>)
 8000f88:	f002 fd88 	bl	8003a9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2008      	movs	r0, #8
 8000f92:	f002 f89c 	bl	80030ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000f96:	2008      	movs	r0, #8
 8000f98:	f002 f8b5 	bl	8003106 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2017      	movs	r0, #23
 8000fa2:	f002 f894 	bl	80030ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fa6:	2017      	movs	r0, #23
 8000fa8:	f002 f8ad 	bl	8003106 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	48000800 	.word	0x48000800
 8000fbc:	48001c00 	.word	0x48001c00
 8000fc0:	48000400 	.word	0x48000400

08000fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc8:	b672      	cpsid	i
}
 8000fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq ();
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <Error_Handler+0x8>
	...

08000fd0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fd4:	f3bf 8f4f 	dsb	sy
}
 8000fd8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <__NVIC_SystemReset+0x24>)
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000fe2:	4904      	ldr	r1, [pc, #16]	; (8000ff4 <__NVIC_SystemReset+0x24>)
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <__NVIC_SystemReset+0x28>)
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fea:	f3bf 8f4f 	dsb	sy
}
 8000fee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <__NVIC_SystemReset+0x20>
 8000ff4:	e000ed00 	.word	0xe000ed00
 8000ff8:	05fa0004 	.word	0x05fa0004

08000ffc <mqtt_client_do_connect>:
//MQTT START
#define MQTT_SERVER_IP IPADDR_ANY
#define MQTT_SERVER_PORT 1883

void mqtt_client_do_connect (mqtt_client_t *client, int flag)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b090      	sub	sp, #64	; 0x40
 8001000:	af02      	add	r7, sp, #8
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  struct mqtt_connect_client_info_t ci;
  memset (&ci, 0, sizeof(ci));
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	221c      	movs	r2, #28
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f012 fabe 	bl	8013590 <memset>
  /* Set MQTT client information including client id, username, password, and will message,
   note that client id is required. */
  //struct Settings current_settings;
  char str[20];
  sprintf (str, "STM32_0x%X", (unsigned int) current_settings.device_id);
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <mqtt_client_do_connect+0x78>)
 8001016:	695a      	ldr	r2, [r3, #20]
 8001018:	f107 0308 	add.w	r3, r7, #8
 800101c:	4916      	ldr	r1, [pc, #88]	; (8001078 <mqtt_client_do_connect+0x7c>)
 800101e:	4618      	mov	r0, r3
 8001020:	f012 fb4c 	bl	80136bc <siprintf>

  ci.client_id = str;
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	61fb      	str	r3, [r7, #28]
  ci.keep_alive = 10;
 800102a:	230a      	movs	r3, #10
 800102c:	853b      	strh	r3, [r7, #40]	; 0x28
  /* Initialize the client's connection to the MQTT server based on IP address determined by IP_ADDR
   and register the SUB or PUB callback functions based on the flag. */
  /* IP_ADDR is used to initialize IP address format in lwIP. */

  if (flag == FLAG_SUB)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d10c      	bne.n	800104e <mqtt_client_do_connect+0x52>
    {
      mqtt_client_connect (client, &ip_addr, 1883, mqtt_connection_cb, NULL,
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	2300      	movs	r3, #0
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <mqtt_client_do_connect+0x80>)
 8001040:	f240 725b 	movw	r2, #1883	; 0x75b
 8001044:	490e      	ldr	r1, [pc, #56]	; (8001080 <mqtt_client_do_connect+0x84>)
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f007 fcb8 	bl	80089bc <mqtt_client_connect>
  else if (flag == FLAG_PUB)
    {
      mqtt_client_connect (client, &ip_addr, 1883, mqtt_pub_connection_cb, NULL,
			   &ci);
    }
}
 800104c:	e00e      	b.n	800106c <mqtt_client_do_connect+0x70>
  else if (flag == FLAG_PUB)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d10b      	bne.n	800106c <mqtt_client_do_connect+0x70>
      mqtt_client_connect (client, &ip_addr, 1883, mqtt_pub_connection_cb, NULL,
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	2300      	movs	r3, #0
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <mqtt_client_do_connect+0x88>)
 8001060:	f240 725b 	movw	r2, #1883	; 0x75b
 8001064:	4906      	ldr	r1, [pc, #24]	; (8001080 <mqtt_client_do_connect+0x84>)
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f007 fca8 	bl	80089bc <mqtt_client_connect>
}
 800106c:	bf00      	nop
 800106e:	3738      	adds	r7, #56	; 0x38
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000ea4 	.word	0x20000ea4
 8001078:	08014d1c 	.word	0x08014d1c
 800107c:	080010f9 	.word	0x080010f9
 8001080:	20000e60 	.word	0x20000e60
 8001084:	08001089 	.word	0x08001089

08001088 <mqtt_pub_connection_cb>:
void mqtt_pub_connection_cb (mqtt_client_t *client, void *arg,
			     mqtt_connection_status_t status)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af04      	add	r7, sp, #16
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	4613      	mov	r3, r2
 8001094:	80fb      	strh	r3, [r7, #6]
  if (status == MQTT_CONNECT_ACCEPTED)
 8001096:	88fb      	ldrh	r3, [r7, #6]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d11c      	bne.n	80010d6 <mqtt_pub_connection_cb+0x4e>
    {
      Console_WARNING ("mqtt_connection_cb: Successfully connected\\n");
 800109c:	4812      	ldr	r0, [pc, #72]	; (80010e8 <mqtt_pub_connection_cb+0x60>)
 800109e:	f7ff f901 	bl	80002a4 <Console_WARNING>
      const char *pub_payload = "hello this is lwIP";
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <mqtt_pub_connection_cb+0x64>)
 80010a4:	617b      	str	r3, [r7, #20]
      err_t err;
      u8_t qos = 2;
 80010a6:	2302      	movs	r3, #2
 80010a8:	74fb      	strb	r3, [r7, #19]
      u8_t retain = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	74bb      	strb	r3, [r7, #18]
      mqtt_publish (client, PUB_TOPIC, pub_payload, strlen (pub_payload), qos,
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f7ff f88e 	bl	80001d0 <strlen>
 80010b4:	4603      	mov	r3, r0
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	9303      	str	r3, [sp, #12]
 80010bc:	2300      	movs	r3, #0
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	7cbb      	ldrb	r3, [r7, #18]
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	7cfb      	ldrb	r3, [r7, #19]
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	4613      	mov	r3, r2
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	4908      	ldr	r1, [pc, #32]	; (80010f0 <mqtt_pub_connection_cb+0x68>)
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f007 faee 	bl	80086b0 <mqtt_publish>
  else
    {
      Console_WARNING ("mqtt_connection_cb: Disconnected, reason: %d\\n",
		       status);
    }
}
 80010d4:	e004      	b.n	80010e0 <mqtt_pub_connection_cb+0x58>
      Console_WARNING ("mqtt_connection_cb: Disconnected, reason: %d\\n",
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	4619      	mov	r1, r3
 80010da:	4806      	ldr	r0, [pc, #24]	; (80010f4 <mqtt_pub_connection_cb+0x6c>)
 80010dc:	f7ff f8e2 	bl	80002a4 <Console_WARNING>
}
 80010e0:	bf00      	nop
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	08014d28 	.word	0x08014d28
 80010ec:	08014d58 	.word	0x08014d58
 80010f0:	08014d6c 	.word	0x08014d6c
 80010f4:	08014d74 	.word	0x08014d74

080010f8 <mqtt_connection_cb>:
void mqtt_connection_cb (mqtt_client_t *client, void *arg,
			 mqtt_connection_status_t status)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b09c      	sub	sp, #112	; 0x70
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	4613      	mov	r3, r2
 8001104:	80fb      	strh	r3, [r7, #6]
  if (status == MQTT_CONNECT_ACCEPTED)
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d134      	bne.n	8001176 <mqtt_connection_cb+0x7e>
    {
      Console_WARNING ("mqtt_connection_cb: Successfully connected\\n");
 800110c:	4832      	ldr	r0, [pc, #200]	; (80011d8 <mqtt_connection_cb+0xe0>)
 800110e:	f7ff f8c9 	bl	80002a4 <Console_WARNING>
      /* Register the callback function for PUB messages */
      mqtt_set_inpub_callback (client, mqtt_incoming_publish_cb,
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	4a31      	ldr	r2, [pc, #196]	; (80011dc <mqtt_connection_cb+0xe4>)
 8001116:	4932      	ldr	r1, [pc, #200]	; (80011e0 <mqtt_connection_cb+0xe8>)
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f007 fc2f 	bl	800897c <mqtt_set_inpub_callback>
			       mqtt_incoming_data_cb, arg);
      /* SUB */
      char topic[35];
      sprintf (topic, "%s/COMMAND", current_settings.device_name);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4a30      	ldr	r2, [pc, #192]	; (80011e4 <mqtt_connection_cb+0xec>)
 8001124:	4930      	ldr	r1, [pc, #192]	; (80011e8 <mqtt_connection_cb+0xf0>)
 8001126:	4618      	mov	r0, r3
 8001128:	f012 fac8 	bl	80136bc <siprintf>
      mqtt_subscribe(client, topic, 1, mqtt_sub_request_cb, arg);
 800112c:	f107 0114 	add.w	r1, r7, #20
 8001130:	2301      	movs	r3, #1
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	4b2c      	ldr	r3, [pc, #176]	; (80011ec <mqtt_connection_cb+0xf4>)
 800113a:	2201      	movs	r2, #1
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f007 fb6b 	bl	8008818 <mqtt_sub_unsub>
      sprintf (topic, "%s/SETTING", current_settings.device_name);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4a27      	ldr	r2, [pc, #156]	; (80011e4 <mqtt_connection_cb+0xec>)
 8001148:	4929      	ldr	r1, [pc, #164]	; (80011f0 <mqtt_connection_cb+0xf8>)
 800114a:	4618      	mov	r0, r3
 800114c:	f012 fab6 	bl	80136bc <siprintf>
      mqtt_subscribe(client, topic, 1, mqtt_sub_request_cb, arg);
 8001150:	f107 0114 	add.w	r1, r7, #20
 8001154:	2301      	movs	r3, #1
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	4b23      	ldr	r3, [pc, #140]	; (80011ec <mqtt_connection_cb+0xf4>)
 800115e:	2201      	movs	r2, #1
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f007 fb59 	bl	8008818 <mqtt_sub_unsub>
      system_led (7, LED_STATE_ON);
 8001166:	2101      	movs	r1, #1
 8001168:	2007      	movs	r0, #7
 800116a:	f000 ffed 	bl	8002148 <system_led>
      flags.mqtt_connected = 1;
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <mqtt_connection_cb+0xfc>)
 8001170:	2201      	movs	r2, #1
 8001172:	705a      	strb	r2, [r3, #1]
      ci.client_id = str;
      ci.keep_alive = 10;
      mqtt_client_connect (client, &ip_addr, 1883, mqtt_connection_cb, NULL,
			   &ci);
    }
}
 8001174:	e02c      	b.n	80011d0 <mqtt_connection_cb+0xd8>
      Console_WARNING ("mqtt_connection_cb: Disconnected, reason: %d\\n",
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	4619      	mov	r1, r3
 800117a:	481f      	ldr	r0, [pc, #124]	; (80011f8 <mqtt_connection_cb+0x100>)
 800117c:	f7ff f892 	bl	80002a4 <Console_WARNING>
      flags.mqtt_connected = 0;
 8001180:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <mqtt_connection_cb+0xfc>)
 8001182:	2200      	movs	r2, #0
 8001184:	705a      	strb	r2, [r3, #1]
      system_led (7, LED_STATE_BLINK);
 8001186:	2102      	movs	r1, #2
 8001188:	2007      	movs	r0, #7
 800118a:	f000 ffdd 	bl	8002148 <system_led>
      memset (&ci, 0, sizeof(ci));
 800118e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001192:	221c      	movs	r2, #28
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f012 f9fa 	bl	8013590 <memset>
      sprintf (str, "STM32_0x%X", (unsigned int) current_settings.device_id);
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <mqtt_connection_cb+0x104>)
 800119e:	695a      	ldr	r2, [r3, #20]
 80011a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011a4:	4916      	ldr	r1, [pc, #88]	; (8001200 <mqtt_connection_cb+0x108>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f012 fa88 	bl	80136bc <siprintf>
      ci.client_id = str;
 80011ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011b0:	64fb      	str	r3, [r7, #76]	; 0x4c
      ci.keep_alive = 10;
 80011b2:	230a      	movs	r3, #10
 80011b4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
      mqtt_client_connect (client, &ip_addr, 1883, mqtt_connection_cb, NULL,
 80011b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	2300      	movs	r3, #0
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <mqtt_connection_cb+0x10c>)
 80011c4:	f240 725b 	movw	r2, #1883	; 0x75b
 80011c8:	490f      	ldr	r1, [pc, #60]	; (8001208 <mqtt_connection_cb+0x110>)
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f007 fbf6 	bl	80089bc <mqtt_client_connect>
}
 80011d0:	bf00      	nop
 80011d2:	3768      	adds	r7, #104	; 0x68
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	08014d28 	.word	0x08014d28
 80011dc:	0800126d 	.word	0x0800126d
 80011e0:	0800120d 	.word	0x0800120d
 80011e4:	20000ebc 	.word	0x20000ebc
 80011e8:	08014da4 	.word	0x08014da4
 80011ec:	08001681 	.word	0x08001681
 80011f0:	08014db0 	.word	0x08014db0
 80011f4:	20000e64 	.word	0x20000e64
 80011f8:	08014d74 	.word	0x08014d74
 80011fc:	20000ea4 	.word	0x20000ea4
 8001200:	08014d1c 	.word	0x08014d1c
 8001204:	080010f9 	.word	0x080010f9
 8001208:	20000e60 	.word	0x20000e60

0800120c <mqtt_incoming_publish_cb>:

static int inpub_id;
void mqtt_incoming_publish_cb (void *arg, const char *topic, u32_t tot_len)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  Console_WARNING ("Incoming publish at topic %s with total length %u\\n",
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	68b9      	ldr	r1, [r7, #8]
 800121c:	480f      	ldr	r0, [pc, #60]	; (800125c <mqtt_incoming_publish_cb+0x50>)
 800121e:	f7ff f841 	bl	80002a4 <Console_WARNING>
		   topic, (unsigned int) tot_len);
  if (strstr (topic, "COMMAND"))
 8001222:	490f      	ldr	r1, [pc, #60]	; (8001260 <mqtt_incoming_publish_cb+0x54>)
 8001224:	68b8      	ldr	r0, [r7, #8]
 8001226:	f012 fa84 	bl	8013732 <strstr>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <mqtt_incoming_publish_cb+0x2c>
    {
      /* Handle all topics starting with 'A' in the same way */
      inpub_id = 1;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <mqtt_incoming_publish_cb+0x58>)
 8001232:	2201      	movs	r2, #1
 8001234:	601a      	str	r2, [r3, #0]
    }
  else
    {
      inpub_id = 2;
    }
}
 8001236:	e00d      	b.n	8001254 <mqtt_incoming_publish_cb+0x48>
  else if (strstr (topic, "SETTING"))
 8001238:	490b      	ldr	r1, [pc, #44]	; (8001268 <mqtt_incoming_publish_cb+0x5c>)
 800123a:	68b8      	ldr	r0, [r7, #8]
 800123c:	f012 fa79 	bl	8013732 <strstr>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <mqtt_incoming_publish_cb+0x42>
      inpub_id = 3;
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <mqtt_incoming_publish_cb+0x58>)
 8001248:	2203      	movs	r2, #3
 800124a:	601a      	str	r2, [r3, #0]
}
 800124c:	e002      	b.n	8001254 <mqtt_incoming_publish_cb+0x48>
      inpub_id = 2;
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <mqtt_incoming_publish_cb+0x58>)
 8001250:	2202      	movs	r2, #2
 8001252:	601a      	str	r2, [r3, #0]
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	08014dbc 	.word	0x08014dbc
 8001260:	08014df0 	.word	0x08014df0
 8001264:	20000e68 	.word	0x20000e68
 8001268:	08014df8 	.word	0x08014df8

0800126c <mqtt_incoming_data_cb>:
void mqtt_incoming_data_cb (void *arg, const u8_t *data, u16_t len, u8_t flags)
{
 800126c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001270:	b089      	sub	sp, #36	; 0x24
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	4611      	mov	r1, r2
 800127a:	461a      	mov	r2, r3
 800127c:	460b      	mov	r3, r1
 800127e:	80fb      	strh	r3, [r7, #6]
 8001280:	4613      	mov	r3, r2
 8001282:	717b      	strb	r3, [r7, #5]
 8001284:	466b      	mov	r3, sp
 8001286:	461e      	mov	r6, r3
  Console_WARNING ("Incoming publish payload with length %d, flags %u\\n", len,
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	797a      	ldrb	r2, [r7, #5]
 800128c:	4619      	mov	r1, r3
 800128e:	487e      	ldr	r0, [pc, #504]	; (8001488 <mqtt_incoming_data_cb+0x21c>)
 8001290:	f7ff f808 	bl	80002a4 <Console_WARNING>
		   (unsigned int) flags);
  char payload[len]; //Create buffer for payload
 8001294:	88f9      	ldrh	r1, [r7, #6]
 8001296:	460b      	mov	r3, r1
 8001298:	3b01      	subs	r3, #1
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	b28b      	uxth	r3, r1
 800129e:	2200      	movs	r2, #0
 80012a0:	4698      	mov	r8, r3
 80012a2:	4691      	mov	r9, r2
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	f04f 0300 	mov.w	r3, #0
 80012ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012b8:	b28b      	uxth	r3, r1
 80012ba:	2200      	movs	r2, #0
 80012bc:	461c      	mov	r4, r3
 80012be:	4615      	mov	r5, r2
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	00eb      	lsls	r3, r5, #3
 80012ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012ce:	00e2      	lsls	r2, r4, #3
 80012d0:	460b      	mov	r3, r1
 80012d2:	3307      	adds	r3, #7
 80012d4:	08db      	lsrs	r3, r3, #3
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	ebad 0d03 	sub.w	sp, sp, r3
 80012dc:	466b      	mov	r3, sp
 80012de:	3300      	adds	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  memcpy (payload, (const char*) data, len);
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	461a      	mov	r2, r3
 80012e6:	68b9      	ldr	r1, [r7, #8]
 80012e8:	6978      	ldr	r0, [r7, #20]
 80012ea:	f012 f929 	bl	8013540 <memcpy>
  Console_WARNING ("mqtt payload: %s\\n", payload);
 80012ee:	6979      	ldr	r1, [r7, #20]
 80012f0:	4866      	ldr	r0, [pc, #408]	; (800148c <mqtt_incoming_data_cb+0x220>)
 80012f2:	f7fe ffd7 	bl	80002a4 <Console_WARNING>
  if (flags & MQTT_DATA_FLAG_LAST)
 80012f6:	797b      	ldrb	r3, [r7, #5]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 8187 	beq.w	8001610 <mqtt_incoming_data_cb+0x3a4>
    {
      /* Handle data based on the reference */
      if (inpub_id == 1) //COMMAND detected
 8001302:	4b63      	ldr	r3, [pc, #396]	; (8001490 <mqtt_incoming_data_cb+0x224>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	f040 8109 	bne.w	800151e <mqtt_incoming_data_cb+0x2b2>
	{
	  if (strstr (payload, "OUT1=")) //todo make this in one if
 800130c:	4961      	ldr	r1, [pc, #388]	; (8001494 <mqtt_incoming_data_cb+0x228>)
 800130e:	6978      	ldr	r0, [r7, #20]
 8001310:	f012 fa0f 	bl	8013732 <strstr>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d026      	beq.n	8001368 <mqtt_incoming_data_cb+0xfc>
	    {
	      if (strstr (payload, "=ON"))
 800131a:	495f      	ldr	r1, [pc, #380]	; (8001498 <mqtt_incoming_data_cb+0x22c>)
 800131c:	6978      	ldr	r0, [r7, #20]
 800131e:	f012 fa08 	bl	8013732 <strstr>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d004      	beq.n	8001332 <mqtt_incoming_data_cb+0xc6>
		system_drive_output (OUTPUT_1, LED_STATE_ON);
 8001328:	2101      	movs	r1, #1
 800132a:	2000      	movs	r0, #0
 800132c:	f000 ffc4 	bl	80022b8 <system_drive_output>
 8001330:	e01a      	b.n	8001368 <mqtt_incoming_data_cb+0xfc>
	      else if (strstr (payload, "=OFF"))
 8001332:	495a      	ldr	r1, [pc, #360]	; (800149c <mqtt_incoming_data_cb+0x230>)
 8001334:	6978      	ldr	r0, [r7, #20]
 8001336:	f012 f9fc 	bl	8013732 <strstr>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d004      	beq.n	800134a <mqtt_incoming_data_cb+0xde>
		system_drive_output (OUTPUT_1, LED_STATE_OFF);
 8001340:	2100      	movs	r1, #0
 8001342:	2000      	movs	r0, #0
 8001344:	f000 ffb8 	bl	80022b8 <system_drive_output>
 8001348:	e00e      	b.n	8001368 <mqtt_incoming_data_cb+0xfc>
	      else if (strstr (payload, "=TOGGLE"))
 800134a:	4955      	ldr	r1, [pc, #340]	; (80014a0 <mqtt_incoming_data_cb+0x234>)
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f012 f9f0 	bl	8013732 <strstr>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d004      	beq.n	8001362 <mqtt_incoming_data_cb+0xf6>
		system_drive_output (OUTPUT_1, LED_STATE_TOGGLE);
 8001358:	2103      	movs	r1, #3
 800135a:	2000      	movs	r0, #0
 800135c:	f000 ffac 	bl	80022b8 <system_drive_output>
 8001360:	e002      	b.n	8001368 <mqtt_incoming_data_cb+0xfc>
	      else
		Console_WARNING ("Unknown payload");
 8001362:	4850      	ldr	r0, [pc, #320]	; (80014a4 <mqtt_incoming_data_cb+0x238>)
 8001364:	f7fe ff9e 	bl	80002a4 <Console_WARNING>
	    }
	  if (strstr (payload, "OUT2="))
 8001368:	494f      	ldr	r1, [pc, #316]	; (80014a8 <mqtt_incoming_data_cb+0x23c>)
 800136a:	6978      	ldr	r0, [r7, #20]
 800136c:	f012 f9e1 	bl	8013732 <strstr>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d026      	beq.n	80013c4 <mqtt_incoming_data_cb+0x158>
	    {
	      if (strstr (payload, "=ON"))
 8001376:	4948      	ldr	r1, [pc, #288]	; (8001498 <mqtt_incoming_data_cb+0x22c>)
 8001378:	6978      	ldr	r0, [r7, #20]
 800137a:	f012 f9da 	bl	8013732 <strstr>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d004      	beq.n	800138e <mqtt_incoming_data_cb+0x122>
		system_drive_output (OUTPUT_2, LED_STATE_ON);
 8001384:	2101      	movs	r1, #1
 8001386:	2001      	movs	r0, #1
 8001388:	f000 ff96 	bl	80022b8 <system_drive_output>
 800138c:	e01a      	b.n	80013c4 <mqtt_incoming_data_cb+0x158>
	      else if (strstr (payload, "=OFF"))
 800138e:	4943      	ldr	r1, [pc, #268]	; (800149c <mqtt_incoming_data_cb+0x230>)
 8001390:	6978      	ldr	r0, [r7, #20]
 8001392:	f012 f9ce 	bl	8013732 <strstr>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d004      	beq.n	80013a6 <mqtt_incoming_data_cb+0x13a>
		system_drive_output (OUTPUT_2, LED_STATE_OFF);
 800139c:	2100      	movs	r1, #0
 800139e:	2001      	movs	r0, #1
 80013a0:	f000 ff8a 	bl	80022b8 <system_drive_output>
 80013a4:	e00e      	b.n	80013c4 <mqtt_incoming_data_cb+0x158>
	      else if (strstr (payload, "=TOGGLE"))
 80013a6:	493e      	ldr	r1, [pc, #248]	; (80014a0 <mqtt_incoming_data_cb+0x234>)
 80013a8:	6978      	ldr	r0, [r7, #20]
 80013aa:	f012 f9c2 	bl	8013732 <strstr>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d004      	beq.n	80013be <mqtt_incoming_data_cb+0x152>
		system_drive_output (OUTPUT_2, LED_STATE_TOGGLE);
 80013b4:	2103      	movs	r1, #3
 80013b6:	2001      	movs	r0, #1
 80013b8:	f000 ff7e 	bl	80022b8 <system_drive_output>
 80013bc:	e002      	b.n	80013c4 <mqtt_incoming_data_cb+0x158>
	      else
		Console_WARNING ("Unknown payload");
 80013be:	4839      	ldr	r0, [pc, #228]	; (80014a4 <mqtt_incoming_data_cb+0x238>)
 80013c0:	f7fe ff70 	bl	80002a4 <Console_WARNING>
	    }
	  if (strstr (payload, "OUT3="))
 80013c4:	4939      	ldr	r1, [pc, #228]	; (80014ac <mqtt_incoming_data_cb+0x240>)
 80013c6:	6978      	ldr	r0, [r7, #20]
 80013c8:	f012 f9b3 	bl	8013732 <strstr>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d026      	beq.n	8001420 <mqtt_incoming_data_cb+0x1b4>
	    {
	      if (strstr (payload, "=ON"))
 80013d2:	4931      	ldr	r1, [pc, #196]	; (8001498 <mqtt_incoming_data_cb+0x22c>)
 80013d4:	6978      	ldr	r0, [r7, #20]
 80013d6:	f012 f9ac 	bl	8013732 <strstr>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d004      	beq.n	80013ea <mqtt_incoming_data_cb+0x17e>
		system_drive_output (OUTPUT_3, LED_STATE_ON);
 80013e0:	2101      	movs	r1, #1
 80013e2:	2002      	movs	r0, #2
 80013e4:	f000 ff68 	bl	80022b8 <system_drive_output>
 80013e8:	e01a      	b.n	8001420 <mqtt_incoming_data_cb+0x1b4>
	      else if (strstr (payload, "=OFF"))
 80013ea:	492c      	ldr	r1, [pc, #176]	; (800149c <mqtt_incoming_data_cb+0x230>)
 80013ec:	6978      	ldr	r0, [r7, #20]
 80013ee:	f012 f9a0 	bl	8013732 <strstr>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d004      	beq.n	8001402 <mqtt_incoming_data_cb+0x196>
		system_drive_output (OUTPUT_3, LED_STATE_OFF);
 80013f8:	2100      	movs	r1, #0
 80013fa:	2002      	movs	r0, #2
 80013fc:	f000 ff5c 	bl	80022b8 <system_drive_output>
 8001400:	e00e      	b.n	8001420 <mqtt_incoming_data_cb+0x1b4>
	      else if (strstr (payload, "=TOGGLE"))
 8001402:	4927      	ldr	r1, [pc, #156]	; (80014a0 <mqtt_incoming_data_cb+0x234>)
 8001404:	6978      	ldr	r0, [r7, #20]
 8001406:	f012 f994 	bl	8013732 <strstr>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d004      	beq.n	800141a <mqtt_incoming_data_cb+0x1ae>
		system_drive_output (OUTPUT_3, LED_STATE_TOGGLE);
 8001410:	2103      	movs	r1, #3
 8001412:	2002      	movs	r0, #2
 8001414:	f000 ff50 	bl	80022b8 <system_drive_output>
 8001418:	e002      	b.n	8001420 <mqtt_incoming_data_cb+0x1b4>
	      else
		Console_WARNING ("Unknown payload");
 800141a:	4822      	ldr	r0, [pc, #136]	; (80014a4 <mqtt_incoming_data_cb+0x238>)
 800141c:	f7fe ff42 	bl	80002a4 <Console_WARNING>
	    }
	//}
      if ((!(memcmp (payload, "PWM", 3))) && payload[4] == '=') //payload start with PWM, and other conditions
 8001420:	2203      	movs	r2, #3
 8001422:	4923      	ldr	r1, [pc, #140]	; (80014b0 <mqtt_incoming_data_cb+0x244>)
 8001424:	6978      	ldr	r0, [r7, #20]
 8001426:	f012 f87b 	bl	8013520 <memcmp>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d16c      	bne.n	800150a <mqtt_incoming_data_cb+0x29e>
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	791b      	ldrb	r3, [r3, #4]
 8001434:	2b3d      	cmp	r3, #61	; 0x3d
 8001436:	d168      	bne.n	800150a <mqtt_incoming_data_cb+0x29e>
	{
	  uint8_t pwm_ch = payload[3] - '0' + 2;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	78db      	ldrb	r3, [r3, #3]
 800143c:	3b2e      	subs	r3, #46	; 0x2e
 800143e:	74fb      	strb	r3, [r7, #19]
	  uint8_t value = 0, index = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	74bb      	strb	r3, [r7, #18]
 8001444:	2300      	movs	r3, #0
 8001446:	747b      	strb	r3, [r7, #17]
	  if (strstr (payload, "=ON"))
 8001448:	4913      	ldr	r1, [pc, #76]	; (8001498 <mqtt_incoming_data_cb+0x22c>)
 800144a:	6978      	ldr	r0, [r7, #20]
 800144c:	f012 f971 	bl	8013732 <strstr>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d005      	beq.n	8001462 <mqtt_incoming_data_cb+0x1f6>
	    system_drive_output (pwm_ch, 100);
 8001456:	7cfb      	ldrb	r3, [r7, #19]
 8001458:	2164      	movs	r1, #100	; 0x64
 800145a:	4618      	mov	r0, r3
 800145c:	f000 ff2c 	bl	80022b8 <system_drive_output>
 8001460:	e053      	b.n	800150a <mqtt_incoming_data_cb+0x29e>
	  else if (strstr (payload, "=OFF"))
 8001462:	490e      	ldr	r1, [pc, #56]	; (800149c <mqtt_incoming_data_cb+0x230>)
 8001464:	6978      	ldr	r0, [r7, #20]
 8001466:	f012 f964 	bl	8013732 <strstr>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <mqtt_incoming_data_cb+0x210>
	    system_drive_output (pwm_ch, 0);
 8001470:	7cfb      	ldrb	r3, [r7, #19]
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f000 ff1f 	bl	80022b8 <system_drive_output>
 800147a:	e046      	b.n	800150a <mqtt_incoming_data_cb+0x29e>
	  else
	    {
	      uint8_t value = 0, index = 5;
 800147c:	2300      	movs	r3, #0
 800147e:	77bb      	strb	r3, [r7, #30]
 8001480:	2305      	movs	r3, #5
 8001482:	77fb      	strb	r3, [r7, #31]
	      while (payload[index] != '\0')
 8001484:	e031      	b.n	80014ea <mqtt_incoming_data_cb+0x27e>
 8001486:	bf00      	nop
 8001488:	08014e00 	.word	0x08014e00
 800148c:	08014e34 	.word	0x08014e34
 8001490:	20000e68 	.word	0x20000e68
 8001494:	08014e48 	.word	0x08014e48
 8001498:	08014e50 	.word	0x08014e50
 800149c:	08014e54 	.word	0x08014e54
 80014a0:	08014e5c 	.word	0x08014e5c
 80014a4:	08014e64 	.word	0x08014e64
 80014a8:	08014e74 	.word	0x08014e74
 80014ac:	08014e7c 	.word	0x08014e7c
 80014b0:	08014e84 	.word	0x08014e84
		{
		  // Check if the character is a digit
		  if (isdigit(payload[index]))
 80014b4:	7ffb      	ldrb	r3, [r7, #31]
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	5cd3      	ldrb	r3, [r2, r3]
 80014ba:	3301      	adds	r3, #1
 80014bc:	4a57      	ldr	r2, [pc, #348]	; (800161c <mqtt_incoming_data_cb+0x3b0>)
 80014be:	4413      	add	r3, r2
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00c      	beq.n	80014e4 <mqtt_incoming_data_cb+0x278>
		    {
		      // Convert character to integer and accumulate the resul100
		      value = value * 10 + (payload[index] - '0');
 80014ca:	7fbb      	ldrb	r3, [r7, #30]
 80014cc:	461a      	mov	r2, r3
 80014ce:	0092      	lsls	r2, r2, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	7ffb      	ldrb	r3, [r7, #31]
 80014d8:	6979      	ldr	r1, [r7, #20]
 80014da:	5ccb      	ldrb	r3, [r1, r3]
 80014dc:	4413      	add	r3, r2
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	3b30      	subs	r3, #48	; 0x30
 80014e2:	77bb      	strb	r3, [r7, #30]
		    }
		  index++;
 80014e4:	7ffb      	ldrb	r3, [r7, #31]
 80014e6:	3301      	adds	r3, #1
 80014e8:	77fb      	strb	r3, [r7, #31]
	      while (payload[index] != '\0')
 80014ea:	7ffb      	ldrb	r3, [r7, #31]
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	5cd3      	ldrb	r3, [r2, r3]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1df      	bne.n	80014b4 <mqtt_incoming_data_cb+0x248>
		}
	      Console_WARNING ("PWM value detected: %d", value);
 80014f4:	7fbb      	ldrb	r3, [r7, #30]
 80014f6:	4619      	mov	r1, r3
 80014f8:	4849      	ldr	r0, [pc, #292]	; (8001620 <mqtt_incoming_data_cb+0x3b4>)
 80014fa:	f7fe fed3 	bl	80002a4 <Console_WARNING>
	      system_drive_output (pwm_ch, value);
 80014fe:	7fba      	ldrb	r2, [r7, #30]
 8001500:	7cfb      	ldrb	r3, [r7, #19]
 8001502:	4611      	mov	r1, r2
 8001504:	4618      	mov	r0, r3
 8001506:	f000 fed7 	bl	80022b8 <system_drive_output>
	    }
	}
      if (strstr (payload, "RGB")) system_rgb_drive(payload);
 800150a:	4946      	ldr	r1, [pc, #280]	; (8001624 <mqtt_incoming_data_cb+0x3b8>)
 800150c:	6978      	ldr	r0, [r7, #20]
 800150e:	f012 f910 	bl	8013732 <strstr>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d002      	beq.n	800151e <mqtt_incoming_data_cb+0x2b2>
 8001518:	6978      	ldr	r0, [r7, #20]
 800151a:	f001 fb5d 	bl	8002bd8 <system_rgb_drive>

	}
      if (inpub_id == 3) //SETTINGS
 800151e:	4b42      	ldr	r3, [pc, #264]	; (8001628 <mqtt_incoming_data_cb+0x3bc>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b03      	cmp	r3, #3
 8001524:	d174      	bne.n	8001610 <mqtt_incoming_data_cb+0x3a4>
	{
	  if (strstr (payload, "IP="))
 8001526:	4941      	ldr	r1, [pc, #260]	; (800162c <mqtt_incoming_data_cb+0x3c0>)
 8001528:	6978      	ldr	r0, [r7, #20]
 800152a:	f012 f902 	bl	8013732 <strstr>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <mqtt_incoming_data_cb+0x2d0>
	    settings_change_ip (payload, current_settings.ip_add);
 8001534:	493e      	ldr	r1, [pc, #248]	; (8001630 <mqtt_incoming_data_cb+0x3c4>)
 8001536:	6978      	ldr	r0, [r7, #20]
 8001538:	f000 f8ac 	bl	8001694 <settings_change_ip>
	  if (strstr (payload, "GATEWAY="))
 800153c:	493d      	ldr	r1, [pc, #244]	; (8001634 <mqtt_incoming_data_cb+0x3c8>)
 800153e:	6978      	ldr	r0, [r7, #20]
 8001540:	f012 f8f7 	bl	8013732 <strstr>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <mqtt_incoming_data_cb+0x2e6>
	    settings_change_ip (payload, current_settings.gateway);
 800154a:	493b      	ldr	r1, [pc, #236]	; (8001638 <mqtt_incoming_data_cb+0x3cc>)
 800154c:	6978      	ldr	r0, [r7, #20]
 800154e:	f000 f8a1 	bl	8001694 <settings_change_ip>
	  if (strstr (payload, "NETMASK="))
 8001552:	493a      	ldr	r1, [pc, #232]	; (800163c <mqtt_incoming_data_cb+0x3d0>)
 8001554:	6978      	ldr	r0, [r7, #20]
 8001556:	f012 f8ec 	bl	8013732 <strstr>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <mqtt_incoming_data_cb+0x2fc>
	    settings_change_ip (payload, current_settings.netmask);
 8001560:	4937      	ldr	r1, [pc, #220]	; (8001640 <mqtt_incoming_data_cb+0x3d4>)
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f000 f896 	bl	8001694 <settings_change_ip>
	  if (strstr (payload, "SERVER="))
 8001568:	4936      	ldr	r1, [pc, #216]	; (8001644 <mqtt_incoming_data_cb+0x3d8>)
 800156a:	6978      	ldr	r0, [r7, #20]
 800156c:	f012 f8e1 	bl	8013732 <strstr>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <mqtt_incoming_data_cb+0x312>
	    settings_change_ip (payload, current_settings.server_address);
 8001576:	4934      	ldr	r1, [pc, #208]	; (8001648 <mqtt_incoming_data_cb+0x3dc>)
 8001578:	6978      	ldr	r0, [r7, #20]
 800157a:	f000 f88b 	bl	8001694 <settings_change_ip>
	  if (strstr (payload, "DHCP="))
 800157e:	4933      	ldr	r1, [pc, #204]	; (800164c <mqtt_incoming_data_cb+0x3e0>)
 8001580:	6978      	ldr	r0, [r7, #20]
 8001582:	f012 f8d6 	bl	8013732 <strstr>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <mqtt_incoming_data_cb+0x328>
	    settings_dhcp (payload, &current_settings.dhcp_on);
 800158c:	4930      	ldr	r1, [pc, #192]	; (8001650 <mqtt_incoming_data_cb+0x3e4>)
 800158e:	6978      	ldr	r0, [r7, #20]
 8001590:	f000 f8f0 	bl	8001774 <settings_dhcp>
	  if (strstr (payload, "PWM_PSC="))
 8001594:	492f      	ldr	r1, [pc, #188]	; (8001654 <mqtt_incoming_data_cb+0x3e8>)
 8001596:	6978      	ldr	r0, [r7, #20]
 8001598:	f012 f8cb 	bl	8013732 <strstr>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <mqtt_incoming_data_cb+0x33e>
	    settings_pwm (payload, &current_settings.pwm_prescaler);
 80015a2:	492d      	ldr	r1, [pc, #180]	; (8001658 <mqtt_incoming_data_cb+0x3ec>)
 80015a4:	6978      	ldr	r0, [r7, #20]
 80015a6:	f000 f8fd 	bl	80017a4 <settings_pwm>
	  if (strstr (payload, "DIMMING="))
 80015aa:	492c      	ldr	r1, [pc, #176]	; (800165c <mqtt_incoming_data_cb+0x3f0>)
 80015ac:	6978      	ldr	r0, [r7, #20]
 80015ae:	f012 f8c0 	bl	8013732 <strstr>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <mqtt_incoming_data_cb+0x354>
	    settings_pwm (payload, &current_settings.dimming_lenght);
 80015b8:	4929      	ldr	r1, [pc, #164]	; (8001660 <mqtt_incoming_data_cb+0x3f4>)
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f000 f8f2 	bl	80017a4 <settings_pwm>
	  if (strstr (payload, "NAME="))
 80015c0:	4928      	ldr	r1, [pc, #160]	; (8001664 <mqtt_incoming_data_cb+0x3f8>)
 80015c2:	6978      	ldr	r0, [r7, #20]
 80015c4:	f012 f8b5 	bl	8013732 <strstr>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <mqtt_incoming_data_cb+0x36a>
	    settings_name (payload, current_settings.device_name);
 80015ce:	4926      	ldr	r1, [pc, #152]	; (8001668 <mqtt_incoming_data_cb+0x3fc>)
 80015d0:	6978      	ldr	r0, [r7, #20]
 80015d2:	f000 f951 	bl	8001878 <settings_name>
	  if (strstr (payload, "SAVE"))
 80015d6:	4925      	ldr	r1, [pc, #148]	; (800166c <mqtt_incoming_data_cb+0x400>)
 80015d8:	6978      	ldr	r0, [r7, #20]
 80015da:	f012 f8aa 	bl	8013732 <strstr>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <mqtt_incoming_data_cb+0x37e>
	    ProgramSettings (&current_settings); //Program default settings to flash
 80015e4:	4822      	ldr	r0, [pc, #136]	; (8001670 <mqtt_incoming_data_cb+0x404>)
 80015e6:	f7fe fedd 	bl	80003a4 <ProgramSettings>
	  if (strstr (payload, "RESET"))
 80015ea:	4922      	ldr	r1, [pc, #136]	; (8001674 <mqtt_incoming_data_cb+0x408>)
 80015ec:	6978      	ldr	r0, [r7, #20]
 80015ee:	f012 f8a0 	bl	8013732 <strstr>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <mqtt_incoming_data_cb+0x390>
	    NVIC_SystemReset (); //Program default settings to flash
 80015f8:	f7ff fcea 	bl	8000fd0 <__NVIC_SystemReset>
	  if (strstr (payload, "SHOW"))
 80015fc:	491e      	ldr	r1, [pc, #120]	; (8001678 <mqtt_incoming_data_cb+0x40c>)
 80015fe:	6978      	ldr	r0, [r7, #20]
 8001600:	f012 f897 	bl	8013732 <strstr>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <mqtt_incoming_data_cb+0x3a4>
	    flag_send_settings=1;
 800160a:	4b1c      	ldr	r3, [pc, #112]	; (800167c <mqtt_incoming_data_cb+0x410>)
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
 8001610:	46b5      	mov	sp, r6
    }
  else
    {
      /* To handle payloads that are too long, save them in a buffer or a file. */
    }
}
 8001612:	bf00      	nop
 8001614:	3724      	adds	r7, #36	; 0x24
 8001616:	46bd      	mov	sp, r7
 8001618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800161c:	08016cb2 	.word	0x08016cb2
 8001620:	08014e88 	.word	0x08014e88
 8001624:	08014ea0 	.word	0x08014ea0
 8001628:	20000e68 	.word	0x20000e68
 800162c:	08014ea4 	.word	0x08014ea4
 8001630:	20000ea5 	.word	0x20000ea5
 8001634:	08014ea8 	.word	0x08014ea8
 8001638:	20000ea9 	.word	0x20000ea9
 800163c:	08014eb4 	.word	0x08014eb4
 8001640:	20000ead 	.word	0x20000ead
 8001644:	08014ec0 	.word	0x08014ec0
 8001648:	20000eb1 	.word	0x20000eb1
 800164c:	08014ec8 	.word	0x08014ec8
 8001650:	20000eb5 	.word	0x20000eb5
 8001654:	08014ed0 	.word	0x08014ed0
 8001658:	20000eb6 	.word	0x20000eb6
 800165c:	08014edc 	.word	0x08014edc
 8001660:	20000eb7 	.word	0x20000eb7
 8001664:	08014ee8 	.word	0x08014ee8
 8001668:	20000ebc 	.word	0x20000ebc
 800166c:	08014ef0 	.word	0x08014ef0
 8001670:	20000ea4 	.word	0x20000ea4
 8001674:	08014ef8 	.word	0x08014ef8
 8001678:	08014f00 	.word	0x08014f00
 800167c:	20000e67 	.word	0x20000e67

08001680 <mqtt_sub_request_cb>:

void mqtt_sub_request_cb ()
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  Console_WARNING ("--Sub request done!--");
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <mqtt_sub_request_cb+0x10>)
 8001686:	f7fe fe0d 	bl	80002a4 <Console_WARNING>
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	08014f08 	.word	0x08014f08

08001694 <settings_change_ip>:
 */
#include "system.h"
extern int client;

void settings_change_ip (const char *ipAddress, uint8_t *octets)
{
 8001694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001698:	b089      	sub	sp, #36	; 0x24
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
 80016a0:	466b      	mov	r3, sp
 80016a2:	461e      	mov	r6, r3
  const char *delimiter = "=";
 80016a4:	4b30      	ldr	r3, [pc, #192]	; (8001768 <settings_change_ip+0xd4>)
 80016a6:	617b      	str	r3, [r7, #20]
  char *token;

  // Find the position of '=' in the input string
  char *position = strstr (ipAddress, delimiter);
 80016a8:	6979      	ldr	r1, [r7, #20]
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f012 f841 	bl	8013732 <strstr>
 80016b0:	6138      	str	r0, [r7, #16]
  if (position == NULL)
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d104      	bne.n	80016c2 <settings_change_ip+0x2e>
    {
      printf ("Invalid input format\n");
 80016b8:	482c      	ldr	r0, [pc, #176]	; (800176c <settings_change_ip+0xd8>)
 80016ba:	f011 fff7 	bl	80136ac <puts>
 80016be:	46b5      	mov	sp, r6
 80016c0:	e04d      	b.n	800175e <settings_change_ip+0xca>
      return;
    }

  // Copy the substring after '='
  char ipAddressCopy[strlen (position) + 1];
 80016c2:	6938      	ldr	r0, [r7, #16]
 80016c4:	f7fe fd84 	bl	80001d0 <strlen>
 80016c8:	4603      	mov	r3, r0
 80016ca:	1c59      	adds	r1, r3, #1
 80016cc:	460b      	mov	r3, r1
 80016ce:	3b01      	subs	r3, #1
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	2300      	movs	r3, #0
 80016d4:	4688      	mov	r8, r1
 80016d6:	4699      	mov	r9, r3
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016ec:	2300      	movs	r3, #0
 80016ee:	460c      	mov	r4, r1
 80016f0:	461d      	mov	r5, r3
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	00eb      	lsls	r3, r5, #3
 80016fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001700:	00e2      	lsls	r2, r4, #3
 8001702:	1dcb      	adds	r3, r1, #7
 8001704:	08db      	lsrs	r3, r3, #3
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	ebad 0d03 	sub.w	sp, sp, r3
 800170c:	466b      	mov	r3, sp
 800170e:	3300      	adds	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
  strcpy (ipAddressCopy, position + 1);
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	3301      	adds	r3, #1
 8001716:	4619      	mov	r1, r3
 8001718:	68b8      	ldr	r0, [r7, #8]
 800171a:	f011 ffef 	bl	80136fc <strcpy>

  // Use strtok to split the string by periods
  token = strtok (ipAddressCopy, ".");
 800171e:	4914      	ldr	r1, [pc, #80]	; (8001770 <settings_change_ip+0xdc>)
 8001720:	68b8      	ldr	r0, [r7, #8]
 8001722:	f012 f81d 	bl	8013760 <strtok>
 8001726:	61b8      	str	r0, [r7, #24]
  int i = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
  while (token != NULL && i < 4)
 800172c:	e010      	b.n	8001750 <settings_change_ip+0xbc>
    {
      octets[i] = atoi (token);
 800172e:	69b8      	ldr	r0, [r7, #24]
 8001730:	f011 fece 	bl	80134d0 <atoi>
 8001734:	4601      	mov	r1, r0
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	4413      	add	r3, r2
 800173c:	b2ca      	uxtb	r2, r1
 800173e:	701a      	strb	r2, [r3, #0]
      token = strtok (NULL, ".");
 8001740:	490b      	ldr	r1, [pc, #44]	; (8001770 <settings_change_ip+0xdc>)
 8001742:	2000      	movs	r0, #0
 8001744:	f012 f80c 	bl	8013760 <strtok>
 8001748:	61b8      	str	r0, [r7, #24]
      i++;
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3301      	adds	r3, #1
 800174e:	61fb      	str	r3, [r7, #28]
  while (token != NULL && i < 4)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d002      	beq.n	800175c <settings_change_ip+0xc8>
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	2b03      	cmp	r3, #3
 800175a:	dde8      	ble.n	800172e <settings_change_ip+0x9a>
 800175c:	46b5      	mov	sp, r6
    }
}
 800175e:	3724      	adds	r7, #36	; 0x24
 8001760:	46bd      	mov	sp, r7
 8001762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001766:	bf00      	nop
 8001768:	08014f20 	.word	0x08014f20
 800176c:	08014f24 	.word	0x08014f24
 8001770:	08014f3c 	.word	0x08014f3c

08001774 <settings_dhcp>:

void settings_dhcp (const char *payload, uint8_t *value)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  if (payload[5] == '1')
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3305      	adds	r3, #5
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b31      	cmp	r3, #49	; 0x31
 8001786:	d103      	bne.n	8001790 <settings_dhcp+0x1c>
    {
      *value = 1;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	2201      	movs	r2, #1
 800178c:	701a      	strb	r2, [r3, #0]
    }
  else
    {
      *value = 0;
    }
}
 800178e:	e002      	b.n	8001796 <settings_dhcp+0x22>
      *value = 0;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <settings_pwm>:

void settings_pwm (const char *payload, uint8_t *value)
{
 80017a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017a8:	b087      	sub	sp, #28
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]
 80017b0:	466b      	mov	r3, sp
 80017b2:	461e      	mov	r6, r3
  char *token;
  char pwm_psc_str[strlen (payload) + 1];
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7fe fd0b 	bl	80001d0 <strlen>
 80017ba:	4603      	mov	r3, r0
 80017bc:	1c59      	adds	r1, r3, #1
 80017be:	460b      	mov	r3, r1
 80017c0:	3b01      	subs	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	2300      	movs	r3, #0
 80017c6:	4688      	mov	r8, r1
 80017c8:	4699      	mov	r9, r3
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017de:	2300      	movs	r3, #0
 80017e0:	460c      	mov	r4, r1
 80017e2:	461d      	mov	r5, r3
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	00eb      	lsls	r3, r5, #3
 80017ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017f2:	00e2      	lsls	r2, r4, #3
 80017f4:	1dcb      	adds	r3, r1, #7
 80017f6:	08db      	lsrs	r3, r3, #3
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	ebad 0d03 	sub.w	sp, sp, r3
 80017fe:	466b      	mov	r3, sp
 8001800:	3300      	adds	r3, #0
 8001802:	613b      	str	r3, [r7, #16]

  // Make a copy of the payload string
  strcpy (pwm_psc_str, payload);
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	6938      	ldr	r0, [r7, #16]
 8001808:	f011 ff78 	bl	80136fc <strcpy>

  // Use strtok to split the string by '='
  token = strtok (pwm_psc_str, "=");
 800180c:	4916      	ldr	r1, [pc, #88]	; (8001868 <settings_pwm+0xc4>)
 800180e:	6938      	ldr	r0, [r7, #16]
 8001810:	f011 ffa6 	bl	8013760 <strtok>
 8001814:	60f8      	str	r0, [r7, #12]

  // Move to the next token which should be the numeric part
  token = strtok (NULL, "=");
 8001816:	4914      	ldr	r1, [pc, #80]	; (8001868 <settings_pwm+0xc4>)
 8001818:	2000      	movs	r0, #0
 800181a:	f011 ffa1 	bl	8013760 <strtok>
 800181e:	60f8      	str	r0, [r7, #12]

  if (token != NULL)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d017      	beq.n	8001856 <settings_pwm+0xb2>
    {
      // Convert the numeric part to an integer
      int pwm_psc = atoi (token);
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f011 fe52 	bl	80134d0 <atoi>
 800182c:	60b8      	str	r0, [r7, #8]

      // Ensure the converted value is within the valid range
      if (pwm_psc >= 1 && pwm_psc <= 100)
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2b00      	cmp	r3, #0
 8001832:	dd0b      	ble.n	800184c <settings_pwm+0xa8>
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2b64      	cmp	r3, #100	; 0x64
 8001838:	dc08      	bgt.n	800184c <settings_pwm+0xa8>
	{
	  *value = (uint8_t) pwm_psc;
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	701a      	strb	r2, [r3, #0]
	  printf ("PWM_PSC value set to: %d\n", pwm_psc);
 8001842:	68b9      	ldr	r1, [r7, #8]
 8001844:	4809      	ldr	r0, [pc, #36]	; (800186c <settings_pwm+0xc8>)
 8001846:	f011 feab 	bl	80135a0 <iprintf>
 800184a:	e007      	b.n	800185c <settings_pwm+0xb8>
	}
      else
	{
	  printf ("Invalid PWM_PSC value: %s\n", token);
 800184c:	68f9      	ldr	r1, [r7, #12]
 800184e:	4808      	ldr	r0, [pc, #32]	; (8001870 <settings_pwm+0xcc>)
 8001850:	f011 fea6 	bl	80135a0 <iprintf>
 8001854:	e002      	b.n	800185c <settings_pwm+0xb8>
	}
    }
  else
    {
      printf ("Invalid input format\n");
 8001856:	4807      	ldr	r0, [pc, #28]	; (8001874 <settings_pwm+0xd0>)
 8001858:	f011 ff28 	bl	80136ac <puts>
 800185c:	46b5      	mov	sp, r6
    }
}
 800185e:	bf00      	nop
 8001860:	371c      	adds	r7, #28
 8001862:	46bd      	mov	sp, r7
 8001864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001868:	08014f20 	.word	0x08014f20
 800186c:	08014f40 	.word	0x08014f40
 8001870:	08014f5c 	.word	0x08014f5c
 8001874:	08014f24 	.word	0x08014f24

08001878 <settings_name>:
void settings_name (const char *payload, char *name)
{
 8001878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800187c:	b087      	sub	sp, #28
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
 8001884:	466b      	mov	r3, sp
 8001886:	461e      	mov	r6, r3
  char *token;
  char name_str[strlen (payload) + 1];
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7fe fca1 	bl	80001d0 <strlen>
 800188e:	4603      	mov	r3, r0
 8001890:	1c59      	adds	r1, r3, #1
 8001892:	460b      	mov	r3, r1
 8001894:	3b01      	subs	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	2300      	movs	r3, #0
 800189a:	4688      	mov	r8, r1
 800189c:	4699      	mov	r9, r3
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018b2:	2300      	movs	r3, #0
 80018b4:	460c      	mov	r4, r1
 80018b6:	461d      	mov	r5, r3
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	00eb      	lsls	r3, r5, #3
 80018c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018c6:	00e2      	lsls	r2, r4, #3
 80018c8:	1dcb      	adds	r3, r1, #7
 80018ca:	08db      	lsrs	r3, r3, #3
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	ebad 0d03 	sub.w	sp, sp, r3
 80018d2:	466b      	mov	r3, sp
 80018d4:	3300      	adds	r3, #0
 80018d6:	613b      	str	r3, [r7, #16]

  // Make a copy of the payload string
  strcpy (name_str, payload);
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	6938      	ldr	r0, [r7, #16]
 80018dc:	f011 ff0e 	bl	80136fc <strcpy>

  // Use strtok to split the string by '='
  token = strtok (name_str, "=");
 80018e0:	4911      	ldr	r1, [pc, #68]	; (8001928 <settings_name+0xb0>)
 80018e2:	6938      	ldr	r0, [r7, #16]
 80018e4:	f011 ff3c 	bl	8013760 <strtok>
 80018e8:	60f8      	str	r0, [r7, #12]

  // Move to the next token which should be the name part
  token = strtok (NULL, "=");
 80018ea:	490f      	ldr	r1, [pc, #60]	; (8001928 <settings_name+0xb0>)
 80018ec:	2000      	movs	r0, #0
 80018ee:	f011 ff37 	bl	8013760 <strtok>
 80018f2:	60f8      	str	r0, [r7, #12]

  if (token != NULL)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00d      	beq.n	8001916 <settings_name+0x9e>
    {
      // Copy the name part to the name array
      strncpy (name, token, 20);
 80018fa:	2214      	movs	r2, #20
 80018fc:	68f9      	ldr	r1, [r7, #12]
 80018fe:	6838      	ldr	r0, [r7, #0]
 8001900:	f011 ff04 	bl	801370c <strncpy>
      name[19] = '\0'; // Null-terminate the string to ensure it's properly terminated
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	3313      	adds	r3, #19
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]

      printf ("Name set to: %s\n", name);
 800190c:	6839      	ldr	r1, [r7, #0]
 800190e:	4807      	ldr	r0, [pc, #28]	; (800192c <settings_name+0xb4>)
 8001910:	f011 fe46 	bl	80135a0 <iprintf>
 8001914:	e002      	b.n	800191c <settings_name+0xa4>
    }
  else
    {
      printf ("Invalid input format\n");
 8001916:	4806      	ldr	r0, [pc, #24]	; (8001930 <settings_name+0xb8>)
 8001918:	f011 fec8 	bl	80136ac <puts>
 800191c:	46b5      	mov	sp, r6
    }
}
 800191e:	bf00      	nop
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001928:	08014f20 	.word	0x08014f20
 800192c:	08014f78 	.word	0x08014f78
 8001930:	08014f24 	.word	0x08014f24

08001934 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <HAL_MspInit+0x44>)
 800193c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193e:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <HAL_MspInit+0x44>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6613      	str	r3, [r2, #96]	; 0x60
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <HAL_MspInit+0x44>)
 8001948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_MspInit+0x44>)
 8001954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001956:	4a08      	ldr	r2, [pc, #32]	; (8001978 <HAL_MspInit+0x44>)
 8001958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195c:	6593      	str	r3, [r2, #88]	; 0x58
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_MspInit+0x44>)
 8001960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000

0800197c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	; 0x28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a3e      	ldr	r2, [pc, #248]	; (8001a94 <HAL_QSPI_MspInit+0x118>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d176      	bne.n	8001a8c <HAL_QSPI_MspInit+0x110>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800199e:	4b3e      	ldr	r3, [pc, #248]	; (8001a98 <HAL_QSPI_MspInit+0x11c>)
 80019a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019a2:	4a3d      	ldr	r2, [pc, #244]	; (8001a98 <HAL_QSPI_MspInit+0x11c>)
 80019a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a8:	6513      	str	r3, [r2, #80]	; 0x50
 80019aa:	4b3b      	ldr	r3, [pc, #236]	; (8001a98 <HAL_QSPI_MspInit+0x11c>)
 80019ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	4b38      	ldr	r3, [pc, #224]	; (8001a98 <HAL_QSPI_MspInit+0x11c>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	4a37      	ldr	r2, [pc, #220]	; (8001a98 <HAL_QSPI_MspInit+0x11c>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c2:	4b35      	ldr	r3, [pc, #212]	; (8001a98 <HAL_QSPI_MspInit+0x11c>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	4b32      	ldr	r3, [pc, #200]	; (8001a98 <HAL_QSPI_MspInit+0x11c>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d2:	4a31      	ldr	r2, [pc, #196]	; (8001a98 <HAL_QSPI_MspInit+0x11c>)
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019da:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <HAL_QSPI_MspInit+0x11c>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB11     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 80019e6:	23c8      	movs	r3, #200	; 0xc8
 80019e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019f6:	230a      	movs	r3, #10
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a04:	f002 f84a 	bl	8003a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11;
 8001a08:	f640 0303 	movw	r3, #2051	; 0x803
 8001a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a16:	2303      	movs	r3, #3
 8001a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a1a:	230a      	movs	r3, #10
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	4619      	mov	r1, r3
 8001a24:	481d      	ldr	r0, [pc, #116]	; (8001a9c <HAL_QSPI_MspInit+0x120>)
 8001a26:	f002 f839 	bl	8003a9c <HAL_GPIO_Init>

    /* QUADSPI DMA Init */
    /* QUADSPI Init */
    hdma_quadspi.Instance = DMA2_Channel7;
 8001a2a:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <HAL_QSPI_MspInit+0x124>)
 8001a2c:	4a1d      	ldr	r2, [pc, #116]	; (8001aa4 <HAL_QSPI_MspInit+0x128>)
 8001a2e:	601a      	str	r2, [r3, #0]
    hdma_quadspi.Init.Request = DMA_REQUEST_3;
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <HAL_QSPI_MspInit+0x124>)
 8001a32:	2203      	movs	r2, #3
 8001a34:	605a      	str	r2, [r3, #4]
    hdma_quadspi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a36:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <HAL_QSPI_MspInit+0x124>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
    hdma_quadspi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a3c:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <HAL_QSPI_MspInit+0x124>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
    hdma_quadspi.Init.MemInc = DMA_MINC_ENABLE;
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <HAL_QSPI_MspInit+0x124>)
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	611a      	str	r2, [r3, #16]
    hdma_quadspi.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_QSPI_MspInit+0x124>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	615a      	str	r2, [r3, #20]
    hdma_quadspi.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <HAL_QSPI_MspInit+0x124>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
    hdma_quadspi.Init.Mode = DMA_NORMAL;
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_QSPI_MspInit+0x124>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]
    hdma_quadspi.Init.Priority = DMA_PRIORITY_LOW;
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <HAL_QSPI_MspInit+0x124>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_quadspi) != HAL_OK)
 8001a60:	480f      	ldr	r0, [pc, #60]	; (8001aa0 <HAL_QSPI_MspInit+0x124>)
 8001a62:	f001 fb6b 	bl	800313c <HAL_DMA_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <HAL_QSPI_MspInit+0xf4>
    {
      Error_Handler();
 8001a6c:	f7ff faaa 	bl	8000fc4 <Error_Handler>
    }

    __HAL_LINKDMA(hqspi,hdma,hdma_quadspi);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a0b      	ldr	r2, [pc, #44]	; (8001aa0 <HAL_QSPI_MspInit+0x124>)
 8001a74:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a76:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <HAL_QSPI_MspInit+0x124>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6293      	str	r3, [r2, #40]	; 0x28

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2047      	movs	r0, #71	; 0x47
 8001a82:	f001 fb24 	bl	80030ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8001a86:	2047      	movs	r0, #71	; 0x47
 8001a88:	f001 fb3d 	bl	8003106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001a8c:	bf00      	nop
 8001a8e:	3728      	adds	r7, #40	; 0x28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	a0001000 	.word	0xa0001000
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	48000400 	.word	0x48000400
 8001aa0:	20000b7c 	.word	0x20000b7c
 8001aa4:	40020480 	.word	0x40020480

08001aa8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08e      	sub	sp, #56	; 0x38
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a92      	ldr	r2, [pc, #584]	; (8001d10 <HAL_SPI_MspInit+0x268>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d146      	bne.n	8001b58 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aca:	4b92      	ldr	r3, [pc, #584]	; (8001d14 <HAL_SPI_MspInit+0x26c>)
 8001acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ace:	4a91      	ldr	r2, [pc, #580]	; (8001d14 <HAL_SPI_MspInit+0x26c>)
 8001ad0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ad4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ad6:	4b8f      	ldr	r3, [pc, #572]	; (8001d14 <HAL_SPI_MspInit+0x26c>)
 8001ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ade:	623b      	str	r3, [r7, #32]
 8001ae0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	4b8c      	ldr	r3, [pc, #560]	; (8001d14 <HAL_SPI_MspInit+0x26c>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae6:	4a8b      	ldr	r2, [pc, #556]	; (8001d14 <HAL_SPI_MspInit+0x26c>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aee:	4b89      	ldr	r3, [pc, #548]	; (8001d14 <HAL_SPI_MspInit+0x26c>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	61fb      	str	r3, [r7, #28]
 8001af8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afa:	4b86      	ldr	r3, [pc, #536]	; (8001d14 <HAL_SPI_MspInit+0x26c>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	4a85      	ldr	r2, [pc, #532]	; (8001d14 <HAL_SPI_MspInit+0x26c>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b06:	4b83      	ldr	r3, [pc, #524]	; (8001d14 <HAL_SPI_MspInit+0x26c>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	61bb      	str	r3, [r7, #24]
 8001b10:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA12     ------> SPI1_MOSI
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 8001b12:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b20:	2303      	movs	r3, #3
 8001b22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b24:	2305      	movs	r3, #5
 8001b26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b32:	f001 ffb3 	bl	8003a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b36:	2310      	movs	r3, #16
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b42:	2303      	movs	r3, #3
 8001b44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b46:	2305      	movs	r3, #5
 8001b48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4871      	ldr	r0, [pc, #452]	; (8001d18 <HAL_SPI_MspInit+0x270>)
 8001b52:	f001 ffa3 	bl	8003a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b56:	e0d6      	b.n	8001d06 <HAL_SPI_MspInit+0x25e>
  else if(hspi->Instance==SPI2)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a6f      	ldr	r2, [pc, #444]	; (8001d1c <HAL_SPI_MspInit+0x274>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d17b      	bne.n	8001c5a <HAL_SPI_MspInit+0x1b2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b62:	4b6c      	ldr	r3, [pc, #432]	; (8001d14 <HAL_SPI_MspInit+0x26c>)
 8001b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b66:	4a6b      	ldr	r2, [pc, #428]	; (8001d14 <HAL_SPI_MspInit+0x26c>)
 8001b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b6c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b6e:	4b69      	ldr	r3, [pc, #420]	; (8001d14 <HAL_SPI_MspInit+0x26c>)
 8001b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7a:	4b66      	ldr	r3, [pc, #408]	; (8001d14 <HAL_SPI_MspInit+0x26c>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	4a65      	ldr	r2, [pc, #404]	; (8001d14 <HAL_SPI_MspInit+0x26c>)
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b86:	4b63      	ldr	r3, [pc, #396]	; (8001d14 <HAL_SPI_MspInit+0x26c>)
 8001b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001b92:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ba4:	2305      	movs	r3, #5
 8001ba6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bac:	4619      	mov	r1, r3
 8001bae:	485a      	ldr	r0, [pc, #360]	; (8001d18 <HAL_SPI_MspInit+0x270>)
 8001bb0:	f001 ff74 	bl	8003a9c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8001bb4:	4b5a      	ldr	r3, [pc, #360]	; (8001d20 <HAL_SPI_MspInit+0x278>)
 8001bb6:	4a5b      	ldr	r2, [pc, #364]	; (8001d24 <HAL_SPI_MspInit+0x27c>)
 8001bb8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8001bba:	4b59      	ldr	r3, [pc, #356]	; (8001d20 <HAL_SPI_MspInit+0x278>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bc0:	4b57      	ldr	r3, [pc, #348]	; (8001d20 <HAL_SPI_MspInit+0x278>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc6:	4b56      	ldr	r3, [pc, #344]	; (8001d20 <HAL_SPI_MspInit+0x278>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bcc:	4b54      	ldr	r3, [pc, #336]	; (8001d20 <HAL_SPI_MspInit+0x278>)
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bd2:	4b53      	ldr	r3, [pc, #332]	; (8001d20 <HAL_SPI_MspInit+0x278>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd8:	4b51      	ldr	r3, [pc, #324]	; (8001d20 <HAL_SPI_MspInit+0x278>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001bde:	4b50      	ldr	r3, [pc, #320]	; (8001d20 <HAL_SPI_MspInit+0x278>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001be4:	4b4e      	ldr	r3, [pc, #312]	; (8001d20 <HAL_SPI_MspInit+0x278>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001bea:	484d      	ldr	r0, [pc, #308]	; (8001d20 <HAL_SPI_MspInit+0x278>)
 8001bec:	f001 faa6 	bl	800313c <HAL_DMA_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_SPI_MspInit+0x152>
      Error_Handler();
 8001bf6:	f7ff f9e5 	bl	8000fc4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a48      	ldr	r2, [pc, #288]	; (8001d20 <HAL_SPI_MspInit+0x278>)
 8001bfe:	659a      	str	r2, [r3, #88]	; 0x58
 8001c00:	4a47      	ldr	r2, [pc, #284]	; (8001d20 <HAL_SPI_MspInit+0x278>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001c06:	4b48      	ldr	r3, [pc, #288]	; (8001d28 <HAL_SPI_MspInit+0x280>)
 8001c08:	4a48      	ldr	r2, [pc, #288]	; (8001d2c <HAL_SPI_MspInit+0x284>)
 8001c0a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8001c0c:	4b46      	ldr	r3, [pc, #280]	; (8001d28 <HAL_SPI_MspInit+0x280>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c12:	4b45      	ldr	r3, [pc, #276]	; (8001d28 <HAL_SPI_MspInit+0x280>)
 8001c14:	2210      	movs	r2, #16
 8001c16:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c18:	4b43      	ldr	r3, [pc, #268]	; (8001d28 <HAL_SPI_MspInit+0x280>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c1e:	4b42      	ldr	r3, [pc, #264]	; (8001d28 <HAL_SPI_MspInit+0x280>)
 8001c20:	2280      	movs	r2, #128	; 0x80
 8001c22:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c24:	4b40      	ldr	r3, [pc, #256]	; (8001d28 <HAL_SPI_MspInit+0x280>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c2a:	4b3f      	ldr	r3, [pc, #252]	; (8001d28 <HAL_SPI_MspInit+0x280>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001c30:	4b3d      	ldr	r3, [pc, #244]	; (8001d28 <HAL_SPI_MspInit+0x280>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c36:	4b3c      	ldr	r3, [pc, #240]	; (8001d28 <HAL_SPI_MspInit+0x280>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001c3c:	483a      	ldr	r0, [pc, #232]	; (8001d28 <HAL_SPI_MspInit+0x280>)
 8001c3e:	f001 fa7d 	bl	800313c <HAL_DMA_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_SPI_MspInit+0x1a4>
      Error_Handler();
 8001c48:	f7ff f9bc 	bl	8000fc4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a36      	ldr	r2, [pc, #216]	; (8001d28 <HAL_SPI_MspInit+0x280>)
 8001c50:	655a      	str	r2, [r3, #84]	; 0x54
 8001c52:	4a35      	ldr	r2, [pc, #212]	; (8001d28 <HAL_SPI_MspInit+0x280>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001c58:	e055      	b.n	8001d06 <HAL_SPI_MspInit+0x25e>
  else if(hspi->Instance==SPI3)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a34      	ldr	r2, [pc, #208]	; (8001d30 <HAL_SPI_MspInit+0x288>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d150      	bne.n	8001d06 <HAL_SPI_MspInit+0x25e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c64:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <HAL_SPI_MspInit+0x26c>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	4a2a      	ldr	r2, [pc, #168]	; (8001d14 <HAL_SPI_MspInit+0x26c>)
 8001c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c70:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <HAL_SPI_MspInit+0x26c>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7c:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <HAL_SPI_MspInit+0x26c>)
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c80:	4a24      	ldr	r2, [pc, #144]	; (8001d14 <HAL_SPI_MspInit+0x26c>)
 8001c82:	f043 0302 	orr.w	r3, r3, #2
 8001c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c88:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <HAL_SPI_MspInit+0x26c>)
 8001c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001c94:	2328      	movs	r3, #40	; 0x28
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ca4:	2306      	movs	r3, #6
 8001ca6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cac:	4619      	mov	r1, r3
 8001cae:	481a      	ldr	r0, [pc, #104]	; (8001d18 <HAL_SPI_MspInit+0x270>)
 8001cb0:	f001 fef4 	bl	8003a9c <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <HAL_SPI_MspInit+0x28c>)
 8001cb6:	4a20      	ldr	r2, [pc, #128]	; (8001d38 <HAL_SPI_MspInit+0x290>)
 8001cb8:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_3;
 8001cba:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <HAL_SPI_MspInit+0x28c>)
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cc0:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <HAL_SPI_MspInit+0x28c>)
 8001cc2:	2210      	movs	r2, #16
 8001cc4:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <HAL_SPI_MspInit+0x28c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ccc:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <HAL_SPI_MspInit+0x28c>)
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cd2:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <HAL_SPI_MspInit+0x28c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cd8:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <HAL_SPI_MspInit+0x28c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <HAL_SPI_MspInit+0x28c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <HAL_SPI_MspInit+0x28c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001cea:	4812      	ldr	r0, [pc, #72]	; (8001d34 <HAL_SPI_MspInit+0x28c>)
 8001cec:	f001 fa26 	bl	800313c <HAL_DMA_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_SPI_MspInit+0x252>
      Error_Handler();
 8001cf6:	f7ff f965 	bl	8000fc4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a0d      	ldr	r2, [pc, #52]	; (8001d34 <HAL_SPI_MspInit+0x28c>)
 8001cfe:	655a      	str	r2, [r3, #84]	; 0x54
 8001d00:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <HAL_SPI_MspInit+0x28c>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001d06:	bf00      	nop
 8001d08:	3738      	adds	r7, #56	; 0x38
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40013000 	.word	0x40013000
 8001d14:	40021000 	.word	0x40021000
 8001d18:	48000400 	.word	0x48000400
 8001d1c:	40003800 	.word	0x40003800
 8001d20:	20000cf0 	.word	0x20000cf0
 8001d24:	40020044 	.word	0x40020044
 8001d28:	20000d38 	.word	0x20000d38
 8001d2c:	40020058 	.word	0x40020058
 8001d30:	40003c00 	.word	0x40003c00
 8001d34:	20000d80 	.word	0x20000d80
 8001d38:	4002041c 	.word	0x4002041c

08001d3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a16      	ldr	r2, [pc, #88]	; (8001da4 <HAL_TIM_Base_MspInit+0x68>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d114      	bne.n	8001d78 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d4e:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d52:	4a15      	ldr	r2, [pc, #84]	; (8001da8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d58:	6613      	str	r3, [r2, #96]	; 0x60
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2101      	movs	r1, #1
 8001d6a:	2019      	movs	r0, #25
 8001d6c:	f001 f9af 	bl	80030ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d70:	2019      	movs	r0, #25
 8001d72:	f001 f9c8 	bl	8003106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d76:	e010      	b.n	8001d9a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d80:	d10b      	bne.n	8001d9a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d86:	4a08      	ldr	r2, [pc, #32]	; (8001da8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
}
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40012c00 	.word	0x40012c00
 8001da8:	40021000 	.word	0x40021000

08001dac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <HAL_TIM_MspPostInit+0xac>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d11e      	bne.n	8001e0c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dce:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <HAL_TIM_MspPostInit+0xb0>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd2:	4a22      	ldr	r2, [pc, #136]	; (8001e5c <HAL_TIM_MspPostInit+0xb0>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dda:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <HAL_TIM_MspPostInit+0xb0>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001de6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	4619      	mov	r1, r3
 8001e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e06:	f001 fe49 	bl	8003a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e0a:	e021      	b.n	8001e50 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e14:	d11c      	bne.n	8001e50 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_TIM_MspPostInit+0xb0>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	4a10      	ldr	r2, [pc, #64]	; (8001e5c <HAL_TIM_MspPostInit+0xb0>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_TIM_MspPostInit+0xb0>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001e2e:	2307      	movs	r3, #7
 8001e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	4619      	mov	r1, r3
 8001e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e4c:	f001 fe26 	bl	8003a9c <HAL_GPIO_Init>
}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	; 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40012c00 	.word	0x40012c00
 8001e5c:	40021000 	.word	0x40021000

08001e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <NMI_Handler+0x4>

08001e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6a:	e7fe      	b.n	8001e6a <HardFault_Handler+0x4>

08001e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <MemManage_Handler+0x4>

08001e72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <BusFault_Handler+0x4>

08001e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <UsageFault_Handler+0x4>

08001e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eac:	f000 fff0 	bl	8002e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  system_led_update();
 8001eb0:	f000 f89c 	bl	8001fec <system_led_update>
  system_debounce();
 8001eb4:	f000 faf2 	bl	800249c <system_debounce>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IN3_Pin);
 8001ec0:	2004      	movs	r0, #4
 8001ec2:	f001 ffaf 	bl	8003e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <DMA1_Channel4_IRQHandler+0x10>)
 8001ed2:	f001 fa8c 	bl	80033ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000cf0 	.word	0x20000cf0

08001ee0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <DMA1_Channel5_IRQHandler+0x10>)
 8001ee6:	f001 fa82 	bl	80033ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000d38 	.word	0x20000d38

08001ef4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IN1_Pin);
 8001ef8:	2040      	movs	r0, #64	; 0x40
 8001efa:	f001 ff93 	bl	8003e24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IN2_Pin);
 8001efe:	2080      	movs	r0, #128	; 0x80
 8001f00:	f001 ff90 	bl	8003e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f0c:	4802      	ldr	r0, [pc, #8]	; (8001f18 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001f0e:	f004 fb3d 	bl	800658c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000dc8 	.word	0x20000dc8

08001f1c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <DMA2_Channel2_IRQHandler+0x10>)
 8001f22:	f001 fa64 	bl	80033ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000d80 	.word	0x20000d80

08001f30 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_quadspi);
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <DMA2_Channel7_IRQHandler+0x10>)
 8001f36:	f001 fa5a 	bl	80033ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000b7c 	.word	0x20000b7c

08001f44 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8001f48:	4802      	ldr	r0, [pc, #8]	; (8001f54 <QUADSPI_IRQHandler+0x10>)
 8001f4a:	f002 f863 	bl	8004014 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000b30 	.word	0x20000b30

08001f58 <__NVIC_SystemReset>:
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001f5c:	f3bf 8f4f 	dsb	sy
}
 8001f60:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <__NVIC_SystemReset+0x24>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001f6a:	4904      	ldr	r1, [pc, #16]	; (8001f7c <__NVIC_SystemReset+0x24>)
 8001f6c:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <__NVIC_SystemReset+0x28>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f72:	f3bf 8f4f 	dsb	sy
}
 8001f76:	bf00      	nop
    __NOP();
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <__NVIC_SystemReset+0x20>
 8001f7c:	e000ed00 	.word	0xe000ed00
 8001f80:	05fa0004 	.word	0x05fa0004

08001f84 <system_init>:
uint8_t pwm_dimm;
uint8_t debounce[3];
uint16_t adc_raw[3];

void system_init ()
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  //Startup things here
  //Check if settings are in CPU flash. If not, program default values in flash
  ReadSettingsFromFlash (FLASH_SETTINGS_PAGE_ADDRESS, &current_settings);
 8001f88:	4908      	ldr	r1, [pc, #32]	; (8001fac <system_init+0x28>)
 8001f8a:	4809      	ldr	r0, [pc, #36]	; (8001fb0 <system_init+0x2c>)
 8001f8c:	f7fe fa1e 	bl	80003cc <ReadSettingsFromFlash>
  if (current_settings.version == 0xFF)
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <system_init+0x28>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2bff      	cmp	r3, #255	; 0xff
 8001f96:	d104      	bne.n	8001fa2 <system_init+0x1e>
    {
      ProgramSettings (&default_settings); //Program default settings to flash
 8001f98:	4806      	ldr	r0, [pc, #24]	; (8001fb4 <system_init+0x30>)
 8001f9a:	f7fe fa03 	bl	80003a4 <ProgramSettings>
      NVIC_SystemReset ();	//Reset
 8001f9e:	f7ff ffdb 	bl	8001f58 <__NVIC_SystemReset>
    }
  system_apply_settings (); //Settings are in array, load them to correct places
 8001fa2:	f000 f809 	bl	8001fb8 <system_apply_settings>
  //Init RGB

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000ea4 	.word	0x20000ea4
 8001fb0:	0803f800 	.word	0x0803f800
 8001fb4:	20000000 	.word	0x20000000

08001fb8 <system_apply_settings>:

void system_apply_settings ()
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  TIM1->PSC = current_settings.pwm_prescaler;
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <system_apply_settings+0x28>)
 8001fbe:	7c9a      	ldrb	r2, [r3, #18]
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <system_apply_settings+0x2c>)
 8001fc2:	629a      	str	r2, [r3, #40]	; 0x28
  TIM2->PSC = current_settings.pwm_prescaler;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <system_apply_settings+0x28>)
 8001fc6:	7c9a      	ldrb	r2, [r3, #18]
 8001fc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fcc:	629a      	str	r2, [r3, #40]	; 0x28
  current_settings.device_id = *((uint32_t*) 0x1FFF7590);
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <system_apply_settings+0x30>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a03      	ldr	r2, [pc, #12]	; (8001fe0 <system_apply_settings+0x28>)
 8001fd4:	6153      	str	r3, [r2, #20]
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	20000ea4 	.word	0x20000ea4
 8001fe4:	40012c00 	.word	0x40012c00
 8001fe8:	1fff7590 	.word	0x1fff7590

08001fec <system_led_update>:

void system_led_update ()
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
  mscounter++;
 8001ff2:	4b4e      	ldr	r3, [pc, #312]	; (800212c <system_led_update+0x140>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	4b4c      	ldr	r3, [pc, #304]	; (800212c <system_led_update+0x140>)
 8001ffc:	801a      	strh	r2, [r3, #0]
  if (mscounter == LED_BLINK_TIM_RATE)
 8001ffe:	4b4b      	ldr	r3, [pc, #300]	; (800212c <system_led_update+0x140>)
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002006:	d122      	bne.n	800204e <system_led_update+0x62>
    {
      for (uint8_t i = 0; i < 8; i++)
 8002008:	2300      	movs	r3, #0
 800200a:	71fb      	strb	r3, [r7, #7]
 800200c:	e019      	b.n	8002042 <system_led_update+0x56>
	{
	  if ((led_toogle_reg >> i) & 1)
 800200e:	4b48      	ldr	r3, [pc, #288]	; (8002130 <system_led_update+0x144>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	fa42 f303 	asr.w	r3, r2, r3
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00c      	beq.n	800203c <system_led_update+0x50>
	    {
	      led_register ^= 1 << i;
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	2201      	movs	r2, #1
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	b25a      	sxtb	r2, r3
 800202c:	4b41      	ldr	r3, [pc, #260]	; (8002134 <system_led_update+0x148>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	b25b      	sxtb	r3, r3
 8002032:	4053      	eors	r3, r2
 8002034:	b25b      	sxtb	r3, r3
 8002036:	b2da      	uxtb	r2, r3
 8002038:	4b3e      	ldr	r3, [pc, #248]	; (8002134 <system_led_update+0x148>)
 800203a:	701a      	strb	r2, [r3, #0]
      for (uint8_t i = 0; i < 8; i++)
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	3301      	adds	r3, #1
 8002040:	71fb      	strb	r3, [r7, #7]
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	2b07      	cmp	r3, #7
 8002046:	d9e2      	bls.n	800200e <system_led_update+0x22>
	    }
	}
      mscounter = 0;
 8002048:	4b38      	ldr	r3, [pc, #224]	; (800212c <system_led_update+0x140>)
 800204a:	2200      	movs	r2, #0
 800204c:	801a      	strh	r2, [r3, #0]
    }
  writeShiftRegister (led_register);
 800204e:	4b39      	ldr	r3, [pc, #228]	; (8002134 <system_led_update+0x148>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f000 f8ee 	bl	8002234 <writeShiftRegister>
  //pwm controll
  if (pwm_dimm >= current_settings.dimming_lenght)
 8002058:	4b37      	ldr	r3, [pc, #220]	; (8002138 <system_led_update+0x14c>)
 800205a:	7cda      	ldrb	r2, [r3, #19]
 800205c:	4b37      	ldr	r3, [pc, #220]	; (800213c <system_led_update+0x150>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d859      	bhi.n	8002118 <system_led_update+0x12c>
    {
      pwm_dimm = 0;
 8002064:	4b35      	ldr	r3, [pc, #212]	; (800213c <system_led_update+0x150>)
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
      if (registers.pwm[0] > TIM2->CCR1)
 800206a:	4b35      	ldr	r3, [pc, #212]	; (8002140 <system_led_update+0x154>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002076:	429a      	cmp	r2, r3
 8002078:	d907      	bls.n	800208a <system_led_update+0x9e>
	{
	  TIM2->CCR1 = TIM2->CCR1 + 1;
 800207a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800207e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002080:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002084:	3301      	adds	r3, #1
 8002086:	6353      	str	r3, [r2, #52]	; 0x34
 8002088:	e00e      	b.n	80020a8 <system_led_update+0xbc>
	}
      else if (registers.pwm[0] < TIM2->CCR1)
 800208a:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <system_led_update+0x154>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002096:	429a      	cmp	r2, r3
 8002098:	d206      	bcs.n	80020a8 <system_led_update+0xbc>
	{
	  TIM2->CCR1 = TIM2->CCR1 - 1;
 800209a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800209e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020a4:	3b01      	subs	r3, #1
 80020a6:	6353      	str	r3, [r2, #52]	; 0x34
	}
      //==============
      if (registers.pwm[1] > TIM2->CCR2)
 80020a8:	4b25      	ldr	r3, [pc, #148]	; (8002140 <system_led_update+0x154>)
 80020aa:	785b      	ldrb	r3, [r3, #1]
 80020ac:	461a      	mov	r2, r3
 80020ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d907      	bls.n	80020c8 <system_led_update+0xdc>
	{
	  TIM2->CCR2 = TIM2->CCR2 + 1;
 80020b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020c2:	3301      	adds	r3, #1
 80020c4:	6393      	str	r3, [r2, #56]	; 0x38
 80020c6:	e00e      	b.n	80020e6 <system_led_update+0xfa>
	}
      else if (registers.pwm[1] < TIM2->CCR2)
 80020c8:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <system_led_update+0x154>)
 80020ca:	785b      	ldrb	r3, [r3, #1]
 80020cc:	461a      	mov	r2, r3
 80020ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d206      	bcs.n	80020e6 <system_led_update+0xfa>
	{
	  TIM2->CCR2 = TIM2->CCR2 - 1;
 80020d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020e2:	3b01      	subs	r3, #1
 80020e4:	6393      	str	r3, [r2, #56]	; 0x38
	}
      //==============
      if (registers.pwm[3] > TIM1->CCR4)
 80020e6:	4b16      	ldr	r3, [pc, #88]	; (8002140 <system_led_update+0x154>)
 80020e8:	78db      	ldrb	r3, [r3, #3]
 80020ea:	461a      	mov	r2, r3
 80020ec:	4b15      	ldr	r3, [pc, #84]	; (8002144 <system_led_update+0x158>)
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d905      	bls.n	8002100 <system_led_update+0x114>
	{
	  TIM1->CCR4 = TIM1->CCR4 + 1;
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <system_led_update+0x158>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	4a12      	ldr	r2, [pc, #72]	; (8002144 <system_led_update+0x158>)
 80020fa:	3301      	adds	r3, #1
 80020fc:	6413      	str	r3, [r2, #64]	; 0x40
 80020fe:	e00b      	b.n	8002118 <system_led_update+0x12c>
	}
      else if (registers.pwm[3] < TIM1->CCR4)
 8002100:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <system_led_update+0x154>)
 8002102:	78db      	ldrb	r3, [r3, #3]
 8002104:	461a      	mov	r2, r3
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <system_led_update+0x158>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	429a      	cmp	r2, r3
 800210c:	d204      	bcs.n	8002118 <system_led_update+0x12c>
	{
	  TIM1->CCR4 = TIM1->CCR4 - 1;
 800210e:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <system_led_update+0x158>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	4a0c      	ldr	r2, [pc, #48]	; (8002144 <system_led_update+0x158>)
 8002114:	3b01      	subs	r3, #1
 8002116:	6413      	str	r3, [r2, #64]	; 0x40
	}
    }
  pwm_dimm++;
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <system_led_update+0x150>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	3301      	adds	r3, #1
 800211e:	b2da      	uxtb	r2, r3
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <system_led_update+0x150>)
 8002122:	701a      	strb	r2, [r3, #0]
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000ed6 	.word	0x20000ed6
 8002130:	20000ed5 	.word	0x20000ed5
 8002134:	20000ed4 	.word	0x20000ed4
 8002138:	20000ea4 	.word	0x20000ea4
 800213c:	20000ed8 	.word	0x20000ed8
 8002140:	20000e6c 	.word	0x20000e6c
 8002144:	40012c00 	.word	0x40012c00

08002148 <system_led>:

void system_led (uint8_t led, uint8_t state)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	460a      	mov	r2, r1
 8002152:	71fb      	strb	r3, [r7, #7]
 8002154:	4613      	mov	r3, r2
 8002156:	71bb      	strb	r3, [r7, #6]
  if (state == LED_STATE_ON)
 8002158:	79bb      	ldrb	r3, [r7, #6]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d11c      	bne.n	8002198 <system_led+0x50>
    {
      led_register |= state << led;
 800215e:	79ba      	ldrb	r2, [r7, #6]
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	b25a      	sxtb	r2, r3
 8002168:	4b30      	ldr	r3, [pc, #192]	; (800222c <system_led+0xe4>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b25b      	sxtb	r3, r3
 800216e:	4313      	orrs	r3, r2
 8002170:	b25b      	sxtb	r3, r3
 8002172:	b2da      	uxtb	r2, r3
 8002174:	4b2d      	ldr	r3, [pc, #180]	; (800222c <system_led+0xe4>)
 8002176:	701a      	strb	r2, [r3, #0]
      led_toogle_reg &= ~(1 << led);
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	2201      	movs	r2, #1
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	b25b      	sxtb	r3, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	b25a      	sxtb	r2, r3
 8002186:	4b2a      	ldr	r3, [pc, #168]	; (8002230 <system_led+0xe8>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	b25b      	sxtb	r3, r3
 800218c:	4013      	ands	r3, r2
 800218e:	b25b      	sxtb	r3, r3
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4b27      	ldr	r3, [pc, #156]	; (8002230 <system_led+0xe8>)
 8002194:	701a      	strb	r2, [r3, #0]
    led_toogle_reg |= 1 << led;
//#define LED_STATE_ON 1
//#define LED_STATE_OFF 2
//#define LED_STATE_BLINK 3
//#define LED_STATE_TOGGLE 4
}
 8002196:	e042      	b.n	800221e <system_led+0xd6>
  else if (state == LED_STATE_OFF)
 8002198:	79bb      	ldrb	r3, [r7, #6]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d11e      	bne.n	80021dc <system_led+0x94>
      led_register &= ~(1 << led);
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	2201      	movs	r2, #1
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	b25b      	sxtb	r3, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	b25a      	sxtb	r2, r3
 80021ac:	4b1f      	ldr	r3, [pc, #124]	; (800222c <system_led+0xe4>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	b25b      	sxtb	r3, r3
 80021b2:	4013      	ands	r3, r2
 80021b4:	b25b      	sxtb	r3, r3
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	4b1c      	ldr	r3, [pc, #112]	; (800222c <system_led+0xe4>)
 80021ba:	701a      	strb	r2, [r3, #0]
      led_toogle_reg &= ~(1 << led);
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	2201      	movs	r2, #1
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	b25b      	sxtb	r3, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	b25a      	sxtb	r2, r3
 80021ca:	4b19      	ldr	r3, [pc, #100]	; (8002230 <system_led+0xe8>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	b25b      	sxtb	r3, r3
 80021d0:	4013      	ands	r3, r2
 80021d2:	b25b      	sxtb	r3, r3
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4b16      	ldr	r3, [pc, #88]	; (8002230 <system_led+0xe8>)
 80021d8:	701a      	strb	r2, [r3, #0]
}
 80021da:	e020      	b.n	800221e <system_led+0xd6>
  else if (state == LED_STATE_TOGGLE)
 80021dc:	79bb      	ldrb	r3, [r7, #6]
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d10d      	bne.n	80021fe <system_led+0xb6>
      led_register ^= 1 << led;
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	2201      	movs	r2, #1
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	b25a      	sxtb	r2, r3
 80021ec:	4b0f      	ldr	r3, [pc, #60]	; (800222c <system_led+0xe4>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	b25b      	sxtb	r3, r3
 80021f2:	4053      	eors	r3, r2
 80021f4:	b25b      	sxtb	r3, r3
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <system_led+0xe4>)
 80021fa:	701a      	strb	r2, [r3, #0]
}
 80021fc:	e00f      	b.n	800221e <system_led+0xd6>
  else if (state == LED_STATE_BLINK)
 80021fe:	79bb      	ldrb	r3, [r7, #6]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d10c      	bne.n	800221e <system_led+0xd6>
    led_toogle_reg |= 1 << led;
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	2201      	movs	r2, #1
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	b25a      	sxtb	r2, r3
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <system_led+0xe8>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	b25b      	sxtb	r3, r3
 8002214:	4313      	orrs	r3, r2
 8002216:	b25b      	sxtb	r3, r3
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <system_led+0xe8>)
 800221c:	701a      	strb	r2, [r3, #0]
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000ed4 	.word	0x20000ed4
 8002230:	20000ed5 	.word	0x20000ed5

08002234 <writeShiftRegister>:
void writeShiftRegister (uint8_t data)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin (LED_LATCH_GPIO_Port, LED_LATCH_Pin, RESET);
 800223e:	2200      	movs	r2, #0
 8002240:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002244:	481b      	ldr	r0, [pc, #108]	; (80022b4 <writeShiftRegister+0x80>)
 8002246:	f001 fdbb 	bl	8003dc0 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++)
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	e023      	b.n	8002298 <writeShiftRegister+0x64>
    {
      HAL_GPIO_WritePin (LED_CLOCK_GPIO_Port, LED_CLOCK_Pin, RESET);
 8002250:	2200      	movs	r2, #0
 8002252:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002256:	4817      	ldr	r0, [pc, #92]	; (80022b4 <writeShiftRegister+0x80>)
 8002258:	f001 fdb2 	bl	8003dc0 <HAL_GPIO_WritePin>
      if (data & (1 << i))
 800225c:	79fa      	ldrb	r2, [r7, #7]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	fa42 f303 	asr.w	r3, r2, r3
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d006      	beq.n	800227a <writeShiftRegister+0x46>
	{ 	//Send data
		// Data pin high
	  HAL_GPIO_WritePin (LED_DATA_GPIO_Port, LED_DATA_Pin, SET);
 800226c:	2201      	movs	r2, #1
 800226e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002272:	4810      	ldr	r0, [pc, #64]	; (80022b4 <writeShiftRegister+0x80>)
 8002274:	f001 fda4 	bl	8003dc0 <HAL_GPIO_WritePin>
 8002278:	e005      	b.n	8002286 <writeShiftRegister+0x52>
	}
      else
	{
	  // Data pin low
	  HAL_GPIO_WritePin (LED_DATA_GPIO_Port, LED_DATA_Pin, RESET);
 800227a:	2200      	movs	r2, #0
 800227c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002280:	480c      	ldr	r0, [pc, #48]	; (80022b4 <writeShiftRegister+0x80>)
 8002282:	f001 fd9d 	bl	8003dc0 <HAL_GPIO_WritePin>
	}
      HAL_GPIO_WritePin (LED_CLOCK_GPIO_Port, LED_CLOCK_Pin, SET);
 8002286:	2201      	movs	r2, #1
 8002288:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800228c:	4809      	ldr	r0, [pc, #36]	; (80022b4 <writeShiftRegister+0x80>)
 800228e:	f001 fd97 	bl	8003dc0 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	3301      	adds	r3, #1
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2b07      	cmp	r3, #7
 800229c:	ddd8      	ble.n	8002250 <writeShiftRegister+0x1c>
    }
  HAL_GPIO_WritePin (LED_LATCH_GPIO_Port, LED_LATCH_Pin, SET);
 800229e:	2201      	movs	r2, #1
 80022a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022a4:	4803      	ldr	r0, [pc, #12]	; (80022b4 <writeShiftRegister+0x80>)
 80022a6:	f001 fd8b 	bl	8003dc0 <HAL_GPIO_WritePin>
}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	48000800 	.word	0x48000800

080022b8 <system_drive_output>:

void system_drive_output (uint8_t output, uint8_t value)
{
 80022b8:	b590      	push	{r4, r7, lr}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	460a      	mov	r2, r1
 80022c2:	71fb      	strb	r3, [r7, #7]
 80022c4:	4613      	mov	r3, r2
 80022c6:	71bb      	strb	r3, [r7, #6]
  if (output == OUTPUT_1 || output == OUTPUT_2 || output == OUTPUT_3)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <system_drive_output+0x22>
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d002      	beq.n	80022da <system_drive_output+0x22>
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d179      	bne.n	80023ce <system_drive_output+0x116>
    {
      Console_INFO ("Output change. Output: %d. value: %d", output, value);
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	79ba      	ldrb	r2, [r7, #6]
 80022de:	4619      	mov	r1, r3
 80022e0:	4851      	ldr	r0, [pc, #324]	; (8002428 <system_drive_output+0x170>)
 80022e2:	f7fd ffcd 	bl	8000280 <Console_INFO>
      if (value == 0 || value == 1) //On or off
 80022e6:	79bb      	ldrb	r3, [r7, #6]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <system_drive_output+0x3a>
 80022ec:	79bb      	ldrb	r3, [r7, #6]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d126      	bne.n	8002340 <system_drive_output+0x88>
	{
	  system_led (output, value);
 80022f2:	79ba      	ldrb	r2, [r7, #6]
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff25 	bl	8002148 <system_led>
	  if (output == OUTPUT_1)
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d105      	bne.n	8002310 <system_drive_output+0x58>
	    HAL_GPIO_WritePin (DOUT1_GPIO_Port, DOUT1_Pin, value);
 8002304:	79bb      	ldrb	r3, [r7, #6]
 8002306:	461a      	mov	r2, r3
 8002308:	2101      	movs	r1, #1
 800230a:	4848      	ldr	r0, [pc, #288]	; (800242c <system_drive_output+0x174>)
 800230c:	f001 fd58 	bl	8003dc0 <HAL_GPIO_WritePin>
	  if (output == OUTPUT_2)
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d105      	bne.n	8002322 <system_drive_output+0x6a>
	    HAL_GPIO_WritePin (DOUT2_GPIO_Port, DOUT2_Pin, value);
 8002316:	79bb      	ldrb	r3, [r7, #6]
 8002318:	461a      	mov	r2, r3
 800231a:	2102      	movs	r1, #2
 800231c:	4843      	ldr	r0, [pc, #268]	; (800242c <system_drive_output+0x174>)
 800231e:	f001 fd4f 	bl	8003dc0 <HAL_GPIO_WritePin>
	  if (output == OUTPUT_3)
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d106      	bne.n	8002336 <system_drive_output+0x7e>
	    HAL_GPIO_WritePin (DOUT3_GPIO_Port, DOUT3_Pin, value);
 8002328:	79bb      	ldrb	r3, [r7, #6]
 800232a:	461a      	mov	r2, r3
 800232c:	2110      	movs	r1, #16
 800232e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002332:	f001 fd45 	bl	8003dc0 <HAL_GPIO_WritePin>
	  registers.output[output] = value;
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	4a3d      	ldr	r2, [pc, #244]	; (8002430 <system_drive_output+0x178>)
 800233a:	4413      	add	r3, r2
 800233c:	79ba      	ldrb	r2, [r7, #6]
 800233e:	72da      	strb	r2, [r3, #11]
	}
      if (value == 3) //toogle
 8002340:	79bb      	ldrb	r3, [r7, #6]
 8002342:	2b03      	cmp	r3, #3
 8002344:	d143      	bne.n	80023ce <system_drive_output+0x116>
	{
	  if (output == OUTPUT_1)
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d112      	bne.n	8002372 <system_drive_output+0xba>
	    {
	      HAL_GPIO_TogglePin (DOUT1_GPIO_Port, DOUT1_Pin);
 800234c:	2101      	movs	r1, #1
 800234e:	4837      	ldr	r0, [pc, #220]	; (800242c <system_drive_output+0x174>)
 8002350:	f001 fd4e 	bl	8003df0 <HAL_GPIO_TogglePin>
	      registers.output[output] = HAL_GPIO_ReadPin (DOUT1_GPIO_Port,
 8002354:	79fc      	ldrb	r4, [r7, #7]
 8002356:	2101      	movs	r1, #1
 8002358:	4834      	ldr	r0, [pc, #208]	; (800242c <system_drive_output+0x174>)
 800235a:	f001 fd19 	bl	8003d90 <HAL_GPIO_ReadPin>
 800235e:	4603      	mov	r3, r0
 8002360:	461a      	mov	r2, r3
 8002362:	4b33      	ldr	r3, [pc, #204]	; (8002430 <system_drive_output+0x178>)
 8002364:	4423      	add	r3, r4
 8002366:	72da      	strb	r2, [r3, #11]
	      DOUT1_Pin);
	      system_led (output, LED_STATE_TOGGLE);
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	2103      	movs	r1, #3
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff feeb 	bl	8002148 <system_led>
	    }
	  if (output == OUTPUT_2)
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d112      	bne.n	800239e <system_drive_output+0xe6>
	    {
	      HAL_GPIO_TogglePin (DOUT2_GPIO_Port, DOUT2_Pin);
 8002378:	2102      	movs	r1, #2
 800237a:	482c      	ldr	r0, [pc, #176]	; (800242c <system_drive_output+0x174>)
 800237c:	f001 fd38 	bl	8003df0 <HAL_GPIO_TogglePin>
	      registers.output[output] = HAL_GPIO_ReadPin (DOUT2_GPIO_Port,
 8002380:	79fc      	ldrb	r4, [r7, #7]
 8002382:	2102      	movs	r1, #2
 8002384:	4829      	ldr	r0, [pc, #164]	; (800242c <system_drive_output+0x174>)
 8002386:	f001 fd03 	bl	8003d90 <HAL_GPIO_ReadPin>
 800238a:	4603      	mov	r3, r0
 800238c:	461a      	mov	r2, r3
 800238e:	4b28      	ldr	r3, [pc, #160]	; (8002430 <system_drive_output+0x178>)
 8002390:	4423      	add	r3, r4
 8002392:	72da      	strb	r2, [r3, #11]
	      DOUT2_Pin);
	      system_led (output, LED_STATE_TOGGLE);
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	2103      	movs	r1, #3
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fed5 	bl	8002148 <system_led>
	    }
	  if (output == OUTPUT_3)
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d114      	bne.n	80023ce <system_drive_output+0x116>
	    {
	      HAL_GPIO_TogglePin (DOUT3_GPIO_Port, DOUT3_Pin);
 80023a4:	2110      	movs	r1, #16
 80023a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023aa:	f001 fd21 	bl	8003df0 <HAL_GPIO_TogglePin>
	      registers.output[output] = HAL_GPIO_ReadPin (DOUT3_GPIO_Port,
 80023ae:	79fc      	ldrb	r4, [r7, #7]
 80023b0:	2110      	movs	r1, #16
 80023b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023b6:	f001 fceb 	bl	8003d90 <HAL_GPIO_ReadPin>
 80023ba:	4603      	mov	r3, r0
 80023bc:	461a      	mov	r2, r3
 80023be:	4b1c      	ldr	r3, [pc, #112]	; (8002430 <system_drive_output+0x178>)
 80023c0:	4423      	add	r3, r4
 80023c2:	72da      	strb	r2, [r3, #11]
	      DOUT3_Pin);
	      system_led (output, LED_STATE_TOGGLE);
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	2103      	movs	r1, #3
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff febd 	bl	8002148 <system_led>
	    }
	}
    }

  if (output == OUTPUT_PWM1 || output == OUTPUT_PWM2 || output == OUTPUT_PWM3
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d008      	beq.n	80023e6 <system_drive_output+0x12e>
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d005      	beq.n	80023e6 <system_drive_output+0x12e>
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	2b05      	cmp	r3, #5
 80023de:	d002      	beq.n	80023e6 <system_drive_output+0x12e>
      || output == OUTPUT_PWM4)
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	2b06      	cmp	r3, #6
 80023e4:	d11b      	bne.n	800241e <system_drive_output+0x166>
    {
      if (value == 0)
 80023e6:	79bb      	ldrb	r3, [r7, #6]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d105      	bne.n	80023f8 <system_drive_output+0x140>
	system_led (output, LED_STATE_OFF); //PWM is on, let's blink LED
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	2100      	movs	r1, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fea9 	bl	8002148 <system_led>
 80023f6:	e00d      	b.n	8002414 <system_drive_output+0x15c>
      else if (value == 100)
 80023f8:	79bb      	ldrb	r3, [r7, #6]
 80023fa:	2b64      	cmp	r3, #100	; 0x64
 80023fc:	d105      	bne.n	800240a <system_drive_output+0x152>
	system_led (output, LED_STATE_ON);
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	2101      	movs	r1, #1
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fea0 	bl	8002148 <system_led>
 8002408:	e004      	b.n	8002414 <system_drive_output+0x15c>
      else
	system_led (output, LED_STATE_BLINK);
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	2102      	movs	r1, #2
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fe9a 	bl	8002148 <system_led>
      registers.pwm[output - 3] = value;
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	3b03      	subs	r3, #3
 8002418:	4905      	ldr	r1, [pc, #20]	; (8002430 <system_drive_output+0x178>)
 800241a:	79ba      	ldrb	r2, [r7, #6]
 800241c:	54ca      	strb	r2, [r1, r3]
    }
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	bd90      	pop	{r4, r7, pc}
 8002426:	bf00      	nop
 8002428:	08014f8c 	.word	0x08014f8c
 800242c:	48001c00 	.word	0x48001c00
 8002430:	20000e6c 	.word	0x20000e6c

08002434 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	80fb      	strh	r3, [r7, #6]
  uint8_t out_to_drive;
  if (GPIO_Pin == IN1_Pin)
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	2b40      	cmp	r3, #64	; 0x40
 8002442:	d101      	bne.n	8002448 <HAL_GPIO_EXTI_Callback+0x14>
    out_to_drive = OUTPUT_1;
 8002444:	2300      	movs	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]
  if (GPIO_Pin == IN2_Pin)
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	2b80      	cmp	r3, #128	; 0x80
 800244c:	d101      	bne.n	8002452 <HAL_GPIO_EXTI_Callback+0x1e>
    out_to_drive = OUTPUT_2;
 800244e:	2301      	movs	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
  if (GPIO_Pin == IN3_Pin)
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	2b04      	cmp	r3, #4
 8002456:	d101      	bne.n	800245c <HAL_GPIO_EXTI_Callback+0x28>
    out_to_drive = OUTPUT_3;
 8002458:	2302      	movs	r3, #2
 800245a:	73fb      	strb	r3, [r7, #15]

  if (debounce[out_to_drive] == 0)
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	4a0d      	ldr	r2, [pc, #52]	; (8002494 <HAL_GPIO_EXTI_Callback+0x60>)
 8002460:	5cd3      	ldrb	r3, [r2, r3]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d109      	bne.n	800247a <HAL_GPIO_EXTI_Callback+0x46>
    {
      system_drive_output (out_to_drive, LED_STATE_TOGGLE);
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	2103      	movs	r1, #3
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff ff24 	bl	80022b8 <system_drive_output>
      debounce[out_to_drive] = DEBOUNCE_LENGHT;
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	4a08      	ldr	r2, [pc, #32]	; (8002494 <HAL_GPIO_EXTI_Callback+0x60>)
 8002474:	2114      	movs	r1, #20
 8002476:	54d1      	strb	r1, [r2, r3]
    }
  else
    {
      error.debounce[out_to_drive]++;
    }
}
 8002478:	e008      	b.n	800248c <HAL_GPIO_EXTI_Callback+0x58>
      error.debounce[out_to_drive]++;
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	4a06      	ldr	r2, [pc, #24]	; (8002498 <HAL_GPIO_EXTI_Callback+0x64>)
 800247e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002482:	3201      	adds	r2, #1
 8002484:	b291      	uxth	r1, r2
 8002486:	4a04      	ldr	r2, [pc, #16]	; (8002498 <HAL_GPIO_EXTI_Callback+0x64>)
 8002488:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20000edc 	.word	0x20000edc
 8002498:	20000e9c 	.word	0x20000e9c

0800249c <system_debounce>:

void system_debounce ()
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < 3; i++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	71fb      	strb	r3, [r7, #7]
 80024a6:	e00e      	b.n	80024c6 <system_debounce+0x2a>
    {
      if (debounce[i] > 0)
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	4a0c      	ldr	r2, [pc, #48]	; (80024dc <system_debounce+0x40>)
 80024ac:	5cd3      	ldrb	r3, [r2, r3]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d006      	beq.n	80024c0 <system_debounce+0x24>
	{
	  debounce[i]--;
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	4a09      	ldr	r2, [pc, #36]	; (80024dc <system_debounce+0x40>)
 80024b6:	5cd2      	ldrb	r2, [r2, r3]
 80024b8:	3a01      	subs	r2, #1
 80024ba:	b2d1      	uxtb	r1, r2
 80024bc:	4a07      	ldr	r2, [pc, #28]	; (80024dc <system_debounce+0x40>)
 80024be:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < 3; i++)
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	3301      	adds	r3, #1
 80024c4:	71fb      	strb	r3, [r7, #7]
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d9ed      	bls.n	80024a8 <system_debounce+0xc>
	}
    }
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000edc 	.word	0x20000edc

080024e0 <system_read_adc>:
{
  //todo i think this can be removed lol system_led(0,LED_STATE_TOGGLE);
}

uint16_t system_read_adc (SPI_HandleTypeDef *spi, uint8_t channel)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af02      	add	r7, sp, #8
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	70fb      	strb	r3, [r7, #3]

  // Declare data that we will send
  uint8_t pTxData[3] =
 80024ec:	4b23      	ldr	r3, [pc, #140]	; (800257c <system_read_adc+0x9c>)
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	81bb      	strh	r3, [r7, #12]
 80024f2:	2300      	movs	r3, #0
 80024f4:	73bb      	strb	r3, [r7, #14]
    { 0 };
  pTxData[0] = ((0x01 << 7) |		// start bit
      (1 << 6) |			// SGL
      ((channel & 0x07) << 3)); 	// channel number
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	b25b      	sxtb	r3, r3
 80024fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002500:	b25b      	sxtb	r3, r3
      (1 << 6) |			// SGL
 8002502:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002506:	b25b      	sxtb	r3, r3
 8002508:	b2db      	uxtb	r3, r3
  pTxData[0] = ((0x01 << 7) |		// start bit
 800250a:	733b      	strb	r3, [r7, #12]
  pTxData[1] = 0x00;
 800250c:	2300      	movs	r3, #0
 800250e:	737b      	strb	r3, [r7, #13]
  pTxData[2] = 0x00;
 8002510:	2300      	movs	r3, #0
 8002512:	73bb      	strb	r3, [r7, #14]

  // Data that we will get
  uint8_t pRxData[3] =
 8002514:	4b19      	ldr	r3, [pc, #100]	; (800257c <system_read_adc+0x9c>)
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	813b      	strh	r3, [r7, #8]
 800251a:	2300      	movs	r3, #0
 800251c:	72bb      	strb	r3, [r7, #10]
    { 0 };

  // CS low, Send and receive, CS high
  HAL_GPIO_WritePin (CS_ADC_GPIO_Port, CS_ADC_Pin, RESET);
 800251e:	2200      	movs	r2, #0
 8002520:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002524:	4816      	ldr	r0, [pc, #88]	; (8002580 <system_read_adc+0xa0>)
 8002526:	f001 fc4b 	bl	8003dc0 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive (spi, &pTxData, &pRxData, 3, 10);
 800252a:	f107 0208 	add.w	r2, r7, #8
 800252e:	f107 010c 	add.w	r1, r7, #12
 8002532:	230a      	movs	r3, #10
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	2303      	movs	r3, #3
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f003 f92e 	bl	800579a <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin (CS_ADC_GPIO_Port, CS_ADC_Pin, SET);
 800253e:	2201      	movs	r2, #1
 8002540:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002544:	480e      	ldr	r0, [pc, #56]	; (8002580 <system_read_adc+0xa0>)
 8002546:	f001 fc3b 	bl	8003dc0 <HAL_GPIO_WritePin>

  // Compute the ADC
  return 0x3FF
      & ((pRxData[0] & 0x01) << 9 | (pRxData[1] & 0xFF) << 1
 800254a:	7a3b      	ldrb	r3, [r7, #8]
 800254c:	025b      	lsls	r3, r3, #9
 800254e:	b21b      	sxth	r3, r3
 8002550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002554:	b21a      	sxth	r2, r3
 8002556:	7a7b      	ldrb	r3, [r7, #9]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	b21b      	sxth	r3, r3
 800255c:	4313      	orrs	r3, r2
 800255e:	b21a      	sxth	r2, r3
	  | (pRxData[2] & 0x80) >> 7);
 8002560:	7abb      	ldrb	r3, [r7, #10]
 8002562:	09db      	lsrs	r3, r3, #7
 8002564:	b2db      	uxtb	r3, r3
 8002566:	b21b      	sxth	r3, r3
 8002568:	4313      	orrs	r3, r2
 800256a:	b21b      	sxth	r3, r3
      & ((pRxData[0] & 0x01) << 9 | (pRxData[1] & 0xFF) << 1
 800256c:	b29b      	uxth	r3, r3
 800256e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002572:	b29b      	uxth	r3, r3
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	08014fb4 	.word	0x08014fb4
 8002580:	48000400 	.word	0x48000400

08002584 <system_check_state>:

//Check if any IO changed status. If so, public change over mqtt
void system_check_state (mqtt_client_t *client)
{
 8002584:	b590      	push	{r4, r7, lr}
 8002586:	b0a9      	sub	sp, #164	; 0xa4
 8002588:	af04      	add	r7, sp, #16
 800258a:	6078      	str	r0, [r7, #4]

  char topic[64];
  char payload[64];

  //------------------ADC-----------------//
  for (uint8_t i = 0; i < 3; i++)
 800258c:	2300      	movs	r3, #0
 800258e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8002592:	e064      	b.n	800265e <system_check_state+0xda>
    {
      registers_tmp.adc[i] = system_read_adc (&hspi2, i);
 8002594:	f897 408f 	ldrb.w	r4, [r7, #143]	; 0x8f
 8002598:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800259c:	4619      	mov	r1, r3
 800259e:	4861      	ldr	r0, [pc, #388]	; (8002724 <system_check_state+0x1a0>)
 80025a0:	f7ff ff9e 	bl	80024e0 <system_read_adc>
 80025a4:	4603      	mov	r3, r0
 80025a6:	4619      	mov	r1, r3
 80025a8:	4a5f      	ldr	r2, [pc, #380]	; (8002728 <system_check_state+0x1a4>)
 80025aa:	1d23      	adds	r3, r4, #4
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4413      	add	r3, r2
 80025b0:	460a      	mov	r2, r1
 80025b2:	80da      	strh	r2, [r3, #6]
      if (registers_tmp.adc[i] != registers.adc[i])
 80025b4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80025b8:	4a5b      	ldr	r2, [pc, #364]	; (8002728 <system_check_state+0x1a4>)
 80025ba:	3304      	adds	r3, #4
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	88da      	ldrh	r2, [r3, #6]
 80025c2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80025c6:	4959      	ldr	r1, [pc, #356]	; (800272c <system_check_state+0x1a8>)
 80025c8:	3304      	adds	r3, #4
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	440b      	add	r3, r1
 80025ce:	88db      	ldrh	r3, [r3, #6]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d03f      	beq.n	8002654 <system_check_state+0xd0>
	{
	  registers.adc[i] = registers_tmp.adc[i];
 80025d4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80025d8:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80025dc:	4952      	ldr	r1, [pc, #328]	; (8002728 <system_check_state+0x1a4>)
 80025de:	3304      	adds	r3, #4
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	440b      	add	r3, r1
 80025e4:	88d8      	ldrh	r0, [r3, #6]
 80025e6:	4951      	ldr	r1, [pc, #324]	; (800272c <system_check_state+0x1a8>)
 80025e8:	1d13      	adds	r3, r2, #4
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	440b      	add	r3, r1
 80025ee:	4602      	mov	r2, r0
 80025f0:	80da      	strh	r2, [r3, #6]
	  sprintf (topic, "%s/OUTPUT/ADC%d/", current_settings.device_name,
 80025f2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80025f6:	3301      	adds	r3, #1
 80025f8:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80025fc:	4a4c      	ldr	r2, [pc, #304]	; (8002730 <system_check_state+0x1ac>)
 80025fe:	494d      	ldr	r1, [pc, #308]	; (8002734 <system_check_state+0x1b0>)
 8002600:	f011 f85c 	bl	80136bc <siprintf>
		   i + 1);
	  sprintf (payload, "%d", registers_tmp.adc[i]);
 8002604:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002608:	4a47      	ldr	r2, [pc, #284]	; (8002728 <system_check_state+0x1a4>)
 800260a:	3304      	adds	r3, #4
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4413      	add	r3, r2
 8002610:	88db      	ldrh	r3, [r3, #6]
 8002612:	461a      	mov	r2, r3
 8002614:	f107 030c 	add.w	r3, r7, #12
 8002618:	4947      	ldr	r1, [pc, #284]	; (8002738 <system_check_state+0x1b4>)
 800261a:	4618      	mov	r0, r3
 800261c:	f011 f84e 	bl	80136bc <siprintf>
	  mqtt_publish (client, topic, payload, strlen (payload), 0, 0,
 8002620:	f107 030c 	add.w	r3, r7, #12
 8002624:	4618      	mov	r0, r3
 8002626:	f7fd fdd3 	bl	80001d0 <strlen>
 800262a:	4603      	mov	r3, r0
 800262c:	b29b      	uxth	r3, r3
 800262e:	f107 020c 	add.w	r2, r7, #12
 8002632:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002636:	2000      	movs	r0, #0
 8002638:	9003      	str	r0, [sp, #12]
 800263a:	4840      	ldr	r0, [pc, #256]	; (800273c <system_check_state+0x1b8>)
 800263c:	9002      	str	r0, [sp, #8]
 800263e:	2000      	movs	r0, #0
 8002640:	9001      	str	r0, [sp, #4]
 8002642:	2000      	movs	r0, #0
 8002644:	9000      	str	r0, [sp, #0]
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f006 f832 	bl	80086b0 <mqtt_publish>
			mqtt_pub_finished, NULL);
	  mch_net_poll ();
 800264c:	f7fe f886 	bl	800075c <mch_net_poll>
	  sys_check_timeouts ();
 8002650:	f00d f8e2 	bl	800f818 <sys_check_timeouts>
  for (uint8_t i = 0; i < 3; i++)
 8002654:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002658:	3301      	adds	r3, #1
 800265a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800265e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002662:	2b02      	cmp	r3, #2
 8002664:	d996      	bls.n	8002594 <system_check_state+0x10>
	}
    }

  //------------------DOUT-----------------//
  for (uint8_t i = 0; i < 3; i++)
 8002666:	2300      	movs	r3, #0
 8002668:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800266c:	e052      	b.n	8002714 <system_check_state+0x190>
    {
      if (registers_tmp.output[i] != registers.output[i])
 800266e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002672:	4a2d      	ldr	r2, [pc, #180]	; (8002728 <system_check_state+0x1a4>)
 8002674:	4413      	add	r3, r2
 8002676:	7ada      	ldrb	r2, [r3, #11]
 8002678:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800267c:	492b      	ldr	r1, [pc, #172]	; (800272c <system_check_state+0x1a8>)
 800267e:	440b      	add	r3, r1
 8002680:	7adb      	ldrb	r3, [r3, #11]
 8002682:	429a      	cmp	r2, r3
 8002684:	d041      	beq.n	800270a <system_check_state+0x186>
	{
	  registers_tmp.output[i] = registers.output[i];
 8002686:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800268a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800268e:	4927      	ldr	r1, [pc, #156]	; (800272c <system_check_state+0x1a8>)
 8002690:	440a      	add	r2, r1
 8002692:	7ad1      	ldrb	r1, [r2, #11]
 8002694:	4a24      	ldr	r2, [pc, #144]	; (8002728 <system_check_state+0x1a4>)
 8002696:	4413      	add	r3, r2
 8002698:	460a      	mov	r2, r1
 800269a:	72da      	strb	r2, [r3, #11]
	  sprintf (topic, "%s/OUTPUT/DOUT%d/", current_settings.device_name,
 800269c:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80026a0:	3301      	adds	r3, #1
 80026a2:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80026a6:	4a22      	ldr	r2, [pc, #136]	; (8002730 <system_check_state+0x1ac>)
 80026a8:	4925      	ldr	r1, [pc, #148]	; (8002740 <system_check_state+0x1bc>)
 80026aa:	f011 f807 	bl	80136bc <siprintf>
		   i + 1);
	  if (registers.output[i] == 1)
 80026ae:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80026b2:	4a1e      	ldr	r2, [pc, #120]	; (800272c <system_check_state+0x1a8>)
 80026b4:	4413      	add	r3, r2
 80026b6:	7adb      	ldrb	r3, [r3, #11]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d106      	bne.n	80026ca <system_check_state+0x146>
	    sprintf (payload, "ON");
 80026bc:	f107 030c 	add.w	r3, r7, #12
 80026c0:	4920      	ldr	r1, [pc, #128]	; (8002744 <system_check_state+0x1c0>)
 80026c2:	4618      	mov	r0, r3
 80026c4:	f010 fffa 	bl	80136bc <siprintf>
 80026c8:	e005      	b.n	80026d6 <system_check_state+0x152>
	  else
	    sprintf (payload, "OFF");
 80026ca:	f107 030c 	add.w	r3, r7, #12
 80026ce:	491e      	ldr	r1, [pc, #120]	; (8002748 <system_check_state+0x1c4>)
 80026d0:	4618      	mov	r0, r3
 80026d2:	f010 fff3 	bl	80136bc <siprintf>
	  mqtt_publish (client, topic, payload, strlen (payload), 0, 0,
 80026d6:	f107 030c 	add.w	r3, r7, #12
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd fd78 	bl	80001d0 <strlen>
 80026e0:	4603      	mov	r3, r0
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	f107 020c 	add.w	r2, r7, #12
 80026e8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80026ec:	2000      	movs	r0, #0
 80026ee:	9003      	str	r0, [sp, #12]
 80026f0:	4812      	ldr	r0, [pc, #72]	; (800273c <system_check_state+0x1b8>)
 80026f2:	9002      	str	r0, [sp, #8]
 80026f4:	2000      	movs	r0, #0
 80026f6:	9001      	str	r0, [sp, #4]
 80026f8:	2000      	movs	r0, #0
 80026fa:	9000      	str	r0, [sp, #0]
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f005 ffd7 	bl	80086b0 <mqtt_publish>
			mqtt_pub_finished, NULL);
	  mch_net_poll ();
 8002702:	f7fe f82b 	bl	800075c <mch_net_poll>
	  sys_check_timeouts ();
 8002706:	f00d f887 	bl	800f818 <sys_check_timeouts>
  for (uint8_t i = 0; i < 3; i++)
 800270a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800270e:	3301      	adds	r3, #1
 8002710:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8002714:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002718:	2b02      	cmp	r3, #2
 800271a:	d9a8      	bls.n	800266e <system_check_state+0xea>
	}
    }

  //------------------PWM-----------------//
  for (uint8_t i = 0; i < 4; i++)
 800271c:	2300      	movs	r3, #0
 800271e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 8002722:	e058      	b.n	80027d6 <system_check_state+0x252>
 8002724:	20000c28 	.word	0x20000c28
 8002728:	20000e84 	.word	0x20000e84
 800272c:	20000e6c 	.word	0x20000e6c
 8002730:	20000ebc 	.word	0x20000ebc
 8002734:	08014fb8 	.word	0x08014fb8
 8002738:	08014fcc 	.word	0x08014fcc
 800273c:	08002bc5 	.word	0x08002bc5
 8002740:	08014fd0 	.word	0x08014fd0
 8002744:	08014fe4 	.word	0x08014fe4
 8002748:	08014fe8 	.word	0x08014fe8
    {
      if (registers_tmp.pwm[i] != registers.pwm[i])
 800274c:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002750:	4abc      	ldr	r2, [pc, #752]	; (8002a44 <system_check_state+0x4c0>)
 8002752:	5cd2      	ldrb	r2, [r2, r3]
 8002754:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002758:	49bb      	ldr	r1, [pc, #748]	; (8002a48 <system_check_state+0x4c4>)
 800275a:	5ccb      	ldrb	r3, [r1, r3]
 800275c:	429a      	cmp	r2, r3
 800275e:	d035      	beq.n	80027cc <system_check_state+0x248>
	{
	  registers_tmp.pwm[i] = registers.pwm[i];
 8002760:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 8002764:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002768:	49b7      	ldr	r1, [pc, #732]	; (8002a48 <system_check_state+0x4c4>)
 800276a:	5c89      	ldrb	r1, [r1, r2]
 800276c:	4ab5      	ldr	r2, [pc, #724]	; (8002a44 <system_check_state+0x4c0>)
 800276e:	54d1      	strb	r1, [r2, r3]
	  sprintf (topic, "%s/OUTPUT/PWM%d/", current_settings.device_name,
 8002770:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002774:	3301      	adds	r3, #1
 8002776:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800277a:	4ab4      	ldr	r2, [pc, #720]	; (8002a4c <system_check_state+0x4c8>)
 800277c:	49b4      	ldr	r1, [pc, #720]	; (8002a50 <system_check_state+0x4cc>)
 800277e:	f010 ff9d 	bl	80136bc <siprintf>
		   i + 1);
	  sprintf (payload, "%d", registers.pwm[i]);
 8002782:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002786:	4ab0      	ldr	r2, [pc, #704]	; (8002a48 <system_check_state+0x4c4>)
 8002788:	5cd3      	ldrb	r3, [r2, r3]
 800278a:	461a      	mov	r2, r3
 800278c:	f107 030c 	add.w	r3, r7, #12
 8002790:	49b0      	ldr	r1, [pc, #704]	; (8002a54 <system_check_state+0x4d0>)
 8002792:	4618      	mov	r0, r3
 8002794:	f010 ff92 	bl	80136bc <siprintf>
	  ;
	  mqtt_publish (client, topic, payload, strlen (payload), 0, 0,
 8002798:	f107 030c 	add.w	r3, r7, #12
 800279c:	4618      	mov	r0, r3
 800279e:	f7fd fd17 	bl	80001d0 <strlen>
 80027a2:	4603      	mov	r3, r0
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f107 020c 	add.w	r2, r7, #12
 80027aa:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80027ae:	2000      	movs	r0, #0
 80027b0:	9003      	str	r0, [sp, #12]
 80027b2:	48a9      	ldr	r0, [pc, #676]	; (8002a58 <system_check_state+0x4d4>)
 80027b4:	9002      	str	r0, [sp, #8]
 80027b6:	2000      	movs	r0, #0
 80027b8:	9001      	str	r0, [sp, #4]
 80027ba:	2000      	movs	r0, #0
 80027bc:	9000      	str	r0, [sp, #0]
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f005 ff76 	bl	80086b0 <mqtt_publish>
			mqtt_pub_finished, NULL);
	  mch_net_poll ();
 80027c4:	f7fd ffca 	bl	800075c <mch_net_poll>
	  sys_check_timeouts ();
 80027c8:	f00d f826 	bl	800f818 <sys_check_timeouts>
  for (uint8_t i = 0; i < 4; i++)
 80027cc:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80027d0:	3301      	adds	r3, #1
 80027d2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 80027d6:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d9b6      	bls.n	800274c <system_check_state+0x1c8>
	}
    }
  //----------------------SETTINGS-------------//
  if (flag_send_settings == 1)
 80027de:	4b9f      	ldr	r3, [pc, #636]	; (8002a5c <system_check_state+0x4d8>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	f040 81d7 	bne.w	8002b96 <system_check_state+0x612>
    {
      flag_send_settings = 0;
 80027e8:	4b9c      	ldr	r3, [pc, #624]	; (8002a5c <system_check_state+0x4d8>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
      sprintf (topic, "%s/SETTINGS/IP/", current_settings.device_name);
 80027ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027f2:	4a96      	ldr	r2, [pc, #600]	; (8002a4c <system_check_state+0x4c8>)
 80027f4:	499a      	ldr	r1, [pc, #616]	; (8002a60 <system_check_state+0x4dc>)
 80027f6:	4618      	mov	r0, r3
 80027f8:	f010 ff60 	bl	80136bc <siprintf>
      sprintf (payload, "%d.%d.%d.%d", current_settings.ip_add[0],
 80027fc:	4b99      	ldr	r3, [pc, #612]	; (8002a64 <system_check_state+0x4e0>)
 80027fe:	785b      	ldrb	r3, [r3, #1]
 8002800:	4619      	mov	r1, r3
	       current_settings.ip_add[1], current_settings.ip_add[2],
 8002802:	4b98      	ldr	r3, [pc, #608]	; (8002a64 <system_check_state+0x4e0>)
 8002804:	789b      	ldrb	r3, [r3, #2]
      sprintf (payload, "%d.%d.%d.%d", current_settings.ip_add[0],
 8002806:	461c      	mov	r4, r3
	       current_settings.ip_add[1], current_settings.ip_add[2],
 8002808:	4b96      	ldr	r3, [pc, #600]	; (8002a64 <system_check_state+0x4e0>)
 800280a:	78db      	ldrb	r3, [r3, #3]
      sprintf (payload, "%d.%d.%d.%d", current_settings.ip_add[0],
 800280c:	461a      	mov	r2, r3
	       current_settings.ip_add[3]);
 800280e:	4b95      	ldr	r3, [pc, #596]	; (8002a64 <system_check_state+0x4e0>)
 8002810:	791b      	ldrb	r3, [r3, #4]
      sprintf (payload, "%d.%d.%d.%d", current_settings.ip_add[0],
 8002812:	f107 000c 	add.w	r0, r7, #12
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	9200      	str	r2, [sp, #0]
 800281a:	4623      	mov	r3, r4
 800281c:	460a      	mov	r2, r1
 800281e:	4992      	ldr	r1, [pc, #584]	; (8002a68 <system_check_state+0x4e4>)
 8002820:	f010 ff4c 	bl	80136bc <siprintf>
      mqtt_publish (client, topic, payload, strlen (payload), 0, 0,
 8002824:	f107 030c 	add.w	r3, r7, #12
 8002828:	4618      	mov	r0, r3
 800282a:	f7fd fcd1 	bl	80001d0 <strlen>
 800282e:	4603      	mov	r3, r0
 8002830:	b29b      	uxth	r3, r3
 8002832:	f107 020c 	add.w	r2, r7, #12
 8002836:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800283a:	2000      	movs	r0, #0
 800283c:	9003      	str	r0, [sp, #12]
 800283e:	4886      	ldr	r0, [pc, #536]	; (8002a58 <system_check_state+0x4d4>)
 8002840:	9002      	str	r0, [sp, #8]
 8002842:	2000      	movs	r0, #0
 8002844:	9001      	str	r0, [sp, #4]
 8002846:	2000      	movs	r0, #0
 8002848:	9000      	str	r0, [sp, #0]
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f005 ff30 	bl	80086b0 <mqtt_publish>
		    mqtt_pub_finished, NULL);
      mch_net_poll ();
 8002850:	f7fd ff84 	bl	800075c <mch_net_poll>
      sys_check_timeouts ();
 8002854:	f00c ffe0 	bl	800f818 <sys_check_timeouts>

      sprintf (topic, "%s/SETTINGS/GATEWAY/", current_settings.device_name);
 8002858:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800285c:	4a7b      	ldr	r2, [pc, #492]	; (8002a4c <system_check_state+0x4c8>)
 800285e:	4983      	ldr	r1, [pc, #524]	; (8002a6c <system_check_state+0x4e8>)
 8002860:	4618      	mov	r0, r3
 8002862:	f010 ff2b 	bl	80136bc <siprintf>
      sprintf (payload, "%d.%d.%d.%d", current_settings.gateway[0],
 8002866:	4b7f      	ldr	r3, [pc, #508]	; (8002a64 <system_check_state+0x4e0>)
 8002868:	795b      	ldrb	r3, [r3, #5]
 800286a:	4619      	mov	r1, r3
	       current_settings.gateway[1], current_settings.gateway[2],
 800286c:	4b7d      	ldr	r3, [pc, #500]	; (8002a64 <system_check_state+0x4e0>)
 800286e:	799b      	ldrb	r3, [r3, #6]
      sprintf (payload, "%d.%d.%d.%d", current_settings.gateway[0],
 8002870:	461c      	mov	r4, r3
	       current_settings.gateway[1], current_settings.gateway[2],
 8002872:	4b7c      	ldr	r3, [pc, #496]	; (8002a64 <system_check_state+0x4e0>)
 8002874:	79db      	ldrb	r3, [r3, #7]
      sprintf (payload, "%d.%d.%d.%d", current_settings.gateway[0],
 8002876:	461a      	mov	r2, r3
	       current_settings.gateway[3]);
 8002878:	4b7a      	ldr	r3, [pc, #488]	; (8002a64 <system_check_state+0x4e0>)
 800287a:	7a1b      	ldrb	r3, [r3, #8]
      sprintf (payload, "%d.%d.%d.%d", current_settings.gateway[0],
 800287c:	f107 000c 	add.w	r0, r7, #12
 8002880:	9301      	str	r3, [sp, #4]
 8002882:	9200      	str	r2, [sp, #0]
 8002884:	4623      	mov	r3, r4
 8002886:	460a      	mov	r2, r1
 8002888:	4977      	ldr	r1, [pc, #476]	; (8002a68 <system_check_state+0x4e4>)
 800288a:	f010 ff17 	bl	80136bc <siprintf>
      mqtt_publish (client, topic, payload, strlen (payload), 0, 0,
 800288e:	f107 030c 	add.w	r3, r7, #12
 8002892:	4618      	mov	r0, r3
 8002894:	f7fd fc9c 	bl	80001d0 <strlen>
 8002898:	4603      	mov	r3, r0
 800289a:	b29b      	uxth	r3, r3
 800289c:	f107 020c 	add.w	r2, r7, #12
 80028a0:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80028a4:	2000      	movs	r0, #0
 80028a6:	9003      	str	r0, [sp, #12]
 80028a8:	486b      	ldr	r0, [pc, #428]	; (8002a58 <system_check_state+0x4d4>)
 80028aa:	9002      	str	r0, [sp, #8]
 80028ac:	2000      	movs	r0, #0
 80028ae:	9001      	str	r0, [sp, #4]
 80028b0:	2000      	movs	r0, #0
 80028b2:	9000      	str	r0, [sp, #0]
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f005 fefb 	bl	80086b0 <mqtt_publish>
		    mqtt_pub_finished, NULL);
      mch_net_poll ();
 80028ba:	f7fd ff4f 	bl	800075c <mch_net_poll>
      sys_check_timeouts ();
 80028be:	f00c ffab 	bl	800f818 <sys_check_timeouts>

      sprintf (topic, "%s/SETTINGS/NETMASK/", current_settings.device_name);
 80028c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028c6:	4a61      	ldr	r2, [pc, #388]	; (8002a4c <system_check_state+0x4c8>)
 80028c8:	4969      	ldr	r1, [pc, #420]	; (8002a70 <system_check_state+0x4ec>)
 80028ca:	4618      	mov	r0, r3
 80028cc:	f010 fef6 	bl	80136bc <siprintf>
      sprintf (payload, "%d.%d.%d.%d", current_settings.netmask[0],
 80028d0:	4b64      	ldr	r3, [pc, #400]	; (8002a64 <system_check_state+0x4e0>)
 80028d2:	7a5b      	ldrb	r3, [r3, #9]
 80028d4:	4619      	mov	r1, r3
	       current_settings.netmask[1], current_settings.netmask[2],
 80028d6:	4b63      	ldr	r3, [pc, #396]	; (8002a64 <system_check_state+0x4e0>)
 80028d8:	7a9b      	ldrb	r3, [r3, #10]
      sprintf (payload, "%d.%d.%d.%d", current_settings.netmask[0],
 80028da:	461c      	mov	r4, r3
	       current_settings.netmask[1], current_settings.netmask[2],
 80028dc:	4b61      	ldr	r3, [pc, #388]	; (8002a64 <system_check_state+0x4e0>)
 80028de:	7adb      	ldrb	r3, [r3, #11]
      sprintf (payload, "%d.%d.%d.%d", current_settings.netmask[0],
 80028e0:	461a      	mov	r2, r3
	       current_settings.netmask[3]);
 80028e2:	4b60      	ldr	r3, [pc, #384]	; (8002a64 <system_check_state+0x4e0>)
 80028e4:	7b1b      	ldrb	r3, [r3, #12]
      sprintf (payload, "%d.%d.%d.%d", current_settings.netmask[0],
 80028e6:	f107 000c 	add.w	r0, r7, #12
 80028ea:	9301      	str	r3, [sp, #4]
 80028ec:	9200      	str	r2, [sp, #0]
 80028ee:	4623      	mov	r3, r4
 80028f0:	460a      	mov	r2, r1
 80028f2:	495d      	ldr	r1, [pc, #372]	; (8002a68 <system_check_state+0x4e4>)
 80028f4:	f010 fee2 	bl	80136bc <siprintf>
      mqtt_publish (client, topic, payload, strlen (payload), 0, 0,
 80028f8:	f107 030c 	add.w	r3, r7, #12
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fd fc67 	bl	80001d0 <strlen>
 8002902:	4603      	mov	r3, r0
 8002904:	b29b      	uxth	r3, r3
 8002906:	f107 020c 	add.w	r2, r7, #12
 800290a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800290e:	2000      	movs	r0, #0
 8002910:	9003      	str	r0, [sp, #12]
 8002912:	4851      	ldr	r0, [pc, #324]	; (8002a58 <system_check_state+0x4d4>)
 8002914:	9002      	str	r0, [sp, #8]
 8002916:	2000      	movs	r0, #0
 8002918:	9001      	str	r0, [sp, #4]
 800291a:	2000      	movs	r0, #0
 800291c:	9000      	str	r0, [sp, #0]
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f005 fec6 	bl	80086b0 <mqtt_publish>
		    mqtt_pub_finished, NULL);
      mch_net_poll ();
 8002924:	f7fd ff1a 	bl	800075c <mch_net_poll>
      sys_check_timeouts ();
 8002928:	f00c ff76 	bl	800f818 <sys_check_timeouts>

      sprintf (topic, "%s/SETTINGS/SERVER/", current_settings.device_name);
 800292c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002930:	4a46      	ldr	r2, [pc, #280]	; (8002a4c <system_check_state+0x4c8>)
 8002932:	4950      	ldr	r1, [pc, #320]	; (8002a74 <system_check_state+0x4f0>)
 8002934:	4618      	mov	r0, r3
 8002936:	f010 fec1 	bl	80136bc <siprintf>
      sprintf (payload, "%d.%d.%d.%d", current_settings.server_address[0],
 800293a:	4b4a      	ldr	r3, [pc, #296]	; (8002a64 <system_check_state+0x4e0>)
 800293c:	7b5b      	ldrb	r3, [r3, #13]
 800293e:	4619      	mov	r1, r3
	       current_settings.server_address[1],
 8002940:	4b48      	ldr	r3, [pc, #288]	; (8002a64 <system_check_state+0x4e0>)
 8002942:	7b9b      	ldrb	r3, [r3, #14]
      sprintf (payload, "%d.%d.%d.%d", current_settings.server_address[0],
 8002944:	461c      	mov	r4, r3
	       current_settings.server_address[2],
 8002946:	4b47      	ldr	r3, [pc, #284]	; (8002a64 <system_check_state+0x4e0>)
 8002948:	7bdb      	ldrb	r3, [r3, #15]
      sprintf (payload, "%d.%d.%d.%d", current_settings.server_address[0],
 800294a:	461a      	mov	r2, r3
	       current_settings.server_address[3]);
 800294c:	4b45      	ldr	r3, [pc, #276]	; (8002a64 <system_check_state+0x4e0>)
 800294e:	7c1b      	ldrb	r3, [r3, #16]
      sprintf (payload, "%d.%d.%d.%d", current_settings.server_address[0],
 8002950:	f107 000c 	add.w	r0, r7, #12
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	9200      	str	r2, [sp, #0]
 8002958:	4623      	mov	r3, r4
 800295a:	460a      	mov	r2, r1
 800295c:	4942      	ldr	r1, [pc, #264]	; (8002a68 <system_check_state+0x4e4>)
 800295e:	f010 fead 	bl	80136bc <siprintf>
      mqtt_publish (client, topic, payload, strlen (payload), 0, 0,
 8002962:	f107 030c 	add.w	r3, r7, #12
 8002966:	4618      	mov	r0, r3
 8002968:	f7fd fc32 	bl	80001d0 <strlen>
 800296c:	4603      	mov	r3, r0
 800296e:	b29b      	uxth	r3, r3
 8002970:	f107 020c 	add.w	r2, r7, #12
 8002974:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002978:	2000      	movs	r0, #0
 800297a:	9003      	str	r0, [sp, #12]
 800297c:	4836      	ldr	r0, [pc, #216]	; (8002a58 <system_check_state+0x4d4>)
 800297e:	9002      	str	r0, [sp, #8]
 8002980:	2000      	movs	r0, #0
 8002982:	9001      	str	r0, [sp, #4]
 8002984:	2000      	movs	r0, #0
 8002986:	9000      	str	r0, [sp, #0]
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f005 fe91 	bl	80086b0 <mqtt_publish>
		    mqtt_pub_finished, NULL);
      mch_net_poll ();
 800298e:	f7fd fee5 	bl	800075c <mch_net_poll>
      sys_check_timeouts ();
 8002992:	f00c ff41 	bl	800f818 <sys_check_timeouts>

      sprintf (topic, "%s/SETTINGS/DHCP/", current_settings.device_name);
 8002996:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800299a:	4a2c      	ldr	r2, [pc, #176]	; (8002a4c <system_check_state+0x4c8>)
 800299c:	4936      	ldr	r1, [pc, #216]	; (8002a78 <system_check_state+0x4f4>)
 800299e:	4618      	mov	r0, r3
 80029a0:	f010 fe8c 	bl	80136bc <siprintf>
      sprintf (payload, "%d", current_settings.dhcp_on);
 80029a4:	4b2f      	ldr	r3, [pc, #188]	; (8002a64 <system_check_state+0x4e0>)
 80029a6:	7c5b      	ldrb	r3, [r3, #17]
 80029a8:	461a      	mov	r2, r3
 80029aa:	f107 030c 	add.w	r3, r7, #12
 80029ae:	4929      	ldr	r1, [pc, #164]	; (8002a54 <system_check_state+0x4d0>)
 80029b0:	4618      	mov	r0, r3
 80029b2:	f010 fe83 	bl	80136bc <siprintf>
      mqtt_publish (client, topic, payload, strlen (payload), 0, 0,
 80029b6:	f107 030c 	add.w	r3, r7, #12
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fd fc08 	bl	80001d0 <strlen>
 80029c0:	4603      	mov	r3, r0
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	f107 020c 	add.w	r2, r7, #12
 80029c8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80029cc:	2000      	movs	r0, #0
 80029ce:	9003      	str	r0, [sp, #12]
 80029d0:	4821      	ldr	r0, [pc, #132]	; (8002a58 <system_check_state+0x4d4>)
 80029d2:	9002      	str	r0, [sp, #8]
 80029d4:	2000      	movs	r0, #0
 80029d6:	9001      	str	r0, [sp, #4]
 80029d8:	2000      	movs	r0, #0
 80029da:	9000      	str	r0, [sp, #0]
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f005 fe67 	bl	80086b0 <mqtt_publish>
		    mqtt_pub_finished, NULL);
      mch_net_poll ();
 80029e2:	f7fd febb 	bl	800075c <mch_net_poll>
      sys_check_timeouts ();
 80029e6:	f00c ff17 	bl	800f818 <sys_check_timeouts>

      sprintf (topic, "%s/SETTINGS/PWM_PSC/", current_settings.device_name);
 80029ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029ee:	4a17      	ldr	r2, [pc, #92]	; (8002a4c <system_check_state+0x4c8>)
 80029f0:	4922      	ldr	r1, [pc, #136]	; (8002a7c <system_check_state+0x4f8>)
 80029f2:	4618      	mov	r0, r3
 80029f4:	f010 fe62 	bl	80136bc <siprintf>
      sprintf (payload, "%d", current_settings.pwm_prescaler);
 80029f8:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <system_check_state+0x4e0>)
 80029fa:	7c9b      	ldrb	r3, [r3, #18]
 80029fc:	461a      	mov	r2, r3
 80029fe:	f107 030c 	add.w	r3, r7, #12
 8002a02:	4914      	ldr	r1, [pc, #80]	; (8002a54 <system_check_state+0x4d0>)
 8002a04:	4618      	mov	r0, r3
 8002a06:	f010 fe59 	bl	80136bc <siprintf>
      mqtt_publish (client, topic, payload, strlen (payload), 0, 0,
 8002a0a:	f107 030c 	add.w	r3, r7, #12
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fd fbde 	bl	80001d0 <strlen>
 8002a14:	4603      	mov	r3, r0
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	f107 020c 	add.w	r2, r7, #12
 8002a1c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002a20:	2000      	movs	r0, #0
 8002a22:	9003      	str	r0, [sp, #12]
 8002a24:	480c      	ldr	r0, [pc, #48]	; (8002a58 <system_check_state+0x4d4>)
 8002a26:	9002      	str	r0, [sp, #8]
 8002a28:	2000      	movs	r0, #0
 8002a2a:	9001      	str	r0, [sp, #4]
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	9000      	str	r0, [sp, #0]
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f005 fe3d 	bl	80086b0 <mqtt_publish>
		    mqtt_pub_finished, NULL);
      mch_net_poll ();
 8002a36:	f7fd fe91 	bl	800075c <mch_net_poll>
      sys_check_timeouts ();
 8002a3a:	f00c feed 	bl	800f818 <sys_check_timeouts>

      sprintf (topic, "%s/SETTINGS/PWM_DIMM/", current_settings.device_name);
 8002a3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a42:	e01d      	b.n	8002a80 <system_check_state+0x4fc>
 8002a44:	20000e84 	.word	0x20000e84
 8002a48:	20000e6c 	.word	0x20000e6c
 8002a4c:	20000ebc 	.word	0x20000ebc
 8002a50:	08014fec 	.word	0x08014fec
 8002a54:	08014fcc 	.word	0x08014fcc
 8002a58:	08002bc5 	.word	0x08002bc5
 8002a5c:	20000e67 	.word	0x20000e67
 8002a60:	08015000 	.word	0x08015000
 8002a64:	20000ea4 	.word	0x20000ea4
 8002a68:	08015010 	.word	0x08015010
 8002a6c:	0801501c 	.word	0x0801501c
 8002a70:	08015034 	.word	0x08015034
 8002a74:	0801504c 	.word	0x0801504c
 8002a78:	08015060 	.word	0x08015060
 8002a7c:	08015074 	.word	0x08015074
 8002a80:	4a47      	ldr	r2, [pc, #284]	; (8002ba0 <system_check_state+0x61c>)
 8002a82:	4948      	ldr	r1, [pc, #288]	; (8002ba4 <system_check_state+0x620>)
 8002a84:	4618      	mov	r0, r3
 8002a86:	f010 fe19 	bl	80136bc <siprintf>
      sprintf (payload, "%d", current_settings.dimming_lenght);
 8002a8a:	4b47      	ldr	r3, [pc, #284]	; (8002ba8 <system_check_state+0x624>)
 8002a8c:	7cdb      	ldrb	r3, [r3, #19]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f107 030c 	add.w	r3, r7, #12
 8002a94:	4945      	ldr	r1, [pc, #276]	; (8002bac <system_check_state+0x628>)
 8002a96:	4618      	mov	r0, r3
 8002a98:	f010 fe10 	bl	80136bc <siprintf>
      mqtt_publish (client, topic, payload, strlen (payload), 0, 0,
 8002a9c:	f107 030c 	add.w	r3, r7, #12
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fd fb95 	bl	80001d0 <strlen>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	f107 020c 	add.w	r2, r7, #12
 8002aae:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	9003      	str	r0, [sp, #12]
 8002ab6:	483e      	ldr	r0, [pc, #248]	; (8002bb0 <system_check_state+0x62c>)
 8002ab8:	9002      	str	r0, [sp, #8]
 8002aba:	2000      	movs	r0, #0
 8002abc:	9001      	str	r0, [sp, #4]
 8002abe:	2000      	movs	r0, #0
 8002ac0:	9000      	str	r0, [sp, #0]
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f005 fdf4 	bl	80086b0 <mqtt_publish>
		    mqtt_pub_finished, NULL);
      mch_net_poll ();
 8002ac8:	f7fd fe48 	bl	800075c <mch_net_poll>
      sys_check_timeouts ();
 8002acc:	f00c fea4 	bl	800f818 <sys_check_timeouts>

      sprintf (topic, "%s/SETTINGS/NAME/", current_settings.device_name);
 8002ad0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ad4:	4a32      	ldr	r2, [pc, #200]	; (8002ba0 <system_check_state+0x61c>)
 8002ad6:	4937      	ldr	r1, [pc, #220]	; (8002bb4 <system_check_state+0x630>)
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f010 fdef 	bl	80136bc <siprintf>
      sprintf (payload, "%s", current_settings.device_name);
 8002ade:	f107 030c 	add.w	r3, r7, #12
 8002ae2:	4a2f      	ldr	r2, [pc, #188]	; (8002ba0 <system_check_state+0x61c>)
 8002ae4:	4934      	ldr	r1, [pc, #208]	; (8002bb8 <system_check_state+0x634>)
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f010 fde8 	bl	80136bc <siprintf>
      mqtt_publish (client, topic, payload, strlen (payload), 0, 0,
 8002aec:	f107 030c 	add.w	r3, r7, #12
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fd fb6d 	bl	80001d0 <strlen>
 8002af6:	4603      	mov	r3, r0
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	f107 020c 	add.w	r2, r7, #12
 8002afe:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002b02:	2000      	movs	r0, #0
 8002b04:	9003      	str	r0, [sp, #12]
 8002b06:	482a      	ldr	r0, [pc, #168]	; (8002bb0 <system_check_state+0x62c>)
 8002b08:	9002      	str	r0, [sp, #8]
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	9001      	str	r0, [sp, #4]
 8002b0e:	2000      	movs	r0, #0
 8002b10:	9000      	str	r0, [sp, #0]
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f005 fdcc 	bl	80086b0 <mqtt_publish>
		    mqtt_pub_finished, NULL);
      mch_net_poll ();
 8002b18:	f7fd fe20 	bl	800075c <mch_net_poll>
      sys_check_timeouts ();
 8002b1c:	f00c fe7c 	bl	800f818 <sys_check_timeouts>

      sprintf (topic, "%s/SETTINGS/MAC/", current_settings.device_name);
 8002b20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b24:	4a1e      	ldr	r2, [pc, #120]	; (8002ba0 <system_check_state+0x61c>)
 8002b26:	4925      	ldr	r1, [pc, #148]	; (8002bbc <system_check_state+0x638>)
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f010 fdc7 	bl	80136bc <siprintf>
      sprintf (payload, "%02X:%02X:%02X:%02X:%02X:%02X", 2, 32,
	       (current_settings.device_id >> 24) & 0xFF,
 8002b2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <system_check_state+0x624>)
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	0e1b      	lsrs	r3, r3, #24
	       (current_settings.device_id >> 16) & 0xFF,
 8002b34:	4a1c      	ldr	r2, [pc, #112]	; (8002ba8 <system_check_state+0x624>)
 8002b36:	6952      	ldr	r2, [r2, #20]
 8002b38:	0c12      	lsrs	r2, r2, #16
      sprintf (payload, "%02X:%02X:%02X:%02X:%02X:%02X", 2, 32,
 8002b3a:	b2d2      	uxtb	r2, r2
	       (current_settings.device_id >> 8) & 0xFF,
 8002b3c:	491a      	ldr	r1, [pc, #104]	; (8002ba8 <system_check_state+0x624>)
 8002b3e:	6949      	ldr	r1, [r1, #20]
 8002b40:	0a09      	lsrs	r1, r1, #8
      sprintf (payload, "%02X:%02X:%02X:%02X:%02X:%02X", 2, 32,
 8002b42:	b2c9      	uxtb	r1, r1
	       (current_settings.device_id >> 0) & 0xFF);
 8002b44:	4818      	ldr	r0, [pc, #96]	; (8002ba8 <system_check_state+0x624>)
 8002b46:	6940      	ldr	r0, [r0, #20]
      sprintf (payload, "%02X:%02X:%02X:%02X:%02X:%02X", 2, 32,
 8002b48:	b2c0      	uxtb	r0, r0
 8002b4a:	f107 040c 	add.w	r4, r7, #12
 8002b4e:	9003      	str	r0, [sp, #12]
 8002b50:	9102      	str	r1, [sp, #8]
 8002b52:	9201      	str	r2, [sp, #4]
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	2320      	movs	r3, #32
 8002b58:	2202      	movs	r2, #2
 8002b5a:	4919      	ldr	r1, [pc, #100]	; (8002bc0 <system_check_state+0x63c>)
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	f010 fdad 	bl	80136bc <siprintf>
      mqtt_publish (client, topic, payload, strlen (payload), 0, 0,
 8002b62:	f107 030c 	add.w	r3, r7, #12
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd fb32 	bl	80001d0 <strlen>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f107 020c 	add.w	r2, r7, #12
 8002b74:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002b78:	2000      	movs	r0, #0
 8002b7a:	9003      	str	r0, [sp, #12]
 8002b7c:	480c      	ldr	r0, [pc, #48]	; (8002bb0 <system_check_state+0x62c>)
 8002b7e:	9002      	str	r0, [sp, #8]
 8002b80:	2000      	movs	r0, #0
 8002b82:	9001      	str	r0, [sp, #4]
 8002b84:	2000      	movs	r0, #0
 8002b86:	9000      	str	r0, [sp, #0]
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f005 fd91 	bl	80086b0 <mqtt_publish>
		    mqtt_pub_finished, NULL);
      mch_net_poll ();
 8002b8e:	f7fd fde5 	bl	800075c <mch_net_poll>
      sys_check_timeouts ();
 8002b92:	f00c fe41 	bl	800f818 <sys_check_timeouts>

    }
}
 8002b96:	bf00      	nop
 8002b98:	3794      	adds	r7, #148	; 0x94
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd90      	pop	{r4, r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000ebc 	.word	0x20000ebc
 8002ba4:	0801508c 	.word	0x0801508c
 8002ba8:	20000ea4 	.word	0x20000ea4
 8002bac:	08014fcc 	.word	0x08014fcc
 8002bb0:	08002bc5 	.word	0x08002bc5
 8002bb4:	080150a4 	.word	0x080150a4
 8002bb8:	080150b8 	.word	0x080150b8
 8002bbc:	080150bc 	.word	0x080150bc
 8002bc0:	080150d0 	.word	0x080150d0

08002bc4 <mqtt_pub_finished>:

void mqtt_pub_finished ()
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  Console_WARNING ("--Published!--");
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <mqtt_pub_finished+0x10>)
 8002bca:	f7fd fb6b 	bl	80002a4 <Console_WARNING>
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	080150f0 	.word	0x080150f0

08002bd8 <system_rgb_drive>:

void system_rgb_drive (const char *payload)
{
 8002bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002bdc:	b08d      	sub	sp, #52	; 0x34
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  if (strstr (payload, "RGB_BRIGHTNESS=")) 	//update brightness
 8002be2:	495b      	ldr	r1, [pc, #364]	; (8002d50 <system_rgb_drive+0x178>)
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f010 fda4 	bl	8013732 <strstr>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d01e      	beq.n	8002c2e <system_rgb_drive+0x56>
    {
      const char *brightness_str = strstr (payload, "RGB_BRIGHTNESS=");
 8002bf0:	4957      	ldr	r1, [pc, #348]	; (8002d50 <system_rgb_drive+0x178>)
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f010 fd9d 	bl	8013732 <strstr>
 8002bf8:	6138      	str	r0, [r7, #16]
      if (brightness_str != NULL)
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 80a0 	beq.w	8002d42 <system_rgb_drive+0x16a>
	{
	  // Move the pointer to the character after '='
	  brightness_str += strlen ("RGB_BRIGHTNESS=");
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	330f      	adds	r3, #15
 8002c06:	613b      	str	r3, [r7, #16]

	  // Convert the string to an integer using atoi()
	  int brightness = atoi (brightness_str);
 8002c08:	6938      	ldr	r0, [r7, #16]
 8002c0a:	f010 fc61 	bl	80134d0 <atoi>
 8002c0e:	60f8      	str	r0, [r7, #12]

	  // Check if the value is within the range 0-100
	  if (brightness >= 0 && brightness <= 100)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	db07      	blt.n	8002c26 <system_rgb_drive+0x4e>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b64      	cmp	r3, #100	; 0x64
 8002c1a:	dc04      	bgt.n	8002c26 <system_rgb_drive+0x4e>
	    {
	      registers.rgb_brightness = brightness;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	4b4c      	ldr	r3, [pc, #304]	; (8002d54 <system_rgb_drive+0x17c>)
 8002c22:	751a      	strb	r2, [r3, #20]
 8002c24:	e08d      	b.n	8002d42 <system_rgb_drive+0x16a>
	    }
	  else
	    {
	      printf ("Error: Brightness value out of range.\n");
 8002c26:	484c      	ldr	r0, [pc, #304]	; (8002d58 <system_rgb_drive+0x180>)
 8002c28:	f010 fd40 	bl	80136ac <puts>
 8002c2c:	e089      	b.n	8002d42 <system_rgb_drive+0x16a>
	    }
	}
    }
  else if (strstr (payload, "RGB=")) //update all leds
 8002c2e:	494b      	ldr	r1, [pc, #300]	; (8002d5c <system_rgb_drive+0x184>)
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f010 fd7e 	bl	8013732 <strstr>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8082 	beq.w	8002d42 <system_rgb_drive+0x16a>
    {
 8002c3e:	466b      	mov	r3, sp
 8002c40:	461e      	mov	r6, r3
      uint8_t octets[4];
      const char *delimiter = "=";
 8002c42:	4b47      	ldr	r3, [pc, #284]	; (8002d60 <system_rgb_drive+0x188>)
 8002c44:	623b      	str	r3, [r7, #32]
      char *token;

      // Find the position of '=' in the input string
      char *position = strstr (payload, delimiter);
 8002c46:	6a39      	ldr	r1, [r7, #32]
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f010 fd72 	bl	8013732 <strstr>
 8002c4e:	61f8      	str	r0, [r7, #28]
      if (position == NULL)
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d104      	bne.n	8002c60 <system_rgb_drive+0x88>
	{
	  printf ("Invalid input format\n");
 8002c56:	4843      	ldr	r0, [pc, #268]	; (8002d64 <system_rgb_drive+0x18c>)
 8002c58:	f010 fd28 	bl	80136ac <puts>
 8002c5c:	46b5      	mov	sp, r6
 8002c5e:	e072      	b.n	8002d46 <system_rgb_drive+0x16e>
	  return;
	}

      // Copy the substring after '='
      char colors[strlen (position) + 1];
 8002c60:	69f8      	ldr	r0, [r7, #28]
 8002c62:	f7fd fab5 	bl	80001d0 <strlen>
 8002c66:	4603      	mov	r3, r0
 8002c68:	1c59      	adds	r1, r3, #1
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	2300      	movs	r3, #0
 8002c72:	4688      	mov	r8, r1
 8002c74:	4699      	mov	r9, r3
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	460c      	mov	r4, r1
 8002c8e:	461d      	mov	r5, r3
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	00eb      	lsls	r3, r5, #3
 8002c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c9e:	00e2      	lsls	r2, r4, #3
 8002ca0:	1dcb      	adds	r3, r1, #7
 8002ca2:	08db      	lsrs	r3, r3, #3
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	ebad 0d03 	sub.w	sp, sp, r3
 8002caa:	466b      	mov	r3, sp
 8002cac:	3300      	adds	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
      strcpy (colors, position + 1);
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	6978      	ldr	r0, [r7, #20]
 8002cb8:	f010 fd20 	bl	80136fc <strcpy>

      // Use strtok to split the string by periods
      token = strtok (colors, ",");
 8002cbc:	492a      	ldr	r1, [pc, #168]	; (8002d68 <system_rgb_drive+0x190>)
 8002cbe:	6978      	ldr	r0, [r7, #20]
 8002cc0:	f010 fd4e 	bl	8013760 <strtok>
 8002cc4:	6278      	str	r0, [r7, #36]	; 0x24
      int i = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (token != NULL && i < 4)
 8002cca:	e012      	b.n	8002cf2 <system_rgb_drive+0x11a>
	{
	  octets[i] = atoi (token);
 8002ccc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cce:	f010 fbff 	bl	80134d0 <atoi>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	b2d9      	uxtb	r1, r3
 8002cd6:	f107 0208 	add.w	r2, r7, #8
 8002cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cdc:	4413      	add	r3, r2
 8002cde:	460a      	mov	r2, r1
 8002ce0:	701a      	strb	r2, [r3, #0]
	  token = strtok (NULL, ",");
 8002ce2:	4921      	ldr	r1, [pc, #132]	; (8002d68 <system_rgb_drive+0x190>)
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f010 fd3b 	bl	8013760 <strtok>
 8002cea:	6278      	str	r0, [r7, #36]	; 0x24
	  i++;
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	3301      	adds	r3, #1
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (token != NULL && i < 4)
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <system_rgb_drive+0x126>
 8002cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	dde6      	ble.n	8002ccc <system_rgb_drive+0xf4>
	}
      if(octets[0]==0xff) //update all leds
 8002cfe:	7a3b      	ldrb	r3, [r7, #8]
 8002d00:	2bff      	cmp	r3, #255	; 0xff
 8002d02:	d117      	bne.n	8002d34 <system_rgb_drive+0x15c>
	{
	for (uint8_t i = 0; i < current_settings.rgb_led_number; i++)
 8002d04:	2300      	movs	r3, #0
 8002d06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002d0a:	e00b      	b.n	8002d24 <system_rgb_drive+0x14c>
	  {
	    setLED (i, octets[1], octets[2], octets[3]);
 8002d0c:	7a79      	ldrb	r1, [r7, #9]
 8002d0e:	7aba      	ldrb	r2, [r7, #10]
 8002d10:	7afb      	ldrb	r3, [r7, #11]
 8002d12:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 8002d16:	f7fd fb6b 	bl	80003f0 <setLED>
	for (uint8_t i = 0; i < current_settings.rgb_led_number; i++)
 8002d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d1e:	3301      	adds	r3, #1
 8002d20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <system_rgb_drive+0x194>)
 8002d26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002d2a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d3ec      	bcc.n	8002d0c <system_rgb_drive+0x134>
 8002d32:	e005      	b.n	8002d40 <system_rgb_drive+0x168>
	  }
	}
      else setLED (octets[0], octets[1], octets[2], octets[3]); //update specific led
 8002d34:	7a38      	ldrb	r0, [r7, #8]
 8002d36:	7a79      	ldrb	r1, [r7, #9]
 8002d38:	7aba      	ldrb	r2, [r7, #10]
 8002d3a:	7afb      	ldrb	r3, [r7, #11]
 8002d3c:	f7fd fb58 	bl	80003f0 <setLED>
 8002d40:	46b5      	mov	sp, r6
    }
  ws2812_spi ();
 8002d42:	f7fd fbd1 	bl	80004e8 <ws2812_spi>
}
 8002d46:	3734      	adds	r7, #52	; 0x34
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d4e:	bf00      	nop
 8002d50:	08015100 	.word	0x08015100
 8002d54:	20000e6c 	.word	0x20000e6c
 8002d58:	08015110 	.word	0x08015110
 8002d5c:	08015138 	.word	0x08015138
 8002d60:	08015140 	.word	0x08015140
 8002d64:	08015144 	.word	0x08015144
 8002d68:	0801515c 	.word	0x0801515c
 8002d6c:	20000ea4 	.word	0x20000ea4

08002d70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <SystemInit+0x20>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	4a05      	ldr	r2, [pc, #20]	; (8002d90 <SystemInit+0x20>)
 8002d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <Reset_Handler>:
 8002d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dcc <LoopForever+0x2>
 8002d98:	f7ff ffea 	bl	8002d70 <SystemInit>
 8002d9c:	480c      	ldr	r0, [pc, #48]	; (8002dd0 <LoopForever+0x6>)
 8002d9e:	490d      	ldr	r1, [pc, #52]	; (8002dd4 <LoopForever+0xa>)
 8002da0:	4a0d      	ldr	r2, [pc, #52]	; (8002dd8 <LoopForever+0xe>)
 8002da2:	2300      	movs	r3, #0
 8002da4:	e002      	b.n	8002dac <LoopCopyDataInit>

08002da6 <CopyDataInit>:
 8002da6:	58d4      	ldr	r4, [r2, r3]
 8002da8:	50c4      	str	r4, [r0, r3]
 8002daa:	3304      	adds	r3, #4

08002dac <LoopCopyDataInit>:
 8002dac:	18c4      	adds	r4, r0, r3
 8002dae:	428c      	cmp	r4, r1
 8002db0:	d3f9      	bcc.n	8002da6 <CopyDataInit>
 8002db2:	4a0a      	ldr	r2, [pc, #40]	; (8002ddc <LoopForever+0x12>)
 8002db4:	4c0a      	ldr	r4, [pc, #40]	; (8002de0 <LoopForever+0x16>)
 8002db6:	2300      	movs	r3, #0
 8002db8:	e001      	b.n	8002dbe <LoopFillZerobss>

08002dba <FillZerobss>:
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	3204      	adds	r2, #4

08002dbe <LoopFillZerobss>:
 8002dbe:	42a2      	cmp	r2, r4
 8002dc0:	d3fb      	bcc.n	8002dba <FillZerobss>
 8002dc2:	f010 fb89 	bl	80134d8 <__libc_init_array>
 8002dc6:	f7fd fcdb 	bl	8000780 <main>

08002dca <LoopForever>:
 8002dca:	e7fe      	b.n	8002dca <LoopForever>
 8002dcc:	20010000 	.word	0x20010000
 8002dd0:	20000000 	.word	0x20000000
 8002dd4:	2000010c 	.word	0x2000010c
 8002dd8:	08016f04 	.word	0x08016f04
 8002ddc:	2000010c 	.word	0x2000010c
 8002de0:	20008358 	.word	0x20008358

08002de4 <ADC1_IRQHandler>:
 8002de4:	e7fe      	b.n	8002de4 <ADC1_IRQHandler>

08002de6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002df0:	2003      	movs	r0, #3
 8002df2:	f000 f961 	bl	80030b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002df6:	200f      	movs	r0, #15
 8002df8:	f000 f80e 	bl	8002e18 <HAL_InitTick>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	71fb      	strb	r3, [r7, #7]
 8002e06:	e001      	b.n	8002e0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e08:	f7fe fd94 	bl	8001934 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e24:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <HAL_InitTick+0x6c>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d023      	beq.n	8002e74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e2c:	4b16      	ldr	r3, [pc, #88]	; (8002e88 <HAL_InitTick+0x70>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <HAL_InitTick+0x6c>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	4619      	mov	r1, r3
 8002e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f96d 	bl	8003122 <HAL_SYSTICK_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10f      	bne.n	8002e6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b0f      	cmp	r3, #15
 8002e52:	d809      	bhi.n	8002e68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e54:	2200      	movs	r2, #0
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5c:	f000 f937 	bl	80030ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e60:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <HAL_InitTick+0x74>)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e007      	b.n	8002e78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
 8002e6c:	e004      	b.n	8002e78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	73fb      	strb	r3, [r7, #15]
 8002e72:	e001      	b.n	8002e78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000038 	.word	0x20000038
 8002e88:	20000030 	.word	0x20000030
 8002e8c:	20000034 	.word	0x20000034

08002e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_IncTick+0x20>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <HAL_IncTick+0x24>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	4a04      	ldr	r2, [pc, #16]	; (8002eb4 <HAL_IncTick+0x24>)
 8002ea2:	6013      	str	r3, [r2, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	20000038 	.word	0x20000038
 8002eb4:	20000ee0 	.word	0x20000ee0

08002eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return uwTick;
 8002ebc:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <HAL_GetTick+0x14>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000ee0 	.word	0x20000ee0

08002ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ed8:	f7ff ffee 	bl	8002eb8 <HAL_GetTick>
 8002edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d005      	beq.n	8002ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002eea:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <HAL_Delay+0x44>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ef6:	bf00      	nop
 8002ef8:	f7ff ffde 	bl	8002eb8 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d8f7      	bhi.n	8002ef8 <HAL_Delay+0x28>
  {
  }
}
 8002f08:	bf00      	nop
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000038 	.word	0x20000038

08002f18 <__NVIC_SetPriorityGrouping>:
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <__NVIC_SetPriorityGrouping+0x44>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f34:	4013      	ands	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f4a:	4a04      	ldr	r2, [pc, #16]	; (8002f5c <__NVIC_SetPriorityGrouping+0x44>)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	60d3      	str	r3, [r2, #12]
}
 8002f50:	bf00      	nop
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <__NVIC_GetPriorityGrouping>:
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f64:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <__NVIC_GetPriorityGrouping+0x18>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	0a1b      	lsrs	r3, r3, #8
 8002f6a:	f003 0307 	and.w	r3, r3, #7
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <__NVIC_EnableIRQ>:
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	db0b      	blt.n	8002fa6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	f003 021f 	and.w	r2, r3, #31
 8002f94:	4907      	ldr	r1, [pc, #28]	; (8002fb4 <__NVIC_EnableIRQ+0x38>)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	e000e100 	.word	0xe000e100

08002fb8 <__NVIC_SetPriority>:
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	6039      	str	r1, [r7, #0]
 8002fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	db0a      	blt.n	8002fe2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	490c      	ldr	r1, [pc, #48]	; (8003004 <__NVIC_SetPriority+0x4c>)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	0112      	lsls	r2, r2, #4
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	440b      	add	r3, r1
 8002fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002fe0:	e00a      	b.n	8002ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	4908      	ldr	r1, [pc, #32]	; (8003008 <__NVIC_SetPriority+0x50>)
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	3b04      	subs	r3, #4
 8002ff0:	0112      	lsls	r2, r2, #4
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	761a      	strb	r2, [r3, #24]
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	e000e100 	.word	0xe000e100
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <NVIC_EncodePriority>:
{
 800300c:	b480      	push	{r7}
 800300e:	b089      	sub	sp, #36	; 0x24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f1c3 0307 	rsb	r3, r3, #7
 8003026:	2b04      	cmp	r3, #4
 8003028:	bf28      	it	cs
 800302a:	2304      	movcs	r3, #4
 800302c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	3304      	adds	r3, #4
 8003032:	2b06      	cmp	r3, #6
 8003034:	d902      	bls.n	800303c <NVIC_EncodePriority+0x30>
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3b03      	subs	r3, #3
 800303a:	e000      	b.n	800303e <NVIC_EncodePriority+0x32>
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003040:	f04f 32ff 	mov.w	r2, #4294967295
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43da      	mvns	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	401a      	ands	r2, r3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003054:	f04f 31ff 	mov.w	r1, #4294967295
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	fa01 f303 	lsl.w	r3, r1, r3
 800305e:	43d9      	mvns	r1, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003064:	4313      	orrs	r3, r2
}
 8003066:	4618      	mov	r0, r3
 8003068:	3724      	adds	r7, #36	; 0x24
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3b01      	subs	r3, #1
 8003080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003084:	d301      	bcc.n	800308a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003086:	2301      	movs	r3, #1
 8003088:	e00f      	b.n	80030aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800308a:	4a0a      	ldr	r2, [pc, #40]	; (80030b4 <SysTick_Config+0x40>)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3b01      	subs	r3, #1
 8003090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003092:	210f      	movs	r1, #15
 8003094:	f04f 30ff 	mov.w	r0, #4294967295
 8003098:	f7ff ff8e 	bl	8002fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800309c:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <SysTick_Config+0x40>)
 800309e:	2200      	movs	r2, #0
 80030a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030a2:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <SysTick_Config+0x40>)
 80030a4:	2207      	movs	r2, #7
 80030a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	e000e010 	.word	0xe000e010

080030b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ff29 	bl	8002f18 <__NVIC_SetPriorityGrouping>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b086      	sub	sp, #24
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	4603      	mov	r3, r0
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	607a      	str	r2, [r7, #4]
 80030da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030e0:	f7ff ff3e 	bl	8002f60 <__NVIC_GetPriorityGrouping>
 80030e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	6978      	ldr	r0, [r7, #20]
 80030ec:	f7ff ff8e 	bl	800300c <NVIC_EncodePriority>
 80030f0:	4602      	mov	r2, r0
 80030f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff ff5d 	bl	8002fb8 <__NVIC_SetPriority>
}
 80030fe:	bf00      	nop
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	4603      	mov	r3, r0
 800310e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff ff31 	bl	8002f7c <__NVIC_EnableIRQ>
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7ff ffa2 	bl	8003074 <SysTick_Config>
 8003130:	4603      	mov	r3, r0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e098      	b.n	8003280 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	4b4d      	ldr	r3, [pc, #308]	; (800328c <HAL_DMA_Init+0x150>)
 8003156:	429a      	cmp	r2, r3
 8003158:	d80f      	bhi.n	800317a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	4b4b      	ldr	r3, [pc, #300]	; (8003290 <HAL_DMA_Init+0x154>)
 8003162:	4413      	add	r3, r2
 8003164:	4a4b      	ldr	r2, [pc, #300]	; (8003294 <HAL_DMA_Init+0x158>)
 8003166:	fba2 2303 	umull	r2, r3, r2, r3
 800316a:	091b      	lsrs	r3, r3, #4
 800316c:	009a      	lsls	r2, r3, #2
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a48      	ldr	r2, [pc, #288]	; (8003298 <HAL_DMA_Init+0x15c>)
 8003176:	641a      	str	r2, [r3, #64]	; 0x40
 8003178:	e00e      	b.n	8003198 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	4b46      	ldr	r3, [pc, #280]	; (800329c <HAL_DMA_Init+0x160>)
 8003182:	4413      	add	r3, r2
 8003184:	4a43      	ldr	r2, [pc, #268]	; (8003294 <HAL_DMA_Init+0x158>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	091b      	lsrs	r3, r3, #4
 800318c:	009a      	lsls	r2, r3, #2
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a42      	ldr	r2, [pc, #264]	; (80032a0 <HAL_DMA_Init+0x164>)
 8003196:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80031ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80031bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031f2:	d039      	beq.n	8003268 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	4a27      	ldr	r2, [pc, #156]	; (8003298 <HAL_DMA_Init+0x15c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d11a      	bne.n	8003234 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80031fe:	4b29      	ldr	r3, [pc, #164]	; (80032a4 <HAL_DMA_Init+0x168>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	f003 031c 	and.w	r3, r3, #28
 800320a:	210f      	movs	r1, #15
 800320c:	fa01 f303 	lsl.w	r3, r1, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	4924      	ldr	r1, [pc, #144]	; (80032a4 <HAL_DMA_Init+0x168>)
 8003214:	4013      	ands	r3, r2
 8003216:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003218:	4b22      	ldr	r3, [pc, #136]	; (80032a4 <HAL_DMA_Init+0x168>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003224:	f003 031c 	and.w	r3, r3, #28
 8003228:	fa01 f303 	lsl.w	r3, r1, r3
 800322c:	491d      	ldr	r1, [pc, #116]	; (80032a4 <HAL_DMA_Init+0x168>)
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]
 8003232:	e019      	b.n	8003268 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003234:	4b1c      	ldr	r3, [pc, #112]	; (80032a8 <HAL_DMA_Init+0x16c>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323c:	f003 031c 	and.w	r3, r3, #28
 8003240:	210f      	movs	r1, #15
 8003242:	fa01 f303 	lsl.w	r3, r1, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	4917      	ldr	r1, [pc, #92]	; (80032a8 <HAL_DMA_Init+0x16c>)
 800324a:	4013      	ands	r3, r2
 800324c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800324e:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <HAL_DMA_Init+0x16c>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6859      	ldr	r1, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325a:	f003 031c 	and.w	r3, r3, #28
 800325e:	fa01 f303 	lsl.w	r3, r1, r3
 8003262:	4911      	ldr	r1, [pc, #68]	; (80032a8 <HAL_DMA_Init+0x16c>)
 8003264:	4313      	orrs	r3, r2
 8003266:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	40020407 	.word	0x40020407
 8003290:	bffdfff8 	.word	0xbffdfff8
 8003294:	cccccccd 	.word	0xcccccccd
 8003298:	40020000 	.word	0x40020000
 800329c:	bffdfbf8 	.word	0xbffdfbf8
 80032a0:	40020400 	.word	0x40020400
 80032a4:	400200a8 	.word	0x400200a8
 80032a8:	400204a8 	.word	0x400204a8

080032ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_DMA_Start_IT+0x20>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e04b      	b.n	8003364 <HAL_DMA_Start_IT+0xb8>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d13a      	bne.n	8003356 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0201 	bic.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	68b9      	ldr	r1, [r7, #8]
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f921 	bl	800354c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	2b00      	cmp	r3, #0
 8003310:	d008      	beq.n	8003324 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 020e 	orr.w	r2, r2, #14
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	e00f      	b.n	8003344 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0204 	bic.w	r2, r2, #4
 8003332:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 020a 	orr.w	r2, r2, #10
 8003342:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	e005      	b.n	8003362 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800335e:	2302      	movs	r3, #2
 8003360:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003362:	7dfb      	ldrb	r3, [r7, #23]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d005      	beq.n	8003390 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2204      	movs	r2, #4
 8003388:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	73fb      	strb	r3, [r7, #15]
 800338e:	e029      	b.n	80033e4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 020e 	bic.w	r2, r2, #14
 800339e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0201 	bic.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b4:	f003 021c 	and.w	r2, r3, #28
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	2101      	movs	r1, #1
 80033be:	fa01 f202 	lsl.w	r2, r1, r2
 80033c2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	4798      	blx	r3
    }
  }
  return status;
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	f003 031c 	and.w	r3, r3, #28
 800340e:	2204      	movs	r2, #4
 8003410:	409a      	lsls	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4013      	ands	r3, r2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d026      	beq.n	8003468 <HAL_DMA_IRQHandler+0x7a>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d021      	beq.n	8003468 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b00      	cmp	r3, #0
 8003430:	d107      	bne.n	8003442 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0204 	bic.w	r2, r2, #4
 8003440:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	f003 021c 	and.w	r2, r3, #28
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	2104      	movs	r1, #4
 8003450:	fa01 f202 	lsl.w	r2, r1, r2
 8003454:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	2b00      	cmp	r3, #0
 800345c:	d071      	beq.n	8003542 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003466:	e06c      	b.n	8003542 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346c:	f003 031c 	and.w	r3, r3, #28
 8003470:	2202      	movs	r2, #2
 8003472:	409a      	lsls	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4013      	ands	r3, r2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d02e      	beq.n	80034da <HAL_DMA_IRQHandler+0xec>
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d029      	beq.n	80034da <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0320 	and.w	r3, r3, #32
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10b      	bne.n	80034ac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 020a 	bic.w	r2, r2, #10
 80034a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	f003 021c 	and.w	r2, r3, #28
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	2102      	movs	r1, #2
 80034ba:	fa01 f202 	lsl.w	r2, r1, r2
 80034be:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d038      	beq.n	8003542 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80034d8:	e033      	b.n	8003542 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	f003 031c 	and.w	r3, r3, #28
 80034e2:	2208      	movs	r2, #8
 80034e4:	409a      	lsls	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d02a      	beq.n	8003544 <HAL_DMA_IRQHandler+0x156>
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d025      	beq.n	8003544 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 020e 	bic.w	r2, r2, #14
 8003506:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350c:	f003 021c 	and.w	r2, r3, #28
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	2101      	movs	r1, #1
 8003516:	fa01 f202 	lsl.w	r2, r1, r2
 800351a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003536:	2b00      	cmp	r3, #0
 8003538:	d004      	beq.n	8003544 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003542:	bf00      	nop
 8003544:	bf00      	nop
}
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	f003 021c 	and.w	r2, r3, #28
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	2101      	movs	r1, #1
 8003568:	fa01 f202 	lsl.w	r2, r1, r2
 800356c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b10      	cmp	r3, #16
 800357c:	d108      	bne.n	8003590 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800358e:	e007      	b.n	80035a0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	60da      	str	r2, [r3, #12]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80035be:	4b2f      	ldr	r3, [pc, #188]	; (800367c <HAL_FLASH_Program+0xd0>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d101      	bne.n	80035ca <HAL_FLASH_Program+0x1e>
 80035c6:	2302      	movs	r3, #2
 80035c8:	e053      	b.n	8003672 <HAL_FLASH_Program+0xc6>
 80035ca:	4b2c      	ldr	r3, [pc, #176]	; (800367c <HAL_FLASH_Program+0xd0>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80035d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80035d4:	f000 f888 	bl	80036e8 <FLASH_WaitForLastOperation>
 80035d8:	4603      	mov	r3, r0
 80035da:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80035dc:	7dfb      	ldrb	r3, [r7, #23]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d143      	bne.n	800366a <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80035e2:	4b26      	ldr	r3, [pc, #152]	; (800367c <HAL_FLASH_Program+0xd0>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80035e8:	4b25      	ldr	r3, [pc, #148]	; (8003680 <HAL_FLASH_Program+0xd4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d009      	beq.n	8003608 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80035f4:	4b22      	ldr	r3, [pc, #136]	; (8003680 <HAL_FLASH_Program+0xd4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a21      	ldr	r2, [pc, #132]	; (8003680 <HAL_FLASH_Program+0xd4>)
 80035fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035fe:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003600:	4b1e      	ldr	r3, [pc, #120]	; (800367c <HAL_FLASH_Program+0xd0>)
 8003602:	2202      	movs	r2, #2
 8003604:	771a      	strb	r2, [r3, #28]
 8003606:	e002      	b.n	800360e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003608:	4b1c      	ldr	r3, [pc, #112]	; (800367c <HAL_FLASH_Program+0xd0>)
 800360a:	2200      	movs	r2, #0
 800360c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d107      	bne.n	8003624 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003614:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003618:	68b8      	ldr	r0, [r7, #8]
 800361a:	f000 f8bd 	bl	8003798 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800361e:	2301      	movs	r3, #1
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	e010      	b.n	8003646 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d002      	beq.n	8003630 <HAL_FLASH_Program+0x84>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d10a      	bne.n	8003646 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	4619      	mov	r1, r3
 8003634:	68b8      	ldr	r0, [r7, #8]
 8003636:	f000 f8d5 	bl	80037e4 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d102      	bne.n	8003646 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003640:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003644:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003646:	f24c 3050 	movw	r0, #50000	; 0xc350
 800364a:	f000 f84d 	bl	80036e8 <FLASH_WaitForLastOperation>
 800364e:	4603      	mov	r3, r0
 8003650:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d006      	beq.n	8003666 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003658:	4b09      	ldr	r3, [pc, #36]	; (8003680 <HAL_FLASH_Program+0xd4>)
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	43db      	mvns	r3, r3
 8003660:	4907      	ldr	r1, [pc, #28]	; (8003680 <HAL_FLASH_Program+0xd4>)
 8003662:	4013      	ands	r3, r2
 8003664:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003666:	f000 f9cf 	bl	8003a08 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800366a:	4b04      	ldr	r3, [pc, #16]	; (800367c <HAL_FLASH_Program+0xd0>)
 800366c:	2200      	movs	r2, #0
 800366e:	701a      	strb	r2, [r3, #0]

  return status;
 8003670:	7dfb      	ldrb	r3, [r7, #23]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	2000003c 	.word	0x2000003c
 8003680:	40022000 	.word	0x40022000

08003684 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800368e:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <HAL_FLASH_Unlock+0x38>)
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	2b00      	cmp	r3, #0
 8003694:	da0b      	bge.n	80036ae <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003696:	4b09      	ldr	r3, [pc, #36]	; (80036bc <HAL_FLASH_Unlock+0x38>)
 8003698:	4a09      	ldr	r2, [pc, #36]	; (80036c0 <HAL_FLASH_Unlock+0x3c>)
 800369a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800369c:	4b07      	ldr	r3, [pc, #28]	; (80036bc <HAL_FLASH_Unlock+0x38>)
 800369e:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <HAL_FLASH_Unlock+0x40>)
 80036a0:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_FLASH_Unlock+0x38>)
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	da01      	bge.n	80036ae <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80036ae:	79fb      	ldrb	r3, [r7, #7]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	40022000 	.word	0x40022000
 80036c0:	45670123 	.word	0x45670123
 80036c4:	cdef89ab 	.word	0xcdef89ab

080036c8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <HAL_FLASH_Lock+0x1c>)
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	4a04      	ldr	r2, [pc, #16]	; (80036e4 <HAL_FLASH_Lock+0x1c>)
 80036d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036d6:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	40022000 	.word	0x40022000

080036e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80036f0:	f7ff fbe2 	bl	8002eb8 <HAL_GetTick>
 80036f4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80036f6:	e00d      	b.n	8003714 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fe:	d009      	beq.n	8003714 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003700:	f7ff fbda 	bl	8002eb8 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	429a      	cmp	r2, r3
 800370e:	d801      	bhi.n	8003714 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e036      	b.n	8003782 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003714:	4b1d      	ldr	r3, [pc, #116]	; (800378c <FLASH_WaitForLastOperation+0xa4>)
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1eb      	bne.n	80036f8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003720:	4b1a      	ldr	r3, [pc, #104]	; (800378c <FLASH_WaitForLastOperation+0xa4>)
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <FLASH_WaitForLastOperation+0xa8>)
 8003726:	4013      	ands	r3, r2
 8003728:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01e      	beq.n	800376e <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003730:	4b18      	ldr	r3, [pc, #96]	; (8003794 <FLASH_WaitForLastOperation+0xac>)
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4313      	orrs	r3, r2
 8003738:	4a16      	ldr	r2, [pc, #88]	; (8003794 <FLASH_WaitForLastOperation+0xac>)
 800373a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d007      	beq.n	8003756 <FLASH_WaitForLastOperation+0x6e>
 8003746:	4b11      	ldr	r3, [pc, #68]	; (800378c <FLASH_WaitForLastOperation+0xa4>)
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003750:	490e      	ldr	r1, [pc, #56]	; (800378c <FLASH_WaitForLastOperation+0xa4>)
 8003752:	4313      	orrs	r3, r2
 8003754:	618b      	str	r3, [r1, #24]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d004      	beq.n	800376a <FLASH_WaitForLastOperation+0x82>
 8003760:	4a0a      	ldr	r2, [pc, #40]	; (800378c <FLASH_WaitForLastOperation+0xa4>)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003768:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e009      	b.n	8003782 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800376e:	4b07      	ldr	r3, [pc, #28]	; (800378c <FLASH_WaitForLastOperation+0xa4>)
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800377a:	4b04      	ldr	r3, [pc, #16]	; (800378c <FLASH_WaitForLastOperation+0xa4>)
 800377c:	2201      	movs	r2, #1
 800377e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40022000 	.word	0x40022000
 8003790:	0002c3fa 	.word	0x0002c3fa
 8003794:	2000003c 	.word	0x2000003c

08003798 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80037a4:	4b0e      	ldr	r3, [pc, #56]	; (80037e0 <FLASH_Program_DoubleWord+0x48>)
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	4a0d      	ldr	r2, [pc, #52]	; (80037e0 <FLASH_Program_DoubleWord+0x48>)
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80037b6:	f3bf 8f6f 	isb	sy
}
 80037ba:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80037bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	000a      	movs	r2, r1
 80037ca:	2300      	movs	r3, #0
 80037cc:	68f9      	ldr	r1, [r7, #12]
 80037ce:	3104      	adds	r1, #4
 80037d0:	4613      	mov	r3, r2
 80037d2:	600b      	str	r3, [r1, #0]
}
 80037d4:	bf00      	nop
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	40022000 	.word	0x40022000

080037e4 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b089      	sub	sp, #36	; 0x24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80037ee:	2340      	movs	r3, #64	; 0x40
 80037f0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80037fa:	4b14      	ldr	r3, [pc, #80]	; (800384c <FLASH_Program_Fast+0x68>)
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	4a13      	ldr	r2, [pc, #76]	; (800384c <FLASH_Program_Fast+0x68>)
 8003800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003804:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003806:	f3ef 8310 	mrs	r3, PRIMASK
 800380a:	60fb      	str	r3, [r7, #12]
  return(result);
 800380c:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800380e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003810:	b672      	cpsid	i
}
 8003812:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	3304      	adds	r3, #4
 8003820:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	3304      	adds	r3, #4
 8003826:	617b      	str	r3, [r7, #20]
    row_index--;
 8003828:	7ffb      	ldrb	r3, [r7, #31]
 800382a:	3b01      	subs	r3, #1
 800382c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800382e:	7ffb      	ldrb	r3, [r7, #31]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1ef      	bne.n	8003814 <FLASH_Program_Fast+0x30>
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f383 8810 	msr	PRIMASK, r3
}
 800383e:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8003840:	bf00      	nop
 8003842:	3724      	adds	r7, #36	; 0x24
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	40022000 	.word	0x40022000

08003850 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800385a:	4b48      	ldr	r3, [pc, #288]	; (800397c <HAL_FLASHEx_Erase+0x12c>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_FLASHEx_Erase+0x16>
 8003862:	2302      	movs	r3, #2
 8003864:	e085      	b.n	8003972 <HAL_FLASHEx_Erase+0x122>
 8003866:	4b45      	ldr	r3, [pc, #276]	; (800397c <HAL_FLASHEx_Erase+0x12c>)
 8003868:	2201      	movs	r2, #1
 800386a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800386c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003870:	f7ff ff3a 	bl	80036e8 <FLASH_WaitForLastOperation>
 8003874:	4603      	mov	r3, r0
 8003876:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d175      	bne.n	800396a <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800387e:	4b3f      	ldr	r3, [pc, #252]	; (800397c <HAL_FLASHEx_Erase+0x12c>)
 8003880:	2200      	movs	r2, #0
 8003882:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003884:	4b3e      	ldr	r3, [pc, #248]	; (8003980 <HAL_FLASHEx_Erase+0x130>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800388c:	2b00      	cmp	r3, #0
 800388e:	d013      	beq.n	80038b8 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003890:	4b3b      	ldr	r3, [pc, #236]	; (8003980 <HAL_FLASHEx_Erase+0x130>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003898:	2b00      	cmp	r3, #0
 800389a:	d009      	beq.n	80038b0 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800389c:	4b38      	ldr	r3, [pc, #224]	; (8003980 <HAL_FLASHEx_Erase+0x130>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a37      	ldr	r2, [pc, #220]	; (8003980 <HAL_FLASHEx_Erase+0x130>)
 80038a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038a6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80038a8:	4b34      	ldr	r3, [pc, #208]	; (800397c <HAL_FLASHEx_Erase+0x12c>)
 80038aa:	2203      	movs	r2, #3
 80038ac:	771a      	strb	r2, [r3, #28]
 80038ae:	e016      	b.n	80038de <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80038b0:	4b32      	ldr	r3, [pc, #200]	; (800397c <HAL_FLASHEx_Erase+0x12c>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	771a      	strb	r2, [r3, #28]
 80038b6:	e012      	b.n	80038de <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80038b8:	4b31      	ldr	r3, [pc, #196]	; (8003980 <HAL_FLASHEx_Erase+0x130>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d009      	beq.n	80038d8 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80038c4:	4b2e      	ldr	r3, [pc, #184]	; (8003980 <HAL_FLASHEx_Erase+0x130>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a2d      	ldr	r2, [pc, #180]	; (8003980 <HAL_FLASHEx_Erase+0x130>)
 80038ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038ce:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80038d0:	4b2a      	ldr	r3, [pc, #168]	; (800397c <HAL_FLASHEx_Erase+0x12c>)
 80038d2:	2202      	movs	r2, #2
 80038d4:	771a      	strb	r2, [r3, #28]
 80038d6:	e002      	b.n	80038de <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80038d8:	4b28      	ldr	r3, [pc, #160]	; (800397c <HAL_FLASHEx_Erase+0x12c>)
 80038da:	2200      	movs	r2, #0
 80038dc:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d111      	bne.n	800390a <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 f84a 	bl	8003984 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80038f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038f4:	f7ff fef8 	bl	80036e8 <FLASH_WaitForLastOperation>
 80038f8:	4603      	mov	r3, r0
 80038fa:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80038fc:	4b20      	ldr	r3, [pc, #128]	; (8003980 <HAL_FLASHEx_Erase+0x130>)
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	4a1f      	ldr	r2, [pc, #124]	; (8003980 <HAL_FLASHEx_Erase+0x130>)
 8003902:	f023 0304 	bic.w	r3, r3, #4
 8003906:	6153      	str	r3, [r2, #20]
 8003908:	e02d      	b.n	8003966 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	f04f 32ff 	mov.w	r2, #4294967295
 8003910:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	60bb      	str	r3, [r7, #8]
 8003918:	e01d      	b.n	8003956 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4619      	mov	r1, r3
 8003920:	68b8      	ldr	r0, [r7, #8]
 8003922:	f000 f84d 	bl	80039c0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003926:	f24c 3050 	movw	r0, #50000	; 0xc350
 800392a:	f7ff fedd 	bl	80036e8 <FLASH_WaitForLastOperation>
 800392e:	4603      	mov	r3, r0
 8003930:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003932:	4b13      	ldr	r3, [pc, #76]	; (8003980 <HAL_FLASHEx_Erase+0x130>)
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	4a12      	ldr	r2, [pc, #72]	; (8003980 <HAL_FLASHEx_Erase+0x130>)
 8003938:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800393c:	f023 0302 	bic.w	r3, r3, #2
 8003940:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8003942:	7bfb      	ldrb	r3, [r7, #15]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	601a      	str	r2, [r3, #0]
          break;
 800394e:	e00a      	b.n	8003966 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	3301      	adds	r3, #1
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	4413      	add	r3, r2
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	429a      	cmp	r2, r3
 8003964:	d3d9      	bcc.n	800391a <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003966:	f000 f84f 	bl	8003a08 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800396a:	4b04      	ldr	r3, [pc, #16]	; (800397c <HAL_FLASHEx_Erase+0x12c>)
 800396c:	2200      	movs	r2, #0
 800396e:	701a      	strb	r2, [r3, #0]

  return status;
 8003970:	7bfb      	ldrb	r3, [r7, #15]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	2000003c 	.word	0x2000003c
 8003980:	40022000 	.word	0x40022000

08003984 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d005      	beq.n	80039a2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8003996:	4b09      	ldr	r3, [pc, #36]	; (80039bc <FLASH_MassErase+0x38>)
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	4a08      	ldr	r2, [pc, #32]	; (80039bc <FLASH_MassErase+0x38>)
 800399c:	f043 0304 	orr.w	r3, r3, #4
 80039a0:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80039a2:	4b06      	ldr	r3, [pc, #24]	; (80039bc <FLASH_MassErase+0x38>)
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	4a05      	ldr	r2, [pc, #20]	; (80039bc <FLASH_MassErase+0x38>)
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ac:	6153      	str	r3, [r2, #20]
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40022000 	.word	0x40022000

080039c0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80039ca:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <FLASH_PageErase+0x44>)
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80039da:	490a      	ldr	r1, [pc, #40]	; (8003a04 <FLASH_PageErase+0x44>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80039e0:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <FLASH_PageErase+0x44>)
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	4a07      	ldr	r2, [pc, #28]	; (8003a04 <FLASH_PageErase+0x44>)
 80039e6:	f043 0302 	orr.w	r3, r3, #2
 80039ea:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80039ec:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <FLASH_PageErase+0x44>)
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	4a04      	ldr	r2, [pc, #16]	; (8003a04 <FLASH_PageErase+0x44>)
 80039f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f6:	6153      	str	r3, [r2, #20]
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	40022000 	.word	0x40022000

08003a08 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003a0e:	4b21      	ldr	r3, [pc, #132]	; (8003a94 <FLASH_FlushCaches+0x8c>)
 8003a10:	7f1b      	ldrb	r3, [r3, #28]
 8003a12:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d002      	beq.n	8003a20 <FLASH_FlushCaches+0x18>
 8003a1a:	79fb      	ldrb	r3, [r7, #7]
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d117      	bne.n	8003a50 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003a20:	4b1d      	ldr	r3, [pc, #116]	; (8003a98 <FLASH_FlushCaches+0x90>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1c      	ldr	r2, [pc, #112]	; (8003a98 <FLASH_FlushCaches+0x90>)
 8003a26:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a2a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003a2c:	4b1a      	ldr	r3, [pc, #104]	; (8003a98 <FLASH_FlushCaches+0x90>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a19      	ldr	r2, [pc, #100]	; (8003a98 <FLASH_FlushCaches+0x90>)
 8003a32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	4b17      	ldr	r3, [pc, #92]	; (8003a98 <FLASH_FlushCaches+0x90>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a16      	ldr	r2, [pc, #88]	; (8003a98 <FLASH_FlushCaches+0x90>)
 8003a3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a42:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a44:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <FLASH_FlushCaches+0x90>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a13      	ldr	r2, [pc, #76]	; (8003a98 <FLASH_FlushCaches+0x90>)
 8003a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a4e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d002      	beq.n	8003a5c <FLASH_FlushCaches+0x54>
 8003a56:	79fb      	ldrb	r3, [r7, #7]
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	d111      	bne.n	8003a80 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003a5c:	4b0e      	ldr	r3, [pc, #56]	; (8003a98 <FLASH_FlushCaches+0x90>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0d      	ldr	r2, [pc, #52]	; (8003a98 <FLASH_FlushCaches+0x90>)
 8003a62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <FLASH_FlushCaches+0x90>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a0a      	ldr	r2, [pc, #40]	; (8003a98 <FLASH_FlushCaches+0x90>)
 8003a6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a72:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a74:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <FLASH_FlushCaches+0x90>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a07      	ldr	r2, [pc, #28]	; (8003a98 <FLASH_FlushCaches+0x90>)
 8003a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a7e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003a80:	4b04      	ldr	r3, [pc, #16]	; (8003a94 <FLASH_FlushCaches+0x8c>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	771a      	strb	r2, [r3, #28]
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	2000003c 	.word	0x2000003c
 8003a98:	40022000 	.word	0x40022000

08003a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aaa:	e154      	b.n	8003d56 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab8:	4013      	ands	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 8146 	beq.w	8003d50 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d005      	beq.n	8003adc <HAL_GPIO_Init+0x40>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 0303 	and.w	r3, r3, #3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d130      	bne.n	8003b3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43db      	mvns	r3, r3
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4013      	ands	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b12:	2201      	movs	r2, #1
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	091b      	lsrs	r3, r3, #4
 8003b28:	f003 0201 	and.w	r2, r3, #1
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d017      	beq.n	8003b7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	2203      	movs	r2, #3
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d123      	bne.n	8003bce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	08da      	lsrs	r2, r3, #3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3208      	adds	r2, #8
 8003b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	220f      	movs	r2, #15
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	691a      	ldr	r2, [r3, #16]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	08da      	lsrs	r2, r3, #3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3208      	adds	r2, #8
 8003bc8:	6939      	ldr	r1, [r7, #16]
 8003bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	2203      	movs	r2, #3
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	43db      	mvns	r3, r3
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4013      	ands	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f003 0203 	and.w	r2, r3, #3
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 80a0 	beq.w	8003d50 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c10:	4b58      	ldr	r3, [pc, #352]	; (8003d74 <HAL_GPIO_Init+0x2d8>)
 8003c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c14:	4a57      	ldr	r2, [pc, #348]	; (8003d74 <HAL_GPIO_Init+0x2d8>)
 8003c16:	f043 0301 	orr.w	r3, r3, #1
 8003c1a:	6613      	str	r3, [r2, #96]	; 0x60
 8003c1c:	4b55      	ldr	r3, [pc, #340]	; (8003d74 <HAL_GPIO_Init+0x2d8>)
 8003c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c28:	4a53      	ldr	r2, [pc, #332]	; (8003d78 <HAL_GPIO_Init+0x2dc>)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	089b      	lsrs	r3, r3, #2
 8003c2e:	3302      	adds	r3, #2
 8003c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	220f      	movs	r2, #15
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c52:	d019      	beq.n	8003c88 <HAL_GPIO_Init+0x1ec>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a49      	ldr	r2, [pc, #292]	; (8003d7c <HAL_GPIO_Init+0x2e0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d013      	beq.n	8003c84 <HAL_GPIO_Init+0x1e8>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a48      	ldr	r2, [pc, #288]	; (8003d80 <HAL_GPIO_Init+0x2e4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d00d      	beq.n	8003c80 <HAL_GPIO_Init+0x1e4>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a47      	ldr	r2, [pc, #284]	; (8003d84 <HAL_GPIO_Init+0x2e8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d007      	beq.n	8003c7c <HAL_GPIO_Init+0x1e0>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a46      	ldr	r2, [pc, #280]	; (8003d88 <HAL_GPIO_Init+0x2ec>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d101      	bne.n	8003c78 <HAL_GPIO_Init+0x1dc>
 8003c74:	2304      	movs	r3, #4
 8003c76:	e008      	b.n	8003c8a <HAL_GPIO_Init+0x1ee>
 8003c78:	2307      	movs	r3, #7
 8003c7a:	e006      	b.n	8003c8a <HAL_GPIO_Init+0x1ee>
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e004      	b.n	8003c8a <HAL_GPIO_Init+0x1ee>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e002      	b.n	8003c8a <HAL_GPIO_Init+0x1ee>
 8003c84:	2301      	movs	r3, #1
 8003c86:	e000      	b.n	8003c8a <HAL_GPIO_Init+0x1ee>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	f002 0203 	and.w	r2, r2, #3
 8003c90:	0092      	lsls	r2, r2, #2
 8003c92:	4093      	lsls	r3, r2
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c9a:	4937      	ldr	r1, [pc, #220]	; (8003d78 <HAL_GPIO_Init+0x2dc>)
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	089b      	lsrs	r3, r3, #2
 8003ca0:	3302      	adds	r3, #2
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ca8:	4b38      	ldr	r3, [pc, #224]	; (8003d8c <HAL_GPIO_Init+0x2f0>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ccc:	4a2f      	ldr	r2, [pc, #188]	; (8003d8c <HAL_GPIO_Init+0x2f0>)
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003cd2:	4b2e      	ldr	r3, [pc, #184]	; (8003d8c <HAL_GPIO_Init+0x2f0>)
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cf6:	4a25      	ldr	r2, [pc, #148]	; (8003d8c <HAL_GPIO_Init+0x2f0>)
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003cfc:	4b23      	ldr	r3, [pc, #140]	; (8003d8c <HAL_GPIO_Init+0x2f0>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	43db      	mvns	r3, r3
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d20:	4a1a      	ldr	r2, [pc, #104]	; (8003d8c <HAL_GPIO_Init+0x2f0>)
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003d26:	4b19      	ldr	r3, [pc, #100]	; (8003d8c <HAL_GPIO_Init+0x2f0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4013      	ands	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d4a:	4a10      	ldr	r2, [pc, #64]	; (8003d8c <HAL_GPIO_Init+0x2f0>)
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	3301      	adds	r3, #1
 8003d54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f47f aea3 	bne.w	8003aac <HAL_GPIO_Init+0x10>
  }
}
 8003d66:	bf00      	nop
 8003d68:	bf00      	nop
 8003d6a:	371c      	adds	r7, #28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	40021000 	.word	0x40021000
 8003d78:	40010000 	.word	0x40010000
 8003d7c:	48000400 	.word	0x48000400
 8003d80:	48000800 	.word	0x48000800
 8003d84:	48000c00 	.word	0x48000c00
 8003d88:	48001000 	.word	0x48001000
 8003d8c:	40010400 	.word	0x40010400

08003d90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691a      	ldr	r2, [r3, #16]
 8003da0:	887b      	ldrh	r3, [r7, #2]
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
 8003dac:	e001      	b.n	8003db2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003dae:	2300      	movs	r3, #0
 8003db0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	807b      	strh	r3, [r7, #2]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dd0:	787b      	ldrb	r3, [r7, #1]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003dd6:	887a      	ldrh	r2, [r7, #2]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ddc:	e002      	b.n	8003de4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003dde:	887a      	ldrh	r2, [r7, #2]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e02:	887a      	ldrh	r2, [r7, #2]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4013      	ands	r3, r2
 8003e08:	041a      	lsls	r2, r3, #16
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	43d9      	mvns	r1, r3
 8003e0e:	887b      	ldrh	r3, [r7, #2]
 8003e10:	400b      	ands	r3, r1
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	619a      	str	r2, [r3, #24]
}
 8003e18:	bf00      	nop
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e2e:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d006      	beq.n	8003e48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e3a:	4a05      	ldr	r2, [pc, #20]	; (8003e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e3c:	88fb      	ldrh	r3, [r7, #6]
 8003e3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e40:	88fb      	ldrh	r3, [r7, #6]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fe faf6 	bl	8002434 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e48:	bf00      	nop
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40010400 	.word	0x40010400

08003e54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e58:	4b04      	ldr	r3, [pc, #16]	; (8003e6c <HAL_PWREx_GetVoltageRange+0x18>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40007000 	.word	0x40007000

08003e70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e7e:	d130      	bne.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e80:	4b23      	ldr	r3, [pc, #140]	; (8003f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e8c:	d038      	beq.n	8003f00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e8e:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e96:	4a1e      	ldr	r2, [pc, #120]	; (8003f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e9e:	4b1d      	ldr	r3, [pc, #116]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2232      	movs	r2, #50	; 0x32
 8003ea4:	fb02 f303 	mul.w	r3, r2, r3
 8003ea8:	4a1b      	ldr	r2, [pc, #108]	; (8003f18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	0c9b      	lsrs	r3, r3, #18
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003eb4:	e002      	b.n	8003ebc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ebc:	4b14      	ldr	r3, [pc, #80]	; (8003f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec8:	d102      	bne.n	8003ed0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1f2      	bne.n	8003eb6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003edc:	d110      	bne.n	8003f00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e00f      	b.n	8003f02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ee2:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eee:	d007      	beq.n	8003f00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ef0:	4b07      	ldr	r3, [pc, #28]	; (8003f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ef8:	4a05      	ldr	r2, [pc, #20]	; (8003f10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003efa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003efe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40007000 	.word	0x40007000
 8003f14:	20000030 	.word	0x20000030
 8003f18:	431bde83 	.word	0x431bde83

08003f1c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003f24:	f7fe ffc8 	bl	8002eb8 <HAL_GetTick>
 8003f28:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e069      	b.n	8004008 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10b      	bne.n	8003f58 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7fd fd17 	bl	800197c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003f4e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fa68 	bl	8004428 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	021a      	lsls	r2, r3, #8
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2120      	movs	r1, #32
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fa93 	bl	80044aa <QSPI_WaitFlagStateUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003f88:	7afb      	ldrb	r3, [r7, #11]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d137      	bne.n	8003ffe <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003f98:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6852      	ldr	r2, [r2, #4]
 8003fa0:	0611      	lsls	r1, r2, #24
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	68d2      	ldr	r2, [r2, #12]
 8003fa6:	4311      	orrs	r1, r2
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	69d2      	ldr	r2, [r2, #28]
 8003fac:	4311      	orrs	r1, r2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6a12      	ldr	r2, [r2, #32]
 8003fb2:	4311      	orrs	r1, r2
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	4b13      	ldr	r3, [pc, #76]	; (8004010 <HAL_QSPI_Init+0xf4>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6912      	ldr	r2, [r2, #16]
 8003fca:	0411      	lsls	r1, r2, #16
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6952      	ldr	r2, [r2, #20]
 8003fd0:	4311      	orrs	r1, r2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6992      	ldr	r2, [r2, #24]
 8003fd6:	4311      	orrs	r1, r2
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004006:	7afb      	ldrb	r3, [r7, #11]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	ffe0f8fe 	.word	0xffe0f8fe

08004014 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b00      	cmp	r3, #0
 8004034:	d064      	beq.n	8004100 <HAL_QSPI_IRQHandler+0xec>
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d05f      	beq.n	8004100 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3320      	adds	r3, #32
 8004046:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b12      	cmp	r3, #18
 8004052:	d125      	bne.n	80040a0 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8004054:	e01c      	b.n	8004090 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00f      	beq.n	800407e <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	781a      	ldrb	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004076:	1e5a      	subs	r2, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	62da      	str	r2, [r3, #44]	; 0x2c
 800407c:	e008      	b.n	8004090 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800408c:	601a      	str	r2, [r3, #0]
          break;
 800408e:	e033      	b.n	80040f8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1db      	bne.n	8004056 <HAL_QSPI_IRQHandler+0x42>
 800409e:	e02b      	b.n	80040f8 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b22      	cmp	r3, #34	; 0x22
 80040aa:	d125      	bne.n	80040f8 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80040ac:	e01d      	b.n	80040ea <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d010      	beq.n	80040d8 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	7812      	ldrb	r2, [r2, #0]
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	1e5a      	subs	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	639a      	str	r2, [r3, #56]	; 0x38
 80040d6:	e008      	b.n	80040ea <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040e6:	601a      	str	r2, [r3, #0]
          break;
 80040e8:	e006      	b.n	80040f8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1da      	bne.n	80040ae <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f977 	bl	80043ec <HAL_QSPI_FifoThresholdCallback>
 80040fe:	e13c      	b.n	800437a <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 80b0 	beq.w	800426c <HAL_QSPI_IRQHandler+0x258>
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 80aa 	beq.w	800426c <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2202      	movs	r2, #2
 800411e:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800412e:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b12      	cmp	r3, #18
 800413a:	d120      	bne.n	800417e <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	2b00      	cmp	r3, #0
 8004148:	d011      	beq.n	800416e <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0204 	bic.w	r2, r2, #4
 8004158:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0201 	bic.w	r2, r2, #1
 800416c:	601a      	str	r2, [r3, #0]
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f92e 	bl	80043d8 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800417c:	e0fa      	b.n	8004374 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b22      	cmp	r3, #34	; 0x22
 8004188:	d143      	bne.n	8004212 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d012      	beq.n	80041be <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0204 	bic.w	r2, r2, #4
 80041a6:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0201 	bic.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	e021      	b.n	8004202 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3320      	adds	r3, #32
 80041c4:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80041c6:	e013      	b.n	80041f0 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d017      	beq.n	8004200 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	7812      	ldrb	r2, [r2, #0]
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	1e5a      	subs	r2, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1e4      	bne.n	80041c8 <HAL_QSPI_IRQHandler+0x1b4>
 80041fe:	e000      	b.n	8004202 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8004200:	bf00      	nop
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f8da 	bl	80043c4 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004210:	e0b0      	b.n	8004374 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d107      	bne.n	800422e <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f8c2 	bl	80043b0 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800422c:	e0a2      	b.n	8004374 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b08      	cmp	r3, #8
 8004238:	f040 809c 	bne.w	8004374 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800424a:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004258:	2b00      	cmp	r3, #0
 800425a:	d103      	bne.n	8004264 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f89d 	bl	800439c <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004262:	e087      	b.n	8004374 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f88f 	bl	8004388 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800426a:	e083      	b.n	8004374 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d01f      	beq.n	80042b6 <HAL_QSPI_IRQHandler+0x2a2>
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d01a      	beq.n	80042b6 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2208      	movs	r2, #8
 8004286:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00b      	beq.n	80042ae <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80042a4:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f8a6 	bl	8004400 <HAL_QSPI_StatusMatchCallback>
 80042b4:	e061      	b.n	800437a <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d047      	beq.n	8004350 <HAL_QSPI_IRQHandler+0x33c>
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d042      	beq.n	8004350 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2201      	movs	r2, #1
 80042d0:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80042e0:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	f043 0202 	orr.w	r2, r3, #2
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d021      	beq.n	8004340 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0204 	bic.w	r2, r2, #4
 800430a:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004310:	4a1c      	ldr	r2, [pc, #112]	; (8004384 <HAL_QSPI_IRQHandler+0x370>)
 8004312:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff f827 	bl	800336c <HAL_DMA_Abort_IT>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d029      	beq.n	8004378 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004328:	f043 0204 	orr.w	r2, r3, #4
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f825 	bl	8004388 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800433e:	e01b      	b.n	8004378 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f81d 	bl	8004388 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800434e:	e013      	b.n	8004378 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f003 0310 	and.w	r3, r3, #16
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00f      	beq.n	800437a <HAL_QSPI_IRQHandler+0x366>
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00a      	beq.n	800437a <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2210      	movs	r2, #16
 800436a:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f851 	bl	8004414 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8004372:	e002      	b.n	800437a <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004374:	bf00      	nop
 8004376:	e000      	b.n	800437a <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004378:	bf00      	nop
}
 800437a:	bf00      	nop
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	08004445 	.word	0x08004445

08004388 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b08      	cmp	r3, #8
 8004468:	d114      	bne.n	8004494 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2202      	movs	r2, #2
 8004470:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004480:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f042 0202 	orr.w	r2, r2, #2
 8004490:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8004492:	e006      	b.n	80044a2 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7ff ff73 	bl	8004388 <HAL_QSPI_ErrorCallback>
}
 80044a2:	bf00      	nop
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b084      	sub	sp, #16
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	60f8      	str	r0, [r7, #12]
 80044b2:	60b9      	str	r1, [r7, #8]
 80044b4:	603b      	str	r3, [r7, #0]
 80044b6:	4613      	mov	r3, r2
 80044b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80044ba:	e01a      	b.n	80044f2 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c2:	d016      	beq.n	80044f2 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c4:	f7fe fcf8 	bl	8002eb8 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d302      	bcc.n	80044da <QSPI_WaitFlagStateUntilTimeout+0x30>
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10b      	bne.n	80044f2 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2204      	movs	r2, #4
 80044de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e6:	f043 0201 	orr.w	r2, r3, #1
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e00e      	b.n	8004510 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4013      	ands	r3, r2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	bf14      	ite	ne
 8004500:	2301      	movne	r3, #1
 8004502:	2300      	moveq	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	79fb      	ldrb	r3, [r7, #7]
 800450a:	429a      	cmp	r2, r3
 800450c:	d1d6      	bne.n	80044bc <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d102      	bne.n	800452c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	f000 bc02 	b.w	8004d30 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800452c:	4b96      	ldr	r3, [pc, #600]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 030c 	and.w	r3, r3, #12
 8004534:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004536:	4b94      	ldr	r3, [pc, #592]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 80e4 	beq.w	8004716 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d007      	beq.n	8004564 <HAL_RCC_OscConfig+0x4c>
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	2b0c      	cmp	r3, #12
 8004558:	f040 808b 	bne.w	8004672 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2b01      	cmp	r3, #1
 8004560:	f040 8087 	bne.w	8004672 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004564:	4b88      	ldr	r3, [pc, #544]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_RCC_OscConfig+0x64>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e3d9      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1a      	ldr	r2, [r3, #32]
 8004580:	4b81      	ldr	r3, [pc, #516]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	2b00      	cmp	r3, #0
 800458a:	d004      	beq.n	8004596 <HAL_RCC_OscConfig+0x7e>
 800458c:	4b7e      	ldr	r3, [pc, #504]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004594:	e005      	b.n	80045a2 <HAL_RCC_OscConfig+0x8a>
 8004596:	4b7c      	ldr	r3, [pc, #496]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 8004598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800459c:	091b      	lsrs	r3, r3, #4
 800459e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d223      	bcs.n	80045ee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fd54 	bl	8005058 <RCC_SetFlashLatencyFromMSIRange>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e3ba      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045ba:	4b73      	ldr	r3, [pc, #460]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a72      	ldr	r2, [pc, #456]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 80045c0:	f043 0308 	orr.w	r3, r3, #8
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	4b70      	ldr	r3, [pc, #448]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	496d      	ldr	r1, [pc, #436]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045d8:	4b6b      	ldr	r3, [pc, #428]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	021b      	lsls	r3, r3, #8
 80045e6:	4968      	ldr	r1, [pc, #416]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]
 80045ec:	e025      	b.n	800463a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045ee:	4b66      	ldr	r3, [pc, #408]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a65      	ldr	r2, [pc, #404]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 80045f4:	f043 0308 	orr.w	r3, r3, #8
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	4b63      	ldr	r3, [pc, #396]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	4960      	ldr	r1, [pc, #384]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 8004608:	4313      	orrs	r3, r2
 800460a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800460c:	4b5e      	ldr	r3, [pc, #376]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	021b      	lsls	r3, r3, #8
 800461a:	495b      	ldr	r1, [pc, #364]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 800461c:	4313      	orrs	r3, r2
 800461e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fd14 	bl	8005058 <RCC_SetFlashLatencyFromMSIRange>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e37a      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800463a:	f000 fc81 	bl	8004f40 <HAL_RCC_GetSysClockFreq>
 800463e:	4602      	mov	r2, r0
 8004640:	4b51      	ldr	r3, [pc, #324]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	091b      	lsrs	r3, r3, #4
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	4950      	ldr	r1, [pc, #320]	; (800478c <HAL_RCC_OscConfig+0x274>)
 800464c:	5ccb      	ldrb	r3, [r1, r3]
 800464e:	f003 031f 	and.w	r3, r3, #31
 8004652:	fa22 f303 	lsr.w	r3, r2, r3
 8004656:	4a4e      	ldr	r2, [pc, #312]	; (8004790 <HAL_RCC_OscConfig+0x278>)
 8004658:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800465a:	4b4e      	ldr	r3, [pc, #312]	; (8004794 <HAL_RCC_OscConfig+0x27c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f7fe fbda 	bl	8002e18 <HAL_InitTick>
 8004664:	4603      	mov	r3, r0
 8004666:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d052      	beq.n	8004714 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	e35e      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d032      	beq.n	80046e0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800467a:	4b43      	ldr	r3, [pc, #268]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a42      	ldr	r2, [pc, #264]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 8004680:	f043 0301 	orr.w	r3, r3, #1
 8004684:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004686:	f7fe fc17 	bl	8002eb8 <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800468c:	e008      	b.n	80046a0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800468e:	f7fe fc13 	bl	8002eb8 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e347      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046a0:	4b39      	ldr	r3, [pc, #228]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0f0      	beq.n	800468e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046ac:	4b36      	ldr	r3, [pc, #216]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a35      	ldr	r2, [pc, #212]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 80046b2:	f043 0308 	orr.w	r3, r3, #8
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	4b33      	ldr	r3, [pc, #204]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	4930      	ldr	r1, [pc, #192]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046ca:	4b2f      	ldr	r3, [pc, #188]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	492b      	ldr	r1, [pc, #172]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	604b      	str	r3, [r1, #4]
 80046de:	e01a      	b.n	8004716 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046e0:	4b29      	ldr	r3, [pc, #164]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a28      	ldr	r2, [pc, #160]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 80046e6:	f023 0301 	bic.w	r3, r3, #1
 80046ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046ec:	f7fe fbe4 	bl	8002eb8 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046f4:	f7fe fbe0 	bl	8002eb8 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e314      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004706:	4b20      	ldr	r3, [pc, #128]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0x1dc>
 8004712:	e000      	b.n	8004716 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004714:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d073      	beq.n	800480a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	2b08      	cmp	r3, #8
 8004726:	d005      	beq.n	8004734 <HAL_RCC_OscConfig+0x21c>
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	2b0c      	cmp	r3, #12
 800472c:	d10e      	bne.n	800474c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b03      	cmp	r3, #3
 8004732:	d10b      	bne.n	800474c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004734:	4b14      	ldr	r3, [pc, #80]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d063      	beq.n	8004808 <HAL_RCC_OscConfig+0x2f0>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d15f      	bne.n	8004808 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e2f1      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004754:	d106      	bne.n	8004764 <HAL_RCC_OscConfig+0x24c>
 8004756:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a0b      	ldr	r2, [pc, #44]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 800475c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	e025      	b.n	80047b0 <HAL_RCC_OscConfig+0x298>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800476c:	d114      	bne.n	8004798 <HAL_RCC_OscConfig+0x280>
 800476e:	4b06      	ldr	r3, [pc, #24]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a05      	ldr	r2, [pc, #20]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 8004774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	4b03      	ldr	r3, [pc, #12]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a02      	ldr	r2, [pc, #8]	; (8004788 <HAL_RCC_OscConfig+0x270>)
 8004780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	e013      	b.n	80047b0 <HAL_RCC_OscConfig+0x298>
 8004788:	40021000 	.word	0x40021000
 800478c:	08016aec 	.word	0x08016aec
 8004790:	20000030 	.word	0x20000030
 8004794:	20000034 	.word	0x20000034
 8004798:	4ba0      	ldr	r3, [pc, #640]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a9f      	ldr	r2, [pc, #636]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 800479e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	4b9d      	ldr	r3, [pc, #628]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a9c      	ldr	r2, [pc, #624]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 80047aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d013      	beq.n	80047e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b8:	f7fe fb7e 	bl	8002eb8 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c0:	f7fe fb7a 	bl	8002eb8 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b64      	cmp	r3, #100	; 0x64
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e2ae      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047d2:	4b92      	ldr	r3, [pc, #584]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCC_OscConfig+0x2a8>
 80047de:	e014      	b.n	800480a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e0:	f7fe fb6a 	bl	8002eb8 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e8:	f7fe fb66 	bl	8002eb8 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b64      	cmp	r3, #100	; 0x64
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e29a      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047fa:	4b88      	ldr	r3, [pc, #544]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f0      	bne.n	80047e8 <HAL_RCC_OscConfig+0x2d0>
 8004806:	e000      	b.n	800480a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d060      	beq.n	80048d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b04      	cmp	r3, #4
 800481a:	d005      	beq.n	8004828 <HAL_RCC_OscConfig+0x310>
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	2b0c      	cmp	r3, #12
 8004820:	d119      	bne.n	8004856 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b02      	cmp	r3, #2
 8004826:	d116      	bne.n	8004856 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004828:	4b7c      	ldr	r3, [pc, #496]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <HAL_RCC_OscConfig+0x328>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e277      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004840:	4b76      	ldr	r3, [pc, #472]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	061b      	lsls	r3, r3, #24
 800484e:	4973      	ldr	r1, [pc, #460]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 8004850:	4313      	orrs	r3, r2
 8004852:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004854:	e040      	b.n	80048d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d023      	beq.n	80048a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800485e:	4b6f      	ldr	r3, [pc, #444]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a6e      	ldr	r2, [pc, #440]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 8004864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486a:	f7fe fb25 	bl	8002eb8 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004872:	f7fe fb21 	bl	8002eb8 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e255      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004884:	4b65      	ldr	r3, [pc, #404]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f0      	beq.n	8004872 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004890:	4b62      	ldr	r3, [pc, #392]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	061b      	lsls	r3, r3, #24
 800489e:	495f      	ldr	r1, [pc, #380]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	604b      	str	r3, [r1, #4]
 80048a4:	e018      	b.n	80048d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a6:	4b5d      	ldr	r3, [pc, #372]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a5c      	ldr	r2, [pc, #368]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 80048ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b2:	f7fe fb01 	bl	8002eb8 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ba:	f7fe fafd 	bl	8002eb8 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e231      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048cc:	4b53      	ldr	r3, [pc, #332]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1f0      	bne.n	80048ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d03c      	beq.n	800495e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d01c      	beq.n	8004926 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ec:	4b4b      	ldr	r3, [pc, #300]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 80048ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048f2:	4a4a      	ldr	r2, [pc, #296]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 80048f4:	f043 0301 	orr.w	r3, r3, #1
 80048f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fc:	f7fe fadc 	bl	8002eb8 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004904:	f7fe fad8 	bl	8002eb8 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e20c      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004916:	4b41      	ldr	r3, [pc, #260]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 8004918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0ef      	beq.n	8004904 <HAL_RCC_OscConfig+0x3ec>
 8004924:	e01b      	b.n	800495e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004926:	4b3d      	ldr	r3, [pc, #244]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 8004928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800492c:	4a3b      	ldr	r2, [pc, #236]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 800492e:	f023 0301 	bic.w	r3, r3, #1
 8004932:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004936:	f7fe fabf 	bl	8002eb8 <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800493e:	f7fe fabb 	bl	8002eb8 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e1ef      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004950:	4b32      	ldr	r3, [pc, #200]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 8004952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1ef      	bne.n	800493e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 80a6 	beq.w	8004ab8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800496c:	2300      	movs	r3, #0
 800496e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004970:	4b2a      	ldr	r3, [pc, #168]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 8004972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10d      	bne.n	8004998 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800497c:	4b27      	ldr	r3, [pc, #156]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 800497e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004980:	4a26      	ldr	r2, [pc, #152]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 8004982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004986:	6593      	str	r3, [r2, #88]	; 0x58
 8004988:	4b24      	ldr	r3, [pc, #144]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 800498a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004990:	60bb      	str	r3, [r7, #8]
 8004992:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004994:	2301      	movs	r3, #1
 8004996:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004998:	4b21      	ldr	r3, [pc, #132]	; (8004a20 <HAL_RCC_OscConfig+0x508>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d118      	bne.n	80049d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049a4:	4b1e      	ldr	r3, [pc, #120]	; (8004a20 <HAL_RCC_OscConfig+0x508>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1d      	ldr	r2, [pc, #116]	; (8004a20 <HAL_RCC_OscConfig+0x508>)
 80049aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049b0:	f7fe fa82 	bl	8002eb8 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b8:	f7fe fa7e 	bl	8002eb8 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e1b2      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ca:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <HAL_RCC_OscConfig+0x508>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0f0      	beq.n	80049b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d108      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4d8>
 80049de:	4b0f      	ldr	r3, [pc, #60]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 80049e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e4:	4a0d      	ldr	r2, [pc, #52]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049ee:	e029      	b.n	8004a44 <HAL_RCC_OscConfig+0x52c>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b05      	cmp	r3, #5
 80049f6:	d115      	bne.n	8004a24 <HAL_RCC_OscConfig+0x50c>
 80049f8:	4b08      	ldr	r3, [pc, #32]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 80049fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fe:	4a07      	ldr	r2, [pc, #28]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 8004a00:	f043 0304 	orr.w	r3, r3, #4
 8004a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a08:	4b04      	ldr	r3, [pc, #16]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0e:	4a03      	ldr	r2, [pc, #12]	; (8004a1c <HAL_RCC_OscConfig+0x504>)
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a18:	e014      	b.n	8004a44 <HAL_RCC_OscConfig+0x52c>
 8004a1a:	bf00      	nop
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	40007000 	.word	0x40007000
 8004a24:	4b9a      	ldr	r3, [pc, #616]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2a:	4a99      	ldr	r2, [pc, #612]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004a2c:	f023 0301 	bic.w	r3, r3, #1
 8004a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a34:	4b96      	ldr	r3, [pc, #600]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3a:	4a95      	ldr	r2, [pc, #596]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004a3c:	f023 0304 	bic.w	r3, r3, #4
 8004a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d016      	beq.n	8004a7a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4c:	f7fe fa34 	bl	8002eb8 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a52:	e00a      	b.n	8004a6a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a54:	f7fe fa30 	bl	8002eb8 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e162      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a6a:	4b89      	ldr	r3, [pc, #548]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0ed      	beq.n	8004a54 <HAL_RCC_OscConfig+0x53c>
 8004a78:	e015      	b.n	8004aa6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7a:	f7fe fa1d 	bl	8002eb8 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a80:	e00a      	b.n	8004a98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a82:	f7fe fa19 	bl	8002eb8 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e14b      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a98:	4b7d      	ldr	r3, [pc, #500]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1ed      	bne.n	8004a82 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aa6:	7ffb      	ldrb	r3, [r7, #31]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d105      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aac:	4b78      	ldr	r3, [pc, #480]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab0:	4a77      	ldr	r2, [pc, #476]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004ab2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ab6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0320 	and.w	r3, r3, #32
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d03c      	beq.n	8004b3e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01c      	beq.n	8004b06 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004acc:	4b70      	ldr	r3, [pc, #448]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004ace:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ad2:	4a6f      	ldr	r2, [pc, #444]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004ad4:	f043 0301 	orr.w	r3, r3, #1
 8004ad8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004adc:	f7fe f9ec 	bl	8002eb8 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ae4:	f7fe f9e8 	bl	8002eb8 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e11c      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004af6:	4b66      	ldr	r3, [pc, #408]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004af8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0ef      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x5cc>
 8004b04:	e01b      	b.n	8004b3e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b06:	4b62      	ldr	r3, [pc, #392]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004b08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b0c:	4a60      	ldr	r2, [pc, #384]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004b0e:	f023 0301 	bic.w	r3, r3, #1
 8004b12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b16:	f7fe f9cf 	bl	8002eb8 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b1e:	f7fe f9cb 	bl	8002eb8 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e0ff      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b30:	4b57      	ldr	r3, [pc, #348]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004b32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1ef      	bne.n	8004b1e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 80f3 	beq.w	8004d2e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	f040 80c9 	bne.w	8004ce4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b52:	4b4f      	ldr	r3, [pc, #316]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f003 0203 	and.w	r2, r3, #3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d12c      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	3b01      	subs	r3, #1
 8004b72:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d123      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b82:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d11b      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b92:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d113      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba2:	085b      	lsrs	r3, r3, #1
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d109      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	085b      	lsrs	r3, r3, #1
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d06b      	beq.n	8004c98 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	2b0c      	cmp	r3, #12
 8004bc4:	d062      	beq.n	8004c8c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004bc6:	4b32      	ldr	r3, [pc, #200]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e0ac      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004bd6:	4b2e      	ldr	r3, [pc, #184]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a2d      	ldr	r2, [pc, #180]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004bdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004be0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004be2:	f7fe f969 	bl	8002eb8 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bea:	f7fe f965 	bl	8002eb8 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e099      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bfc:	4b24      	ldr	r3, [pc, #144]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1f0      	bne.n	8004bea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c08:	4b21      	ldr	r3, [pc, #132]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	4b21      	ldr	r3, [pc, #132]	; (8004c94 <HAL_RCC_OscConfig+0x77c>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c18:	3a01      	subs	r2, #1
 8004c1a:	0112      	lsls	r2, r2, #4
 8004c1c:	4311      	orrs	r1, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c22:	0212      	lsls	r2, r2, #8
 8004c24:	4311      	orrs	r1, r2
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c2a:	0852      	lsrs	r2, r2, #1
 8004c2c:	3a01      	subs	r2, #1
 8004c2e:	0552      	lsls	r2, r2, #21
 8004c30:	4311      	orrs	r1, r2
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c36:	0852      	lsrs	r2, r2, #1
 8004c38:	3a01      	subs	r2, #1
 8004c3a:	0652      	lsls	r2, r2, #25
 8004c3c:	4311      	orrs	r1, r2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c42:	06d2      	lsls	r2, r2, #27
 8004c44:	430a      	orrs	r2, r1
 8004c46:	4912      	ldr	r1, [pc, #72]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c4c:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a0f      	ldr	r2, [pc, #60]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c58:	4b0d      	ldr	r3, [pc, #52]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	4a0c      	ldr	r2, [pc, #48]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c64:	f7fe f928 	bl	8002eb8 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c6c:	f7fe f924 	bl	8002eb8 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e058      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c7e:	4b04      	ldr	r3, [pc, #16]	; (8004c90 <HAL_RCC_OscConfig+0x778>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0f0      	beq.n	8004c6c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c8a:	e050      	b.n	8004d2e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e04f      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
 8004c90:	40021000 	.word	0x40021000
 8004c94:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c98:	4b27      	ldr	r3, [pc, #156]	; (8004d38 <HAL_RCC_OscConfig+0x820>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d144      	bne.n	8004d2e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ca4:	4b24      	ldr	r3, [pc, #144]	; (8004d38 <HAL_RCC_OscConfig+0x820>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a23      	ldr	r2, [pc, #140]	; (8004d38 <HAL_RCC_OscConfig+0x820>)
 8004caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cb0:	4b21      	ldr	r3, [pc, #132]	; (8004d38 <HAL_RCC_OscConfig+0x820>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	4a20      	ldr	r2, [pc, #128]	; (8004d38 <HAL_RCC_OscConfig+0x820>)
 8004cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004cbc:	f7fe f8fc 	bl	8002eb8 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc4:	f7fe f8f8 	bl	8002eb8 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e02c      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cd6:	4b18      	ldr	r3, [pc, #96]	; (8004d38 <HAL_RCC_OscConfig+0x820>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x7ac>
 8004ce2:	e024      	b.n	8004d2e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	2b0c      	cmp	r3, #12
 8004ce8:	d01f      	beq.n	8004d2a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cea:	4b13      	ldr	r3, [pc, #76]	; (8004d38 <HAL_RCC_OscConfig+0x820>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a12      	ldr	r2, [pc, #72]	; (8004d38 <HAL_RCC_OscConfig+0x820>)
 8004cf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf6:	f7fe f8df 	bl	8002eb8 <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cfe:	f7fe f8db 	bl	8002eb8 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e00f      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d10:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <HAL_RCC_OscConfig+0x820>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1f0      	bne.n	8004cfe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004d1c:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <HAL_RCC_OscConfig+0x820>)
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	4905      	ldr	r1, [pc, #20]	; (8004d38 <HAL_RCC_OscConfig+0x820>)
 8004d22:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <HAL_RCC_OscConfig+0x824>)
 8004d24:	4013      	ands	r3, r2
 8004d26:	60cb      	str	r3, [r1, #12]
 8004d28:	e001      	b.n	8004d2e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3720      	adds	r7, #32
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	feeefffc 	.word	0xfeeefffc

08004d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e0e7      	b.n	8004f24 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d54:	4b75      	ldr	r3, [pc, #468]	; (8004f2c <HAL_RCC_ClockConfig+0x1ec>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d910      	bls.n	8004d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d62:	4b72      	ldr	r3, [pc, #456]	; (8004f2c <HAL_RCC_ClockConfig+0x1ec>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f023 0207 	bic.w	r2, r3, #7
 8004d6a:	4970      	ldr	r1, [pc, #448]	; (8004f2c <HAL_RCC_ClockConfig+0x1ec>)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d72:	4b6e      	ldr	r3, [pc, #440]	; (8004f2c <HAL_RCC_ClockConfig+0x1ec>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d001      	beq.n	8004d84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0cf      	b.n	8004f24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d010      	beq.n	8004db2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	4b66      	ldr	r3, [pc, #408]	; (8004f30 <HAL_RCC_ClockConfig+0x1f0>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d908      	bls.n	8004db2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004da0:	4b63      	ldr	r3, [pc, #396]	; (8004f30 <HAL_RCC_ClockConfig+0x1f0>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	4960      	ldr	r1, [pc, #384]	; (8004f30 <HAL_RCC_ClockConfig+0x1f0>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d04c      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d107      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dc6:	4b5a      	ldr	r3, [pc, #360]	; (8004f30 <HAL_RCC_ClockConfig+0x1f0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d121      	bne.n	8004e16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e0a6      	b.n	8004f24 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d107      	bne.n	8004dee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dde:	4b54      	ldr	r3, [pc, #336]	; (8004f30 <HAL_RCC_ClockConfig+0x1f0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d115      	bne.n	8004e16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e09a      	b.n	8004f24 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d107      	bne.n	8004e06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004df6:	4b4e      	ldr	r3, [pc, #312]	; (8004f30 <HAL_RCC_ClockConfig+0x1f0>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d109      	bne.n	8004e16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e08e      	b.n	8004f24 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e06:	4b4a      	ldr	r3, [pc, #296]	; (8004f30 <HAL_RCC_ClockConfig+0x1f0>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e086      	b.n	8004f24 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e16:	4b46      	ldr	r3, [pc, #280]	; (8004f30 <HAL_RCC_ClockConfig+0x1f0>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f023 0203 	bic.w	r2, r3, #3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	4943      	ldr	r1, [pc, #268]	; (8004f30 <HAL_RCC_ClockConfig+0x1f0>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e28:	f7fe f846 	bl	8002eb8 <HAL_GetTick>
 8004e2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e2e:	e00a      	b.n	8004e46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e30:	f7fe f842 	bl	8002eb8 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e06e      	b.n	8004f24 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e46:	4b3a      	ldr	r3, [pc, #232]	; (8004f30 <HAL_RCC_ClockConfig+0x1f0>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 020c 	and.w	r2, r3, #12
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d1eb      	bne.n	8004e30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d010      	beq.n	8004e86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <HAL_RCC_ClockConfig+0x1f0>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d208      	bcs.n	8004e86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e74:	4b2e      	ldr	r3, [pc, #184]	; (8004f30 <HAL_RCC_ClockConfig+0x1f0>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	492b      	ldr	r1, [pc, #172]	; (8004f30 <HAL_RCC_ClockConfig+0x1f0>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e86:	4b29      	ldr	r3, [pc, #164]	; (8004f2c <HAL_RCC_ClockConfig+0x1ec>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d210      	bcs.n	8004eb6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e94:	4b25      	ldr	r3, [pc, #148]	; (8004f2c <HAL_RCC_ClockConfig+0x1ec>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f023 0207 	bic.w	r2, r3, #7
 8004e9c:	4923      	ldr	r1, [pc, #140]	; (8004f2c <HAL_RCC_ClockConfig+0x1ec>)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea4:	4b21      	ldr	r3, [pc, #132]	; (8004f2c <HAL_RCC_ClockConfig+0x1ec>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d001      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e036      	b.n	8004f24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0304 	and.w	r3, r3, #4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d008      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ec2:	4b1b      	ldr	r3, [pc, #108]	; (8004f30 <HAL_RCC_ClockConfig+0x1f0>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	4918      	ldr	r1, [pc, #96]	; (8004f30 <HAL_RCC_ClockConfig+0x1f0>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0308 	and.w	r3, r3, #8
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d009      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ee0:	4b13      	ldr	r3, [pc, #76]	; (8004f30 <HAL_RCC_ClockConfig+0x1f0>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	4910      	ldr	r1, [pc, #64]	; (8004f30 <HAL_RCC_ClockConfig+0x1f0>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ef4:	f000 f824 	bl	8004f40 <HAL_RCC_GetSysClockFreq>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <HAL_RCC_ClockConfig+0x1f0>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	091b      	lsrs	r3, r3, #4
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	490b      	ldr	r1, [pc, #44]	; (8004f34 <HAL_RCC_ClockConfig+0x1f4>)
 8004f06:	5ccb      	ldrb	r3, [r1, r3]
 8004f08:	f003 031f 	and.w	r3, r3, #31
 8004f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f10:	4a09      	ldr	r2, [pc, #36]	; (8004f38 <HAL_RCC_ClockConfig+0x1f8>)
 8004f12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f14:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <HAL_RCC_ClockConfig+0x1fc>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fd ff7d 	bl	8002e18 <HAL_InitTick>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f22:	7afb      	ldrb	r3, [r7, #11]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40022000 	.word	0x40022000
 8004f30:	40021000 	.word	0x40021000
 8004f34:	08016aec 	.word	0x08016aec
 8004f38:	20000030 	.word	0x20000030
 8004f3c:	20000034 	.word	0x20000034

08004f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b089      	sub	sp, #36	; 0x24
 8004f44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	61fb      	str	r3, [r7, #28]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f4e:	4b3e      	ldr	r3, [pc, #248]	; (8005048 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 030c 	and.w	r3, r3, #12
 8004f56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f58:	4b3b      	ldr	r3, [pc, #236]	; (8005048 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f003 0303 	and.w	r3, r3, #3
 8004f60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d005      	beq.n	8004f74 <HAL_RCC_GetSysClockFreq+0x34>
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	2b0c      	cmp	r3, #12
 8004f6c:	d121      	bne.n	8004fb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d11e      	bne.n	8004fb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f74:	4b34      	ldr	r3, [pc, #208]	; (8005048 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0308 	and.w	r3, r3, #8
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d107      	bne.n	8004f90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f80:	4b31      	ldr	r3, [pc, #196]	; (8005048 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f86:	0a1b      	lsrs	r3, r3, #8
 8004f88:	f003 030f 	and.w	r3, r3, #15
 8004f8c:	61fb      	str	r3, [r7, #28]
 8004f8e:	e005      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f90:	4b2d      	ldr	r3, [pc, #180]	; (8005048 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	091b      	lsrs	r3, r3, #4
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f9c:	4a2b      	ldr	r2, [pc, #172]	; (800504c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10d      	bne.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fb0:	e00a      	b.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b04      	cmp	r3, #4
 8004fb6:	d102      	bne.n	8004fbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004fb8:	4b25      	ldr	r3, [pc, #148]	; (8005050 <HAL_RCC_GetSysClockFreq+0x110>)
 8004fba:	61bb      	str	r3, [r7, #24]
 8004fbc:	e004      	b.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	2b08      	cmp	r3, #8
 8004fc2:	d101      	bne.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004fc4:	4b23      	ldr	r3, [pc, #140]	; (8005054 <HAL_RCC_GetSysClockFreq+0x114>)
 8004fc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	2b0c      	cmp	r3, #12
 8004fcc:	d134      	bne.n	8005038 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fce:	4b1e      	ldr	r3, [pc, #120]	; (8005048 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d003      	beq.n	8004fe6 <HAL_RCC_GetSysClockFreq+0xa6>
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b03      	cmp	r3, #3
 8004fe2:	d003      	beq.n	8004fec <HAL_RCC_GetSysClockFreq+0xac>
 8004fe4:	e005      	b.n	8004ff2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004fe6:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <HAL_RCC_GetSysClockFreq+0x110>)
 8004fe8:	617b      	str	r3, [r7, #20]
      break;
 8004fea:	e005      	b.n	8004ff8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004fec:	4b19      	ldr	r3, [pc, #100]	; (8005054 <HAL_RCC_GetSysClockFreq+0x114>)
 8004fee:	617b      	str	r3, [r7, #20]
      break;
 8004ff0:	e002      	b.n	8004ff8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	617b      	str	r3, [r7, #20]
      break;
 8004ff6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ff8:	4b13      	ldr	r3, [pc, #76]	; (8005048 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	091b      	lsrs	r3, r3, #4
 8004ffe:	f003 0307 	and.w	r3, r3, #7
 8005002:	3301      	adds	r3, #1
 8005004:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005006:	4b10      	ldr	r3, [pc, #64]	; (8005048 <HAL_RCC_GetSysClockFreq+0x108>)
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	0a1b      	lsrs	r3, r3, #8
 800500c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	fb03 f202 	mul.w	r2, r3, r2
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	fbb2 f3f3 	udiv	r3, r2, r3
 800501c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800501e:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <HAL_RCC_GetSysClockFreq+0x108>)
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	0e5b      	lsrs	r3, r3, #25
 8005024:	f003 0303 	and.w	r3, r3, #3
 8005028:	3301      	adds	r3, #1
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	fbb2 f3f3 	udiv	r3, r2, r3
 8005036:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005038:	69bb      	ldr	r3, [r7, #24]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3724      	adds	r7, #36	; 0x24
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	40021000 	.word	0x40021000
 800504c:	08016afc 	.word	0x08016afc
 8005050:	00f42400 	.word	0x00f42400
 8005054:	007a1200 	.word	0x007a1200

08005058 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005060:	2300      	movs	r3, #0
 8005062:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005064:	4b2a      	ldr	r3, [pc, #168]	; (8005110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005070:	f7fe fef0 	bl	8003e54 <HAL_PWREx_GetVoltageRange>
 8005074:	6178      	str	r0, [r7, #20]
 8005076:	e014      	b.n	80050a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005078:	4b25      	ldr	r3, [pc, #148]	; (8005110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800507a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507c:	4a24      	ldr	r2, [pc, #144]	; (8005110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800507e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005082:	6593      	str	r3, [r2, #88]	; 0x58
 8005084:	4b22      	ldr	r3, [pc, #136]	; (8005110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005090:	f7fe fee0 	bl	8003e54 <HAL_PWREx_GetVoltageRange>
 8005094:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005096:	4b1e      	ldr	r3, [pc, #120]	; (8005110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509a:	4a1d      	ldr	r2, [pc, #116]	; (8005110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800509c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050a8:	d10b      	bne.n	80050c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b80      	cmp	r3, #128	; 0x80
 80050ae:	d919      	bls.n	80050e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2ba0      	cmp	r3, #160	; 0xa0
 80050b4:	d902      	bls.n	80050bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050b6:	2302      	movs	r3, #2
 80050b8:	613b      	str	r3, [r7, #16]
 80050ba:	e013      	b.n	80050e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050bc:	2301      	movs	r3, #1
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	e010      	b.n	80050e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b80      	cmp	r3, #128	; 0x80
 80050c6:	d902      	bls.n	80050ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80050c8:	2303      	movs	r3, #3
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	e00a      	b.n	80050e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b80      	cmp	r3, #128	; 0x80
 80050d2:	d102      	bne.n	80050da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050d4:	2302      	movs	r3, #2
 80050d6:	613b      	str	r3, [r7, #16]
 80050d8:	e004      	b.n	80050e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b70      	cmp	r3, #112	; 0x70
 80050de:	d101      	bne.n	80050e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050e0:	2301      	movs	r3, #1
 80050e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80050e4:	4b0b      	ldr	r3, [pc, #44]	; (8005114 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f023 0207 	bic.w	r2, r3, #7
 80050ec:	4909      	ldr	r1, [pc, #36]	; (8005114 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80050f4:	4b07      	ldr	r3, [pc, #28]	; (8005114 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d001      	beq.n	8005106 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3718      	adds	r7, #24
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40021000 	.word	0x40021000
 8005114:	40022000 	.word	0x40022000

08005118 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e095      	b.n	8005256 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	2b00      	cmp	r3, #0
 8005130:	d108      	bne.n	8005144 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800513a:	d009      	beq.n	8005150 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	61da      	str	r2, [r3, #28]
 8005142:	e005      	b.n	8005150 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7fc fc9c 	bl	8001aa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005186:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005190:	d902      	bls.n	8005198 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	e002      	b.n	800519e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800519c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80051a6:	d007      	beq.n	80051b8 <HAL_SPI_Init+0xa0>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051b0:	d002      	beq.n	80051b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051c8:	431a      	orrs	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	431a      	orrs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051f0:	431a      	orrs	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fa:	ea42 0103 	orr.w	r1, r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005202:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	0c1b      	lsrs	r3, r3, #16
 8005214:	f003 0204 	and.w	r2, r3, #4
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	f003 0310 	and.w	r3, r3, #16
 8005220:	431a      	orrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005234:	ea42 0103 	orr.w	r1, r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b088      	sub	sp, #32
 8005262:	af00      	add	r7, sp, #0
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	603b      	str	r3, [r7, #0]
 800526a:	4613      	mov	r3, r2
 800526c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_SPI_Transmit+0x22>
 800527c:	2302      	movs	r3, #2
 800527e:	e158      	b.n	8005532 <HAL_SPI_Transmit+0x2d4>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005288:	f7fd fe16 	bl	8002eb8 <HAL_GetTick>
 800528c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800528e:	88fb      	ldrh	r3, [r7, #6]
 8005290:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b01      	cmp	r3, #1
 800529c:	d002      	beq.n	80052a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800529e:	2302      	movs	r3, #2
 80052a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052a2:	e13d      	b.n	8005520 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <HAL_SPI_Transmit+0x52>
 80052aa:	88fb      	ldrh	r3, [r7, #6]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d102      	bne.n	80052b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052b4:	e134      	b.n	8005520 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2203      	movs	r2, #3
 80052ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	88fa      	ldrh	r2, [r7, #6]
 80052ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	88fa      	ldrh	r2, [r7, #6]
 80052d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005300:	d10f      	bne.n	8005322 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005310:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005320:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532c:	2b40      	cmp	r3, #64	; 0x40
 800532e:	d007      	beq.n	8005340 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800533e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005348:	d94b      	bls.n	80053e2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <HAL_SPI_Transmit+0xfa>
 8005352:	8afb      	ldrh	r3, [r7, #22]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d13e      	bne.n	80053d6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535c:	881a      	ldrh	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	1c9a      	adds	r2, r3, #2
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005372:	b29b      	uxth	r3, r3
 8005374:	3b01      	subs	r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800537c:	e02b      	b.n	80053d6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b02      	cmp	r3, #2
 800538a:	d112      	bne.n	80053b2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005390:	881a      	ldrh	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	1c9a      	adds	r2, r3, #2
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053b0:	e011      	b.n	80053d6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053b2:	f7fd fd81 	bl	8002eb8 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d803      	bhi.n	80053ca <HAL_SPI_Transmit+0x16c>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c8:	d102      	bne.n	80053d0 <HAL_SPI_Transmit+0x172>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d102      	bne.n	80053d6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053d4:	e0a4      	b.n	8005520 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053da:	b29b      	uxth	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1ce      	bne.n	800537e <HAL_SPI_Transmit+0x120>
 80053e0:	e07c      	b.n	80054dc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <HAL_SPI_Transmit+0x192>
 80053ea:	8afb      	ldrh	r3, [r7, #22]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d170      	bne.n	80054d2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d912      	bls.n	8005420 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	881a      	ldrh	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	1c9a      	adds	r2, r3, #2
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005414:	b29b      	uxth	r3, r3
 8005416:	3b02      	subs	r3, #2
 8005418:	b29a      	uxth	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800541e:	e058      	b.n	80054d2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	330c      	adds	r3, #12
 800542a:	7812      	ldrb	r2, [r2, #0]
 800542c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800543c:	b29b      	uxth	r3, r3
 800543e:	3b01      	subs	r3, #1
 8005440:	b29a      	uxth	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005446:	e044      	b.n	80054d2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b02      	cmp	r3, #2
 8005454:	d12b      	bne.n	80054ae <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800545a:	b29b      	uxth	r3, r3
 800545c:	2b01      	cmp	r3, #1
 800545e:	d912      	bls.n	8005486 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005464:	881a      	ldrh	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005470:	1c9a      	adds	r2, r3, #2
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800547a:	b29b      	uxth	r3, r3
 800547c:	3b02      	subs	r3, #2
 800547e:	b29a      	uxth	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005484:	e025      	b.n	80054d2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	330c      	adds	r3, #12
 8005490:	7812      	ldrb	r2, [r2, #0]
 8005492:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054ac:	e011      	b.n	80054d2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054ae:	f7fd fd03 	bl	8002eb8 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d803      	bhi.n	80054c6 <HAL_SPI_Transmit+0x268>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c4:	d102      	bne.n	80054cc <HAL_SPI_Transmit+0x26e>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d102      	bne.n	80054d2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054d0:	e026      	b.n	8005520 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1b5      	bne.n	8005448 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	6839      	ldr	r1, [r7, #0]
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 fe77 	bl	80061d4 <SPI_EndRxTxTransaction>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2220      	movs	r2, #32
 80054f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10a      	bne.n	8005510 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054fa:	2300      	movs	r3, #0
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	77fb      	strb	r3, [r7, #31]
 800551c:	e000      	b.n	8005520 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800551e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005530:	7ffb      	ldrb	r3, [r7, #31]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3720      	adds	r7, #32
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b088      	sub	sp, #32
 800553e:	af02      	add	r7, sp, #8
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	603b      	str	r3, [r7, #0]
 8005546:	4613      	mov	r3, r2
 8005548:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005556:	d112      	bne.n	800557e <HAL_SPI_Receive+0x44>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10e      	bne.n	800557e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2204      	movs	r2, #4
 8005564:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005568:	88fa      	ldrh	r2, [r7, #6]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	4613      	mov	r3, r2
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	68b9      	ldr	r1, [r7, #8]
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f910 	bl	800579a <HAL_SPI_TransmitReceive>
 800557a:	4603      	mov	r3, r0
 800557c:	e109      	b.n	8005792 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005584:	2b01      	cmp	r3, #1
 8005586:	d101      	bne.n	800558c <HAL_SPI_Receive+0x52>
 8005588:	2302      	movs	r3, #2
 800558a:	e102      	b.n	8005792 <HAL_SPI_Receive+0x258>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005594:	f7fd fc90 	bl	8002eb8 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d002      	beq.n	80055ac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80055a6:	2302      	movs	r3, #2
 80055a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055aa:	e0e9      	b.n	8005780 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <HAL_SPI_Receive+0x7e>
 80055b2:	88fb      	ldrh	r3, [r7, #6]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d102      	bne.n	80055be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055bc:	e0e0      	b.n	8005780 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2204      	movs	r2, #4
 80055c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	88fa      	ldrh	r2, [r7, #6]
 80055d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	88fa      	ldrh	r2, [r7, #6]
 80055de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005608:	d908      	bls.n	800561c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005618:	605a      	str	r2, [r3, #4]
 800561a:	e007      	b.n	800562c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800562a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005634:	d10f      	bne.n	8005656 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005644:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005654:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005660:	2b40      	cmp	r3, #64	; 0x40
 8005662:	d007      	beq.n	8005674 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005672:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800567c:	d867      	bhi.n	800574e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800567e:	e030      	b.n	80056e2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b01      	cmp	r3, #1
 800568c:	d117      	bne.n	80056be <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f103 020c 	add.w	r2, r3, #12
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	7812      	ldrb	r2, [r2, #0]
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80056bc:	e011      	b.n	80056e2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056be:	f7fd fbfb 	bl	8002eb8 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d803      	bhi.n	80056d6 <HAL_SPI_Receive+0x19c>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d4:	d102      	bne.n	80056dc <HAL_SPI_Receive+0x1a2>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d102      	bne.n	80056e2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80056e0:	e04e      	b.n	8005780 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1c8      	bne.n	8005680 <HAL_SPI_Receive+0x146>
 80056ee:	e034      	b.n	800575a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d115      	bne.n	800572a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005708:	b292      	uxth	r2, r2
 800570a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005710:	1c9a      	adds	r2, r3, #2
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800571c:	b29b      	uxth	r3, r3
 800571e:	3b01      	subs	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005728:	e011      	b.n	800574e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800572a:	f7fd fbc5 	bl	8002eb8 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d803      	bhi.n	8005742 <HAL_SPI_Receive+0x208>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005740:	d102      	bne.n	8005748 <HAL_SPI_Receive+0x20e>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d102      	bne.n	800574e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800574c:	e018      	b.n	8005780 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1ca      	bne.n	80056f0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	6839      	ldr	r1, [r7, #0]
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 fce0 	bl	8006124 <SPI_EndRxTransaction>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2220      	movs	r2, #32
 800576e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	75fb      	strb	r3, [r7, #23]
 800577c:	e000      	b.n	8005780 <HAL_SPI_Receive+0x246>
  }

error :
 800577e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005790:	7dfb      	ldrb	r3, [r7, #23]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3718      	adds	r7, #24
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b08a      	sub	sp, #40	; 0x28
 800579e:	af00      	add	r7, sp, #0
 80057a0:	60f8      	str	r0, [r7, #12]
 80057a2:	60b9      	str	r1, [r7, #8]
 80057a4:	607a      	str	r2, [r7, #4]
 80057a6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057a8:	2301      	movs	r3, #1
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_SPI_TransmitReceive+0x26>
 80057bc:	2302      	movs	r3, #2
 80057be:	e1fb      	b.n	8005bb8 <HAL_SPI_TransmitReceive+0x41e>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057c8:	f7fd fb76 	bl	8002eb8 <HAL_GetTick>
 80057cc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057d4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80057dc:	887b      	ldrh	r3, [r7, #2]
 80057de:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80057e0:	887b      	ldrh	r3, [r7, #2]
 80057e2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057e4:	7efb      	ldrb	r3, [r7, #27]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d00e      	beq.n	8005808 <HAL_SPI_TransmitReceive+0x6e>
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057f0:	d106      	bne.n	8005800 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d102      	bne.n	8005800 <HAL_SPI_TransmitReceive+0x66>
 80057fa:	7efb      	ldrb	r3, [r7, #27]
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	d003      	beq.n	8005808 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005800:	2302      	movs	r3, #2
 8005802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005806:	e1cd      	b.n	8005ba4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d005      	beq.n	800581a <HAL_SPI_TransmitReceive+0x80>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <HAL_SPI_TransmitReceive+0x80>
 8005814:	887b      	ldrh	r3, [r7, #2]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d103      	bne.n	8005822 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005820:	e1c0      	b.n	8005ba4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b04      	cmp	r3, #4
 800582c:	d003      	beq.n	8005836 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2205      	movs	r2, #5
 8005832:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	887a      	ldrh	r2, [r7, #2]
 8005846:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	887a      	ldrh	r2, [r7, #2]
 800584e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	887a      	ldrh	r2, [r7, #2]
 800585c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	887a      	ldrh	r2, [r7, #2]
 8005862:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005878:	d802      	bhi.n	8005880 <HAL_SPI_TransmitReceive+0xe6>
 800587a:	8a3b      	ldrh	r3, [r7, #16]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d908      	bls.n	8005892 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800588e:	605a      	str	r2, [r3, #4]
 8005890:	e007      	b.n	80058a2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058a0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ac:	2b40      	cmp	r3, #64	; 0x40
 80058ae:	d007      	beq.n	80058c0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058c8:	d97c      	bls.n	80059c4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <HAL_SPI_TransmitReceive+0x13e>
 80058d2:	8a7b      	ldrh	r3, [r7, #18]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d169      	bne.n	80059ac <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	881a      	ldrh	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	1c9a      	adds	r2, r3, #2
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	3b01      	subs	r3, #1
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058fc:	e056      	b.n	80059ac <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b02      	cmp	r3, #2
 800590a:	d11b      	bne.n	8005944 <HAL_SPI_TransmitReceive+0x1aa>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005910:	b29b      	uxth	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d016      	beq.n	8005944 <HAL_SPI_TransmitReceive+0x1aa>
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	2b01      	cmp	r3, #1
 800591a:	d113      	bne.n	8005944 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	881a      	ldrh	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	1c9a      	adds	r2, r3, #2
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005936:	b29b      	uxth	r3, r3
 8005938:	3b01      	subs	r3, #1
 800593a:	b29a      	uxth	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b01      	cmp	r3, #1
 8005950:	d11c      	bne.n	800598c <HAL_SPI_TransmitReceive+0x1f2>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d016      	beq.n	800598c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005968:	b292      	uxth	r2, r2
 800596a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	1c9a      	adds	r2, r3, #2
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800597c:	b29b      	uxth	r3, r3
 800597e:	3b01      	subs	r3, #1
 8005980:	b29a      	uxth	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005988:	2301      	movs	r3, #1
 800598a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800598c:	f7fd fa94 	bl	8002eb8 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005998:	429a      	cmp	r2, r3
 800599a:	d807      	bhi.n	80059ac <HAL_SPI_TransmitReceive+0x212>
 800599c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a2:	d003      	beq.n	80059ac <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80059aa:	e0fb      	b.n	8005ba4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1a3      	bne.n	80058fe <HAL_SPI_TransmitReceive+0x164>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059bc:	b29b      	uxth	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d19d      	bne.n	80058fe <HAL_SPI_TransmitReceive+0x164>
 80059c2:	e0df      	b.n	8005b84 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <HAL_SPI_TransmitReceive+0x23a>
 80059cc:	8a7b      	ldrh	r3, [r7, #18]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	f040 80cb 	bne.w	8005b6a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d912      	bls.n	8005a04 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e2:	881a      	ldrh	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	1c9a      	adds	r2, r3, #2
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3b02      	subs	r3, #2
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a02:	e0b2      	b.n	8005b6a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	330c      	adds	r3, #12
 8005a0e:	7812      	ldrb	r2, [r2, #0]
 8005a10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a2a:	e09e      	b.n	8005b6a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d134      	bne.n	8005aa4 <HAL_SPI_TransmitReceive+0x30a>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d02f      	beq.n	8005aa4 <HAL_SPI_TransmitReceive+0x30a>
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d12c      	bne.n	8005aa4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d912      	bls.n	8005a7a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a58:	881a      	ldrh	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a64:	1c9a      	adds	r2, r3, #2
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	3b02      	subs	r3, #2
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a78:	e012      	b.n	8005aa0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	330c      	adds	r3, #12
 8005a84:	7812      	ldrb	r2, [r2, #0]
 8005a86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d148      	bne.n	8005b44 <HAL_SPI_TransmitReceive+0x3aa>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d042      	beq.n	8005b44 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d923      	bls.n	8005b12 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	b292      	uxth	r2, r2
 8005ad6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005adc:	1c9a      	adds	r2, r3, #2
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3b02      	subs	r3, #2
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d81f      	bhi.n	8005b40 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b0e:	605a      	str	r2, [r3, #4]
 8005b10:	e016      	b.n	8005b40 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f103 020c 	add.w	r2, r3, #12
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	7812      	ldrb	r2, [r2, #0]
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b28:	1c5a      	adds	r2, r3, #1
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	3b01      	subs	r3, #1
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b40:	2301      	movs	r3, #1
 8005b42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b44:	f7fd f9b8 	bl	8002eb8 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d803      	bhi.n	8005b5c <HAL_SPI_TransmitReceive+0x3c2>
 8005b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5a:	d102      	bne.n	8005b62 <HAL_SPI_TransmitReceive+0x3c8>
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d103      	bne.n	8005b6a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005b68:	e01c      	b.n	8005ba4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f47f af5b 	bne.w	8005a2c <HAL_SPI_TransmitReceive+0x292>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f47f af54 	bne.w	8005a2c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b84:	69fa      	ldr	r2, [r7, #28]
 8005b86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 fb23 	bl	80061d4 <SPI_EndRxTxTransaction>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d006      	beq.n	8005ba2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	661a      	str	r2, [r3, #96]	; 0x60
 8005ba0:	e000      	b.n	8005ba4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005ba2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005bb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3728      	adds	r7, #40	; 0x28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d101      	bne.n	8005be0 <HAL_SPI_Transmit_DMA+0x20>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	e0d8      	b.n	8005d92 <HAL_SPI_Transmit_DMA+0x1d2>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d002      	beq.n	8005bfa <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005bf8:	e0c6      	b.n	8005d88 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <HAL_SPI_Transmit_DMA+0x46>
 8005c00:	88fb      	ldrh	r3, [r7, #6]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d102      	bne.n	8005c0c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c0a:	e0bd      	b.n	8005d88 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2203      	movs	r2, #3
 8005c10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	88fa      	ldrh	r2, [r7, #6]
 8005c24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	88fa      	ldrh	r2, [r7, #6]
 8005c2a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c56:	d10f      	bne.n	8005c78 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7c:	4a47      	ldr	r2, [pc, #284]	; (8005d9c <HAL_SPI_Transmit_DMA+0x1dc>)
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c84:	4a46      	ldr	r2, [pc, #280]	; (8005da0 <HAL_SPI_Transmit_DMA+0x1e0>)
 8005c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8c:	4a45      	ldr	r2, [pc, #276]	; (8005da4 <HAL_SPI_Transmit_DMA+0x1e4>)
 8005c8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c94:	2200      	movs	r2, #0
 8005c96:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ca6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cb0:	d82d      	bhi.n	8005d0e <HAL_SPI_Transmit_DMA+0x14e>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cbc:	d127      	bne.n	8005d0e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10f      	bne.n	8005cec <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cda:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	085b      	lsrs	r3, r3, #1
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cea:	e010      	b.n	8005d0e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cfa:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	085b      	lsrs	r3, r3, #1
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3301      	adds	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	4619      	mov	r1, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	330c      	adds	r3, #12
 8005d1e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d24:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005d26:	f7fd fac1 	bl	80032ac <HAL_DMA_Start_IT>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00c      	beq.n	8005d4a <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d34:	f043 0210 	orr.w	r2, r3, #16
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005d48:	e01e      	b.n	8005d88 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d54:	2b40      	cmp	r3, #64	; 0x40
 8005d56:	d007      	beq.n	8005d68 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d66:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f042 0220 	orr.w	r2, r2, #32
 8005d76:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0202 	orr.w	r2, r2, #2
 8005d86:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	08005e8b 	.word	0x08005e8b
 8005da0:	08005de5 	.word	0x08005de5
 8005da4:	08005ea7 	.word	0x08005ea7

08005da8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005df2:	f7fd f861 	bl	8002eb8 <HAL_GetTick>
 8005df6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0320 	and.w	r3, r3, #32
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	d03b      	beq.n	8005e7e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0220 	bic.w	r2, r2, #32
 8005e14:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0202 	bic.w	r2, r2, #2
 8005e24:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	2164      	movs	r1, #100	; 0x64
 8005e2a:	6978      	ldr	r0, [r7, #20]
 8005e2c:	f000 f9d2 	bl	80061d4 <SPI_EndRxTxTransaction>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d005      	beq.n	8005e42 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e3a:	f043 0220 	orr.w	r2, r3, #32
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10a      	bne.n	8005e60 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2200      	movs	r2, #0
 8005e64:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005e76:	6978      	ldr	r0, [r7, #20]
 8005e78:	f7ff ffaa 	bl	8005dd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005e7c:	e002      	b.n	8005e84 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005e7e:	6978      	ldr	r0, [r7, #20]
 8005e80:	f7ff ff92 	bl	8005da8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f7ff ff8f 	bl	8005dbc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e9e:	bf00      	nop
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0203 	bic.w	r2, r2, #3
 8005ec2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec8:	f043 0210 	orr.w	r2, r3, #16
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f7ff ff79 	bl	8005dd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ede:	bf00      	nop
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b088      	sub	sp, #32
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	603b      	str	r3, [r7, #0]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ef8:	f7fc ffde 	bl	8002eb8 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f00:	1a9b      	subs	r3, r3, r2
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	4413      	add	r3, r2
 8005f06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f08:	f7fc ffd6 	bl	8002eb8 <HAL_GetTick>
 8005f0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f0e:	4b39      	ldr	r3, [pc, #228]	; (8005ff4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	015b      	lsls	r3, r3, #5
 8005f14:	0d1b      	lsrs	r3, r3, #20
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	fb02 f303 	mul.w	r3, r2, r3
 8005f1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f1e:	e054      	b.n	8005fca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f26:	d050      	beq.n	8005fca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f28:	f7fc ffc6 	bl	8002eb8 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	69fa      	ldr	r2, [r7, #28]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d902      	bls.n	8005f3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d13d      	bne.n	8005fba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f56:	d111      	bne.n	8005f7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f60:	d004      	beq.n	8005f6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f6a:	d107      	bne.n	8005f7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f84:	d10f      	bne.n	8005fa6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fa4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e017      	b.n	8005fea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	bf0c      	ite	eq
 8005fda:	2301      	moveq	r3, #1
 8005fdc:	2300      	movne	r3, #0
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	79fb      	ldrb	r3, [r7, #7]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d19b      	bne.n	8005f20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3720      	adds	r7, #32
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	20000030 	.word	0x20000030

08005ff8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08a      	sub	sp, #40	; 0x28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006006:	2300      	movs	r3, #0
 8006008:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800600a:	f7fc ff55 	bl	8002eb8 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006012:	1a9b      	subs	r3, r3, r2
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	4413      	add	r3, r2
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800601a:	f7fc ff4d 	bl	8002eb8 <HAL_GetTick>
 800601e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	330c      	adds	r3, #12
 8006026:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006028:	4b3d      	ldr	r3, [pc, #244]	; (8006120 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	4613      	mov	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	00da      	lsls	r2, r3, #3
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	0d1b      	lsrs	r3, r3, #20
 8006038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800603a:	fb02 f303 	mul.w	r3, r2, r3
 800603e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006040:	e060      	b.n	8006104 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006048:	d107      	bne.n	800605a <SPI_WaitFifoStateUntilTimeout+0x62>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d104      	bne.n	800605a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006058:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006060:	d050      	beq.n	8006104 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006062:	f7fc ff29 	bl	8002eb8 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800606e:	429a      	cmp	r2, r3
 8006070:	d902      	bls.n	8006078 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	2b00      	cmp	r3, #0
 8006076:	d13d      	bne.n	80060f4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006086:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006090:	d111      	bne.n	80060b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800609a:	d004      	beq.n	80060a6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a4:	d107      	bne.n	80060b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060be:	d10f      	bne.n	80060e0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e010      	b.n	8006116 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	3b01      	subs	r3, #1
 8006102:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689a      	ldr	r2, [r3, #8]
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	4013      	ands	r3, r2
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	429a      	cmp	r2, r3
 8006112:	d196      	bne.n	8006042 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3728      	adds	r7, #40	; 0x28
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	20000030 	.word	0x20000030

08006124 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af02      	add	r7, sp, #8
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006138:	d111      	bne.n	800615e <SPI_EndRxTransaction+0x3a>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006142:	d004      	beq.n	800614e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800614c:	d107      	bne.n	800615e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800615c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2200      	movs	r2, #0
 8006166:	2180      	movs	r1, #128	; 0x80
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7ff febd 	bl	8005ee8 <SPI_WaitFlagStateUntilTimeout>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d007      	beq.n	8006184 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006178:	f043 0220 	orr.w	r2, r3, #32
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e023      	b.n	80061cc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800618c:	d11d      	bne.n	80061ca <SPI_EndRxTransaction+0xa6>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006196:	d004      	beq.n	80061a2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061a0:	d113      	bne.n	80061ca <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f7ff ff22 	bl	8005ff8 <SPI_WaitFifoStateUntilTimeout>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d007      	beq.n	80061ca <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061be:	f043 0220 	orr.w	r2, r3, #32
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e000      	b.n	80061cc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af02      	add	r7, sp, #8
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f7ff ff03 	bl	8005ff8 <SPI_WaitFifoStateUntilTimeout>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d007      	beq.n	8006208 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061fc:	f043 0220 	orr.w	r2, r3, #32
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e027      	b.n	8006258 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2200      	movs	r2, #0
 8006210:	2180      	movs	r1, #128	; 0x80
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f7ff fe68 	bl	8005ee8 <SPI_WaitFlagStateUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d007      	beq.n	800622e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006222:	f043 0220 	orr.w	r2, r3, #32
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e014      	b.n	8006258 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2200      	movs	r2, #0
 8006236:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f7ff fedc 	bl	8005ff8 <SPI_WaitFifoStateUntilTimeout>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d007      	beq.n	8006256 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800624a:	f043 0220 	orr.w	r2, r3, #32
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e000      	b.n	8006258 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e049      	b.n	8006306 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d106      	bne.n	800628c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7fb fd58 	bl	8001d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	3304      	adds	r3, #4
 800629c:	4619      	mov	r1, r3
 800629e:	4610      	mov	r0, r2
 80062a0:	f000 fca4 	bl	8006bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b082      	sub	sp, #8
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e049      	b.n	80063b4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	d106      	bne.n	800633a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f841 	bl	80063bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2202      	movs	r2, #2
 800633e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	3304      	adds	r3, #4
 800634a:	4619      	mov	r1, r3
 800634c:	4610      	mov	r0, r2
 800634e:	f000 fc4d 	bl	8006bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d109      	bne.n	80063f4 <HAL_TIM_PWM_Start+0x24>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	bf14      	ite	ne
 80063ec:	2301      	movne	r3, #1
 80063ee:	2300      	moveq	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	e03c      	b.n	800646e <HAL_TIM_PWM_Start+0x9e>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	d109      	bne.n	800640e <HAL_TIM_PWM_Start+0x3e>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b01      	cmp	r3, #1
 8006404:	bf14      	ite	ne
 8006406:	2301      	movne	r3, #1
 8006408:	2300      	moveq	r3, #0
 800640a:	b2db      	uxtb	r3, r3
 800640c:	e02f      	b.n	800646e <HAL_TIM_PWM_Start+0x9e>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b08      	cmp	r3, #8
 8006412:	d109      	bne.n	8006428 <HAL_TIM_PWM_Start+0x58>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b01      	cmp	r3, #1
 800641e:	bf14      	ite	ne
 8006420:	2301      	movne	r3, #1
 8006422:	2300      	moveq	r3, #0
 8006424:	b2db      	uxtb	r3, r3
 8006426:	e022      	b.n	800646e <HAL_TIM_PWM_Start+0x9e>
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2b0c      	cmp	r3, #12
 800642c:	d109      	bne.n	8006442 <HAL_TIM_PWM_Start+0x72>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b01      	cmp	r3, #1
 8006438:	bf14      	ite	ne
 800643a:	2301      	movne	r3, #1
 800643c:	2300      	moveq	r3, #0
 800643e:	b2db      	uxtb	r3, r3
 8006440:	e015      	b.n	800646e <HAL_TIM_PWM_Start+0x9e>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b10      	cmp	r3, #16
 8006446:	d109      	bne.n	800645c <HAL_TIM_PWM_Start+0x8c>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b01      	cmp	r3, #1
 8006452:	bf14      	ite	ne
 8006454:	2301      	movne	r3, #1
 8006456:	2300      	moveq	r3, #0
 8006458:	b2db      	uxtb	r3, r3
 800645a:	e008      	b.n	800646e <HAL_TIM_PWM_Start+0x9e>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b01      	cmp	r3, #1
 8006466:	bf14      	ite	ne
 8006468:	2301      	movne	r3, #1
 800646a:	2300      	moveq	r3, #0
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e07e      	b.n	8006574 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d104      	bne.n	8006486 <HAL_TIM_PWM_Start+0xb6>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006484:	e023      	b.n	80064ce <HAL_TIM_PWM_Start+0xfe>
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b04      	cmp	r3, #4
 800648a:	d104      	bne.n	8006496 <HAL_TIM_PWM_Start+0xc6>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006494:	e01b      	b.n	80064ce <HAL_TIM_PWM_Start+0xfe>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b08      	cmp	r3, #8
 800649a:	d104      	bne.n	80064a6 <HAL_TIM_PWM_Start+0xd6>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064a4:	e013      	b.n	80064ce <HAL_TIM_PWM_Start+0xfe>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b0c      	cmp	r3, #12
 80064aa:	d104      	bne.n	80064b6 <HAL_TIM_PWM_Start+0xe6>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064b4:	e00b      	b.n	80064ce <HAL_TIM_PWM_Start+0xfe>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b10      	cmp	r3, #16
 80064ba:	d104      	bne.n	80064c6 <HAL_TIM_PWM_Start+0xf6>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064c4:	e003      	b.n	80064ce <HAL_TIM_PWM_Start+0xfe>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2202      	movs	r2, #2
 80064ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2201      	movs	r2, #1
 80064d4:	6839      	ldr	r1, [r7, #0]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 ff04 	bl	80072e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a26      	ldr	r2, [pc, #152]	; (800657c <HAL_TIM_PWM_Start+0x1ac>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d009      	beq.n	80064fa <HAL_TIM_PWM_Start+0x12a>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a25      	ldr	r2, [pc, #148]	; (8006580 <HAL_TIM_PWM_Start+0x1b0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d004      	beq.n	80064fa <HAL_TIM_PWM_Start+0x12a>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a23      	ldr	r2, [pc, #140]	; (8006584 <HAL_TIM_PWM_Start+0x1b4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d101      	bne.n	80064fe <HAL_TIM_PWM_Start+0x12e>
 80064fa:	2301      	movs	r3, #1
 80064fc:	e000      	b.n	8006500 <HAL_TIM_PWM_Start+0x130>
 80064fe:	2300      	movs	r3, #0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d007      	beq.n	8006514 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006512:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a18      	ldr	r2, [pc, #96]	; (800657c <HAL_TIM_PWM_Start+0x1ac>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d009      	beq.n	8006532 <HAL_TIM_PWM_Start+0x162>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006526:	d004      	beq.n	8006532 <HAL_TIM_PWM_Start+0x162>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a14      	ldr	r2, [pc, #80]	; (8006580 <HAL_TIM_PWM_Start+0x1b0>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d115      	bne.n	800655e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	4b13      	ldr	r3, [pc, #76]	; (8006588 <HAL_TIM_PWM_Start+0x1b8>)
 800653a:	4013      	ands	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2b06      	cmp	r3, #6
 8006542:	d015      	beq.n	8006570 <HAL_TIM_PWM_Start+0x1a0>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800654a:	d011      	beq.n	8006570 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0201 	orr.w	r2, r2, #1
 800655a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800655c:	e008      	b.n	8006570 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f042 0201 	orr.w	r2, r2, #1
 800656c:	601a      	str	r2, [r3, #0]
 800656e:	e000      	b.n	8006572 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006570:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	40012c00 	.word	0x40012c00
 8006580:	40014000 	.word	0x40014000
 8006584:	40014400 	.word	0x40014400
 8006588:	00010007 	.word	0x00010007

0800658c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d122      	bne.n	80065e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d11b      	bne.n	80065e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f06f 0202 	mvn.w	r2, #2
 80065b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 faed 	bl	8006bae <HAL_TIM_IC_CaptureCallback>
 80065d4:	e005      	b.n	80065e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fadf 	bl	8006b9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 faf0 	bl	8006bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	f003 0304 	and.w	r3, r3, #4
 80065f2:	2b04      	cmp	r3, #4
 80065f4:	d122      	bne.n	800663c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f003 0304 	and.w	r3, r3, #4
 8006600:	2b04      	cmp	r3, #4
 8006602:	d11b      	bne.n	800663c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f06f 0204 	mvn.w	r2, #4
 800660c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2202      	movs	r2, #2
 8006612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fac3 	bl	8006bae <HAL_TIM_IC_CaptureCallback>
 8006628:	e005      	b.n	8006636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fab5 	bl	8006b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fac6 	bl	8006bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b08      	cmp	r3, #8
 8006648:	d122      	bne.n	8006690 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f003 0308 	and.w	r3, r3, #8
 8006654:	2b08      	cmp	r3, #8
 8006656:	d11b      	bne.n	8006690 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f06f 0208 	mvn.w	r2, #8
 8006660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2204      	movs	r2, #4
 8006666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fa99 	bl	8006bae <HAL_TIM_IC_CaptureCallback>
 800667c:	e005      	b.n	800668a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fa8b 	bl	8006b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fa9c 	bl	8006bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f003 0310 	and.w	r3, r3, #16
 800669a:	2b10      	cmp	r3, #16
 800669c:	d122      	bne.n	80066e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f003 0310 	and.w	r3, r3, #16
 80066a8:	2b10      	cmp	r3, #16
 80066aa:	d11b      	bne.n	80066e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f06f 0210 	mvn.w	r2, #16
 80066b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2208      	movs	r2, #8
 80066ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fa6f 	bl	8006bae <HAL_TIM_IC_CaptureCallback>
 80066d0:	e005      	b.n	80066de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fa61 	bl	8006b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fa72 	bl	8006bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d10e      	bne.n	8006710 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f003 0301 	and.w	r3, r3, #1
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d107      	bne.n	8006710 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f06f 0201 	mvn.w	r2, #1
 8006708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fa3b 	bl	8006b86 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800671a:	2b80      	cmp	r3, #128	; 0x80
 800671c:	d10e      	bne.n	800673c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006728:	2b80      	cmp	r3, #128	; 0x80
 800672a:	d107      	bne.n	800673c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fee2 	bl	8007500 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800674a:	d10e      	bne.n	800676a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006756:	2b80      	cmp	r3, #128	; 0x80
 8006758:	d107      	bne.n	800676a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fed5 	bl	8007514 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006774:	2b40      	cmp	r3, #64	; 0x40
 8006776:	d10e      	bne.n	8006796 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006782:	2b40      	cmp	r3, #64	; 0x40
 8006784:	d107      	bne.n	8006796 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800678e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fa20 	bl	8006bd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	f003 0320 	and.w	r3, r3, #32
 80067a0:	2b20      	cmp	r3, #32
 80067a2:	d10e      	bne.n	80067c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	f003 0320 	and.w	r3, r3, #32
 80067ae:	2b20      	cmp	r3, #32
 80067b0:	d107      	bne.n	80067c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f06f 0220 	mvn.w	r2, #32
 80067ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fe95 	bl	80074ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067c2:	bf00      	nop
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067d8:	2300      	movs	r3, #0
 80067da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d101      	bne.n	80067ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067e6:	2302      	movs	r3, #2
 80067e8:	e0ff      	b.n	80069ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2b14      	cmp	r3, #20
 80067f6:	f200 80f0 	bhi.w	80069da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80067fa:	a201      	add	r2, pc, #4	; (adr r2, 8006800 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006800:	08006855 	.word	0x08006855
 8006804:	080069db 	.word	0x080069db
 8006808:	080069db 	.word	0x080069db
 800680c:	080069db 	.word	0x080069db
 8006810:	08006895 	.word	0x08006895
 8006814:	080069db 	.word	0x080069db
 8006818:	080069db 	.word	0x080069db
 800681c:	080069db 	.word	0x080069db
 8006820:	080068d7 	.word	0x080068d7
 8006824:	080069db 	.word	0x080069db
 8006828:	080069db 	.word	0x080069db
 800682c:	080069db 	.word	0x080069db
 8006830:	08006917 	.word	0x08006917
 8006834:	080069db 	.word	0x080069db
 8006838:	080069db 	.word	0x080069db
 800683c:	080069db 	.word	0x080069db
 8006840:	08006959 	.word	0x08006959
 8006844:	080069db 	.word	0x080069db
 8006848:	080069db 	.word	0x080069db
 800684c:	080069db 	.word	0x080069db
 8006850:	08006999 	.word	0x08006999
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68b9      	ldr	r1, [r7, #8]
 800685a:	4618      	mov	r0, r3
 800685c:	f000 fa2a 	bl	8006cb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699a      	ldr	r2, [r3, #24]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0208 	orr.w	r2, r2, #8
 800686e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699a      	ldr	r2, [r3, #24]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0204 	bic.w	r2, r2, #4
 800687e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6999      	ldr	r1, [r3, #24]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	691a      	ldr	r2, [r3, #16]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	619a      	str	r2, [r3, #24]
      break;
 8006892:	e0a5      	b.n	80069e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68b9      	ldr	r1, [r7, #8]
 800689a:	4618      	mov	r0, r3
 800689c:	f000 fa86 	bl	8006dac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	699a      	ldr	r2, [r3, #24]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699a      	ldr	r2, [r3, #24]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6999      	ldr	r1, [r3, #24]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	021a      	lsls	r2, r3, #8
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	619a      	str	r2, [r3, #24]
      break;
 80068d4:	e084      	b.n	80069e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68b9      	ldr	r1, [r7, #8]
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 fadf 	bl	8006ea0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	69da      	ldr	r2, [r3, #28]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f042 0208 	orr.w	r2, r2, #8
 80068f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69da      	ldr	r2, [r3, #28]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 0204 	bic.w	r2, r2, #4
 8006900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69d9      	ldr	r1, [r3, #28]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	691a      	ldr	r2, [r3, #16]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	61da      	str	r2, [r3, #28]
      break;
 8006914:	e064      	b.n	80069e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68b9      	ldr	r1, [r7, #8]
 800691c:	4618      	mov	r0, r3
 800691e:	f000 fb37 	bl	8006f90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69da      	ldr	r2, [r3, #28]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69da      	ldr	r2, [r3, #28]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69d9      	ldr	r1, [r3, #28]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	021a      	lsls	r2, r3, #8
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	61da      	str	r2, [r3, #28]
      break;
 8006956:	e043      	b.n	80069e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68b9      	ldr	r1, [r7, #8]
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fb74 	bl	800704c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0208 	orr.w	r2, r2, #8
 8006972:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 0204 	bic.w	r2, r2, #4
 8006982:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	691a      	ldr	r2, [r3, #16]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006996:	e023      	b.n	80069e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68b9      	ldr	r1, [r7, #8]
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fbac 	bl	80070fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	021a      	lsls	r2, r3, #8
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069d8:	e002      	b.n	80069e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	75fb      	strb	r3, [r7, #23]
      break;
 80069de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop

080069f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d101      	bne.n	8006a10 <HAL_TIM_ConfigClockSource+0x1c>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	e0b6      	b.n	8006b7e <HAL_TIM_ConfigClockSource+0x18a>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a4c:	d03e      	beq.n	8006acc <HAL_TIM_ConfigClockSource+0xd8>
 8006a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a52:	f200 8087 	bhi.w	8006b64 <HAL_TIM_ConfigClockSource+0x170>
 8006a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a5a:	f000 8086 	beq.w	8006b6a <HAL_TIM_ConfigClockSource+0x176>
 8006a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a62:	d87f      	bhi.n	8006b64 <HAL_TIM_ConfigClockSource+0x170>
 8006a64:	2b70      	cmp	r3, #112	; 0x70
 8006a66:	d01a      	beq.n	8006a9e <HAL_TIM_ConfigClockSource+0xaa>
 8006a68:	2b70      	cmp	r3, #112	; 0x70
 8006a6a:	d87b      	bhi.n	8006b64 <HAL_TIM_ConfigClockSource+0x170>
 8006a6c:	2b60      	cmp	r3, #96	; 0x60
 8006a6e:	d050      	beq.n	8006b12 <HAL_TIM_ConfigClockSource+0x11e>
 8006a70:	2b60      	cmp	r3, #96	; 0x60
 8006a72:	d877      	bhi.n	8006b64 <HAL_TIM_ConfigClockSource+0x170>
 8006a74:	2b50      	cmp	r3, #80	; 0x50
 8006a76:	d03c      	beq.n	8006af2 <HAL_TIM_ConfigClockSource+0xfe>
 8006a78:	2b50      	cmp	r3, #80	; 0x50
 8006a7a:	d873      	bhi.n	8006b64 <HAL_TIM_ConfigClockSource+0x170>
 8006a7c:	2b40      	cmp	r3, #64	; 0x40
 8006a7e:	d058      	beq.n	8006b32 <HAL_TIM_ConfigClockSource+0x13e>
 8006a80:	2b40      	cmp	r3, #64	; 0x40
 8006a82:	d86f      	bhi.n	8006b64 <HAL_TIM_ConfigClockSource+0x170>
 8006a84:	2b30      	cmp	r3, #48	; 0x30
 8006a86:	d064      	beq.n	8006b52 <HAL_TIM_ConfigClockSource+0x15e>
 8006a88:	2b30      	cmp	r3, #48	; 0x30
 8006a8a:	d86b      	bhi.n	8006b64 <HAL_TIM_ConfigClockSource+0x170>
 8006a8c:	2b20      	cmp	r3, #32
 8006a8e:	d060      	beq.n	8006b52 <HAL_TIM_ConfigClockSource+0x15e>
 8006a90:	2b20      	cmp	r3, #32
 8006a92:	d867      	bhi.n	8006b64 <HAL_TIM_ConfigClockSource+0x170>
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d05c      	beq.n	8006b52 <HAL_TIM_ConfigClockSource+0x15e>
 8006a98:	2b10      	cmp	r3, #16
 8006a9a:	d05a      	beq.n	8006b52 <HAL_TIM_ConfigClockSource+0x15e>
 8006a9c:	e062      	b.n	8006b64 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6818      	ldr	r0, [r3, #0]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	6899      	ldr	r1, [r3, #8]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f000 fbf9 	bl	80072a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ac0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	609a      	str	r2, [r3, #8]
      break;
 8006aca:	e04f      	b.n	8006b6c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6818      	ldr	r0, [r3, #0]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	6899      	ldr	r1, [r3, #8]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	f000 fbe2 	bl	80072a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	689a      	ldr	r2, [r3, #8]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006aee:	609a      	str	r2, [r3, #8]
      break;
 8006af0:	e03c      	b.n	8006b6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6818      	ldr	r0, [r3, #0]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	6859      	ldr	r1, [r3, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	461a      	mov	r2, r3
 8006b00:	f000 fb56 	bl	80071b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2150      	movs	r1, #80	; 0x50
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 fbaf 	bl	800726e <TIM_ITRx_SetConfig>
      break;
 8006b10:	e02c      	b.n	8006b6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	6859      	ldr	r1, [r3, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f000 fb75 	bl	800720e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2160      	movs	r1, #96	; 0x60
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 fb9f 	bl	800726e <TIM_ITRx_SetConfig>
      break;
 8006b30:	e01c      	b.n	8006b6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6818      	ldr	r0, [r3, #0]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	6859      	ldr	r1, [r3, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	f000 fb36 	bl	80071b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2140      	movs	r1, #64	; 0x40
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fb8f 	bl	800726e <TIM_ITRx_SetConfig>
      break;
 8006b50:	e00c      	b.n	8006b6c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	f000 fb86 	bl	800726e <TIM_ITRx_SetConfig>
      break;
 8006b62:	e003      	b.n	8006b6c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	73fb      	strb	r3, [r7, #15]
      break;
 8006b68:	e000      	b.n	8006b6c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006b6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006b8e:	bf00      	nop
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ba2:	bf00      	nop
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bb6:	bf00      	nop
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b083      	sub	sp, #12
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bca:	bf00      	nop
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bde:	bf00      	nop
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
	...

08006bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a2a      	ldr	r2, [pc, #168]	; (8006ca8 <TIM_Base_SetConfig+0xbc>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d003      	beq.n	8006c0c <TIM_Base_SetConfig+0x20>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0a:	d108      	bne.n	8006c1e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a21      	ldr	r2, [pc, #132]	; (8006ca8 <TIM_Base_SetConfig+0xbc>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d00b      	beq.n	8006c3e <TIM_Base_SetConfig+0x52>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2c:	d007      	beq.n	8006c3e <TIM_Base_SetConfig+0x52>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a1e      	ldr	r2, [pc, #120]	; (8006cac <TIM_Base_SetConfig+0xc0>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d003      	beq.n	8006c3e <TIM_Base_SetConfig+0x52>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a1d      	ldr	r2, [pc, #116]	; (8006cb0 <TIM_Base_SetConfig+0xc4>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d108      	bne.n	8006c50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a0c      	ldr	r2, [pc, #48]	; (8006ca8 <TIM_Base_SetConfig+0xbc>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d007      	beq.n	8006c8c <TIM_Base_SetConfig+0xa0>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a0b      	ldr	r2, [pc, #44]	; (8006cac <TIM_Base_SetConfig+0xc0>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d003      	beq.n	8006c8c <TIM_Base_SetConfig+0xa0>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a0a      	ldr	r2, [pc, #40]	; (8006cb0 <TIM_Base_SetConfig+0xc4>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d103      	bne.n	8006c94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	691a      	ldr	r2, [r3, #16]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	615a      	str	r2, [r3, #20]
}
 8006c9a:	bf00      	nop
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	40012c00 	.word	0x40012c00
 8006cac:	40014000 	.word	0x40014000
 8006cb0:	40014400 	.word	0x40014400

08006cb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b087      	sub	sp, #28
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	f023 0201 	bic.w	r2, r3, #1
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 0303 	bic.w	r3, r3, #3
 8006cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f023 0302 	bic.w	r3, r3, #2
 8006d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a24      	ldr	r2, [pc, #144]	; (8006da0 <TIM_OC1_SetConfig+0xec>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d007      	beq.n	8006d24 <TIM_OC1_SetConfig+0x70>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a23      	ldr	r2, [pc, #140]	; (8006da4 <TIM_OC1_SetConfig+0xf0>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d003      	beq.n	8006d24 <TIM_OC1_SetConfig+0x70>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a22      	ldr	r2, [pc, #136]	; (8006da8 <TIM_OC1_SetConfig+0xf4>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d10c      	bne.n	8006d3e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f023 0308 	bic.w	r3, r3, #8
 8006d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f023 0304 	bic.w	r3, r3, #4
 8006d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a17      	ldr	r2, [pc, #92]	; (8006da0 <TIM_OC1_SetConfig+0xec>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d007      	beq.n	8006d56 <TIM_OC1_SetConfig+0xa2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a16      	ldr	r2, [pc, #88]	; (8006da4 <TIM_OC1_SetConfig+0xf0>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d003      	beq.n	8006d56 <TIM_OC1_SetConfig+0xa2>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a15      	ldr	r2, [pc, #84]	; (8006da8 <TIM_OC1_SetConfig+0xf4>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d111      	bne.n	8006d7a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	621a      	str	r2, [r3, #32]
}
 8006d94:	bf00      	nop
 8006d96:	371c      	adds	r7, #28
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	40012c00 	.word	0x40012c00
 8006da4:	40014000 	.word	0x40014000
 8006da8:	40014400 	.word	0x40014400

08006dac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b087      	sub	sp, #28
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	f023 0210 	bic.w	r2, r3, #16
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	021b      	lsls	r3, r3, #8
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	f023 0320 	bic.w	r3, r3, #32
 8006dfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	011b      	lsls	r3, r3, #4
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a22      	ldr	r2, [pc, #136]	; (8006e94 <TIM_OC2_SetConfig+0xe8>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d10d      	bne.n	8006e2c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a19      	ldr	r2, [pc, #100]	; (8006e94 <TIM_OC2_SetConfig+0xe8>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d007      	beq.n	8006e44 <TIM_OC2_SetConfig+0x98>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a18      	ldr	r2, [pc, #96]	; (8006e98 <TIM_OC2_SetConfig+0xec>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d003      	beq.n	8006e44 <TIM_OC2_SetConfig+0x98>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a17      	ldr	r2, [pc, #92]	; (8006e9c <TIM_OC2_SetConfig+0xf0>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d113      	bne.n	8006e6c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	621a      	str	r2, [r3, #32]
}
 8006e86:	bf00      	nop
 8006e88:	371c      	adds	r7, #28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	40012c00 	.word	0x40012c00
 8006e98:	40014000 	.word	0x40014000
 8006e9c:	40014400 	.word	0x40014400

08006ea0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 0303 	bic.w	r3, r3, #3
 8006eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006eec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	021b      	lsls	r3, r3, #8
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a21      	ldr	r2, [pc, #132]	; (8006f84 <TIM_OC3_SetConfig+0xe4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d10d      	bne.n	8006f1e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	021b      	lsls	r3, r3, #8
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a18      	ldr	r2, [pc, #96]	; (8006f84 <TIM_OC3_SetConfig+0xe4>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d007      	beq.n	8006f36 <TIM_OC3_SetConfig+0x96>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a17      	ldr	r2, [pc, #92]	; (8006f88 <TIM_OC3_SetConfig+0xe8>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d003      	beq.n	8006f36 <TIM_OC3_SetConfig+0x96>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a16      	ldr	r2, [pc, #88]	; (8006f8c <TIM_OC3_SetConfig+0xec>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d113      	bne.n	8006f5e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	011b      	lsls	r3, r3, #4
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	011b      	lsls	r3, r3, #4
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	621a      	str	r2, [r3, #32]
}
 8006f78:	bf00      	nop
 8006f7a:	371c      	adds	r7, #28
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	40012c00 	.word	0x40012c00
 8006f88:	40014000 	.word	0x40014000
 8006f8c:	40014400 	.word	0x40014400

08006f90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	021b      	lsls	r3, r3, #8
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	031b      	lsls	r3, r3, #12
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a14      	ldr	r2, [pc, #80]	; (8007040 <TIM_OC4_SetConfig+0xb0>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d007      	beq.n	8007004 <TIM_OC4_SetConfig+0x74>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a13      	ldr	r2, [pc, #76]	; (8007044 <TIM_OC4_SetConfig+0xb4>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d003      	beq.n	8007004 <TIM_OC4_SetConfig+0x74>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a12      	ldr	r2, [pc, #72]	; (8007048 <TIM_OC4_SetConfig+0xb8>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d109      	bne.n	8007018 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800700a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	019b      	lsls	r3, r3, #6
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	4313      	orrs	r3, r2
 8007016:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	621a      	str	r2, [r3, #32]
}
 8007032:	bf00      	nop
 8007034:	371c      	adds	r7, #28
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	40012c00 	.word	0x40012c00
 8007044:	40014000 	.word	0x40014000
 8007048:	40014400 	.word	0x40014400

0800704c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800707a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	4313      	orrs	r3, r2
 8007088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007090:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	041b      	lsls	r3, r3, #16
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	4313      	orrs	r3, r2
 800709c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a13      	ldr	r2, [pc, #76]	; (80070f0 <TIM_OC5_SetConfig+0xa4>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d007      	beq.n	80070b6 <TIM_OC5_SetConfig+0x6a>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a12      	ldr	r2, [pc, #72]	; (80070f4 <TIM_OC5_SetConfig+0xa8>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d003      	beq.n	80070b6 <TIM_OC5_SetConfig+0x6a>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a11      	ldr	r2, [pc, #68]	; (80070f8 <TIM_OC5_SetConfig+0xac>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d109      	bne.n	80070ca <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	021b      	lsls	r3, r3, #8
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	621a      	str	r2, [r3, #32]
}
 80070e4:	bf00      	nop
 80070e6:	371c      	adds	r7, #28
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	40012c00 	.word	0x40012c00
 80070f4:	40014000 	.word	0x40014000
 80070f8:	40014400 	.word	0x40014400

080070fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b087      	sub	sp, #28
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800712a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800712e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	021b      	lsls	r3, r3, #8
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	4313      	orrs	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007142:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	051b      	lsls	r3, r3, #20
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	4313      	orrs	r3, r2
 800714e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a14      	ldr	r2, [pc, #80]	; (80071a4 <TIM_OC6_SetConfig+0xa8>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d007      	beq.n	8007168 <TIM_OC6_SetConfig+0x6c>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a13      	ldr	r2, [pc, #76]	; (80071a8 <TIM_OC6_SetConfig+0xac>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d003      	beq.n	8007168 <TIM_OC6_SetConfig+0x6c>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a12      	ldr	r2, [pc, #72]	; (80071ac <TIM_OC6_SetConfig+0xb0>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d109      	bne.n	800717c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800716e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	029b      	lsls	r3, r3, #10
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	4313      	orrs	r3, r2
 800717a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	621a      	str	r2, [r3, #32]
}
 8007196:	bf00      	nop
 8007198:	371c      	adds	r7, #28
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	40012c00 	.word	0x40012c00
 80071a8:	40014000 	.word	0x40014000
 80071ac:	40014400 	.word	0x40014400

080071b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b087      	sub	sp, #28
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	f023 0201 	bic.w	r2, r3, #1
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	011b      	lsls	r3, r3, #4
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f023 030a 	bic.w	r3, r3, #10
 80071ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	621a      	str	r2, [r3, #32]
}
 8007202:	bf00      	nop
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800720e:	b480      	push	{r7}
 8007210:	b087      	sub	sp, #28
 8007212:	af00      	add	r7, sp, #0
 8007214:	60f8      	str	r0, [r7, #12]
 8007216:	60b9      	str	r1, [r7, #8]
 8007218:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	f023 0210 	bic.w	r2, r3, #16
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007238:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	031b      	lsls	r3, r3, #12
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	4313      	orrs	r3, r2
 8007242:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800724a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	011b      	lsls	r3, r3, #4
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	4313      	orrs	r3, r2
 8007254:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	621a      	str	r2, [r3, #32]
}
 8007262:	bf00      	nop
 8007264:	371c      	adds	r7, #28
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800726e:	b480      	push	{r7}
 8007270:	b085      	sub	sp, #20
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007284:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4313      	orrs	r3, r2
 800728c:	f043 0307 	orr.w	r3, r3, #7
 8007290:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	609a      	str	r2, [r3, #8]
}
 8007298:	bf00      	nop
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b087      	sub	sp, #28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
 80072b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	021a      	lsls	r2, r3, #8
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	431a      	orrs	r2, r3
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	609a      	str	r2, [r3, #8]
}
 80072d8:	bf00      	nop
 80072da:	371c      	adds	r7, #28
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	f003 031f 	and.w	r3, r3, #31
 80072f6:	2201      	movs	r2, #1
 80072f8:	fa02 f303 	lsl.w	r3, r2, r3
 80072fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6a1a      	ldr	r2, [r3, #32]
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	43db      	mvns	r3, r3
 8007306:	401a      	ands	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6a1a      	ldr	r2, [r3, #32]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	f003 031f 	and.w	r3, r3, #31
 8007316:	6879      	ldr	r1, [r7, #4]
 8007318:	fa01 f303 	lsl.w	r3, r1, r3
 800731c:	431a      	orrs	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	621a      	str	r2, [r3, #32]
}
 8007322:	bf00      	nop
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
	...

08007330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007340:	2b01      	cmp	r3, #1
 8007342:	d101      	bne.n	8007348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007344:	2302      	movs	r3, #2
 8007346:	e04f      	b.n	80073e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2202      	movs	r2, #2
 8007354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a21      	ldr	r2, [pc, #132]	; (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d108      	bne.n	8007384 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007378:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	4313      	orrs	r3, r2
 8007382:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800738a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	4313      	orrs	r3, r2
 8007394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a14      	ldr	r2, [pc, #80]	; (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d009      	beq.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073b0:	d004      	beq.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a10      	ldr	r2, [pc, #64]	; (80073f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d10c      	bne.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	40012c00 	.word	0x40012c00
 80073f8:	40014000 	.word	0x40014000

080073fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007410:	2b01      	cmp	r3, #1
 8007412:	d101      	bne.n	8007418 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007414:	2302      	movs	r3, #2
 8007416:	e060      	b.n	80074da <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	4313      	orrs	r3, r2
 800743a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	4313      	orrs	r3, r2
 8007448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4313      	orrs	r3, r2
 8007456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	4313      	orrs	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	4313      	orrs	r3, r2
 8007472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747e:	4313      	orrs	r3, r2
 8007480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	041b      	lsls	r3, r3, #16
 800748e:	4313      	orrs	r3, r2
 8007490:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a14      	ldr	r2, [pc, #80]	; (80074e8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d115      	bne.n	80074c8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	051b      	lsls	r3, r3, #20
 80074a8:	4313      	orrs	r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	6a1b      	ldr	r3, [r3, #32]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	40012c00 	.word	0x40012c00

080074ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <lwip_strerr>:
 * @param err an lwip internal err_t
 * @return a string representation for err
 */
const char *
lwip_strerr(err_t err)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_strerr))) {
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	dc03      	bgt.n	800753e <lwip_strerr+0x16>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f113 0f10 	cmn.w	r3, #16
 800753c:	da01      	bge.n	8007542 <lwip_strerr+0x1a>
    return "Unknown error.";
 800753e:	4b06      	ldr	r3, [pc, #24]	; (8007558 <lwip_strerr+0x30>)
 8007540:	e004      	b.n	800754c <lwip_strerr+0x24>
  }
  return err_strerr[-err];
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	425b      	negs	r3, r3
 8007546:	4a05      	ldr	r2, [pc, #20]	; (800755c <lwip_strerr+0x34>)
 8007548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800754c:	4618      	mov	r0, r3
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr
 8007558:	0801529c 	.word	0x0801529c
 800755c:	2000005c 	.word	0x2000005c

08007560 <mqtt_msg_type_to_str>:
 *
 * @return Control message type text string
 */
static const char *
mqtt_msg_type_to_str(u8_t msg_type)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	4603      	mov	r3, r0
 8007568:	71fb      	strb	r3, [r7, #7]
  if (msg_type >= LWIP_ARRAYSIZE(mqtt_message_type_str)) {
 800756a:	79fb      	ldrb	r3, [r7, #7]
 800756c:	2b0e      	cmp	r3, #14
 800756e:	d901      	bls.n	8007574 <mqtt_msg_type_to_str+0x14>
    msg_type = 0;
 8007570:	2300      	movs	r3, #0
 8007572:	71fb      	strb	r3, [r7, #7]
  }
  return mqtt_message_type_str[msg_type];
 8007574:	79fb      	ldrb	r3, [r7, #7]
 8007576:	4a04      	ldr	r2, [pc, #16]	; (8007588 <mqtt_msg_type_to_str+0x28>)
 8007578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800757c:	4618      	mov	r0, r3
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr
 8007588:	08016b2c 	.word	0x08016b2c

0800758c <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	88db      	ldrh	r3, [r3, #6]
 8007598:	3301      	adds	r3, #1
 800759a:	b29a      	uxth	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	88db      	ldrh	r3, [r3, #6]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d105      	bne.n	80075b4 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	88db      	ldrh	r3, [r3, #6]
 80075ac:	3301      	adds	r3, #1
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	88db      	ldrh	r3, [r3, #6]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	461a      	mov	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4413      	add	r3, r2
 80075da:	78fa      	ldrb	r2, [r7, #3]
 80075dc:	711a      	strb	r2, [r3, #4]
  rb->put++;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	881b      	ldrh	r3, [r3, #0]
 80075e2:	3301      	adds	r3, #1
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	881b      	ldrh	r3, [r3, #0]
 80075ee:	2bff      	cmp	r3, #255	; 0xff
 80075f0:	d902      	bls.n	80075f8 <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	801a      	strh	r2, [r3, #0]
  }
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	885b      	ldrh	r3, [r3, #2]
 8007610:	461a      	mov	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4413      	add	r3, r2
 8007616:	3304      	adds	r3, #4
}
 8007618:	4618      	mov	r0, r3
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	460b      	mov	r3, r1
 800762e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);

  rb->get += len;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	885a      	ldrh	r2, [r3, #2]
 8007634:	887b      	ldrh	r3, [r7, #2]
 8007636:	4413      	add	r3, r2
 8007638:	b29a      	uxth	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	885b      	ldrh	r3, [r3, #2]
 8007642:	2bff      	cmp	r3, #255	; 0xff
 8007644:	d906      	bls.n	8007654 <mqtt_ringbuf_advance_get_idx+0x30>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	885b      	ldrh	r3, [r3, #2]
 800764a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800764e:	b29a      	uxth	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	805a      	strh	r2, [r3, #2]
  }
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	881b      	ldrh	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	885b      	ldrh	r3, [r3, #2]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800767c:	d303      	bcc.n	8007686 <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007684:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	b29b      	uxth	r3, r3
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
	...

08007698 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 8007698:	b590      	push	{r4, r7, lr}
 800769a:	b089      	sub	sp, #36	; 0x24
 800769c:	af02      	add	r7, sp, #8
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	74fb      	strb	r3, [r7, #19]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7ff ffda 	bl	8007660 <mqtt_ringbuf_len>
 80076ac:	4603      	mov	r3, r0
 80076ae:	461a      	mov	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	885b      	ldrh	r3, [r3, #2]
 80076b4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80076b8:	429a      	cmp	r2, r3
 80076ba:	da04      	bge.n	80076c6 <mqtt_output_send+0x2e>
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f7ff ffcf 	bl	8007660 <mqtt_ringbuf_len>
 80076c2:	4603      	mov	r3, r0
 80076c4:	e004      	b.n	80076d0 <mqtt_output_send+0x38>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	885b      	ldrh	r3, [r3, #2]
 80076ca:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	81fb      	strh	r3, [r7, #14]
  u16_t send_len = altcp_sndbuf(tpcb);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80076d8:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);

  if (send_len == 0 || ringbuf_lin_len == 0) {
 80076da:	8a3b      	ldrh	r3, [r7, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 8090 	beq.w	8007802 <mqtt_output_send+0x16a>
 80076e2:	89fb      	ldrh	r3, [r7, #14]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f000 808c 	beq.w	8007802 <mqtt_output_send+0x16a>
    return;
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
 80076ea:	8a39      	ldrh	r1, [r7, #16]
 80076ec:	89fa      	ldrh	r2, [r7, #14]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	885b      	ldrh	r3, [r3, #2]
 80076f2:	4618      	mov	r0, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	881b      	ldrh	r3, [r3, #0]
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	4603      	mov	r3, r0
 80076fc:	4843      	ldr	r0, [pc, #268]	; (800780c <mqtt_output_send+0x174>)
 80076fe:	f7f8 fdc8 	bl	8000292 <Console_DEBUG>
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 8007702:	8a3a      	ldrh	r2, [r7, #16]
 8007704:	89fb      	ldrh	r3, [r7, #14]
 8007706:	429a      	cmp	r2, r3
 8007708:	d90d      	bls.n	8007726 <mqtt_output_send+0x8e>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 800770a:	89fb      	ldrh	r3, [r7, #14]
 800770c:	823b      	strh	r3, [r7, #16]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f7ff ffa6 	bl	8007660 <mqtt_ringbuf_len>
 8007714:	4603      	mov	r3, r0
 8007716:	461a      	mov	r2, r3
 8007718:	89fb      	ldrh	r3, [r7, #14]
 800771a:	4293      	cmp	r3, r2
 800771c:	bf34      	ite	cc
 800771e:	2301      	movcc	r3, #1
 8007720:	2300      	movcs	r3, #0
 8007722:	b2db      	uxtb	r3, r3
 8007724:	74fb      	strb	r3, [r7, #19]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7ff ff6c 	bl	8007604 <mqtt_ringbuf_get_ptr>
 800772c:	4601      	mov	r1, r0
 800772e:	7cfb      	ldrb	r3, [r7, #19]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <mqtt_output_send+0xa0>
 8007734:	2303      	movs	r3, #3
 8007736:	e000      	b.n	800773a <mqtt_output_send+0xa2>
 8007738:	2301      	movs	r3, #1
 800773a:	8a3a      	ldrh	r2, [r7, #16]
 800773c:	6838      	ldr	r0, [r7, #0]
 800773e:	f006 fc2b 	bl	800df98 <tcp_write>
 8007742:	6178      	str	r0, [r7, #20]
  if ((err == ERR_OK) && wrap) {
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d145      	bne.n	80077d6 <mqtt_output_send+0x13e>
 800774a:	7cfb      	ldrb	r3, [r7, #19]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d042      	beq.n	80077d6 <mqtt_output_send+0x13e>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8007750:	8a3b      	ldrh	r3, [r7, #16]
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7ff ff65 	bl	8007624 <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007760:	461c      	mov	r4, r3
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7ff ff7c 	bl	8007660 <mqtt_ringbuf_len>
 8007768:	4603      	mov	r3, r0
 800776a:	461a      	mov	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	885b      	ldrh	r3, [r3, #2]
 8007770:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007774:	429a      	cmp	r2, r3
 8007776:	da04      	bge.n	8007782 <mqtt_output_send+0xea>
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7ff ff71 	bl	8007660 <mqtt_ringbuf_len>
 800777e:	4603      	mov	r3, r0
 8007780:	e003      	b.n	800778a <mqtt_output_send+0xf2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	885b      	ldrh	r3, [r3, #2]
 8007786:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800778a:	42a3      	cmp	r3, r4
 800778c:	dd03      	ble.n	8007796 <mqtt_output_send+0xfe>
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007794:	e014      	b.n	80077c0 <mqtt_output_send+0x128>
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7ff ff62 	bl	8007660 <mqtt_ringbuf_len>
 800779c:	4603      	mov	r3, r0
 800779e:	461a      	mov	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	885b      	ldrh	r3, [r3, #2]
 80077a4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80077a8:	429a      	cmp	r2, r3
 80077aa:	da04      	bge.n	80077b6 <mqtt_output_send+0x11e>
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f7ff ff57 	bl	8007660 <mqtt_ringbuf_len>
 80077b2:	4603      	mov	r3, r0
 80077b4:	e004      	b.n	80077c0 <mqtt_output_send+0x128>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	885b      	ldrh	r3, [r3, #2]
 80077ba:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80077be:	b29b      	uxth	r3, r3
 80077c0:	823b      	strh	r3, [r7, #16]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7ff ff1e 	bl	8007604 <mqtt_ringbuf_get_ptr>
 80077c8:	4601      	mov	r1, r0
 80077ca:	8a3a      	ldrh	r2, [r7, #16]
 80077cc:	2301      	movs	r3, #1
 80077ce:	6838      	ldr	r0, [r7, #0]
 80077d0:	f006 fbe2 	bl	800df98 <tcp_write>
 80077d4:	6178      	str	r0, [r7, #20]
  }

  if (err == ERR_OK) {
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d108      	bne.n	80077ee <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 80077dc:	8a3b      	ldrh	r3, [r7, #16]
 80077de:	4619      	mov	r1, r3
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7ff ff1f 	bl	8007624 <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 80077e6:	6838      	ldr	r0, [r7, #0]
 80077e8:	f007 f8bc 	bl	800e964 <tcp_output>
 80077ec:	e00a      	b.n	8007804 <mqtt_output_send+0x16c>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
 80077ee:	6978      	ldr	r0, [r7, #20]
 80077f0:	f7ff fe9a 	bl	8007528 <lwip_strerr>
 80077f4:	4603      	mov	r3, r0
 80077f6:	461a      	mov	r2, r3
 80077f8:	6979      	ldr	r1, [r7, #20]
 80077fa:	4805      	ldr	r0, [pc, #20]	; (8007810 <mqtt_output_send+0x178>)
 80077fc:	f7f8 fd49 	bl	8000292 <Console_DEBUG>
 8007800:	e000      	b.n	8007804 <mqtt_output_send+0x16c>
    return;
 8007802:	bf00      	nop
  }
}
 8007804:	371c      	adds	r7, #28
 8007806:	46bd      	mov	sp, r7
 8007808:	bd90      	pop	{r4, r7, pc}
 800780a:	bf00      	nop
 800780c:	0801533c 	.word	0x0801533c
 8007810:	08015394 	.word	0x08015394

08007814 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	603b      	str	r3, [r7, #0]
 8007820:	4613      	mov	r3, r2
 8007822:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 8007824:	2300      	movs	r3, #0
 8007826:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
  for (n = 0; n < r_objs_len; n++) {
 8007828:	2300      	movs	r3, #0
 800782a:	74fb      	strb	r3, [r7, #19]
 800782c:	e01f      	b.n	800786e <mqtt_create_request+0x5a>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 800782e:	7cfb      	ldrb	r3, [r7, #19]
 8007830:	011b      	lsls	r3, r3, #4
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	4413      	add	r3, r2
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	7cfb      	ldrb	r3, [r7, #19]
 800783a:	011b      	lsls	r3, r3, #4
 800783c:	68f9      	ldr	r1, [r7, #12]
 800783e:	440b      	add	r3, r1
 8007840:	429a      	cmp	r2, r3
 8007842:	d111      	bne.n	8007868 <mqtt_create_request+0x54>
      r = &r_objs[n];
 8007844:	7cfb      	ldrb	r3, [r7, #19]
 8007846:	011b      	lsls	r3, r3, #4
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	4413      	add	r3, r2
 800784c:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2200      	movs	r2, #0
 8007852:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	6a3a      	ldr	r2, [r7, #32]
 800785e:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	88fa      	ldrh	r2, [r7, #6]
 8007864:	819a      	strh	r2, [r3, #12]
      break;
 8007866:	e006      	b.n	8007876 <mqtt_create_request+0x62>
  for (n = 0; n < r_objs_len; n++) {
 8007868:	7cfb      	ldrb	r3, [r7, #19]
 800786a:	3301      	adds	r3, #1
 800786c:	74fb      	strb	r3, [r7, #19]
 800786e:	7cfb      	ldrb	r3, [r7, #19]
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	429a      	cmp	r2, r3
 8007874:	d8db      	bhi.n	800782e <mqtt_create_request+0x1a>
    }
  }
  return r;
 8007876:	697b      	ldr	r3, [r7, #20]
}
 8007878:	4618      	mov	r0, r3
 800787a:	371c      	adds	r7, #28
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 800788e:	2300      	movs	r3, #0
 8007890:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 8007892:	2300      	movs	r3, #0
 8007894:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	e00a      	b.n	80078b4 <mqtt_append_request+0x30>
    time_before += iter->timeout_diff;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	89da      	ldrh	r2, [r3, #14]
 80078a2:	8a7b      	ldrh	r3, [r7, #18]
 80078a4:	4413      	add	r3, r2
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	827b      	strh	r3, [r7, #18]
    head = iter;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1f1      	bne.n	800789e <mqtt_append_request+0x1a>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 80078ba:	8a7b      	ldrh	r3, [r7, #18]
 80078bc:	f1c3 031e 	rsb	r3, r3, #30
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d103      	bne.n	80078d4 <mqtt_append_request+0x50>
    *tail = r;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 80078d2:	e002      	b.n	80078da <mqtt_append_request+0x56>
    head->next = r;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	683a      	ldr	r2, [r7, #0]
 80078d8:	601a      	str	r2, [r3, #0]
}
 80078da:	bf00      	nop
 80078dc:	371c      	adds	r7, #28
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b083      	sub	sp, #12
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d002      	beq.n	80078fa <mqtt_delete_request+0x14>
    r->next = r;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	601a      	str	r2, [r3, #0]
  }
}
 80078fa:	bf00      	nop
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 8007906:	b480      	push	{r7}
 8007908:	b085      	sub	sp, #20
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	460b      	mov	r3, r1
 8007910:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 8007912:	2300      	movs	r3, #0
 8007914:	60fb      	str	r3, [r7, #12]
 8007916:	2300      	movs	r3, #0
 8007918:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	e009      	b.n	8007936 <mqtt_take_request+0x30>
    if (iter->pkt_id == pkt_id) {
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	899b      	ldrh	r3, [r3, #12]
 8007926:	887a      	ldrh	r2, [r7, #2]
 8007928:	429a      	cmp	r2, r3
 800792a:	d008      	beq.n	800793e <mqtt_take_request+0x38>
      break;
    }
    prev = iter;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	60fb      	str	r3, [r7, #12]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1f2      	bne.n	8007922 <mqtt_take_request+0x1c>
 800793c:	e000      	b.n	8007940 <mqtt_take_request+0x3a>
      break;
 800793e:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d01c      	beq.n	8007980 <mqtt_take_request+0x7a>
    /* unchain */
    if (prev == NULL) {
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d104      	bne.n	8007956 <mqtt_take_request+0x50>
      *tail = iter->next;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	e003      	b.n	800795e <mqtt_take_request+0x58>
    } else {
      prev->next = iter->next;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d009      	beq.n	800797a <mqtt_take_request+0x74>
      iter->next->timeout_diff += iter->timeout_diff;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	89d9      	ldrh	r1, [r3, #14]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	89da      	ldrh	r2, [r3, #14]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	440a      	add	r2, r1
 8007976:	b292      	uxth	r2, r2
 8007978:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	601a      	str	r2, [r3, #0]
  }
  return iter;
 8007980:	68fb      	ldr	r3, [r7, #12]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr

0800798e <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b084      	sub	sp, #16
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	460b      	mov	r3, r1
 8007998:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
  r = *tail;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 80079a0:	e02c      	b.n	80079fc <mqtt_request_time_elapsed+0x6e>
    if (t >= r->timeout_diff) {
 80079a2:	78fb      	ldrb	r3, [r7, #3]
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	89db      	ldrh	r3, [r3, #14]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d31c      	bcc.n	80079e8 <mqtt_request_time_elapsed+0x5a>
      t -= (u8_t)r->timeout_diff;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	89db      	ldrh	r3, [r3, #14]
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	78fa      	ldrb	r2, [r7, #3]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d007      	beq.n	80079da <mqtt_request_time_elapsed+0x4c>
        r->cb(r->arg, ERR_TIMEOUT);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	6892      	ldr	r2, [r2, #8]
 80079d2:	f06f 0102 	mvn.w	r1, #2
 80079d6:	4610      	mov	r0, r2
 80079d8:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f7ff ff83 	bl	80078e6 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	60fb      	str	r3, [r7, #12]
 80079e6:	e009      	b.n	80079fc <mqtt_request_time_elapsed+0x6e>
    } else {
      r->timeout_diff -= t;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	89da      	ldrh	r2, [r3, #14]
 80079ec:	78fb      	ldrb	r3, [r7, #3]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	81da      	strh	r2, [r3, #14]
      t = 0;
 80079f8:	2300      	movs	r3, #0
 80079fa:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 80079fc:	78fb      	ldrb	r3, [r7, #3]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d002      	beq.n	8007a08 <mqtt_request_time_elapsed+0x7a>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1cc      	bne.n	80079a2 <mqtt_request_time_elapsed+0x14>
    }
  }
}
 8007a08:	bf00      	nop
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
  for (iter = *tail; iter != NULL; iter = next) {
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	60fb      	str	r3, [r7, #12]
 8007a1e:	e007      	b.n	8007a30 <mqtt_clear_requests+0x20>
    next = iter->next;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f7ff ff5d 	bl	80078e6 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	60fb      	str	r3, [r7, #12]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1f4      	bne.n	8007a20 <mqtt_clear_requests+0x10>
  }
  *tail = NULL;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	601a      	str	r2, [r3, #0]
}
 8007a3c:	bf00      	nop
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
  for (n = 0; n < r_objs_len; n++) {
 8007a4e:	2300      	movs	r3, #0
 8007a50:	73fb      	strb	r3, [r7, #15]
 8007a52:	e00b      	b.n	8007a6c <mqtt_init_requests+0x28>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
 8007a56:	011a      	lsls	r2, r3, #4
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
 8007a5a:	011b      	lsls	r3, r3, #4
 8007a5c:	6879      	ldr	r1, [r7, #4]
 8007a5e:	440b      	add	r3, r1
 8007a60:	6879      	ldr	r1, [r7, #4]
 8007a62:	440a      	add	r2, r1
 8007a64:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	73fb      	strb	r3, [r7, #15]
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d8ef      	bhi.n	8007a54 <mqtt_init_requests+0x10>
  }
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop
 8007a78:	3714      	adds	r7, #20
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b082      	sub	sp, #8
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 8007a8e:	78fb      	ldrb	r3, [r7, #3]
 8007a90:	4619      	mov	r1, r3
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f7ff fd96 	bl	80075c4 <mqtt_ringbuf_put>
}
 8007a98:	bf00      	nop
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 8007aac:	887b      	ldrh	r3, [r7, #2]
 8007aae:	0a1b      	lsrs	r3, r3, #8
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7ff fd84 	bl	80075c4 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 8007abc:	887b      	ldrh	r3, [r7, #2]
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7ff fd7e 	bl	80075c4 <mqtt_ringbuf_put>
}
 8007ac8:	bf00      	nop
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	4613      	mov	r3, r2
 8007adc:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 8007ade:	2300      	movs	r3, #0
 8007ae0:	82fb      	strh	r3, [r7, #22]
 8007ae2:	e00a      	b.n	8007afa <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 8007ae4:	8afb      	ldrh	r3, [r7, #22]
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	4413      	add	r3, r2
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	4619      	mov	r1, r3
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f7ff fd68 	bl	80075c4 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8007af4:	8afb      	ldrh	r3, [r7, #22]
 8007af6:	3301      	adds	r3, #1
 8007af8:	82fb      	strh	r3, [r7, #22]
 8007afa:	8afa      	ldrh	r2, [r7, #22]
 8007afc:	88fb      	ldrh	r3, [r7, #6]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d3f0      	bcc.n	8007ae4 <mqtt_output_append_buf+0x14>
  }
}
 8007b02:	bf00      	nop
 8007b04:	bf00      	nop
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	4613      	mov	r3, r2
 8007b18:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8007b1a:	88fb      	ldrh	r3, [r7, #6]
 8007b1c:	0a1b      	lsrs	r3, r3, #8
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	4619      	mov	r1, r3
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f7ff fd4d 	bl	80075c4 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 8007b2a:	88fb      	ldrh	r3, [r7, #6]
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	4619      	mov	r1, r3
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f7ff fd47 	bl	80075c4 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8007b36:	2300      	movs	r3, #0
 8007b38:	82fb      	strh	r3, [r7, #22]
 8007b3a:	e00a      	b.n	8007b52 <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 8007b3c:	8afb      	ldrh	r3, [r7, #22]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	4413      	add	r3, r2
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	4619      	mov	r1, r3
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f7ff fd3c 	bl	80075c4 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8007b4c:	8afb      	ldrh	r3, [r7, #22]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	82fb      	strh	r3, [r7, #22]
 8007b52:	8afa      	ldrh	r2, [r7, #22]
 8007b54:	88fb      	ldrh	r3, [r7, #6]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d3f0      	bcc.n	8007b3c <mqtt_output_append_string+0x30>
  }
}
 8007b5a:	bf00      	nop
 8007b5c:	bf00      	nop
 8007b5e:	3718      	adds	r7, #24
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	4608      	mov	r0, r1
 8007b6e:	4611      	mov	r1, r2
 8007b70:	461a      	mov	r2, r3
 8007b72:	4603      	mov	r3, r0
 8007b74:	70fb      	strb	r3, [r7, #3]
 8007b76:	460b      	mov	r3, r1
 8007b78:	70bb      	strb	r3, [r7, #2]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 8007b7e:	78fb      	ldrb	r3, [r7, #3]
 8007b80:	011b      	lsls	r3, r3, #4
 8007b82:	b25a      	sxtb	r2, r3
 8007b84:	78bb      	ldrb	r3, [r7, #2]
 8007b86:	00db      	lsls	r3, r3, #3
 8007b88:	b25b      	sxtb	r3, r3
 8007b8a:	f003 0308 	and.w	r3, r3, #8
 8007b8e:	b25b      	sxtb	r3, r3
 8007b90:	4313      	orrs	r3, r2
 8007b92:	b25a      	sxtb	r2, r3
 8007b94:	787b      	ldrb	r3, [r7, #1]
 8007b96:	005b      	lsls	r3, r3, #1
 8007b98:	b25b      	sxtb	r3, r3
 8007b9a:	f003 0306 	and.w	r3, r3, #6
 8007b9e:	b25b      	sxtb	r3, r3
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	b25a      	sxtb	r2, r3
 8007ba4:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	b25b      	sxtb	r3, r3
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	b25b      	sxtb	r3, r3
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7ff ff63 	bl	8007a82 <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8007bbc:	8abb      	ldrh	r3, [r7, #20]
 8007bbe:	b25b      	sxtb	r3, r3
 8007bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bc4:	b25b      	sxtb	r3, r3
 8007bc6:	8aba      	ldrh	r2, [r7, #20]
 8007bc8:	2a7f      	cmp	r2, #127	; 0x7f
 8007bca:	d902      	bls.n	8007bd2 <mqtt_output_append_fixed_header+0x6e>
 8007bcc:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8007bd0:	e000      	b.n	8007bd4 <mqtt_output_append_fixed_header+0x70>
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	b25b      	sxtb	r3, r3
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7ff ff50 	bl	8007a82 <mqtt_output_append_u8>
    r_length >>= 7;
 8007be2:	8abb      	ldrh	r3, [r7, #20]
 8007be4:	09db      	lsrs	r3, r3, #7
 8007be6:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8007be8:	8abb      	ldrh	r3, [r7, #20]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1e6      	bne.n	8007bbc <mqtt_output_append_fixed_header+0x58>
}
 8007bee:	bf00      	nop
 8007bf0:	bf00      	nop
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8007bf8:	b590      	push	{r4, r7, lr}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8007c04:	887b      	ldrh	r3, [r7, #2]
 8007c06:	3301      	adds	r3, #1
 8007c08:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 8007c0a:	89fb      	ldrh	r3, [r7, #14]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 8007c10:	887b      	ldrh	r3, [r7, #2]
 8007c12:	09db      	lsrs	r3, r3, #7
 8007c14:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 8007c16:	887b      	ldrh	r3, [r7, #2]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1f6      	bne.n	8007c0a <mqtt_output_check_space+0x12>

  return (total_len <= mqtt_ringbuf_free(rb));
 8007c1c:	89fc      	ldrh	r4, [r7, #14]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7ff fd1e 	bl	8007660 <mqtt_ringbuf_len>
 8007c24:	4603      	mov	r3, r0
 8007c26:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007c2a:	429c      	cmp	r4, r3
 8007c2c:	bfd4      	ite	le
 8007c2e:	2301      	movle	r3, #1
 8007c30:	2300      	movgt	r3, #0
 8007c32:	b2db      	uxtb	r3, r3
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3714      	adds	r7, #20
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd90      	pop	{r4, r7, pc}

08007c3c <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	460b      	mov	r3, r1
 8007c46:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d02a      	beq.n	8007ca6 <mqtt_close+0x6a>
    err_t res;
    altcp_recv(client->conn, NULL);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	2100      	movs	r1, #0
 8007c56:	4618      	mov	r0, r3
 8007c58:	f004 f8e9 	bl	800be2e <tcp_recv>
    altcp_err(client->conn,  NULL);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	2100      	movs	r1, #0
 8007c62:	4618      	mov	r0, r3
 8007c64:	f004 f906 	bl	800be74 <tcp_err>
    altcp_sent(client->conn, NULL);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f004 f8ef 	bl	800be52 <tcp_sent>
    res = altcp_close(client->conn);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f003 f84d 	bl	800ad18 <tcp_close>
 8007c7e:	60f8      	str	r0, [r7, #12]
    if (res != ERR_OK) {
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00c      	beq.n	8007ca0 <mqtt_close+0x64>
      altcp_abort(client->conn);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f003 f908 	bl	800aea0 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f7ff fc49 	bl	8007528 <lwip_strerr>
 8007c96:	4603      	mov	r3, r0
 8007c98:	4619      	mov	r1, r3
 8007c9a:	4812      	ldr	r0, [pc, #72]	; (8007ce4 <mqtt_close+0xa8>)
 8007c9c:	f7f8 faf9 	bl	8000292 <Console_DEBUG>
    }
    client->conn = NULL;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	3318      	adds	r3, #24
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7ff feb0 	bl	8007a10 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 8007cb0:	6879      	ldr	r1, [r7, #4]
 8007cb2:	480d      	ldr	r0, [pc, #52]	; (8007ce8 <mqtt_close+0xac>)
 8007cb4:	f007 fd76 	bl	800f7a4 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	7a9b      	ldrb	r3, [r3, #10]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00d      	beq.n	8007cdc <mqtt_close+0xa0>

    client->conn_state = TCP_DISCONNECTED;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d006      	beq.n	8007cdc <mqtt_close+0xa0>
      client->connect_cb(client, client->connect_arg, reason);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	6911      	ldr	r1, [r2, #16]
 8007cd6:	887a      	ldrh	r2, [r7, #2]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	4798      	blx	r3
    }
  }
}
 8007cdc:	bf00      	nop
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	080153c8 	.word	0x080153c8
 8007ce8:	08007ced 	.word	0x08007ced

08007cec <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af02      	add	r7, sp, #8
 8007cf2:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);

  if (client->conn_state == MQTT_CONNECTING) {
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	7a9b      	ldrb	r3, [r3, #10]
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d118      	bne.n	8007d36 <mqtt_cyclic_timer+0x4a>
    client->cyclic_tick++;
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	881b      	ldrh	r3, [r3, #0]
 8007d14:	461a      	mov	r2, r3
 8007d16:	4613      	mov	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	2b63      	cmp	r3, #99	; 0x63
 8007d1e:	dd6d      	ble.n	8007dfc <mqtt_cyclic_timer+0x110>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
 8007d20:	483d      	ldr	r0, [pc, #244]	; (8007e18 <mqtt_cyclic_timer+0x12c>)
 8007d22:	f7f8 fab6 	bl	8000292 <Console_DEBUG>
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8007d26:	f240 1101 	movw	r1, #257	; 0x101
 8007d2a:	68b8      	ldr	r0, [r7, #8]
 8007d2c:	f7ff ff86 	bl	8007c3c <mqtt_close>
      restart_timer = 0;
 8007d30:	2300      	movs	r3, #0
 8007d32:	73fb      	strb	r3, [r7, #15]
 8007d34:	e062      	b.n	8007dfc <mqtt_cyclic_timer+0x110>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	7a9b      	ldrb	r3, [r3, #10]
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d156      	bne.n	8007dec <mqtt_cyclic_timer+0x100>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	3318      	adds	r3, #24
 8007d42:	2105      	movs	r1, #5
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7ff fe22 	bl	800798e <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	885b      	ldrh	r3, [r3, #2]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d054      	beq.n	8007dfc <mqtt_cyclic_timer+0x110>

      client->server_watchdog++;
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	889b      	ldrh	r3, [r3, #4]
 8007d56:	3301      	adds	r3, #1
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	889b      	ldrh	r3, [r3, #4]
 8007d62:	461a      	mov	r2, r3
 8007d64:	4613      	mov	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	441a      	add	r2, r3
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	885b      	ldrh	r3, [r3, #2]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	885b      	ldrh	r3, [r3, #2]
 8007d74:	085b      	lsrs	r3, r3, #1
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	440b      	add	r3, r1
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	dd09      	ble.n	8007d92 <mqtt_cyclic_timer+0xa6>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
 8007d7e:	4827      	ldr	r0, [pc, #156]	; (8007e1c <mqtt_cyclic_timer+0x130>)
 8007d80:	f7f8 fa87 	bl	8000292 <Console_DEBUG>
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8007d84:	f240 1101 	movw	r1, #257	; 0x101
 8007d88:	68b8      	ldr	r0, [r7, #8]
 8007d8a:	f7ff ff57 	bl	8007c3c <mqtt_close>
        restart_timer = 0;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	461a      	mov	r2, r3
 8007d98:	4613      	mov	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	4413      	add	r3, r2
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	8852      	ldrh	r2, [r2, #2]
 8007da2:	4293      	cmp	r3, r2
 8007da4:	db1b      	blt.n	8007dde <mqtt_cyclic_timer+0xf2>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
 8007da6:	481e      	ldr	r0, [pc, #120]	; (8007e20 <mqtt_cyclic_timer+0x134>)
 8007da8:	f7f8 fa73 	bl	8000292 <Console_DEBUG>
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	33ec      	adds	r3, #236	; 0xec
 8007db0:	2100      	movs	r1, #0
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7ff ff20 	bl	8007bf8 <mqtt_output_check_space>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d01e      	beq.n	8007dfc <mqtt_cyclic_timer+0x110>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	9301      	str	r3, [sp, #4]
 8007dc8:	2300      	movs	r3, #0
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	2300      	movs	r3, #0
 8007dce:	2200      	movs	r2, #0
 8007dd0:	210c      	movs	r1, #12
 8007dd2:	f7ff fec7 	bl	8007b64 <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	801a      	strh	r2, [r3, #0]
 8007ddc:	e00e      	b.n	8007dfc <mqtt_cyclic_timer+0x110>
        }
      } else {
        client->cyclic_tick++;
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	3301      	adds	r3, #1
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	801a      	strh	r2, [r3, #0]
 8007dea:	e007      	b.n	8007dfc <mqtt_cyclic_timer+0x110>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	7a9b      	ldrb	r3, [r3, #10]
 8007df0:	4619      	mov	r1, r3
 8007df2:	480c      	ldr	r0, [pc, #48]	; (8007e24 <mqtt_cyclic_timer+0x138>)
 8007df4:	f7f8 fa4d 	bl	8000292 <Console_DEBUG>
    restart_timer = 0;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d005      	beq.n	8007e0e <mqtt_cyclic_timer+0x122>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	4908      	ldr	r1, [pc, #32]	; (8007e28 <mqtt_cyclic_timer+0x13c>)
 8007e06:	f241 3088 	movw	r0, #5000	; 0x1388
 8007e0a:	f007 fcb5 	bl	800f778 <sys_timeout>
  }
}
 8007e0e:	bf00      	nop
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	080153e4 	.word	0x080153e4
 8007e1c:	0801541c 	.word	0x0801541c
 8007e20:	08015454 	.word	0x08015454
 8007e24:	08015490 	.word	0x08015490
 8007e28:	08007ced 	.word	0x08007ced

08007e2c <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af02      	add	r7, sp, #8
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	4608      	mov	r0, r1
 8007e36:	4611      	mov	r1, r2
 8007e38:	461a      	mov	r2, r3
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	70fb      	strb	r3, [r7, #3]
 8007e3e:	460b      	mov	r3, r1
 8007e40:	803b      	strh	r3, [r7, #0]
 8007e42:	4613      	mov	r3, r2
 8007e44:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]
  if (mqtt_output_check_space(&client->output, 2)) {
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	33ec      	adds	r3, #236	; 0xec
 8007e4e:	2102      	movs	r1, #2
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7ff fed1 	bl	8007bf8 <mqtt_output_check_space>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d01c      	beq.n	8007e96 <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8007e62:	78bb      	ldrb	r3, [r7, #2]
 8007e64:	78f9      	ldrb	r1, [r7, #3]
 8007e66:	2202      	movs	r2, #2
 8007e68:	9201      	str	r2, [sp, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	9200      	str	r2, [sp, #0]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f7ff fe78 	bl	8007b64 <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	33ec      	adds	r3, #236	; 0xec
 8007e78:	883a      	ldrh	r2, [r7, #0]
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7ff fe0f 	bl	8007aa0 <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	4610      	mov	r0, r2
 8007e90:	f7ff fc02 	bl	8007698 <mqtt_output_send>
 8007e94:	e00c      	b.n	8007eb0 <pub_ack_rec_rel_response+0x84>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
 8007e96:	78fb      	ldrb	r3, [r7, #3]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7ff fb61 	bl	8007560 <mqtt_msg_type_to_str>
 8007e9e:	4601      	mov	r1, r0
 8007ea0:	883b      	ldrh	r3, [r7, #0]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	4805      	ldr	r0, [pc, #20]	; (8007ebc <pub_ack_rec_rel_response+0x90>)
 8007ea6:	f7f8 f9f4 	bl	8000292 <Console_DEBUG>
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 8007eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8007eae:	60fb      	str	r3, [r7, #12]
  }
  return err;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	080154cc 	.word	0x080154cc

08007ec0 <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00c      	beq.n	8007eee <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	6890      	ldr	r0, [r2, #8]
 8007edc:	78fa      	ldrb	r2, [r7, #3]
 8007ede:	2a02      	cmp	r2, #2
 8007ee0:	d801      	bhi.n	8007ee6 <mqtt_incomming_suback+0x26>
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	e001      	b.n	8007eea <mqtt_incomming_suback+0x2a>
 8007ee6:	f06f 020c 	mvn.w	r2, #12
 8007eea:	4611      	mov	r1, r2
 8007eec:	4798      	blx	r3
  }
}
 8007eee:	bf00      	nop
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
	...

08007ef8 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_len, u16_t length, u32_t remaining_length)
{
 8007ef8:	b590      	push	{r4, r7, lr}
 8007efa:	b08f      	sub	sp, #60	; 0x3c
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	607b      	str	r3, [r7, #4]
 8007f02:	460b      	mov	r3, r1
 8007f04:	72fb      	strb	r3, [r7, #11]
 8007f06:	4613      	mov	r3, r2
 8007f08:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_len;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8007f14:	7afb      	ldrb	r3, [r7, #11]
 8007f16:	4413      	add	r3, r2
 8007f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_len;
 8007f1a:	7afb      	ldrb	r3, [r7, #11]
 8007f1c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8007f20:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8007f28:	091b      	lsrs	r3, r3, #4
 8007f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("fixed_hdr_len <= client->msg_idx", fixed_hdr_len <= client->msg_idx);
  LWIP_ERROR("buffer length mismatch", fixed_hdr_len + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 8007f32:	7afa      	ldrb	r2, [r7, #11]
 8007f34:	893b      	ldrh	r3, [r7, #8]
 8007f36:	4413      	add	r3, r2
 8007f38:	2b80      	cmp	r3, #128	; 0x80
 8007f3a:	dd05      	ble.n	8007f48 <mqtt_message_received+0x50>
 8007f3c:	4896      	ldr	r0, [pc, #600]	; (8008198 <mqtt_message_received+0x2a0>)
 8007f3e:	f7f8 f9a8 	bl	8000292 <Console_DEBUG>
 8007f42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f46:	e1d1      	b.n	80082ec <mqtt_message_received+0x3f4>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 8007f48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d12e      	bne.n	8007fae <mqtt_message_received+0xb6>
    if (client->conn_state == MQTT_CONNECTING) {
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	7a9b      	ldrb	r3, [r3, #10]
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d126      	bne.n	8007fa6 <mqtt_message_received+0xae>
      if (length < 2) {
 8007f58:	893b      	ldrh	r3, [r7, #8]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d803      	bhi.n	8007f66 <mqtt_message_received+0x6e>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
 8007f5e:	488f      	ldr	r0, [pc, #572]	; (800819c <mqtt_message_received+0x2a4>)
 8007f60:	f7f8 f997 	bl	8000292 <Console_DEBUG>
        goto out_disconnect;
 8007f64:	e1c0      	b.n	80082e8 <mqtt_message_received+0x3f0>
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 8007f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f68:	3301      	adds	r3, #1
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
 8007f6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007f70:	4619      	mov	r1, r3
 8007f72:	488b      	ldr	r0, [pc, #556]	; (80081a0 <mqtt_message_received+0x2a8>)
 8007f74:	f7f8 f98d 	bl	8000292 <Console_DEBUG>
      if (res == MQTT_CONNECT_ACCEPTED) {
 8007f78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f040 81b2 	bne.w	80082e4 <mqtt_message_received+0x3ec>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2203      	movs	r2, #3
 8007f8a:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 81a7 	beq.w	80082e4 <mqtt_message_received+0x3ec>
          client->connect_cb(client, client->connect_arg, res);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	6911      	ldr	r1, [r2, #16]
 8007f9e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	4798      	blx	r3
 8007fa4:	e19e      	b.n	80082e4 <mqtt_message_received+0x3ec>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
 8007fa6:	487f      	ldr	r0, [pc, #508]	; (80081a4 <mqtt_message_received+0x2ac>)
 8007fa8:	f7f8 f973 	bl	8000292 <Console_DEBUG>
 8007fac:	e19a      	b.n	80082e4 <mqtt_message_received+0x3ec>
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 8007fae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fb2:	2b0d      	cmp	r3, #13
 8007fb4:	d103      	bne.n	8007fbe <mqtt_message_received+0xc6>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));
 8007fb6:	487c      	ldr	r0, [pc, #496]	; (80081a8 <mqtt_message_received+0x2b0>)
 8007fb8:	f7f8 f96b 	bl	8000292 <Console_DEBUG>
 8007fbc:	e192      	b.n	80082e4 <mqtt_message_received+0x3ec>

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 8007fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	f040 8100 	bne.w	80081c8 <mqtt_message_received+0x2d0>
    u16_t payload_offset = 0;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 8007fcc:	893b      	ldrh	r3, [r7, #8]
 8007fce:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8007fd6:	105b      	asrs	r3, r3, #1
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	f003 0303 	and.w	r3, r3, #3
 8007fde:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fe4:	2b80      	cmp	r3, #128	; 0x80
 8007fe6:	f200 8091 	bhi.w	800810c <mqtt_message_received+0x214>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 8007fea:	7ffb      	ldrb	r3, [r7, #31]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d001      	beq.n	8007ff4 <mqtt_message_received+0xfc>
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	e000      	b.n	8007ff6 <mqtt_message_received+0xfe>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 8007ff8:	8bbb      	ldrh	r3, [r7, #28]
 8007ffa:	1c5a      	adds	r2, r3, #1
 8007ffc:	893b      	ldrh	r3, [r7, #8]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	db03      	blt.n	800800a <mqtt_message_received+0x112>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
 8008002:	486a      	ldr	r0, [pc, #424]	; (80081ac <mqtt_message_received+0x2b4>)
 8008004:	f7f8 f945 	bl	8000292 <Console_DEBUG>
        goto out_disconnect;
 8008008:	e16e      	b.n	80082e8 <mqtt_message_received+0x3f0>
      }
      topic_len = var_hdr_payload[0];
 800800a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 8008010:	8b7b      	ldrh	r3, [r7, #26]
 8008012:	021b      	lsls	r3, r3, #8
 8008014:	b29a      	uxth	r2, r3
 8008016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008018:	3301      	adds	r3, #1
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	b29b      	uxth	r3, r3
 800801e:	4413      	add	r3, r2
 8008020:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 8008022:	8b7a      	ldrh	r2, [r7, #26]
 8008024:	8939      	ldrh	r1, [r7, #8]
 8008026:	8bbb      	ldrh	r3, [r7, #28]
 8008028:	3302      	adds	r3, #2
 800802a:	1acb      	subs	r3, r1, r3
 800802c:	429a      	cmp	r2, r3
 800802e:	dc06      	bgt.n	800803e <mqtt_message_received+0x146>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 8008030:	8b7a      	ldrh	r2, [r7, #26]
 8008032:	8bbb      	ldrh	r3, [r7, #28]
 8008034:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008036:	1acb      	subs	r3, r1, r3
 8008038:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 800803a:	429a      	cmp	r2, r3
 800803c:	d903      	bls.n	8008046 <mqtt_message_received+0x14e>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
 800803e:	485c      	ldr	r0, [pc, #368]	; (80081b0 <mqtt_message_received+0x2b8>)
 8008040:	f7f8 f927 	bl	8000292 <Console_DEBUG>
        goto out_disconnect;
 8008044:	e150      	b.n	80082e8 <mqtt_message_received+0x3f0>
      }

      topic = var_hdr_payload + 2;
 8008046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008048:	3302      	adds	r3, #2
 800804a:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 800804c:	8b7b      	ldrh	r3, [r7, #26]
 800804e:	3302      	adds	r3, #2
 8008050:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 8008052:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008054:	7ffa      	ldrb	r2, [r7, #31]
 8008056:	2a00      	cmp	r2, #0
 8008058:	d001      	beq.n	800805e <mqtt_message_received+0x166>
 800805a:	2202      	movs	r2, #2
 800805c:	e000      	b.n	8008060 <mqtt_message_received+0x168>
 800805e:	2201      	movs	r2, #1
 8008060:	4413      	add	r3, r2
 8008062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008064:	429a      	cmp	r2, r3
 8008066:	d203      	bcs.n	8008070 <mqtt_message_received+0x178>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
 8008068:	4852      	ldr	r0, [pc, #328]	; (80081b4 <mqtt_message_received+0x2bc>)
 800806a:	f7f8 f912 	bl	8000292 <Console_DEBUG>
        goto out_disconnect;
 800806e:	e13b      	b.n	80082e8 <mqtt_message_received+0x3f0>
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 8008070:	7ffb      	ldrb	r3, [r7, #31]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d01d      	beq.n	80080b2 <mqtt_message_received+0x1ba>
        if (length < after_topic + 2U) {
 8008076:	893a      	ldrh	r2, [r7, #8]
 8008078:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800807a:	3302      	adds	r3, #2
 800807c:	429a      	cmp	r2, r3
 800807e:	d203      	bcs.n	8008088 <mqtt_message_received+0x190>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
 8008080:	484d      	ldr	r0, [pc, #308]	; (80081b8 <mqtt_message_received+0x2c0>)
 8008082:	f7f8 f906 	bl	8000292 <Console_DEBUG>
          goto out_disconnect;
 8008086:	e12f      	b.n	80082e8 <mqtt_message_received+0x3f0>
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 8008088:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800808a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800808c:	4413      	add	r3, r2
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	b29b      	uxth	r3, r3
 8008092:	021b      	lsls	r3, r3, #8
 8008094:	b29a      	uxth	r2, r3
 8008096:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008098:	3301      	adds	r3, #1
 800809a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800809c:	440b      	add	r3, r1
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	4413      	add	r3, r2
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 80080aa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80080ac:	3302      	adds	r3, #2
 80080ae:	863b      	strh	r3, [r7, #48]	; 0x30
 80080b0:	e002      	b.n	80080b8 <mqtt_message_received+0x1c0>
      } else {
        client->inpub_pkt_id = 0;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 80080b8:	8b7b      	ldrh	r3, [r7, #26]
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	4413      	add	r3, r2
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 80080c2:	8b7b      	ldrh	r3, [r7, #26]
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	4413      	add	r3, r2
 80080c8:	2200      	movs	r2, #0
 80080ca:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 80080cc:	893a      	ldrh	r2, [r7, #8]
 80080ce:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 80080d4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80080d6:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
 80080d8:	7ff9      	ldrb	r1, [r7, #31]
 80080da:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4413      	add	r3, r2
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	4836      	ldr	r0, [pc, #216]	; (80081bc <mqtt_message_received+0x2c4>)
 80080e4:	f7f8 f8d5 	bl	8000292 <Console_DEBUG>
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d008      	beq.n	8008102 <mqtt_message_received+0x20a>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 80080f8:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	440a      	add	r2, r1
 80080fe:	6979      	ldr	r1, [r7, #20]
 8008100:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 8008102:	8b7b      	ldrh	r3, [r7, #26]
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	4413      	add	r3, r2
 8008108:	7cfa      	ldrb	r2, [r7, #19]
 800810a:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 800810c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800810e:	2b00      	cmp	r3, #0
 8008110:	d103      	bne.n	800811a <mqtt_message_received+0x222>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	f040 80e5 	bne.w	80082e4 <mqtt_message_received+0x3ec>
      if (length < (size_t)(payload_offset + payload_length)) {
 800811a:	893b      	ldrh	r3, [r7, #8]
 800811c:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800811e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008120:	440a      	add	r2, r1
 8008122:	4293      	cmp	r3, r2
 8008124:	d203      	bcs.n	800812e <mqtt_message_received+0x236>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
 8008126:	4826      	ldr	r0, [pc, #152]	; (80081c0 <mqtt_message_received+0x2c8>)
 8008128:	f7f8 f8b3 	bl	8000292 <Console_DEBUG>
        goto out_disconnect;
 800812c:	e0dc      	b.n	80082e8 <mqtt_message_received+0x3f0>
      }
      if (client->data_cb != NULL) {
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00e      	beq.n	8008154 <mqtt_message_received+0x25c>
        client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800813e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008142:	18d1      	adds	r1, r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	bf0c      	ite	eq
 800814a:	2301      	moveq	r3, #1
 800814c:	2300      	movne	r3, #0
 800814e:	b2db      	uxtb	r3, r3
 8008150:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008152:	47a0      	blx	r4
      }
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	f040 80c4 	bne.w	80082e4 <mqtt_message_received+0x3ec>
 800815c:	7ffb      	ldrb	r3, [r7, #31]
 800815e:	2b00      	cmp	r3, #0
 8008160:	f000 80c0 	beq.w	80082e4 <mqtt_message_received+0x3ec>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 8008164:	7ffb      	ldrb	r3, [r7, #31]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d101      	bne.n	800816e <mqtt_message_received+0x276>
 800816a:	2304      	movs	r3, #4
 800816c:	e000      	b.n	8008170 <mqtt_message_received+0x278>
 800816e:	2305      	movs	r3, #5
 8008170:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
 8008172:	7cbb      	ldrb	r3, [r7, #18]
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff f9f3 	bl	8007560 <mqtt_msg_type_to_str>
 800817a:	4601      	mov	r1, r0
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	891b      	ldrh	r3, [r3, #8]
 8008180:	461a      	mov	r2, r3
 8008182:	4810      	ldr	r0, [pc, #64]	; (80081c4 <mqtt_message_received+0x2cc>)
 8008184:	f7f8 f885 	bl	8000292 <Console_DEBUG>
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	891a      	ldrh	r2, [r3, #8]
 800818c:	7cb9      	ldrb	r1, [r7, #18]
 800818e:	2300      	movs	r3, #0
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f7ff fe4b 	bl	8007e2c <pub_ack_rec_rel_response>
 8008196:	e0a5      	b.n	80082e4 <mqtt_message_received+0x3ec>
 8008198:	08015514 	.word	0x08015514
 800819c:	0801552c 	.word	0x0801552c
 80081a0:	08015564 	.word	0x08015564
 80081a4:	08015598 	.word	0x08015598
 80081a8:	080155d4 	.word	0x080155d4
 80081ac:	0801560c 	.word	0x0801560c
 80081b0:	08015644 	.word	0x08015644
 80081b4:	08015684 	.word	0x08015684
 80081b8:	080156c8 	.word	0x080156c8
 80081bc:	0801570c 	.word	0x0801570c
 80081c0:	08015764 	.word	0x08015764
 80081c4:	0801579c 	.word	0x0801579c
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 80081c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	021b      	lsls	r3, r3, #8
 80081d0:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 80081d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d4:	3301      	adds	r3, #1
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	b29a      	uxth	r2, r3
 80081da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081dc:	4313      	orrs	r3, r2
 80081de:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 80081e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d103      	bne.n	80081ee <mqtt_message_received+0x2f6>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
 80081e6:	4843      	ldr	r0, [pc, #268]	; (80082f4 <mqtt_message_received+0x3fc>)
 80081e8:	f7f8 f853 	bl	8000292 <Console_DEBUG>
      goto out_disconnect;
 80081ec:	e07c      	b.n	80082e8 <mqtt_message_received+0x3f0>
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 80081ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081f2:	2b05      	cmp	r3, #5
 80081f4:	d10b      	bne.n	800820e <mqtt_message_received+0x316>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
 80081f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081f8:	4619      	mov	r1, r3
 80081fa:	483f      	ldr	r0, [pc, #252]	; (80082f8 <mqtt_message_received+0x400>)
 80081fc:	f7f8 f849 	bl	8000292 <Console_DEBUG>
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 8008200:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008202:	2301      	movs	r3, #1
 8008204:	2106      	movs	r1, #6
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f7ff fe10 	bl	8007e2c <pub_ack_rec_rel_response>
 800820c:	e06a      	b.n	80082e4 <mqtt_message_received+0x3ec>

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 800820e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008212:	2b06      	cmp	r3, #6
 8008214:	d10b      	bne.n	800822e <mqtt_message_received+0x336>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
 8008216:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008218:	4619      	mov	r1, r3
 800821a:	4838      	ldr	r0, [pc, #224]	; (80082fc <mqtt_message_received+0x404>)
 800821c:	f7f8 f839 	bl	8000292 <Console_DEBUG>
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 8008220:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008222:	2300      	movs	r3, #0
 8008224:	2107      	movs	r1, #7
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f7ff fe00 	bl	8007e2c <pub_ack_rec_rel_response>
 800822c:	e05a      	b.n	80082e4 <mqtt_message_received+0x3ec>

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 800822e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008232:	2b09      	cmp	r3, #9
 8008234:	d00b      	beq.n	800824e <mqtt_message_received+0x356>
 8008236:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800823a:	2b0b      	cmp	r3, #11
 800823c:	d007      	beq.n	800824e <mqtt_message_received+0x356>
 800823e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008242:	2b07      	cmp	r3, #7
 8008244:	d003      	beq.n	800824e <mqtt_message_received+0x356>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8008246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800824a:	2b04      	cmp	r3, #4
 800824c:	d143      	bne.n	80082d6 <mqtt_message_received+0x3de>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	3318      	adds	r3, #24
 8008252:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008254:	4611      	mov	r1, r2
 8008256:	4618      	mov	r0, r3
 8008258:	f7ff fb55 	bl	8007906 <mqtt_take_request>
 800825c:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d02c      	beq.n	80082be <mqtt_message_received+0x3c6>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
 8008264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008268:	4618      	mov	r0, r3
 800826a:	f7ff f979 	bl	8007560 <mqtt_msg_type_to_str>
 800826e:	4601      	mov	r1, r0
 8008270:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008272:	461a      	mov	r2, r3
 8008274:	4822      	ldr	r0, [pc, #136]	; (8008300 <mqtt_message_received+0x408>)
 8008276:	f7f8 f80c 	bl	8000292 <Console_DEBUG>
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 800827a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800827e:	2b09      	cmp	r3, #9
 8008280:	d10e      	bne.n	80082a0 <mqtt_message_received+0x3a8>
          if (length < 3) {
 8008282:	893b      	ldrh	r3, [r7, #8]
 8008284:	2b02      	cmp	r3, #2
 8008286:	d803      	bhi.n	8008290 <mqtt_message_received+0x398>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
 8008288:	481e      	ldr	r0, [pc, #120]	; (8008304 <mqtt_message_received+0x40c>)
 800828a:	f7f8 f802 	bl	8000292 <Console_DEBUG>
            goto out_disconnect;
 800828e:	e02b      	b.n	80082e8 <mqtt_message_received+0x3f0>
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 8008290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008292:	3302      	adds	r3, #2
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	4619      	mov	r1, r3
 8008298:	6a38      	ldr	r0, [r7, #32]
 800829a:	f7ff fe11 	bl	8007ec0 <mqtt_incomming_suback>
 800829e:	e00a      	b.n	80082b6 <mqtt_message_received+0x3be>
          }
        } else if (r->cb != NULL) {
 80082a0:	6a3b      	ldr	r3, [r7, #32]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d006      	beq.n	80082b6 <mqtt_message_received+0x3be>
          r->cb(r->arg, ERR_OK);
 80082a8:	6a3b      	ldr	r3, [r7, #32]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	6a3a      	ldr	r2, [r7, #32]
 80082ae:	6892      	ldr	r2, [r2, #8]
 80082b0:	2100      	movs	r1, #0
 80082b2:	4610      	mov	r0, r2
 80082b4:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 80082b6:	6a38      	ldr	r0, [r7, #32]
 80082b8:	f7ff fb15 	bl	80078e6 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 80082bc:	e012      	b.n	80082e4 <mqtt_message_received+0x3ec>
      } else {
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received %s reply, with wrong pkt_id: %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
 80082be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7ff f94c 	bl	8007560 <mqtt_msg_type_to_str>
 80082c8:	4601      	mov	r1, r0
 80082ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082cc:	461a      	mov	r2, r3
 80082ce:	480e      	ldr	r0, [pc, #56]	; (8008308 <mqtt_message_received+0x410>)
 80082d0:	f7f7 ffdf 	bl	8000292 <Console_DEBUG>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 80082d4:	e006      	b.n	80082e4 <mqtt_message_received+0x3ec>
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
 80082d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082da:	4619      	mov	r1, r3
 80082dc:	480b      	ldr	r0, [pc, #44]	; (800830c <mqtt_message_received+0x414>)
 80082de:	f7f7 ffd8 	bl	8000292 <Console_DEBUG>
      goto out_disconnect;
 80082e2:	e001      	b.n	80082e8 <mqtt_message_received+0x3f0>
    }
  }
  return res;
 80082e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80082e6:	e001      	b.n	80082ec <mqtt_message_received+0x3f4>
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 80082e8:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	373c      	adds	r7, #60	; 0x3c
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd90      	pop	{r4, r7, pc}
 80082f4:	080157e4 	.word	0x080157e4
 80082f8:	0801582c 	.word	0x0801582c
 80082fc:	0801586c 	.word	0x0801586c
 8008300:	080158b8 	.word	0x080158b8
 8008304:	080158e8 	.word	0x080158e8
 8008308:	08015918 	.word	0x08015918
 800830c:	0801595c 	.word	0x0801595c

08008310 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 800831a:	2300      	movs	r3, #0
 800831c:	82fb      	strh	r3, [r7, #22]
  u32_t msg_rem_len = 0;
 800831e:	2300      	movs	r3, #0
 8008320:	613b      	str	r3, [r7, #16]
  u8_t fixed_hdr_len = 0;
 8008322:	2300      	movs	r3, #0
 8008324:	73fb      	strb	r3, [r7, #15]
  u8_t b = 0;
 8008326:	2300      	movs	r3, #0
 8008328:	73bb      	strb	r3, [r7, #14]

  while (p->tot_len > in_offset) {
 800832a:	e0b0      	b.n	800848e <mqtt_parse_incoming+0x17e>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_len < 2) || ((b & 0x80) != 0)) {
 800832c:	7bfb      	ldrb	r3, [r7, #15]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d903      	bls.n	800833a <mqtt_parse_incoming+0x2a>
 8008332:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008336:	2b00      	cmp	r3, #0
 8008338:	da51      	bge.n	80083de <mqtt_parse_incoming+0xce>

      if (fixed_hdr_len < client->msg_idx) {
 800833a:	7bfa      	ldrb	r2, [r7, #15]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008340:	429a      	cmp	r2, r3
 8008342:	d206      	bcs.n	8008352 <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_len];
 8008344:	7bfb      	ldrb	r3, [r7, #15]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	4413      	add	r3, r2
 800834a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800834e:	73bb      	strb	r3, [r7, #14]
 8008350:	e012      	b.n	8008378 <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 8008352:	8afb      	ldrh	r3, [r7, #22]
 8008354:	1c5a      	adds	r2, r3, #1
 8008356:	82fa      	strh	r2, [r7, #22]
 8008358:	4619      	mov	r1, r3
 800835a:	6838      	ldr	r0, [r7, #0]
 800835c:	f002 fb0c 	bl	800a978 <pbuf_get_at>
 8008360:	4603      	mov	r3, r0
 8008362:	73bb      	strb	r3, [r7, #14]
        client->rx_buffer[client->msg_idx++] = b;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008368:	1c59      	adds	r1, r3, #1
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	6691      	str	r1, [r2, #104]	; 0x68
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	4413      	add	r3, r2
 8008372:	7bba      	ldrb	r2, [r7, #14]
 8008374:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_len++;
 8008378:	7bfb      	ldrb	r3, [r7, #15]
 800837a:	3301      	adds	r3, #1
 800837c:	73fb      	strb	r3, [r7, #15]

      if (fixed_hdr_len >= 2) {
 800837e:	7bfb      	ldrb	r3, [r7, #15]
 8008380:	2b01      	cmp	r3, #1
 8008382:	f240 8084 	bls.w	800848e <mqtt_parse_incoming+0x17e>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_len - 2) * 7);
 8008386:	7bbb      	ldrb	r3, [r7, #14]
 8008388:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	1e9a      	subs	r2, r3, #2
 8008390:	4613      	mov	r3, r2
 8008392:	00db      	lsls	r3, r3, #3
 8008394:	1a9b      	subs	r3, r3, r2
 8008396:	fa01 f303 	lsl.w	r3, r1, r3
 800839a:	693a      	ldr	r2, [r7, #16]
 800839c:	4313      	orrs	r3, r2
 800839e:	613b      	str	r3, [r7, #16]
        if ((b & 0x80) == 0) {
 80083a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	db72      	blt.n	800848e <mqtt_parse_incoming+0x17e>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
 80083a8:	6939      	ldr	r1, [r7, #16]
 80083aa:	483e      	ldr	r0, [pc, #248]	; (80084a4 <mqtt_parse_incoming+0x194>)
 80083ac:	f7f7 ff71 	bl	8000292 <Console_DEBUG>
          if (msg_rem_len == 0) {
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10b      	bne.n	80083ce <mqtt_parse_incoming+0xbe>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_len, 0, 0);
 80083b6:	7bf9      	ldrb	r1, [r7, #15]
 80083b8:	2300      	movs	r3, #0
 80083ba:	2200      	movs	r2, #0
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f7ff fd9b 	bl	8007ef8 <mqtt_message_received>
            client->msg_idx = 0;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_len = 0;
 80083c8:	2300      	movs	r3, #0
 80083ca:	73fb      	strb	r3, [r7, #15]
 80083cc:	e05f      	b.n	800848e <mqtt_parse_incoming+0x17e>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_len) - client->msg_idx;
 80083ce:	7bfa      	ldrb	r2, [r7, #15]
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	441a      	add	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	613b      	str	r3, [r7, #16]
      if (fixed_hdr_len >= 2) {
 80083dc:	e057      	b.n	800848e <mqtt_parse_incoming+0x17e>
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, buffer_space;

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	891a      	ldrh	r2, [r3, #8]
 80083e2:	8afb      	ldrh	r3, [r7, #22]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	461a      	mov	r2, r3
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d905      	bls.n	80083fc <mqtt_parse_incoming+0xec>
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	891a      	ldrh	r2, [r3, #8]
 80083f4:	8afb      	ldrh	r3, [r7, #22]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	e001      	b.n	8008400 <mqtt_parse_incoming+0xf0>
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	b29b      	uxth	r3, r3
 8008400:	81bb      	strh	r3, [r7, #12]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_len;
 8008402:	7bfb      	ldrb	r3, [r7, #15]
 8008404:	b29b      	uxth	r3, r3
 8008406:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800840a:	817b      	strh	r3, [r7, #10]
      if (cpy_len > buffer_space) {
 800840c:	89ba      	ldrh	r2, [r7, #12]
 800840e:	897b      	ldrh	r3, [r7, #10]
 8008410:	429a      	cmp	r2, r3
 8008412:	d901      	bls.n	8008418 <mqtt_parse_incoming+0x108>
        cpy_len = buffer_space;
 8008414:	897b      	ldrh	r3, [r7, #10]
 8008416:	81bb      	strh	r3, [r7, #12]
      }
      pbuf_copy_partial(p, client->rx_buffer + fixed_hdr_len, cpy_len, in_offset);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800841e:	7bfb      	ldrb	r3, [r7, #15]
 8008420:	18d1      	adds	r1, r2, r3
 8008422:	8afb      	ldrh	r3, [r7, #22]
 8008424:	89ba      	ldrh	r2, [r7, #12]
 8008426:	6838      	ldr	r0, [r7, #0]
 8008428:	f002 f9f8 	bl	800a81c <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008430:	89bb      	ldrh	r3, [r7, #12]
 8008432:	441a      	add	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 8008438:	8afa      	ldrh	r2, [r7, #22]
 800843a:	89bb      	ldrh	r3, [r7, #12]
 800843c:	4413      	add	r3, r2
 800843e:	82fb      	strh	r3, [r7, #22]
      msg_rem_len -= cpy_len;
 8008440:	89bb      	ldrh	r3, [r7, #12]
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	613b      	str	r3, [r7, #16]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800844c:	89ba      	ldrh	r2, [r7, #12]
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	4815      	ldr	r0, [pc, #84]	; (80084a8 <mqtt_parse_incoming+0x198>)
 8008452:	f7f7 ff1e 	bl	8000292 <Console_DEBUG>
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d003      	beq.n	8008464 <mqtt_parse_incoming+0x154>
 800845c:	89ba      	ldrh	r2, [r7, #12]
 800845e:	897b      	ldrh	r3, [r7, #10]
 8008460:	429a      	cmp	r2, r3
 8008462:	d114      	bne.n	800848e <mqtt_parse_incoming+0x17e>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_len, cpy_len, msg_rem_len);
 8008464:	89ba      	ldrh	r2, [r7, #12]
 8008466:	7bf9      	ldrb	r1, [r7, #15]
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7ff fd44 	bl	8007ef8 <mqtt_message_received>
 8008470:	4603      	mov	r3, r0
 8008472:	813b      	strh	r3, [r7, #8]
        if (res != MQTT_CONNECT_ACCEPTED) {
 8008474:	893b      	ldrh	r3, [r7, #8]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <mqtt_parse_incoming+0x16e>
          return res;
 800847a:	893b      	ldrh	r3, [r7, #8]
 800847c:	e00e      	b.n	800849c <mqtt_parse_incoming+0x18c>
        }
        if (msg_rem_len == 0) {
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d104      	bne.n	800848e <mqtt_parse_incoming+0x17e>
          /* Reset parser state */
          client->msg_idx = 0;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_len = 0;
 800848a:	2300      	movs	r3, #0
 800848c:	73fb      	strb	r3, [r7, #15]
  while (p->tot_len > in_offset) {
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	891b      	ldrh	r3, [r3, #8]
 8008492:	8afa      	ldrh	r2, [r7, #22]
 8008494:	429a      	cmp	r2, r3
 8008496:	f4ff af49 	bcc.w	800832c <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	08015998 	.word	0x08015998
 80084a8:	080159d8 	.word	0x080159d8

080084ac <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
 80084b8:	603b      	str	r3, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);

  if (p == NULL) {
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d108      	bne.n	80084d6 <mqtt_tcp_recv_cb+0x2a>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
 80084c4:	481b      	ldr	r0, [pc, #108]	; (8008534 <mqtt_tcp_recv_cb+0x88>)
 80084c6:	f7f7 fee4 	bl	8000292 <Console_DEBUG>
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 80084ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80084ce:	6978      	ldr	r0, [r7, #20]
 80084d0:	f7ff fbb4 	bl	8007c3c <mqtt_close>
 80084d4:	e029      	b.n	800852a <mqtt_tcp_recv_cb+0x7e>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d008      	beq.n	80084ee <mqtt_tcp_recv_cb+0x42>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	4816      	ldr	r0, [pc, #88]	; (8008538 <mqtt_tcp_recv_cb+0x8c>)
 80084e0:	f7f7 fed7 	bl	8000292 <Console_DEBUG>
      pbuf_free(p);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f001 fffe 	bl	800a4e6 <pbuf_free>
      return err;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	e01e      	b.n	800852c <mqtt_tcp_recv_cb+0x80>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	891b      	ldrh	r3, [r3, #8]
 80084f2:	4619      	mov	r1, r3
 80084f4:	68b8      	ldr	r0, [r7, #8]
 80084f6:	f002 fda9 	bl	800b04c <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 80084fa:	6879      	ldr	r1, [r7, #4]
 80084fc:	6978      	ldr	r0, [r7, #20]
 80084fe:	f7ff ff07 	bl	8008310 <mqtt_parse_incoming>
 8008502:	4603      	mov	r3, r0
 8008504:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f001 ffed 	bl	800a4e6 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 800850c:	8a7b      	ldrh	r3, [r7, #18]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d004      	beq.n	800851c <mqtt_tcp_recv_cb+0x70>
      mqtt_close(client, res);
 8008512:	8a7b      	ldrh	r3, [r7, #18]
 8008514:	4619      	mov	r1, r3
 8008516:	6978      	ldr	r0, [r7, #20]
 8008518:	f7ff fb90 	bl	8007c3c <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	885b      	ldrh	r3, [r3, #2]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d002      	beq.n	800852a <mqtt_tcp_recv_cb+0x7e>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	2200      	movs	r2, #0
 8008528:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3718      	adds	r7, #24
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	08015a18 	.word	0x08015a18
 8008538:	08015a58 	.word	0x08015a58

0800853c <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	4613      	mov	r3, r2
 8008548:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	7a9b      	ldrb	r3, [r3, #10]
 8008552:	2b03      	cmp	r3, #3
 8008554:	d12a      	bne.n	80085ac <mqtt_tcp_sent_cb+0x70>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2200      	movs	r2, #0
 800855a:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	2200      	movs	r2, #0
 8008560:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8008562:	e010      	b.n	8008586 <mqtt_tcp_sent_cb+0x4a>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
 8008564:	4814      	ldr	r0, [pc, #80]	; (80085b8 <mqtt_tcp_sent_cb+0x7c>)
 8008566:	f7f7 fe94 	bl	8000292 <Console_DEBUG>
      if (r->cb != NULL) {
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d006      	beq.n	8008580 <mqtt_tcp_sent_cb+0x44>
        r->cb(r->arg, ERR_OK);
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	6892      	ldr	r2, [r2, #8]
 800857a:	2100      	movs	r1, #0
 800857c:	4610      	mov	r0, r2
 800857e:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8008580:	6938      	ldr	r0, [r7, #16]
 8008582:	f7ff f9b0 	bl	80078e6 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	3318      	adds	r3, #24
 800858a:	2100      	movs	r1, #0
 800858c:	4618      	mov	r0, r3
 800858e:	f7ff f9ba 	bl	8007906 <mqtt_take_request>
 8008592:	6138      	str	r0, [r7, #16]
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1e4      	bne.n	8008564 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	4619      	mov	r1, r3
 80085a6:	4610      	mov	r0, r2
 80085a8:	f7ff f876 	bl	8007698 <mqtt_output_send>
  }
  return ERR_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3718      	adds	r7, #24
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	08015a78 	.word	0x08015a78

080085bc <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	4807      	ldr	r0, [pc, #28]	; (80085ec <mqtt_tcp_err_cb+0x30>)
 80085d0:	f7f7 fe5f 	bl	8000292 <Console_DEBUG>
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 80085da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f7ff fb2c 	bl	8007c3c <mqtt_close>
}
 80085e4:	bf00      	nop
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	08015ab4 	.word	0x08015ab4

080085f0 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	7a9b      	ldrb	r3, [r3, #10]
 8008602:	2b03      	cmp	r3, #3
 8008604:	d105      	bne.n	8008612 <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	33ec      	adds	r3, #236	; 0xec
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	4618      	mov	r0, r3
 800860e:	f7ff f843 	bl	8007698 <mqtt_output_send>
  }
  return ERR_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d005      	beq.n	800863e <mqtt_tcp_connect_cb+0x22>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
 8008632:	6879      	ldr	r1, [r7, #4]
 8008634:	4818      	ldr	r0, [pc, #96]	; (8008698 <mqtt_tcp_connect_cb+0x7c>)
 8008636:	f7f7 fe2c 	bl	8000292 <Console_DEBUG>
    return err;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	e028      	b.n	8008690 <mqtt_tcp_connect_cb+0x74>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	2200      	movs	r2, #0
 8008642:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 8008644:	4915      	ldr	r1, [pc, #84]	; (800869c <mqtt_tcp_connect_cb+0x80>)
 8008646:	68b8      	ldr	r0, [r7, #8]
 8008648:	f003 fbf1 	bl	800be2e <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 800864c:	4914      	ldr	r1, [pc, #80]	; (80086a0 <mqtt_tcp_connect_cb+0x84>)
 800864e:	68b8      	ldr	r0, [r7, #8]
 8008650:	f003 fbff 	bl	800be52 <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 8008654:	2202      	movs	r2, #2
 8008656:	4913      	ldr	r1, [pc, #76]	; (80086a4 <mqtt_tcp_connect_cb+0x88>)
 8008658:	68b8      	ldr	r0, [r7, #8]
 800865a:	f003 fc1d 	bl	800be98 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
 800865e:	4812      	ldr	r0, [pc, #72]	; (80086a8 <mqtt_tcp_connect_cb+0x8c>)
 8008660:	f7f7 fe17 	bl	8000292 <Console_DEBUG>
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	2202      	movs	r2, #2
 8008668:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 800866a:	697a      	ldr	r2, [r7, #20]
 800866c:	490f      	ldr	r1, [pc, #60]	; (80086ac <mqtt_tcp_connect_cb+0x90>)
 800866e:	f241 3088 	movw	r0, #5000	; 0x1388
 8008672:	f007 f881 	bl	800f778 <sys_timeout>
  client->cyclic_tick = 0;
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	2200      	movs	r2, #0
 800867a:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	4619      	mov	r1, r3
 8008688:	4610      	mov	r0, r2
 800868a:	f7ff f805 	bl	8007698 <mqtt_output_send>

  return ERR_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3718      	adds	r7, #24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	08015aec 	.word	0x08015aec
 800869c:	080084ad 	.word	0x080084ad
 80086a0:	0800853d 	.word	0x0800853d
 80086a4:	080085f1 	.word	0x080085f1
 80086a8:	08015b18 	.word	0x08015b18
 80086ac:	08007ced 	.word	0x08007ced

080086b0 <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b08c      	sub	sp, #48	; 0x30
 80086b4:	af02      	add	r7, sp, #8
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
 80086bc:	807b      	strh	r3, [r7, #2]
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	7a9b      	ldrb	r3, [r3, #10]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d105      	bne.n	80086d2 <mqtt_publish+0x22>
 80086c6:	4850      	ldr	r0, [pc, #320]	; (8008808 <mqtt_publish+0x158>)
 80086c8:	f7f7 fde3 	bl	8000292 <Console_DEBUG>
 80086cc:	f06f 030a 	mvn.w	r3, #10
 80086d0:	e095      	b.n	80087fe <mqtt_publish+0x14e>

  topic_strlen = strlen(topic);
 80086d2:	68b8      	ldr	r0, [r7, #8]
 80086d4:	f7f7 fd7c 	bl	80001d0 <strlen>
 80086d8:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d905      	bls.n	80086f0 <mqtt_publish+0x40>
 80086e4:	4849      	ldr	r0, [pc, #292]	; (800880c <mqtt_publish+0x15c>)
 80086e6:	f7f7 fdd4 	bl	8000292 <Console_DEBUG>
 80086ea:	f06f 030f 	mvn.w	r3, #15
 80086ee:	e086      	b.n	80087fe <mqtt_publish+0x14e>
  topic_len = (u16_t)topic_strlen;
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 80086f4:	8b7b      	ldrh	r3, [r7, #26]
 80086f6:	1c9a      	adds	r2, r3, #2
 80086f8:	887b      	ldrh	r3, [r7, #2]
 80086fa:	4413      	add	r3, r2
 80086fc:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 80086fe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008702:	2b00      	cmp	r3, #0
 8008704:	d008      	beq.n	8008718 <mqtt_publish+0x68>
    total_len += 2;
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	3302      	adds	r3, #2
 800870a:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f7fe ff3d 	bl	800758c <msg_generate_packet_id>
 8008712:	4603      	mov	r3, r0
 8008714:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008716:	e001      	b.n	800871c <mqtt_publish+0x6c>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 8008718:	2300      	movs	r3, #0
 800871a:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 800871c:	6a3b      	ldr	r3, [r7, #32]
 800871e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008722:	d305      	bcc.n	8008730 <mqtt_publish+0x80>
 8008724:	483a      	ldr	r0, [pc, #232]	; (8008810 <mqtt_publish+0x160>)
 8008726:	f7f7 fdb4 	bl	8000292 <Console_DEBUG>
 800872a:	f06f 030f 	mvn.w	r3, #15
 800872e:	e066      	b.n	80087fe <mqtt_publish+0x14e>
  remaining_length = (u16_t)total_len;
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));
 8008734:	887b      	ldrh	r3, [r7, #2]
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	4619      	mov	r1, r3
 800873a:	4836      	ldr	r0, [pc, #216]	; (8008814 <mqtt_publish+0x164>)
 800873c:	f7f7 fda9 	bl	8000292 <Console_DEBUG>

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f103 001c 	add.w	r0, r3, #28
 8008746:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874e:	2104      	movs	r1, #4
 8008750:	f7ff f860 	bl	8007814 <mqtt_create_request>
 8008754:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d102      	bne.n	8008762 <mqtt_publish+0xb2>
    return ERR_MEM;
 800875c:	f04f 33ff 	mov.w	r3, #4294967295
 8008760:	e04d      	b.n	80087fe <mqtt_publish+0x14e>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	33ec      	adds	r3, #236	; 0xec
 8008766:	8b3a      	ldrh	r2, [r7, #24]
 8008768:	4611      	mov	r1, r2
 800876a:	4618      	mov	r0, r3
 800876c:	f7ff fa44 	bl	8007bf8 <mqtt_output_check_space>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d105      	bne.n	8008782 <mqtt_publish+0xd2>
    mqtt_delete_request(r);
 8008776:	6978      	ldr	r0, [r7, #20]
 8008778:	f7ff f8b5 	bl	80078e6 <mqtt_delete_request>
    return ERR_MEM;
 800877c:	f04f 33ff 	mov.w	r3, #4294967295
 8008780:	e03d      	b.n	80087fe <mqtt_publish+0x14e>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8008788:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800878c:	8b3b      	ldrh	r3, [r7, #24]
 800878e:	9301      	str	r3, [sp, #4]
 8008790:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	4613      	mov	r3, r2
 8008798:	2200      	movs	r2, #0
 800879a:	2103      	movs	r1, #3
 800879c:	f7ff f9e2 	bl	8007b64 <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	33ec      	adds	r3, #236	; 0xec
 80087a4:	8b7a      	ldrh	r2, [r7, #26]
 80087a6:	68b9      	ldr	r1, [r7, #8]
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7ff f9af 	bl	8007b0c <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 80087ae:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d006      	beq.n	80087c4 <mqtt_publish+0x114>
    mqtt_output_append_u16(&client->output, pkt_id);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	33ec      	adds	r3, #236	; 0xec
 80087ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80087bc:	4611      	mov	r1, r2
 80087be:	4618      	mov	r0, r3
 80087c0:	f7ff f96e 	bl	8007aa0 <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d009      	beq.n	80087de <mqtt_publish+0x12e>
 80087ca:	887b      	ldrh	r3, [r7, #2]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d006      	beq.n	80087de <mqtt_publish+0x12e>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	33ec      	adds	r3, #236	; 0xec
 80087d4:	887a      	ldrh	r2, [r7, #2]
 80087d6:	6879      	ldr	r1, [r7, #4]
 80087d8:	4618      	mov	r0, r3
 80087da:	f7ff f979 	bl	8007ad0 <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3318      	adds	r3, #24
 80087e2:	6979      	ldr	r1, [r7, #20]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7ff f84d 	bl	8007884 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	4619      	mov	r1, r3
 80087f6:	4610      	mov	r0, r2
 80087f8:	f7fe ff4e 	bl	8007698 <mqtt_output_send>
  return ERR_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3728      	adds	r7, #40	; 0x28
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	08015b54 	.word	0x08015b54
 800880c:	08015b74 	.word	0x08015b74
 8008810:	08015b98 	.word	0x08015b98
 8008814:	08015bbc 	.word	0x08015bbc

08008818 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b08c      	sub	sp, #48	; 0x30
 800881c:	af02      	add	r7, sp, #8
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	603b      	str	r3, [r7, #0]
 8008824:	4613      	mov	r3, r2
 8008826:	71fb      	strb	r3, [r7, #7]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);

  topic_strlen = strlen(topic);
 8008828:	68b8      	ldr	r0, [r7, #8]
 800882a:	f7f7 fcd1 	bl	80001d0 <strlen>
 800882e:	6278      	str	r0, [r7, #36]	; 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8008836:	4293      	cmp	r3, r2
 8008838:	d905      	bls.n	8008846 <mqtt_sub_unsub+0x2e>
 800883a:	484c      	ldr	r0, [pc, #304]	; (800896c <mqtt_sub_unsub+0x154>)
 800883c:	f7f7 fd29 	bl	8000292 <Console_DEBUG>
 8008840:	f06f 030f 	mvn.w	r3, #15
 8008844:	e08e      	b.n	8008964 <mqtt_sub_unsub+0x14c>
  topic_len = (u16_t)topic_strlen;
 8008846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008848:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 800884a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800884c:	3304      	adds	r3, #4
 800884e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8008852:	2a00      	cmp	r2, #0
 8008854:	bf14      	ite	ne
 8008856:	2201      	movne	r2, #1
 8008858:	2200      	moveq	r2, #0
 800885a:	b2d2      	uxtb	r2, r2
 800885c:	4413      	add	r3, r2
 800885e:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008866:	d305      	bcc.n	8008874 <mqtt_sub_unsub+0x5c>
 8008868:	4841      	ldr	r0, [pc, #260]	; (8008970 <mqtt_sub_unsub+0x158>)
 800886a:	f7f7 fd12 	bl	8000292 <Console_DEBUG>
 800886e:	f06f 030f 	mvn.w	r3, #15
 8008872:	e077      	b.n	8008964 <mqtt_sub_unsub+0x14c>
  remaining_length = (u16_t)total_len;
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
  if (client->conn_state == TCP_DISCONNECTED) {
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	7a9b      	ldrb	r3, [r3, #10]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d105      	bne.n	800888c <mqtt_sub_unsub+0x74>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
 8008880:	483c      	ldr	r0, [pc, #240]	; (8008974 <mqtt_sub_unsub+0x15c>)
 8008882:	f7f7 fd06 	bl	8000292 <Console_DEBUG>
    return ERR_CONN;
 8008886:	f06f 030a 	mvn.w	r3, #10
 800888a:	e06b      	b.n	8008964 <mqtt_sub_unsub+0x14c>
  }

  pkt_id = msg_generate_packet_id(client);
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f7fe fe7d 	bl	800758c <msg_generate_packet_id>
 8008892:	4603      	mov	r3, r0
 8008894:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f103 001c 	add.w	r0, r3, #28
 800889c:	8b3a      	ldrh	r2, [r7, #24]
 800889e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2104      	movs	r1, #4
 80088a6:	f7fe ffb5 	bl	8007814 <mqtt_create_request>
 80088aa:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d102      	bne.n	80088b8 <mqtt_sub_unsub+0xa0>
    return ERR_MEM;
 80088b2:	f04f 33ff 	mov.w	r3, #4294967295
 80088b6:	e055      	b.n	8008964 <mqtt_sub_unsub+0x14c>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	33ec      	adds	r3, #236	; 0xec
 80088bc:	8b7a      	ldrh	r2, [r7, #26]
 80088be:	4611      	mov	r1, r2
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7ff f999 	bl	8007bf8 <mqtt_output_check_space>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d105      	bne.n	80088d8 <mqtt_sub_unsub+0xc0>
    mqtt_delete_request(r);
 80088cc:	6978      	ldr	r0, [r7, #20]
 80088ce:	f7ff f80a 	bl	80078e6 <mqtt_delete_request>
    return ERR_MEM;
 80088d2:	f04f 33ff 	mov.w	r3, #4294967295
 80088d6:	e045      	b.n	8008964 <mqtt_sub_unsub+0x14c>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));
 80088d8:	8b3b      	ldrh	r3, [r7, #24]
 80088da:	461a      	mov	r2, r3
 80088dc:	68b9      	ldr	r1, [r7, #8]
 80088de:	4826      	ldr	r0, [pc, #152]	; (8008978 <mqtt_sub_unsub+0x160>)
 80088e0:	f7f7 fcd7 	bl	8000292 <Console_DEBUG>

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80088ea:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d001      	beq.n	80088f6 <mqtt_sub_unsub+0xde>
 80088f2:	2108      	movs	r1, #8
 80088f4:	e000      	b.n	80088f8 <mqtt_sub_unsub+0xe0>
 80088f6:	210a      	movs	r1, #10
 80088f8:	8b7b      	ldrh	r3, [r7, #26]
 80088fa:	9301      	str	r3, [sp, #4]
 80088fc:	2300      	movs	r3, #0
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	2301      	movs	r3, #1
 8008902:	2200      	movs	r2, #0
 8008904:	f7ff f92e 	bl	8007b64 <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	33ec      	adds	r3, #236	; 0xec
 800890c:	8b3a      	ldrh	r2, [r7, #24]
 800890e:	4611      	mov	r1, r2
 8008910:	4618      	mov	r0, r3
 8008912:	f7ff f8c5 	bl	8007aa0 <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	33ec      	adds	r3, #236	; 0xec
 800891a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800891c:	68b9      	ldr	r1, [r7, #8]
 800891e:	4618      	mov	r0, r3
 8008920:	f7ff f8f4 	bl	8007b0c <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 8008924:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00b      	beq.n	8008944 <mqtt_sub_unsub+0x12c>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8008932:	79fb      	ldrb	r3, [r7, #7]
 8008934:	2b02      	cmp	r3, #2
 8008936:	bf28      	it	cs
 8008938:	2302      	movcs	r3, #2
 800893a:	b2db      	uxtb	r3, r3
 800893c:	4619      	mov	r1, r3
 800893e:	4610      	mov	r0, r2
 8008940:	f7ff f89f 	bl	8007a82 <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	3318      	adds	r3, #24
 8008948:	6979      	ldr	r1, [r7, #20]
 800894a:	4618      	mov	r0, r3
 800894c:	f7fe ff9a 	bl	8007884 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	4619      	mov	r1, r3
 800895c:	4610      	mov	r0, r2
 800895e:	f7fe fe9b 	bl	8007698 <mqtt_output_send>
  return ERR_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3728      	adds	r7, #40	; 0x28
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	08015bf8 	.word	0x08015bf8
 8008970:	08015c20 	.word	0x08015c20
 8008974:	08015c48 	.word	0x08015c48
 8008978:	08015c88 	.word	0x08015c88

0800897c <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
 8008988:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
  client->data_cb = data_cb;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = arg;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	683a      	ldr	r2, [r7, #0]
 800899a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800899c:	bf00      	nop
 800899e:	3714      	adds	r7, #20
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 80089ac:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80089b0:	2001      	movs	r0, #1
 80089b2:	f000 fee9 	bl	8009788 <mem_calloc>
 80089b6:	4603      	mov	r3, r0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	bd80      	pop	{r7, pc}

080089bc <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b08c      	sub	sp, #48	; 0x30
 80089c0:	af02      	add	r7, sp, #8
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	603b      	str	r3, [r7, #0]
 80089c8:	4613      	mov	r3, r2
 80089ca:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 80089cc:	230a      	movs	r3, #10
 80089ce:	847b      	strh	r3, [r7, #34]	; 0x22
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 80089d0:	2300      	movs	r3, #0
 80089d2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80089d6:	2300      	movs	r3, #0
 80089d8:	f887 3020 	strb.w	r3, [r7, #32]
 80089dc:	2300      	movs	r3, #0
 80089de:	77fb      	strb	r3, [r7, #31]
  u16_t client_user_len = 0, client_pass_len = 0;
 80089e0:	2300      	movs	r3, #0
 80089e2:	83bb      	strh	r3, [r7, #28]
 80089e4:	2300      	movs	r3, #0
 80089e6:	837b      	strh	r3, [r7, #26]
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);

  if (client->conn_state != TCP_DISCONNECTED) {
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	7a9b      	ldrb	r3, [r3, #10]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d005      	beq.n	80089fc <mqtt_client_connect+0x40>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
 80089f0:	48a3      	ldr	r0, [pc, #652]	; (8008c80 <mqtt_client_connect+0x2c4>)
 80089f2:	f7f7 fc4e 	bl	8000292 <Console_DEBUG>
    return ERR_ISCONN;
 80089f6:	f06f 0309 	mvn.w	r3, #9
 80089fa:	e1f0      	b.n	8008dde <mqtt_client_connect+0x422>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 80089fc:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8008a00:	2100      	movs	r1, #0
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f00a fdc4 	bl	8013590 <memset>
  client->connect_arg = arg;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a0c:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	683a      	ldr	r2, [r7, #0]
 8008a12:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 8008a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a16:	899a      	ldrh	r2, [r3, #12]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	331c      	adds	r3, #28
 8008a20:	2104      	movs	r1, #4
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7ff f80e 	bl	8007a44 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 8008a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d061      	beq.n	8008af4 <mqtt_client_connect+0x138>
 8008a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d05d      	beq.n	8008af4 <mqtt_client_connect+0x138>
    flags |= MQTT_CONNECT_FLAG_WILL;
 8008a38:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008a3c:	f043 0304 	orr.w	r3, r3, #4
 8008a40:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    flags |= (client_info->will_qos & 3) << 3;
 8008a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a46:	7e1b      	ldrb	r3, [r3, #24]
 8008a48:	00db      	lsls	r3, r3, #3
 8008a4a:	b25b      	sxtb	r3, r3
 8008a4c:	f003 0318 	and.w	r3, r3, #24
 8008a50:	b25a      	sxtb	r2, r3
 8008a52:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8008a56:	4313      	orrs	r3, r2
 8008a58:	b25b      	sxtb	r3, r3
 8008a5a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    if (client_info->will_retain) {
 8008a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a60:	7e5b      	ldrb	r3, [r3, #25]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d005      	beq.n	8008a72 <mqtt_client_connect+0xb6>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8008a66:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008a6a:	f043 0320 	orr.w	r3, r3, #32
 8008a6e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    }
    len = strlen(client_info->will_topic);
 8008a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7f7 fbaa 	bl	80001d0 <strlen>
 8008a7c:	6178      	str	r0, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	2bff      	cmp	r3, #255	; 0xff
 8008a82:	d905      	bls.n	8008a90 <mqtt_client_connect+0xd4>
 8008a84:	487f      	ldr	r0, [pc, #508]	; (8008c84 <mqtt_client_connect+0x2c8>)
 8008a86:	f7f7 fc04 	bl	8000292 <Console_DEBUG>
 8008a8a:	f06f 0305 	mvn.w	r3, #5
 8008a8e:	e1a6      	b.n	8008dde <mqtt_client_connect+0x422>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d105      	bne.n	8008aa2 <mqtt_client_connect+0xe6>
 8008a96:	487c      	ldr	r0, [pc, #496]	; (8008c88 <mqtt_client_connect+0x2cc>)
 8008a98:	f7f7 fbfb 	bl	8000292 <Console_DEBUG>
 8008a9c:	f06f 0305 	mvn.w	r3, #5
 8008aa0:	e19d      	b.n	8008dde <mqtt_client_connect+0x422>
    will_topic_len = (u8_t)len;
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	f887 3020 	strb.w	r3, [r7, #32]
    len = strlen(client_info->will_msg);
 8008aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aaa:	695b      	ldr	r3, [r3, #20]
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7f7 fb8f 	bl	80001d0 <strlen>
 8008ab2:	6178      	str	r0, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	2bff      	cmp	r3, #255	; 0xff
 8008ab8:	d905      	bls.n	8008ac6 <mqtt_client_connect+0x10a>
 8008aba:	4874      	ldr	r0, [pc, #464]	; (8008c8c <mqtt_client_connect+0x2d0>)
 8008abc:	f7f7 fbe9 	bl	8000292 <Console_DEBUG>
 8008ac0:	f06f 0305 	mvn.w	r3, #5
 8008ac4:	e18b      	b.n	8008dde <mqtt_client_connect+0x422>
    will_msg_len = (u8_t)len;
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	77fb      	strb	r3, [r7, #31]
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 8008aca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008acc:	1c9a      	adds	r2, r3, #2
 8008ace:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	1c9a      	adds	r2, r3, #2
 8008ad6:	7ffb      	ldrb	r3, [r7, #31]
 8008ad8:	4413      	add	r3, r2
 8008ada:	617b      	str	r3, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ae2:	d305      	bcc.n	8008af0 <mqtt_client_connect+0x134>
 8008ae4:	486a      	ldr	r0, [pc, #424]	; (8008c90 <mqtt_client_connect+0x2d4>)
 8008ae6:	f7f7 fbd4 	bl	8000292 <Console_DEBUG>
 8008aea:	f06f 0305 	mvn.w	r3, #5
 8008aee:	e176      	b.n	8008dde <mqtt_client_connect+0x422>
    remaining_length = (u16_t)len;
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	847b      	strh	r3, [r7, #34]	; 0x22
  }
  if (client_info->client_user != NULL) {
 8008af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d031      	beq.n	8008b60 <mqtt_client_connect+0x1a4>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 8008afc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008b00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b04:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = strlen(client_info->client_user);
 8008b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7f7 fb5f 	bl	80001d0 <strlen>
 8008b12:	6178      	str	r0, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b1a:	d305      	bcc.n	8008b28 <mqtt_client_connect+0x16c>
 8008b1c:	485d      	ldr	r0, [pc, #372]	; (8008c94 <mqtt_client_connect+0x2d8>)
 8008b1e:	f7f7 fbb8 	bl	8000292 <Console_DEBUG>
 8008b22:	f06f 0305 	mvn.w	r3, #5
 8008b26:	e15a      	b.n	8008dde <mqtt_client_connect+0x422>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d105      	bne.n	8008b3a <mqtt_client_connect+0x17e>
 8008b2e:	485a      	ldr	r0, [pc, #360]	; (8008c98 <mqtt_client_connect+0x2dc>)
 8008b30:	f7f7 fbaf 	bl	8000292 <Console_DEBUG>
 8008b34:	f06f 0305 	mvn.w	r3, #5
 8008b38:	e151      	b.n	8008dde <mqtt_client_connect+0x422>
    client_user_len = (u16_t)len;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_user_len;
 8008b3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b40:	1c9a      	adds	r2, r3, #2
 8008b42:	8bbb      	ldrh	r3, [r7, #28]
 8008b44:	4413      	add	r3, r2
 8008b46:	617b      	str	r3, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b4e:	d305      	bcc.n	8008b5c <mqtt_client_connect+0x1a0>
 8008b50:	484f      	ldr	r0, [pc, #316]	; (8008c90 <mqtt_client_connect+0x2d4>)
 8008b52:	f7f7 fb9e 	bl	8000292 <Console_DEBUG>
 8008b56:	f06f 0305 	mvn.w	r3, #5
 8008b5a:	e140      	b.n	8008dde <mqtt_client_connect+0x422>
    remaining_length = (u16_t)len;
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	847b      	strh	r3, [r7, #34]	; 0x22
  }
  if (client_info->client_pass != NULL) {
 8008b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d031      	beq.n	8008bcc <mqtt_client_connect+0x210>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 8008b68:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b70:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = strlen(client_info->client_pass);
 8008b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7f7 fb29 	bl	80001d0 <strlen>
 8008b7e:	6178      	str	r0, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b86:	d305      	bcc.n	8008b94 <mqtt_client_connect+0x1d8>
 8008b88:	4844      	ldr	r0, [pc, #272]	; (8008c9c <mqtt_client_connect+0x2e0>)
 8008b8a:	f7f7 fb82 	bl	8000292 <Console_DEBUG>
 8008b8e:	f06f 0305 	mvn.w	r3, #5
 8008b92:	e124      	b.n	8008dde <mqtt_client_connect+0x422>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d105      	bne.n	8008ba6 <mqtt_client_connect+0x1ea>
 8008b9a:	4841      	ldr	r0, [pc, #260]	; (8008ca0 <mqtt_client_connect+0x2e4>)
 8008b9c:	f7f7 fb79 	bl	8000292 <Console_DEBUG>
 8008ba0:	f06f 0305 	mvn.w	r3, #5
 8008ba4:	e11b      	b.n	8008dde <mqtt_client_connect+0x422>
    client_pass_len = (u16_t)len;
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	837b      	strh	r3, [r7, #26]
    len = remaining_length + 2 + client_pass_len;
 8008baa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008bac:	1c9a      	adds	r2, r3, #2
 8008bae:	8b7b      	ldrh	r3, [r7, #26]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	617b      	str	r3, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bba:	d305      	bcc.n	8008bc8 <mqtt_client_connect+0x20c>
 8008bbc:	4834      	ldr	r0, [pc, #208]	; (8008c90 <mqtt_client_connect+0x2d4>)
 8008bbe:	f7f7 fb68 	bl	8000292 <Console_DEBUG>
 8008bc2:	f06f 0305 	mvn.w	r3, #5
 8008bc6:	e10a      	b.n	8008dde <mqtt_client_connect+0x422>
    remaining_length = (u16_t)len;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	847b      	strh	r3, [r7, #34]	; 0x22
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 8008bcc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008bd0:	f043 0302 	orr.w	r3, r3, #2
 8008bd4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  len = strlen(client_info->client_id);
 8008bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7f7 faf7 	bl	80001d0 <strlen>
 8008be2:	6178      	str	r0, [r7, #20]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bea:	d305      	bcc.n	8008bf8 <mqtt_client_connect+0x23c>
 8008bec:	482d      	ldr	r0, [pc, #180]	; (8008ca4 <mqtt_client_connect+0x2e8>)
 8008bee:	f7f7 fb50 	bl	8000292 <Console_DEBUG>
 8008bf2:	f06f 0305 	mvn.w	r3, #5
 8008bf6:	e0f2      	b.n	8008dde <mqtt_client_connect+0x422>
  client_id_length = (u16_t)len;
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	827b      	strh	r3, [r7, #18]
  len = remaining_length + 2 + client_id_length;
 8008bfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008bfe:	1c9a      	adds	r2, r3, #2
 8008c00:	8a7b      	ldrh	r3, [r7, #18]
 8008c02:	4413      	add	r3, r2
 8008c04:	617b      	str	r3, [r7, #20]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c0c:	d305      	bcc.n	8008c1a <mqtt_client_connect+0x25e>
 8008c0e:	4820      	ldr	r0, [pc, #128]	; (8008c90 <mqtt_client_connect+0x2d4>)
 8008c10:	f7f7 fb3f 	bl	8000292 <Console_DEBUG>
 8008c14:	f06f 0305 	mvn.w	r3, #5
 8008c18:	e0e1      	b.n	8008dde <mqtt_client_connect+0x422>
  remaining_length = (u16_t)len;
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	847b      	strh	r3, [r7, #34]	; 0x22

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	33ec      	adds	r3, #236	; 0xec
 8008c22:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008c24:	4611      	mov	r1, r2
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fe ffe6 	bl	8007bf8 <mqtt_output_check_space>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d102      	bne.n	8008c38 <mqtt_client_connect+0x27c>
    return ERR_MEM;
 8008c32:	f04f 33ff 	mov.w	r3, #4294967295
 8008c36:	e0d2      	b.n	8008dde <mqtt_client_connect+0x422>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 8008c38:	2000      	movs	r0, #0
 8008c3a:	f003 f8d9 	bl	800bdf0 <tcp_new_ip_type>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d102      	bne.n	8008c52 <mqtt_client_connect+0x296>
    return ERR_MEM;
 8008c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c50:	e0c5      	b.n	8008dde <mqtt_client_connect+0x422>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	68f9      	ldr	r1, [r7, #12]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f003 f8d7 	bl	800be0c <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	4910      	ldr	r1, [pc, #64]	; (8008ca8 <mqtt_client_connect+0x2ec>)
 8008c66:	4618      	mov	r0, r3
 8008c68:	f002 f926 	bl	800aeb8 <tcp_bind>
 8008c6c:	6278      	str	r0, [r7, #36]	; 0x24
  if (err != ERR_OK) {
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d01d      	beq.n	8008cb0 <mqtt_client_connect+0x2f4>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Error binding to local ip/port, %d\n", err));
 8008c74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c76:	480d      	ldr	r0, [pc, #52]	; (8008cac <mqtt_client_connect+0x2f0>)
 8008c78:	f7f7 fb0b 	bl	8000292 <Console_DEBUG>
    goto tcp_fail;
 8008c7c:	e0a6      	b.n	8008dcc <mqtt_client_connect+0x410>
 8008c7e:	bf00      	nop
 8008c80:	08015cc4 	.word	0x08015cc4
 8008c84:	08015cec 	.word	0x08015cec
 8008c88:	08015d2c 	.word	0x08015d2c
 8008c8c:	08015d6c 	.word	0x08015d6c
 8008c90:	08015da8 	.word	0x08015da8
 8008c94:	08015dd8 	.word	0x08015dd8
 8008c98:	08015e18 	.word	0x08015e18
 8008c9c:	08015e5c 	.word	0x08015e5c
 8008ca0:	08015e9c 	.word	0x08015e9c
 8008ca4:	08015ee0 	.word	0x08015ee0
 8008ca8:	08016ca0 	.word	0x08016ca0
 8008cac:	08015f1c 	.word	0x08015f1c
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));
 8008cb0:	68b8      	ldr	r0, [r7, #8]
 8008cb2:	f008 ff4d 	bl	8011b50 <ip4addr_ntoa>
 8008cb6:	4601      	mov	r1, r0
 8008cb8:	88fb      	ldrh	r3, [r7, #6]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	484a      	ldr	r0, [pc, #296]	; (8008de8 <mqtt_client_connect+0x42c>)
 8008cbe:	f7f7 fae8 	bl	8000292 <Console_DEBUG>

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	68d8      	ldr	r0, [r3, #12]
 8008cc6:	88fa      	ldrh	r2, [r7, #6]
 8008cc8:	4b48      	ldr	r3, [pc, #288]	; (8008dec <mqtt_client_connect+0x430>)
 8008cca:	68b9      	ldr	r1, [r7, #8]
 8008ccc:	f002 fa40 	bl	800b150 <tcp_connect>
 8008cd0:	6278      	str	r0, [r7, #36]	; 0x24
  if (err != ERR_OK) {
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d004      	beq.n	8008ce2 <mqtt_client_connect+0x326>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
 8008cd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cda:	4845      	ldr	r0, [pc, #276]	; (8008df0 <mqtt_client_connect+0x434>)
 8008cdc:	f7f7 fad9 	bl	8000292 <Console_DEBUG>
    goto tcp_fail;
 8008ce0:	e074      	b.n	8008dcc <mqtt_client_connect+0x410>
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	4943      	ldr	r1, [pc, #268]	; (8008df4 <mqtt_client_connect+0x438>)
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f003 f8c3 	bl	800be74 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8008cfa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008cfc:	9301      	str	r3, [sp, #4]
 8008cfe:	2300      	movs	r3, #0
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	2300      	movs	r3, #0
 8008d04:	2200      	movs	r2, #0
 8008d06:	2101      	movs	r1, #1
 8008d08:	f7fe ff2c 	bl	8007b64 <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	33ec      	adds	r3, #236	; 0xec
 8008d10:	2204      	movs	r2, #4
 8008d12:	4939      	ldr	r1, [pc, #228]	; (8008df8 <mqtt_client_connect+0x43c>)
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7fe fef9 	bl	8007b0c <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	33ec      	adds	r3, #236	; 0xec
 8008d1e:	2104      	movs	r1, #4
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7fe feae 	bl	8007a82 <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	33ec      	adds	r3, #236	; 0xec
 8008d2a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008d2e:	4611      	mov	r1, r2
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fe fea6 	bl	8007a82 <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8008d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d3e:	899b      	ldrh	r3, [r3, #12]
 8008d40:	4619      	mov	r1, r3
 8008d42:	4610      	mov	r0, r2
 8008d44:	f7fe feac 	bl	8007aa0 <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8008d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	8a7a      	ldrh	r2, [r7, #18]
 8008d54:	4619      	mov	r1, r3
 8008d56:	f7fe fed9 	bl	8007b0c <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 8008d5a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008d5e:	f003 0304 	and.w	r3, r3, #4
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d014      	beq.n	8008d90 <mqtt_client_connect+0x3d4>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8008d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008d74:	b292      	uxth	r2, r2
 8008d76:	4619      	mov	r1, r3
 8008d78:	f7fe fec8 	bl	8007b0c <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8008d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	7ffa      	ldrb	r2, [r7, #31]
 8008d88:	b292      	uxth	r2, r2
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	f7fe febe 	bl	8007b0c <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 8008d90:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	da08      	bge.n	8008daa <mqtt_client_connect+0x3ee>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8008d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	8bba      	ldrh	r2, [r7, #28]
 8008da4:	4619      	mov	r1, r3
 8008da6:	f7fe feb1 	bl	8007b0c <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 8008daa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d008      	beq.n	8008dc8 <mqtt_client_connect+0x40c>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8008dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	8b7a      	ldrh	r2, [r7, #26]
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	f7fe fea2 	bl	8007b0c <mqtt_output_append_string>
  }
  return ERR_OK;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	e008      	b.n	8008dde <mqtt_client_connect+0x422>

tcp_fail:
  altcp_abort(client->conn);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f002 f865 	bl	800aea0 <tcp_abort>
  client->conn = NULL;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	60da      	str	r2, [r3, #12]
  return err;
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3728      	adds	r7, #40	; 0x28
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	08015f58 	.word	0x08015f58
 8008dec:	0800861d 	.word	0x0800861d
 8008df0:	08015f94 	.word	0x08015f94
 8008df4:	080085bd 	.word	0x080085bd
 8008df8:	08015fd4 	.word	0x08015fd4

08008dfc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	4603      	mov	r3, r0
 8008e04:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008e06:	88fb      	ldrh	r3, [r7, #6]
 8008e08:	021b      	lsls	r3, r3, #8
 8008e0a:	b21a      	sxth	r2, r3
 8008e0c:	88fb      	ldrh	r3, [r7, #6]
 8008e0e:	0a1b      	lsrs	r3, r3, #8
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	b21b      	sxth	r3, r3
 8008e14:	4313      	orrs	r3, r2
 8008e16:	b21b      	sxth	r3, r3
 8008e18:	b29b      	uxth	r3, r3
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr

08008e26 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008e26:	b480      	push	{r7}
 8008e28:	b083      	sub	sp, #12
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	061a      	lsls	r2, r3, #24
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	021b      	lsls	r3, r3, #8
 8008e36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008e3a:	431a      	orrs	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	0a1b      	lsrs	r3, r3, #8
 8008e40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008e44:	431a      	orrs	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	0e1b      	lsrs	r3, r3, #24
 8008e4a:	4313      	orrs	r3, r2
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b089      	sub	sp, #36	; 0x24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8008e66:	2300      	movs	r3, #0
 8008e68:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	f003 0301 	and.w	r3, r3, #1
 8008e74:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00d      	beq.n	8008e98 <lwip_standard_chksum+0x40>
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	dd0a      	ble.n	8008e98 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8008e82:	69fa      	ldr	r2, [r7, #28]
 8008e84:	1c53      	adds	r3, r2, #1
 8008e86:	61fb      	str	r3, [r7, #28]
 8008e88:	f107 030e 	add.w	r3, r7, #14
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	7812      	ldrb	r2, [r2, #0]
 8008e90:	701a      	strb	r2, [r3, #0]
    len--;
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	3b01      	subs	r3, #1
 8008e96:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8008e9c:	e00a      	b.n	8008eb4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	1c9a      	adds	r2, r3, #2
 8008ea2:	61ba      	str	r2, [r7, #24]
 8008ea4:	881b      	ldrh	r3, [r3, #0]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	4413      	add	r3, r2
 8008eac:	617b      	str	r3, [r7, #20]
    len -= 2;
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	3b02      	subs	r3, #2
 8008eb2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	dcf1      	bgt.n	8008e9e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	dd04      	ble.n	8008eca <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8008ec0:	f107 030e 	add.w	r3, r7, #14
 8008ec4:	69ba      	ldr	r2, [r7, #24]
 8008ec6:	7812      	ldrb	r2, [r2, #0]
 8008ec8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8008eca:	89fb      	ldrh	r3, [r7, #14]
 8008ecc:	461a      	mov	r2, r3
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	0c1a      	lsrs	r2, r3, #16
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	4413      	add	r3, r2
 8008ede:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	0c1a      	lsrs	r2, r3, #16
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	4413      	add	r3, r2
 8008eea:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d007      	beq.n	8008f02 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	021b      	lsls	r3, r3, #8
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	0a1b      	lsrs	r3, r3, #8
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	4313      	orrs	r3, r2
 8008f00:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	b29b      	uxth	r3, r3
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3724      	adds	r7, #36	; 0x24
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr

08008f12 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b086      	sub	sp, #24
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	60f8      	str	r0, [r7, #12]
 8008f1a:	607b      	str	r3, [r7, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	72fb      	strb	r3, [r7, #11]
 8008f20:	4613      	mov	r3, r2
 8008f22:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 8008f24:	2300      	movs	r3, #0
 8008f26:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	617b      	str	r3, [r7, #20]
 8008f2c:	e02b      	b.n	8008f86 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	685a      	ldr	r2, [r3, #4]
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	895b      	ldrh	r3, [r3, #10]
 8008f36:	4619      	mov	r1, r3
 8008f38:	4610      	mov	r0, r2
 8008f3a:	f7ff ff8d 	bl	8008e58 <lwip_standard_chksum>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	461a      	mov	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4413      	add	r3, r2
 8008f46:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	0c1a      	lsrs	r2, r3, #16
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	4413      	add	r3, r2
 8008f52:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	895b      	ldrh	r3, [r3, #10]
 8008f58:	f003 0301 	and.w	r3, r3, #1
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00e      	beq.n	8008f80 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	bf0c      	ite	eq
 8008f68:	2301      	moveq	r3, #1
 8008f6a:	2300      	movne	r3, #0
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	021b      	lsls	r3, r3, #8
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	0a1b      	lsrs	r3, r3, #8
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	617b      	str	r3, [r7, #20]
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1d0      	bne.n	8008f2e <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d007      	beq.n	8008fa2 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	021b      	lsls	r3, r3, #8
 8008f96:	b29a      	uxth	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	0a1b      	lsrs	r3, r3, #8
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 8008fa2:	7afb      	ldrb	r3, [r7, #11]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7ff ff28 	bl	8008dfc <lwip_htons>
 8008fac:	4603      	mov	r3, r0
 8008fae:	461a      	mov	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 8008fb6:	893b      	ldrh	r3, [r7, #8]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7ff ff1f 	bl	8008dfc <lwip_htons>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	0c1a      	lsrs	r2, r3, #16
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	4413      	add	r3, r2
 8008fd2:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	0c1a      	lsrs	r2, r3, #16
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	4413      	add	r3, r2
 8008fde:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	43db      	mvns	r3, r3
 8008fe6:	b29b      	uxth	r3, r3
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3718      	adds	r7, #24
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b086      	sub	sp, #24
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	607b      	str	r3, [r7, #4]
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	72fb      	strb	r3, [r7, #11]
 8008ffe:	4613      	mov	r3, r2
 8009000:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	b29b      	uxth	r3, r3
 800900c:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	0c1b      	lsrs	r3, r3, #16
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	4413      	add	r3, r2
 8009016:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 8009018:	6a3b      	ldr	r3, [r7, #32]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	b29b      	uxth	r3, r3
 8009022:	693a      	ldr	r2, [r7, #16]
 8009024:	4413      	add	r3, r2
 8009026:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	0c1b      	lsrs	r3, r3, #16
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	4413      	add	r3, r2
 8009030:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	0c1a      	lsrs	r2, r3, #16
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	b29b      	uxth	r3, r3
 800903a:	4413      	add	r3, r2
 800903c:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	0c1a      	lsrs	r2, r3, #16
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	b29b      	uxth	r3, r3
 8009046:	4413      	add	r3, r2
 8009048:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800904a:	893a      	ldrh	r2, [r7, #8]
 800904c:	7af9      	ldrb	r1, [r7, #11]
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f7ff ff5e 	bl	8008f12 <inet_cksum_pseudo_base>
 8009056:	4603      	mov	r3, r0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3718      	adds	r7, #24
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af02      	add	r7, sp, #8
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	607b      	str	r3, [r7, #4]
 800906a:	460b      	mov	r3, r1
 800906c:	72fb      	strb	r3, [r7, #11]
 800906e:	4613      	mov	r3, r2
 8009070:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 8009072:	893a      	ldrh	r2, [r7, #8]
 8009074:	7af9      	ldrb	r1, [r7, #11]
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f7ff ffb7 	bl	8008ff0 <inet_chksum_pseudo>
 8009082:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 8009084:	4618      	mov	r0, r3
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	460b      	mov	r3, r1
 8009096:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8009098:	887b      	ldrh	r3, [r7, #2]
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7ff fedb 	bl	8008e58 <lwip_standard_chksum>
 80090a2:	4603      	mov	r3, r0
 80090a4:	43db      	mvns	r3, r3
 80090a6:	b29b      	uxth	r3, r3
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80090b6:	2300      	movs	r3, #0
 80090b8:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 80090ba:	f001 fc97 	bl	800a9ec <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80090be:	f000 f89b 	bl	80091f8 <mem_init>
  memp_init();
 80090c2:	f000 fbc3 	bl	800984c <memp_init>
  pbuf_init();
  netif_init();
 80090c6:	f000 fc79 	bl	80099bc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80090ca:	f006 fbdf 	bl	800f88c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80090ce:	f001 fc9d 	bl	800aa0c <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
 80090d2:	f007 fded 	bl	8010cb0 <igmp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80090d6:	f006 fb2d 	bl	800f734 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80090da:	bf00      	nop
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	4603      	mov	r3, r0
 80090ec:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80090ee:	4b05      	ldr	r3, [pc, #20]	; (8009104 <ptr_to_mem+0x20>)
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	88fb      	ldrh	r3, [r7, #6]
 80090f4:	4413      	add	r3, r2
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	20004b10 	.word	0x20004b10

08009108 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009110:	4b05      	ldr	r3, [pc, #20]	; (8009128 <mem_to_ptr+0x20>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	1ad3      	subs	r3, r2, r3
 8009118:	b29b      	uxth	r3, r3
}
 800911a:	4618      	mov	r0, r3
 800911c:	370c      	adds	r7, #12
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	20004b10 	.word	0x20004b10

0800912c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800912c:	b590      	push	{r4, r7, lr}
 800912e:	b085      	sub	sp, #20
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = ptr_to_mem(mem->next);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	881b      	ldrh	r3, [r3, #0]
 8009138:	4618      	mov	r0, r3
 800913a:	f7ff ffd3 	bl	80090e4 <ptr_to_mem>
 800913e:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	429a      	cmp	r2, r3
 8009146:	d024      	beq.n	8009192 <plug_holes+0x66>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	791b      	ldrb	r3, [r3, #4]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d120      	bne.n	8009192 <plug_holes+0x66>
 8009150:	4b27      	ldr	r3, [pc, #156]	; (80091f0 <plug_holes+0xc4>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	429a      	cmp	r2, r3
 8009158:	d01b      	beq.n	8009192 <plug_holes+0x66>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800915a:	4b26      	ldr	r3, [pc, #152]	; (80091f4 <plug_holes+0xc8>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	429a      	cmp	r2, r3
 8009162:	d102      	bne.n	800916a <plug_holes+0x3e>
      lfree = mem;
 8009164:	4a23      	ldr	r2, [pc, #140]	; (80091f4 <plug_holes+0xc8>)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	881a      	ldrh	r2, [r3, #0]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	881b      	ldrh	r3, [r3, #0]
 8009176:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800917a:	d00a      	beq.n	8009192 <plug_holes+0x66>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	881b      	ldrh	r3, [r3, #0]
 8009180:	4618      	mov	r0, r3
 8009182:	f7ff ffaf 	bl	80090e4 <ptr_to_mem>
 8009186:	4604      	mov	r4, r0
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f7ff ffbd 	bl	8009108 <mem_to_ptr>
 800918e:	4603      	mov	r3, r0
 8009190:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	885b      	ldrh	r3, [r3, #2]
 8009196:	4618      	mov	r0, r3
 8009198:	f7ff ffa4 	bl	80090e4 <ptr_to_mem>
 800919c:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d01f      	beq.n	80091e6 <plug_holes+0xba>
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	791b      	ldrb	r3, [r3, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d11b      	bne.n	80091e6 <plug_holes+0xba>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80091ae:	4b11      	ldr	r3, [pc, #68]	; (80091f4 <plug_holes+0xc8>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d102      	bne.n	80091be <plug_holes+0x92>
      lfree = pmem;
 80091b8:	4a0e      	ldr	r2, [pc, #56]	; (80091f4 <plug_holes+0xc8>)
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	881a      	ldrh	r2, [r3, #0]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	881b      	ldrh	r3, [r3, #0]
 80091ca:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 80091ce:	d00a      	beq.n	80091e6 <plug_holes+0xba>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	881b      	ldrh	r3, [r3, #0]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7ff ff85 	bl	80090e4 <ptr_to_mem>
 80091da:	4604      	mov	r4, r0
 80091dc:	68b8      	ldr	r0, [r7, #8]
 80091de:	f7ff ff93 	bl	8009108 <mem_to_ptr>
 80091e2:	4603      	mov	r3, r0
 80091e4:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80091e6:	bf00      	nop
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd90      	pop	{r4, r7, pc}
 80091ee:	bf00      	nop
 80091f0:	20004b14 	.word	0x20004b14
 80091f4:	20004b18 	.word	0x20004b18

080091f8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80091fe:	4b1b      	ldr	r3, [pc, #108]	; (800926c <mem_init+0x74>)
 8009200:	3303      	adds	r3, #3
 8009202:	f023 0303 	bic.w	r3, r3, #3
 8009206:	461a      	mov	r2, r3
 8009208:	4b19      	ldr	r3, [pc, #100]	; (8009270 <mem_init+0x78>)
 800920a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800920c:	4b18      	ldr	r3, [pc, #96]	; (8009270 <mem_init+0x78>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8009218:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009226:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800922a:	f7ff ff5b 	bl	80090e4 <ptr_to_mem>
 800922e:	4603      	mov	r3, r0
 8009230:	4a10      	ldr	r2, [pc, #64]	; (8009274 <mem_init+0x7c>)
 8009232:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009234:	4b0f      	ldr	r3, [pc, #60]	; (8009274 <mem_init+0x7c>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2201      	movs	r2, #1
 800923a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800923c:	4b0d      	ldr	r3, [pc, #52]	; (8009274 <mem_init+0x7c>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8009244:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009246:	4b0b      	ldr	r3, [pc, #44]	; (8009274 <mem_init+0x7c>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800924e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009250:	4b07      	ldr	r3, [pc, #28]	; (8009270 <mem_init+0x78>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a08      	ldr	r2, [pc, #32]	; (8009278 <mem_init+0x80>)
 8009256:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8009258:	4b08      	ldr	r3, [pc, #32]	; (800927c <mem_init+0x84>)
 800925a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800925e:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8009262:	bf00      	nop
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	20000efc 	.word	0x20000efc
 8009270:	20004b10 	.word	0x20004b10
 8009274:	20004b14 	.word	0x20004b14
 8009278:	20004b18 	.word	0x20004b18
 800927c:	200080c8 	.word	0x200080c8

08009280 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f7ff ff3d 	bl	8009108 <mem_to_ptr>
 800928e:	4603      	mov	r3, r0
 8009290:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	881b      	ldrh	r3, [r3, #0]
 8009296:	4618      	mov	r0, r3
 8009298:	f7ff ff24 	bl	80090e4 <ptr_to_mem>
 800929c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	885b      	ldrh	r3, [r3, #2]
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7ff ff1e 	bl	80090e4 <ptr_to_mem>
 80092a8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	881b      	ldrh	r3, [r3, #0]
 80092ae:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 80092b2:	d818      	bhi.n	80092e6 <mem_link_valid+0x66>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	885b      	ldrh	r3, [r3, #2]
 80092b8:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 80092bc:	d813      	bhi.n	80092e6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80092c2:	8afa      	ldrh	r2, [r7, #22]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d004      	beq.n	80092d2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	881b      	ldrh	r3, [r3, #0]
 80092cc:	8afa      	ldrh	r2, [r7, #22]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d109      	bne.n	80092e6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80092d2:	4b08      	ldr	r3, [pc, #32]	; (80092f4 <mem_link_valid+0x74>)
 80092d4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80092d6:	693a      	ldr	r2, [r7, #16]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d006      	beq.n	80092ea <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	885b      	ldrh	r3, [r3, #2]
 80092e0:	8afa      	ldrh	r2, [r7, #22]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d001      	beq.n	80092ea <mem_link_valid+0x6a>
    return 0;
 80092e6:	2300      	movs	r3, #0
 80092e8:	e000      	b.n	80092ec <mem_link_valid+0x6c>
  }
  return 1;
 80092ea:	2301      	movs	r3, #1
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3718      	adds	r7, #24
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	20004b14 	.word	0x20004b14

080092f8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d061      	beq.n	80093ca <mem_free+0xd2>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f003 0303 	and.w	r3, r3, #3
 800930c:	2b00      	cmp	r3, #0
 800930e:	d008      	beq.n	8009322 <mem_free+0x2a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009310:	4b30      	ldr	r3, [pc, #192]	; (80093d4 <mem_free+0xdc>)
 8009312:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8009316:	3301      	adds	r3, #1
 8009318:	b29a      	uxth	r2, r3
 800931a:	4b2e      	ldr	r3, [pc, #184]	; (80093d4 <mem_free+0xdc>)
 800931c:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    return;
 8009320:	e054      	b.n	80093cc <mem_free+0xd4>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	3b08      	subs	r3, #8
 8009326:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009328:	4b2b      	ldr	r3, [pc, #172]	; (80093d8 <mem_free+0xe0>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	429a      	cmp	r2, r3
 8009330:	d306      	bcc.n	8009340 <mem_free+0x48>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f103 020c 	add.w	r2, r3, #12
 8009338:	4b28      	ldr	r3, [pc, #160]	; (80093dc <mem_free+0xe4>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	429a      	cmp	r2, r3
 800933e:	d908      	bls.n	8009352 <mem_free+0x5a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009340:	4b24      	ldr	r3, [pc, #144]	; (80093d4 <mem_free+0xdc>)
 8009342:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8009346:	3301      	adds	r3, #1
 8009348:	b29a      	uxth	r2, r3
 800934a:	4b22      	ldr	r3, [pc, #136]	; (80093d4 <mem_free+0xdc>)
 800934c:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    return;
 8009350:	e03c      	b.n	80093cc <mem_free+0xd4>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	791b      	ldrb	r3, [r3, #4]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d108      	bne.n	800936c <mem_free+0x74>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800935a:	4b1e      	ldr	r3, [pc, #120]	; (80093d4 <mem_free+0xdc>)
 800935c:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8009360:	3301      	adds	r3, #1
 8009362:	b29a      	uxth	r2, r3
 8009364:	4b1b      	ldr	r3, [pc, #108]	; (80093d4 <mem_free+0xdc>)
 8009366:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    return;
 800936a:	e02f      	b.n	80093cc <mem_free+0xd4>
  }

  if (!mem_link_valid(mem)) {
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	f7ff ff87 	bl	8009280 <mem_link_valid>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d108      	bne.n	800938a <mem_free+0x92>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009378:	4b16      	ldr	r3, [pc, #88]	; (80093d4 <mem_free+0xdc>)
 800937a:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800937e:	3301      	adds	r3, #1
 8009380:	b29a      	uxth	r2, r3
 8009382:	4b14      	ldr	r3, [pc, #80]	; (80093d4 <mem_free+0xdc>)
 8009384:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    return;
 8009388:	e020      	b.n	80093cc <mem_free+0xd4>
  }

  /* mem is now unused. */
  mem->used = 0;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009390:	4b13      	ldr	r3, [pc, #76]	; (80093e0 <mem_free+0xe8>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	429a      	cmp	r2, r3
 8009398:	d202      	bcs.n	80093a0 <mem_free+0xa8>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800939a:	4a11      	ldr	r2, [pc, #68]	; (80093e0 <mem_free+0xe8>)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 80093a0:	4b0c      	ldr	r3, [pc, #48]	; (80093d4 <mem_free+0xdc>)
 80093a2:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
 80093a6:	4b0c      	ldr	r3, [pc, #48]	; (80093d8 <mem_free+0xe0>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68f9      	ldr	r1, [r7, #12]
 80093ac:	1acb      	subs	r3, r1, r3
 80093ae:	b299      	uxth	r1, r3
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	881b      	ldrh	r3, [r3, #0]
 80093b4:	1acb      	subs	r3, r1, r3
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	4413      	add	r3, r2
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	4b05      	ldr	r3, [pc, #20]	; (80093d4 <mem_free+0xdc>)
 80093be:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f7ff feb2 	bl	800912c <plug_holes>
 80093c8:	e000      	b.n	80093cc <mem_free+0xd4>
    return;
 80093ca:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	200080c8 	.word	0x200080c8
 80093d8:	20004b10 	.word	0x20004b10
 80093dc:	20004b14 	.word	0x20004b14
 80093e0:	20004b18 	.word	0x20004b18

080093e4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b088      	sub	sp, #32
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	460b      	mov	r3, r1
 80093ee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80093f0:	887b      	ldrh	r3, [r7, #2]
 80093f2:	3303      	adds	r3, #3
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	f023 0303 	bic.w	r3, r3, #3
 80093fa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80093fc:	8bfb      	ldrh	r3, [r7, #30]
 80093fe:	2b0b      	cmp	r3, #11
 8009400:	d801      	bhi.n	8009406 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009402:	230c      	movs	r3, #12
 8009404:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009406:	8bfb      	ldrh	r3, [r7, #30]
 8009408:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800940c:	d803      	bhi.n	8009416 <mem_trim+0x32>
 800940e:	8bfa      	ldrh	r2, [r7, #30]
 8009410:	887b      	ldrh	r3, [r7, #2]
 8009412:	429a      	cmp	r2, r3
 8009414:	d201      	bcs.n	800941a <mem_trim+0x36>
    return NULL;
 8009416:	2300      	movs	r3, #0
 8009418:	e0bc      	b.n	8009594 <mem_trim+0x1b0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800941a:	4b60      	ldr	r3, [pc, #384]	; (800959c <mem_trim+0x1b8>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	429a      	cmp	r2, r3
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009422:	4b5e      	ldr	r3, [pc, #376]	; (800959c <mem_trim+0x1b8>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	429a      	cmp	r2, r3
 800942a:	d304      	bcc.n	8009436 <mem_trim+0x52>
 800942c:	4b5c      	ldr	r3, [pc, #368]	; (80095a0 <mem_trim+0x1bc>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	429a      	cmp	r2, r3
 8009434:	d309      	bcc.n	800944a <mem_trim+0x66>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009436:	4b5b      	ldr	r3, [pc, #364]	; (80095a4 <mem_trim+0x1c0>)
 8009438:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800943c:	3301      	adds	r3, #1
 800943e:	b29a      	uxth	r2, r3
 8009440:	4b58      	ldr	r3, [pc, #352]	; (80095a4 <mem_trim+0x1c0>)
 8009442:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    return rmem;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	e0a4      	b.n	8009594 <mem_trim+0x1b0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	3b08      	subs	r3, #8
 800944e:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009450:	69b8      	ldr	r0, [r7, #24]
 8009452:	f7ff fe59 	bl	8009108 <mem_to_ptr>
 8009456:	4603      	mov	r3, r0
 8009458:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	881a      	ldrh	r2, [r3, #0]
 800945e:	8afb      	ldrh	r3, [r7, #22]
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	b29b      	uxth	r3, r3
 8009464:	3b08      	subs	r3, #8
 8009466:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
 8009468:	8bfa      	ldrh	r2, [r7, #30]
 800946a:	8abb      	ldrh	r3, [r7, #20]
 800946c:	429a      	cmp	r2, r3
 800946e:	d901      	bls.n	8009474 <mem_trim+0x90>
    /* not supported */
    return NULL;
 8009470:	2300      	movs	r3, #0
 8009472:	e08f      	b.n	8009594 <mem_trim+0x1b0>
  }
  if (newsize == size) {
 8009474:	8bfa      	ldrh	r2, [r7, #30]
 8009476:	8abb      	ldrh	r3, [r7, #20]
 8009478:	429a      	cmp	r2, r3
 800947a:	d101      	bne.n	8009480 <mem_trim+0x9c>
    /* No change in size, simply return */
    return rmem;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	e089      	b.n	8009594 <mem_trim+0x1b0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	881b      	ldrh	r3, [r3, #0]
 8009484:	4618      	mov	r0, r3
 8009486:	f7ff fe2d 	bl	80090e4 <ptr_to_mem>
 800948a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	791b      	ldrb	r3, [r3, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d13f      	bne.n	8009514 <mem_trim+0x130>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
    /* remember the old next pointer */
    next = mem2->next;
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	881b      	ldrh	r3, [r3, #0]
 8009498:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800949a:	8afa      	ldrh	r2, [r7, #22]
 800949c:	8bfb      	ldrh	r3, [r7, #30]
 800949e:	4413      	add	r3, r2
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	3308      	adds	r3, #8
 80094a4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80094a6:	4b40      	ldr	r3, [pc, #256]	; (80095a8 <mem_trim+0x1c4>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	693a      	ldr	r2, [r7, #16]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d106      	bne.n	80094be <mem_trim+0xda>
      lfree = ptr_to_mem(ptr2);
 80094b0:	89fb      	ldrh	r3, [r7, #14]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7ff fe16 	bl	80090e4 <ptr_to_mem>
 80094b8:	4603      	mov	r3, r0
 80094ba:	4a3b      	ldr	r2, [pc, #236]	; (80095a8 <mem_trim+0x1c4>)
 80094bc:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80094be:	89fb      	ldrh	r3, [r7, #14]
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7ff fe0f 	bl	80090e4 <ptr_to_mem>
 80094c6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	2200      	movs	r2, #0
 80094cc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	89ba      	ldrh	r2, [r7, #12]
 80094d2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	8afa      	ldrh	r2, [r7, #22]
 80094d8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	89fa      	ldrh	r2, [r7, #14]
 80094de:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	881b      	ldrh	r3, [r3, #0]
 80094e4:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 80094e8:	d007      	beq.n	80094fa <mem_trim+0x116>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	881b      	ldrh	r3, [r3, #0]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7ff fdf8 	bl	80090e4 <ptr_to_mem>
 80094f4:	4602      	mov	r2, r0
 80094f6:	89fb      	ldrh	r3, [r7, #14]
 80094f8:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 80094fa:	4b2a      	ldr	r3, [pc, #168]	; (80095a4 <mem_trim+0x1c0>)
 80094fc:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
 8009500:	8bf9      	ldrh	r1, [r7, #30]
 8009502:	8abb      	ldrh	r3, [r7, #20]
 8009504:	1acb      	subs	r3, r1, r3
 8009506:	b29b      	uxth	r3, r3
 8009508:	4413      	add	r3, r2
 800950a:	b29a      	uxth	r2, r3
 800950c:	4b25      	ldr	r3, [pc, #148]	; (80095a4 <mem_trim+0x1c0>)
 800950e:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8009512:	e03e      	b.n	8009592 <mem_trim+0x1ae>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009514:	8bfb      	ldrh	r3, [r7, #30]
 8009516:	f103 0214 	add.w	r2, r3, #20
 800951a:	8abb      	ldrh	r3, [r7, #20]
 800951c:	429a      	cmp	r2, r3
 800951e:	d838      	bhi.n	8009592 <mem_trim+0x1ae>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009520:	8afa      	ldrh	r2, [r7, #22]
 8009522:	8bfb      	ldrh	r3, [r7, #30]
 8009524:	4413      	add	r3, r2
 8009526:	b29b      	uxth	r3, r3
 8009528:	3308      	adds	r3, #8
 800952a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
    mem2 = ptr_to_mem(ptr2);
 800952c:	89fb      	ldrh	r3, [r7, #14]
 800952e:	4618      	mov	r0, r3
 8009530:	f7ff fdd8 	bl	80090e4 <ptr_to_mem>
 8009534:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009536:	4b1c      	ldr	r3, [pc, #112]	; (80095a8 <mem_trim+0x1c4>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	693a      	ldr	r2, [r7, #16]
 800953c:	429a      	cmp	r2, r3
 800953e:	d202      	bcs.n	8009546 <mem_trim+0x162>
      lfree = mem2;
 8009540:	4a19      	ldr	r2, [pc, #100]	; (80095a8 <mem_trim+0x1c4>)
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	2200      	movs	r2, #0
 800954a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	881a      	ldrh	r2, [r3, #0]
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	8afa      	ldrh	r2, [r7, #22]
 8009558:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	89fa      	ldrh	r2, [r7, #14]
 800955e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	881b      	ldrh	r3, [r3, #0]
 8009564:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8009568:	d007      	beq.n	800957a <mem_trim+0x196>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	881b      	ldrh	r3, [r3, #0]
 800956e:	4618      	mov	r0, r3
 8009570:	f7ff fdb8 	bl	80090e4 <ptr_to_mem>
 8009574:	4602      	mov	r2, r0
 8009576:	89fb      	ldrh	r3, [r7, #14]
 8009578:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 800957a:	4b0a      	ldr	r3, [pc, #40]	; (80095a4 <mem_trim+0x1c0>)
 800957c:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
 8009580:	8bf9      	ldrh	r1, [r7, #30]
 8009582:	8abb      	ldrh	r3, [r7, #20]
 8009584:	1acb      	subs	r3, r1, r3
 8009586:	b29b      	uxth	r3, r3
 8009588:	4413      	add	r3, r2
 800958a:	b29a      	uxth	r2, r3
 800958c:	4b05      	ldr	r3, [pc, #20]	; (80095a4 <mem_trim+0x1c0>)
 800958e:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8009592:	687b      	ldr	r3, [r7, #4]
}
 8009594:	4618      	mov	r0, r3
 8009596:	3720      	adds	r7, #32
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	20004b10 	.word	0x20004b10
 80095a0:	20004b14 	.word	0x20004b14
 80095a4:	200080c8 	.word	0x200080c8
 80095a8:	20004b18 	.word	0x20004b18

080095ac <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80095ac:	b590      	push	{r4, r7, lr}
 80095ae:	b089      	sub	sp, #36	; 0x24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	4603      	mov	r3, r0
 80095b4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80095b6:	88fb      	ldrh	r3, [r7, #6]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d101      	bne.n	80095c0 <mem_malloc+0x14>
    return NULL;
 80095bc:	2300      	movs	r3, #0
 80095be:	e0d9      	b.n	8009774 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80095c0:	88fb      	ldrh	r3, [r7, #6]
 80095c2:	3303      	adds	r3, #3
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	f023 0303 	bic.w	r3, r3, #3
 80095ca:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80095cc:	8bbb      	ldrh	r3, [r7, #28]
 80095ce:	2b0b      	cmp	r3, #11
 80095d0:	d801      	bhi.n	80095d6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80095d2:	230c      	movs	r3, #12
 80095d4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80095d6:	8bbb      	ldrh	r3, [r7, #28]
 80095d8:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 80095dc:	d803      	bhi.n	80095e6 <mem_malloc+0x3a>
 80095de:	8bba      	ldrh	r2, [r7, #28]
 80095e0:	88fb      	ldrh	r3, [r7, #6]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d201      	bcs.n	80095ea <mem_malloc+0x3e>
    return NULL;
 80095e6:	2300      	movs	r3, #0
 80095e8:	e0c4      	b.n	8009774 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80095ea:	4b64      	ldr	r3, [pc, #400]	; (800977c <mem_malloc+0x1d0>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7ff fd8a 	bl	8009108 <mem_to_ptr>
 80095f4:	4603      	mov	r3, r0
 80095f6:	83fb      	strh	r3, [r7, #30]
 80095f8:	e0ac      	b.n	8009754 <mem_malloc+0x1a8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80095fa:	8bfb      	ldrh	r3, [r7, #30]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7ff fd71 	bl	80090e4 <ptr_to_mem>
 8009602:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	791b      	ldrb	r3, [r3, #4]
 8009608:	2b00      	cmp	r3, #0
 800960a:	f040 809c 	bne.w	8009746 <mem_malloc+0x19a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	881b      	ldrh	r3, [r3, #0]
 8009612:	461a      	mov	r2, r3
 8009614:	8bfb      	ldrh	r3, [r7, #30]
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	f1a3 0208 	sub.w	r2, r3, #8
 800961c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800961e:	429a      	cmp	r2, r3
 8009620:	f0c0 8091 	bcc.w	8009746 <mem_malloc+0x19a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	881b      	ldrh	r3, [r3, #0]
 8009628:	461a      	mov	r2, r3
 800962a:	8bfb      	ldrh	r3, [r7, #30]
 800962c:	1ad3      	subs	r3, r2, r3
 800962e:	f1a3 0208 	sub.w	r2, r3, #8
 8009632:	8bbb      	ldrh	r3, [r7, #28]
 8009634:	3314      	adds	r3, #20
 8009636:	429a      	cmp	r2, r3
 8009638:	d341      	bcc.n	80096be <mem_malloc+0x112>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800963a:	8bfa      	ldrh	r2, [r7, #30]
 800963c:	8bbb      	ldrh	r3, [r7, #28]
 800963e:	4413      	add	r3, r2
 8009640:	b29b      	uxth	r3, r3
 8009642:	3308      	adds	r3, #8
 8009644:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009646:	8a7b      	ldrh	r3, [r7, #18]
 8009648:	4618      	mov	r0, r3
 800964a:	f7ff fd4b 	bl	80090e4 <ptr_to_mem>
 800964e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2200      	movs	r2, #0
 8009654:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	881a      	ldrh	r2, [r3, #0]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	8bfa      	ldrh	r2, [r7, #30]
 8009662:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	8a7a      	ldrh	r2, [r7, #18]
 8009668:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	2201      	movs	r2, #1
 800966e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	881b      	ldrh	r3, [r3, #0]
 8009674:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8009678:	d007      	beq.n	800968a <mem_malloc+0xde>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	881b      	ldrh	r3, [r3, #0]
 800967e:	4618      	mov	r0, r3
 8009680:	f7ff fd30 	bl	80090e4 <ptr_to_mem>
 8009684:	4602      	mov	r2, r0
 8009686:	8a7b      	ldrh	r3, [r7, #18]
 8009688:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 800968a:	4b3d      	ldr	r3, [pc, #244]	; (8009780 <mem_malloc+0x1d4>)
 800968c:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
 8009690:	8bbb      	ldrh	r3, [r7, #28]
 8009692:	4413      	add	r3, r2
 8009694:	b29b      	uxth	r3, r3
 8009696:	3308      	adds	r3, #8
 8009698:	b29a      	uxth	r2, r3
 800969a:	4b39      	ldr	r3, [pc, #228]	; (8009780 <mem_malloc+0x1d4>)
 800969c:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 80096a0:	4b37      	ldr	r3, [pc, #220]	; (8009780 <mem_malloc+0x1d4>)
 80096a2:	f8b3 20ce 	ldrh.w	r2, [r3, #206]	; 0xce
 80096a6:	4b36      	ldr	r3, [pc, #216]	; (8009780 <mem_malloc+0x1d4>)
 80096a8:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d227      	bcs.n	8009700 <mem_malloc+0x154>
 80096b0:	4b33      	ldr	r3, [pc, #204]	; (8009780 <mem_malloc+0x1d4>)
 80096b2:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
 80096b6:	4b32      	ldr	r3, [pc, #200]	; (8009780 <mem_malloc+0x1d4>)
 80096b8:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 80096bc:	e020      	b.n	8009700 <mem_malloc+0x154>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	2201      	movs	r2, #1
 80096c2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 80096c4:	4b2e      	ldr	r3, [pc, #184]	; (8009780 <mem_malloc+0x1d4>)
 80096c6:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	881b      	ldrh	r3, [r3, #0]
 80096ce:	4413      	add	r3, r2
 80096d0:	b29c      	uxth	r4, r3
 80096d2:	6978      	ldr	r0, [r7, #20]
 80096d4:	f7ff fd18 	bl	8009108 <mem_to_ptr>
 80096d8:	4603      	mov	r3, r0
 80096da:	1ae3      	subs	r3, r4, r3
 80096dc:	b29a      	uxth	r2, r3
 80096de:	4b28      	ldr	r3, [pc, #160]	; (8009780 <mem_malloc+0x1d4>)
 80096e0:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 80096e4:	4b26      	ldr	r3, [pc, #152]	; (8009780 <mem_malloc+0x1d4>)
 80096e6:	f8b3 20ce 	ldrh.w	r2, [r3, #206]	; 0xce
 80096ea:	4b25      	ldr	r3, [pc, #148]	; (8009780 <mem_malloc+0x1d4>)
 80096ec:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d205      	bcs.n	8009700 <mem_malloc+0x154>
 80096f4:	4b22      	ldr	r3, [pc, #136]	; (8009780 <mem_malloc+0x1d4>)
 80096f6:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
 80096fa:	4b21      	ldr	r3, [pc, #132]	; (8009780 <mem_malloc+0x1d4>)
 80096fc:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009700:	4b1e      	ldr	r3, [pc, #120]	; (800977c <mem_malloc+0x1d0>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	697a      	ldr	r2, [r7, #20]
 8009706:	429a      	cmp	r2, r3
 8009708:	d11a      	bne.n	8009740 <mem_malloc+0x194>
          struct mem *cur = lfree;
 800970a:	4b1c      	ldr	r3, [pc, #112]	; (800977c <mem_malloc+0x1d0>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009710:	e005      	b.n	800971e <mem_malloc+0x172>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	881b      	ldrh	r3, [r3, #0]
 8009716:	4618      	mov	r0, r3
 8009718:	f7ff fce4 	bl	80090e4 <ptr_to_mem>
 800971c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	791b      	ldrb	r3, [r3, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d004      	beq.n	8009730 <mem_malloc+0x184>
 8009726:	4b17      	ldr	r3, [pc, #92]	; (8009784 <mem_malloc+0x1d8>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	69ba      	ldr	r2, [r7, #24]
 800972c:	429a      	cmp	r2, r3
 800972e:	d1f0      	bne.n	8009712 <mem_malloc+0x166>
          }
          lfree = cur;
 8009730:	4a12      	ldr	r2, [pc, #72]	; (800977c <mem_malloc+0x1d0>)
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009736:	4b11      	ldr	r3, [pc, #68]	; (800977c <mem_malloc+0x1d0>)
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	4b12      	ldr	r3, [pc, #72]	; (8009784 <mem_malloc+0x1d8>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	429a      	cmp	r2, r3

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	3308      	adds	r3, #8
 8009744:	e016      	b.n	8009774 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8009746:	8bfb      	ldrh	r3, [r7, #30]
 8009748:	4618      	mov	r0, r3
 800974a:	f7ff fccb 	bl	80090e4 <ptr_to_mem>
 800974e:	4603      	mov	r3, r0
 8009750:	881b      	ldrh	r3, [r3, #0]
 8009752:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009754:	8bfa      	ldrh	r2, [r7, #30]
 8009756:	8bbb      	ldrh	r3, [r7, #28]
 8009758:	f5c3 5370 	rsb	r3, r3, #15360	; 0x3c00
 800975c:	429a      	cmp	r2, r3
 800975e:	f4ff af4c 	bcc.w	80095fa <mem_malloc+0x4e>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 8009762:	4b07      	ldr	r3, [pc, #28]	; (8009780 <mem_malloc+0x1d4>)
 8009764:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8009768:	3301      	adds	r3, #1
 800976a:	b29a      	uxth	r2, r3
 800976c:	4b04      	ldr	r3, [pc, #16]	; (8009780 <mem_malloc+0x1d4>)
 800976e:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009772:	2300      	movs	r3, #0
}
 8009774:	4618      	mov	r0, r3
 8009776:	3724      	adds	r7, #36	; 0x24
 8009778:	46bd      	mov	sp, r7
 800977a:	bd90      	pop	{r4, r7, pc}
 800977c:	20004b18 	.word	0x20004b18
 8009780:	200080c8 	.word	0x200080c8
 8009784:	20004b14 	.word	0x20004b14

08009788 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	4603      	mov	r3, r0
 8009790:	460a      	mov	r2, r1
 8009792:	80fb      	strh	r3, [r7, #6]
 8009794:	4613      	mov	r3, r2
 8009796:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 8009798:	88fb      	ldrh	r3, [r7, #6]
 800979a:	88ba      	ldrh	r2, [r7, #4]
 800979c:	fb02 f303 	mul.w	r3, r2, r3
 80097a0:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	461a      	mov	r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d001      	beq.n	80097b2 <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 80097ae:	2300      	movs	r3, #0
 80097b0:	e00e      	b.n	80097d0 <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7ff fef8 	bl	80095ac <mem_malloc>
 80097bc:	60b8      	str	r0, [r7, #8]
  if (p) {
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d004      	beq.n	80097ce <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	2100      	movs	r1, #0
 80097c8:	68b8      	ldr	r0, [r7, #8]
 80097ca:	f009 fee1 	bl	8013590 <memset>
  }
  return p;
 80097ce:	68bb      	ldr	r3, [r7, #8]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	2200      	movs	r2, #0
 80097e6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	3303      	adds	r3, #3
 80097ee:	f023 0303 	bic.w	r3, r3, #3
 80097f2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80097f4:	2300      	movs	r3, #0
 80097f6:	60fb      	str	r3, [r7, #12]
 80097f8:	e011      	b.n	800981e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	68ba      	ldr	r2, [r7, #8]
 800980a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	891b      	ldrh	r3, [r3, #8]
 8009810:	461a      	mov	r2, r3
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	4413      	add	r3, r2
 8009816:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	3301      	adds	r3, #1
 800981c:	60fb      	str	r3, [r7, #12]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	895b      	ldrh	r3, [r3, #10]
 8009822:	461a      	mov	r2, r3
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	4293      	cmp	r3, r2
 8009828:	dbe7      	blt.n	80097fa <memp_init_pool+0x22>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	8952      	ldrh	r2, [r2, #10]
 8009832:	80da      	strh	r2, [r3, #6]
#endif /* MEMP_STATS */
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	6812      	ldr	r2, [r2, #0]
 800983c:	601a      	str	r2, [r3, #0]
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800983e:	bf00      	nop
 8009840:	3714      	adds	r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
	...

0800984c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009852:	2300      	movs	r3, #0
 8009854:	80fb      	strh	r3, [r7, #6]
 8009856:	e014      	b.n	8009882 <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 8009858:	88fb      	ldrh	r3, [r7, #6]
 800985a:	4a0e      	ldr	r2, [pc, #56]	; (8009894 <memp_init+0x48>)
 800985c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009860:	4618      	mov	r0, r3
 8009862:	f7ff ffb9 	bl	80097d8 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 8009866:	88fb      	ldrh	r3, [r7, #6]
 8009868:	4a0a      	ldr	r2, [pc, #40]	; (8009894 <memp_init+0x48>)
 800986a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800986e:	88fb      	ldrh	r3, [r7, #6]
 8009870:	6852      	ldr	r2, [r2, #4]
 8009872:	4909      	ldr	r1, [pc, #36]	; (8009898 <memp_init+0x4c>)
 8009874:	3334      	adds	r3, #52	; 0x34
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	440b      	add	r3, r1
 800987a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800987c:	88fb      	ldrh	r3, [r7, #6]
 800987e:	3301      	adds	r3, #1
 8009880:	80fb      	strh	r3, [r7, #6]
 8009882:	88fb      	ldrh	r3, [r7, #6]
 8009884:	2b09      	cmp	r3, #9
 8009886:	d9e7      	bls.n	8009858 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009888:	bf00      	nop
 800988a:	bf00      	nop
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	08016c30 	.word	0x08016c30
 8009898:	200080c8 	.word	0x200080c8

0800989c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d01a      	beq.n	80098e8 <do_memp_malloc_pool+0x4c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	68fa      	ldr	r2, [r7, #12]
 80098b8:	6812      	ldr	r2, [r2, #0]
 80098ba:	601a      	str	r2, [r3, #0]
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	891a      	ldrh	r2, [r3, #8]
 80098c2:	3201      	adds	r2, #1
 80098c4:	b292      	uxth	r2, r2
 80098c6:	811a      	strh	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	891a      	ldrh	r2, [r3, #8]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	895b      	ldrh	r3, [r3, #10]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d905      	bls.n	80098e4 <do_memp_malloc_pool+0x48>
      desc->stats->max = desc->stats->used;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	685a      	ldr	r2, [r3, #4]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	8912      	ldrh	r2, [r2, #8]
 80098e2:	815a      	strh	r2, [r3, #10]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	e006      	b.n	80098f6 <do_memp_malloc_pool+0x5a>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	889a      	ldrh	r2, [r3, #4]
 80098ee:	3201      	adds	r2, #1
 80098f0:	b292      	uxth	r2, r2
 80098f2:	809a      	strh	r2, [r3, #4]
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3714      	adds	r7, #20
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr
	...

08009904 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	4603      	mov	r3, r0
 800990c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800990e:	79fb      	ldrb	r3, [r7, #7]
 8009910:	2b09      	cmp	r3, #9
 8009912:	d904      	bls.n	800991e <memp_malloc+0x1a>
 8009914:	4808      	ldr	r0, [pc, #32]	; (8009938 <memp_malloc+0x34>)
 8009916:	f7f6 fcbc 	bl	8000292 <Console_DEBUG>
 800991a:	2300      	movs	r3, #0
 800991c:	e008      	b.n	8009930 <memp_malloc+0x2c>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800991e:	79fb      	ldrb	r3, [r7, #7]
 8009920:	4a06      	ldr	r2, [pc, #24]	; (800993c <memp_malloc+0x38>)
 8009922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009926:	4618      	mov	r0, r3
 8009928:	f7ff ffb8 	bl	800989c <do_memp_malloc_pool>
 800992c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800992e:	68fb      	ldr	r3, [r7, #12]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	08016050 	.word	0x08016050
 800993c:	08016c30 	.word	0x08016c30

08009940 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009940:	b480      	push	{r7}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]

  LWIP_ASSERT("memp_free: mem properly aligned",
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	60fb      	str	r3, [r7, #12]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	891a      	ldrh	r2, [r3, #8]
 8009954:	3a01      	subs	r2, #1
 8009956:	b292      	uxth	r2, r2
 8009958:	811a      	strh	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800996c:	bf00      	nop
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	4603      	mov	r3, r0
 8009980:	6039      	str	r1, [r7, #0]
 8009982:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009984:	79fb      	ldrb	r3, [r7, #7]
 8009986:	2b09      	cmp	r3, #9
 8009988:	d903      	bls.n	8009992 <memp_free+0x1a>
 800998a:	480a      	ldr	r0, [pc, #40]	; (80099b4 <memp_free+0x3c>)
 800998c:	f7f6 fc81 	bl	8000292 <Console_DEBUG>
 8009990:	e00c      	b.n	80099ac <memp_free+0x34>

  if (mem == NULL) {
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d008      	beq.n	80099aa <memp_free+0x32>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009998:	79fb      	ldrb	r3, [r7, #7]
 800999a:	4a07      	ldr	r2, [pc, #28]	; (80099b8 <memp_free+0x40>)
 800999c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099a0:	6839      	ldr	r1, [r7, #0]
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7ff ffcc 	bl	8009940 <do_memp_free_pool>
 80099a8:	e000      	b.n	80099ac <memp_free+0x34>
    return;
 80099aa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	08016070 	.word	0x08016070
 80099b8:	08016c30 	.word	0x08016c30

080099bc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80099bc:	b480      	push	{r7}
 80099be:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80099c0:	bf00      	nop
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
	...

080099cc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b088      	sub	sp, #32
 80099d0:	af02      	add	r7, sp, #8
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
 80099d8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d104      	bne.n	80099ea <netif_add+0x1e>
 80099e0:	4897      	ldr	r0, [pc, #604]	; (8009c40 <netif_add+0x274>)
 80099e2:	f7f6 fc56 	bl	8000292 <Console_DEBUG>
 80099e6:	2300      	movs	r3, #0
 80099e8:	e126      	b.n	8009c38 <netif_add+0x26c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80099ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d104      	bne.n	80099fa <netif_add+0x2e>
 80099f0:	4894      	ldr	r0, [pc, #592]	; (8009c44 <netif_add+0x278>)
 80099f2:	f7f6 fc4e 	bl	8000292 <Console_DEBUG>
 80099f6:	2300      	movs	r3, #0
 80099f8:	e11e      	b.n	8009c38 <netif_add+0x26c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d101      	bne.n	8009a04 <netif_add+0x38>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009a00:	4b91      	ldr	r3, [pc, #580]	; (8009c48 <netif_add+0x27c>)
 8009a02:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d101      	bne.n	8009a0e <netif_add+0x42>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009a0a:	4b8f      	ldr	r3, [pc, #572]	; (8009c48 <netif_add+0x27c>)
 8009a0c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d101      	bne.n	8009a18 <netif_add+0x4c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009a14:	4b8c      	ldr	r3, [pc, #560]	; (8009c48 <netif_add+0x27c>)
 8009a16:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	4a87      	ldr	r2, [pc, #540]	; (8009c4c <netif_add+0x280>)
 8009a2e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2200      	movs	r2, #0
 8009a34:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	3320      	adds	r3, #32
 8009a42:	2204      	movs	r2, #4
 8009a44:	2100      	movs	r1, #0
 8009a46:	4618      	mov	r0, r3
 8009a48:	f009 fda2 	bl	8013590 <memset>
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	635a      	str	r2, [r3, #52]	; 0x34
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */

  /* remember netif specific state information data */
  netif->state = state;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6a3a      	ldr	r2, [r7, #32]
 8009a56:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8009a58:	4b7d      	ldr	r3, [pc, #500]	; (8009c50 <netif_add+0x284>)
 8009a5a:	781a      	ldrb	r2, [r3, #0]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a66:	611a      	str	r2, [r3, #16]
  netif->reschedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
#endif /* ENABLE_LOOPBACK */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	68b9      	ldr	r1, [r7, #8]
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f000 f9c8 	bl	8009e04 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	4798      	blx	r3
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <netif_add+0xb8>
    return NULL;
 8009a80:	2300      	movs	r3, #0
 8009a82:	e0d9      	b.n	8009c38 <netif_add+0x26c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009a8a:	2bff      	cmp	r3, #255	; 0xff
 8009a8c:	d103      	bne.n	8009a96 <netif_add+0xca>
        netif->num = 0;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8009a96:	2300      	movs	r3, #0
 8009a98:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009a9a:	4b6e      	ldr	r3, [pc, #440]	; (8009c54 <netif_add+0x288>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	617b      	str	r3, [r7, #20]
 8009aa0:	e016      	b.n	8009ad0 <netif_add+0x104>
        LWIP_ASSERT("netif already added", netif2 != netif);
        num_netifs++;
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
        if (netif2->num == netif->num) {
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d108      	bne.n	8009aca <netif_add+0xfe>
          netif->num++;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009abe:	3301      	adds	r3, #1
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8009ac8:	e005      	b.n	8009ad6 <netif_add+0x10a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	617b      	str	r3, [r7, #20]
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1e5      	bne.n	8009aa2 <netif_add+0xd6>
        }
      }
    } while (netif2 != NULL);
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1d3      	bne.n	8009a84 <netif_add+0xb8>
  }
  if (netif->num == 254) {
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009ae2:	2bfe      	cmp	r3, #254	; 0xfe
 8009ae4:	d103      	bne.n	8009aee <netif_add+0x122>
    netif_num = 0;
 8009ae6:	4b5a      	ldr	r3, [pc, #360]	; (8009c50 <netif_add+0x284>)
 8009ae8:	2200      	movs	r2, #0
 8009aea:	701a      	strb	r2, [r3, #0]
 8009aec:	e006      	b.n	8009afc <netif_add+0x130>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009af4:	3301      	adds	r3, #1
 8009af6:	b2da      	uxtb	r2, r3
 8009af8:	4b55      	ldr	r3, [pc, #340]	; (8009c50 <netif_add+0x284>)
 8009afa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009afc:	4b55      	ldr	r3, [pc, #340]	; (8009c54 <netif_add+0x288>)
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009b04:	4a53      	ldr	r2, [pc, #332]	; (8009c54 <netif_add+0x288>)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6013      	str	r3, [r2, #0]
#endif /* "LWIP_SINGLE_NETIF */
  mib2_netif_added(netif);

#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009b10:	f003 0320 	and.w	r3, r3, #32
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d002      	beq.n	8009b1e <netif_add+0x152>
    igmp_start(netif);
 8009b18:	68f8      	ldr	r0, [r7, #12]
 8009b1a:	f007 f8df 	bl	8010cdc <igmp_start>
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009b24:	4619      	mov	r1, r3
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	484a      	ldr	r0, [pc, #296]	; (8009c58 <netif_add+0x28c>)
 8009b30:	f7f6 fbaf 	bl	8000292 <Console_DEBUG>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 8009b34:	4849      	ldr	r0, [pc, #292]	; (8009c5c <netif_add+0x290>)
 8009b36:	f7f6 fbac 	bl	8000292 <Console_DEBUG>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d003      	beq.n	8009b48 <netif_add+0x17c>
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	4619      	mov	r1, r3
 8009b46:	e000      	b.n	8009b4a <netif_add+0x17e>
 8009b48:	2100      	movs	r1, #0
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d004      	beq.n	8009b5a <netif_add+0x18e>
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	3301      	adds	r3, #1
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	461a      	mov	r2, r3
 8009b58:	e000      	b.n	8009b5c <netif_add+0x190>
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d004      	beq.n	8009b6c <netif_add+0x1a0>
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	3302      	adds	r3, #2
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	4618      	mov	r0, r3
 8009b6a:	e000      	b.n	8009b6e <netif_add+0x1a2>
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d003      	beq.n	8009b7c <netif_add+0x1b0>
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	3303      	adds	r3, #3
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	e000      	b.n	8009b7e <netif_add+0x1b2>
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	9300      	str	r3, [sp, #0]
 8009b80:	4603      	mov	r3, r0
 8009b82:	4837      	ldr	r0, [pc, #220]	; (8009c60 <netif_add+0x294>)
 8009b84:	f7f6 fb85 	bl	8000292 <Console_DEBUG>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 8009b88:	4836      	ldr	r0, [pc, #216]	; (8009c64 <netif_add+0x298>)
 8009b8a:	f7f6 fb82 	bl	8000292 <Console_DEBUG>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d003      	beq.n	8009b9c <netif_add+0x1d0>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	4619      	mov	r1, r3
 8009b9a:	e000      	b.n	8009b9e <netif_add+0x1d2>
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d004      	beq.n	8009bae <netif_add+0x1e2>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	461a      	mov	r2, r3
 8009bac:	e000      	b.n	8009bb0 <netif_add+0x1e4>
 8009bae:	2200      	movs	r2, #0
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d004      	beq.n	8009bc0 <netif_add+0x1f4>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	3302      	adds	r3, #2
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	e000      	b.n	8009bc2 <netif_add+0x1f6>
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d003      	beq.n	8009bd0 <netif_add+0x204>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	3303      	adds	r3, #3
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	e000      	b.n	8009bd2 <netif_add+0x206>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	9300      	str	r3, [sp, #0]
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	4822      	ldr	r0, [pc, #136]	; (8009c60 <netif_add+0x294>)
 8009bd8:	f7f6 fb5b 	bl	8000292 <Console_DEBUG>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 8009bdc:	4822      	ldr	r0, [pc, #136]	; (8009c68 <netif_add+0x29c>)
 8009bde:	f7f6 fb58 	bl	8000292 <Console_DEBUG>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d003      	beq.n	8009bf0 <netif_add+0x224>
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	4619      	mov	r1, r3
 8009bee:	e000      	b.n	8009bf2 <netif_add+0x226>
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d004      	beq.n	8009c02 <netif_add+0x236>
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	e000      	b.n	8009c04 <netif_add+0x238>
 8009c02:	2200      	movs	r2, #0
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d004      	beq.n	8009c14 <netif_add+0x248>
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	3302      	adds	r3, #2
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	4618      	mov	r0, r3
 8009c12:	e000      	b.n	8009c16 <netif_add+0x24a>
 8009c14:	2000      	movs	r0, #0
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d003      	beq.n	8009c24 <netif_add+0x258>
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	3303      	adds	r3, #3
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	e000      	b.n	8009c26 <netif_add+0x25a>
 8009c24:	2300      	movs	r3, #0
 8009c26:	9300      	str	r3, [sp, #0]
 8009c28:	4603      	mov	r3, r0
 8009c2a:	480d      	ldr	r0, [pc, #52]	; (8009c60 <netif_add+0x294>)
 8009c2c:	f7f6 fb31 	bl	8000292 <Console_DEBUG>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 8009c30:	480e      	ldr	r0, [pc, #56]	; (8009c6c <netif_add+0x2a0>)
 8009c32:	f7f6 fb2e 	bl	8000292 <Console_DEBUG>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009c36:	68fb      	ldr	r3, [r7, #12]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3718      	adds	r7, #24
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	0801608c 	.word	0x0801608c
 8009c44:	080160a8 	.word	0x080160a8
 8009c48:	08016ca0 	.word	0x08016ca0
 8009c4c:	08009f9d 	.word	0x08009f9d
 8009c50:	200080c4 	.word	0x200080c4
 8009c54:	200080bc 	.word	0x200080bc
 8009c58:	080160cc 	.word	0x080160cc
 8009c5c:	080160ec 	.word	0x080160ec
 8009c60:	080160f4 	.word	0x080160f4
 8009c64:	08016104 	.word	0x08016104
 8009c68:	08016110 	.word	0x08016110
 8009c6c:	08016118 	.word	0x08016118

08009c70 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f002 fa23 	bl	800c0c8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009c82:	6839      	ldr	r1, [r7, #0]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f005 ff7f 	bl	800fb88 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009c8a:	bf00      	nop
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
	...

08009c94 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
  LWIP_ASSERT("invalid pointer", old_addr != NULL);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	3304      	adds	r3, #4
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d01f      	beq.n	8009cee <netif_do_set_ipaddr+0x5a>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 8009cbe:	480e      	ldr	r0, [pc, #56]	; (8009cf8 <netif_do_set_ipaddr+0x64>)
 8009cc0:	f7f6 fae7 	bl	8000292 <Console_DEBUG>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009cc4:	f107 0314 	add.w	r3, r7, #20
 8009cc8:	4619      	mov	r1, r3
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f7ff ffd0 	bl	8009c70 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d002      	beq.n	8009cdc <netif_do_set_ipaddr+0x48>
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	e000      	b.n	8009cde <netif_do_set_ipaddr+0x4a>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009ce2:	2101      	movs	r1, #1
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 f91f 	bl	8009f28 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009cea:	2301      	movs	r3, #1
 8009cec:	e000      	b.n	8009cf0 <netif_do_set_ipaddr+0x5c>
  }
  return 0; /* address unchanged */
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3718      	adds	r7, #24
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	0801611c 	.word	0x0801611c

08009cfc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009cfc:	b5b0      	push	{r4, r5, r7, lr}
 8009cfe:	b088      	sub	sp, #32
 8009d00:	af04      	add	r7, sp, #16
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	3308      	adds	r3, #8
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d02d      	beq.n	8009d72 <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d002      	beq.n	8009d22 <netif_do_set_netmask+0x26>
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	e000      	b.n	8009d24 <netif_do_set_netmask+0x28>
 8009d22:	2300      	movs	r3, #0
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009d2e:	4618      	mov	r0, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009d36:	461c      	mov	r4, r3
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	3308      	adds	r3, #8
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	461d      	mov	r5, r3
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	3308      	adds	r3, #8
 8009d44:	3301      	adds	r3, #1
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	461a      	mov	r2, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	3308      	adds	r3, #8
 8009d4e:	3302      	adds	r3, #2
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	4619      	mov	r1, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	3308      	adds	r3, #8
 8009d58:	3303      	adds	r3, #3
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	9302      	str	r3, [sp, #8]
 8009d5e:	9101      	str	r1, [sp, #4]
 8009d60:	9200      	str	r2, [sp, #0]
 8009d62:	462b      	mov	r3, r5
 8009d64:	4622      	mov	r2, r4
 8009d66:	4601      	mov	r1, r0
 8009d68:	4804      	ldr	r0, [pc, #16]	; (8009d7c <netif_do_set_netmask+0x80>)
 8009d6a:	f7f6 fa92 	bl	8000292 <Console_DEBUG>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e000      	b.n	8009d74 <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8009d7c:	0801616c 	.word	0x0801616c

08009d80 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009d80:	b5b0      	push	{r4, r5, r7, lr}
 8009d82:	b088      	sub	sp, #32
 8009d84:	af04      	add	r7, sp, #16
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	330c      	adds	r3, #12
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d02d      	beq.n	8009df6 <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d002      	beq.n	8009da6 <netif_do_set_gw+0x26>
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	e000      	b.n	8009da8 <netif_do_set_gw+0x28>
 8009da6:	2300      	movs	r3, #0
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009db2:	4618      	mov	r0, r3
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009dba:	461c      	mov	r4, r3
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	330c      	adds	r3, #12
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	461d      	mov	r5, r3
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	330c      	adds	r3, #12
 8009dc8:	3301      	adds	r3, #1
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	461a      	mov	r2, r3
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	330c      	adds	r3, #12
 8009dd2:	3302      	adds	r3, #2
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	330c      	adds	r3, #12
 8009ddc:	3303      	adds	r3, #3
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	9302      	str	r3, [sp, #8]
 8009de2:	9101      	str	r1, [sp, #4]
 8009de4:	9200      	str	r2, [sp, #0]
 8009de6:	462b      	mov	r3, r5
 8009de8:	4622      	mov	r2, r4
 8009dea:	4601      	mov	r1, r0
 8009dec:	4804      	ldr	r0, [pc, #16]	; (8009e00 <netif_do_set_gw+0x80>)
 8009dee:	f7f6 fa50 	bl	8000292 <Console_DEBUG>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8009df2:	2301      	movs	r3, #1
 8009df4:	e000      	b.n	8009df8 <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 8009df6:	2300      	movs	r3, #0
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bdb0      	pop	{r4, r5, r7, pc}
 8009e00:	080161cc 	.word	0x080161cc

08009e04 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b088      	sub	sp, #32
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
 8009e10:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8009e12:	2300      	movs	r3, #0
 8009e14:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009e16:	2300      	movs	r3, #0
 8009e18:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d101      	bne.n	8009e24 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009e20:	4b1c      	ldr	r3, [pc, #112]	; (8009e94 <netif_set_addr+0x90>)
 8009e22:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d101      	bne.n	8009e2e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009e2a:	4b1a      	ldr	r3, [pc, #104]	; (8009e94 <netif_set_addr+0x90>)
 8009e2c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d101      	bne.n	8009e38 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009e34:	4b17      	ldr	r3, [pc, #92]	; (8009e94 <netif_set_addr+0x90>)
 8009e36:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d003      	beq.n	8009e46 <netif_set_addr+0x42>
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d101      	bne.n	8009e4a <netif_set_addr+0x46>
 8009e46:	2301      	movs	r3, #1
 8009e48:	e000      	b.n	8009e4c <netif_set_addr+0x48>
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d006      	beq.n	8009e62 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009e54:	f107 0310 	add.w	r3, r7, #16
 8009e58:	461a      	mov	r2, r3
 8009e5a:	68b9      	ldr	r1, [r7, #8]
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f7ff ff19 	bl	8009c94 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009e62:	69fa      	ldr	r2, [r7, #28]
 8009e64:	6879      	ldr	r1, [r7, #4]
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f7ff ff48 	bl	8009cfc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009e6c:	69ba      	ldr	r2, [r7, #24]
 8009e6e:	6839      	ldr	r1, [r7, #0]
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f7ff ff85 	bl	8009d80 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d106      	bne.n	8009e8a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009e7c:	f107 0310 	add.w	r3, r7, #16
 8009e80:	461a      	mov	r2, r3
 8009e82:	68b9      	ldr	r1, [r7, #8]
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f7ff ff05 	bl	8009c94 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009e8a:	bf00      	nop
 8009e8c:	3720      	adds	r7, #32
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	08016ca0 	.word	0x08016ca0

08009e98 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009ea0:	4a0d      	ldr	r2, [pc, #52]	; (8009ed8 <netif_set_default+0x40>)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d004      	beq.n	8009eb6 <netif_set_default+0x1e>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	e000      	b.n	8009eb8 <netif_set_default+0x20>
 8009eb6:	2127      	movs	r1, #39	; 0x27
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d003      	beq.n	8009ec6 <netif_set_default+0x2e>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009ec4:	e000      	b.n	8009ec8 <netif_set_default+0x30>
 8009ec6:	2327      	movs	r3, #39	; 0x27
 8009ec8:	461a      	mov	r2, r3
 8009eca:	4804      	ldr	r0, [pc, #16]	; (8009edc <netif_set_default+0x44>)
 8009ecc:	f7f6 f9e1 	bl	8000292 <Console_DEBUG>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009ed0:	bf00      	nop
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	200080c0 	.word	0x200080c0
 8009edc:	08016244 	.word	0x08016244

08009ee0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d103      	bne.n	8009ef6 <netif_set_up+0x16>
 8009eee:	480d      	ldr	r0, [pc, #52]	; (8009f24 <netif_set_up+0x44>)
 8009ef0:	f7f6 f9cf 	bl	8000292 <Console_DEBUG>
 8009ef4:	e013      	b.n	8009f1e <netif_set_up+0x3e>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009efc:	f003 0301 	and.w	r3, r3, #1
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d10c      	bne.n	8009f1e <netif_set_up+0x3e>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f0a:	f043 0301 	orr.w	r3, r3, #1
 8009f0e:	b2da      	uxtb	r2, r3
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009f16:	2103      	movs	r1, #3
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 f805 	bl	8009f28 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009f1e:	3708      	adds	r7, #8
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	0801626c 	.word	0x0801626c

08009f28 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	460b      	mov	r3, r1
 8009f32:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f3a:	f003 0304 	and.w	r3, r3, #4
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d028      	beq.n	8009f94 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f48:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d021      	beq.n	8009f94 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009f50:	78fb      	ldrb	r3, [r7, #3]
 8009f52:	f003 0301 	and.w	r3, r3, #1
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d01d      	beq.n	8009f96 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	3304      	adds	r3, #4
 8009f5e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d018      	beq.n	8009f96 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f6a:	f003 0308 	and.w	r3, r3, #8
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d005      	beq.n	8009f7e <netif_issue_reports+0x56>
      etharp_gratuitous(netif);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	3304      	adds	r3, #4
 8009f76:	4619      	mov	r1, r3
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f006 fca9 	bl	80108d0 <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f84:	f003 0320 	and.w	r3, r3, #32
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d004      	beq.n	8009f96 <netif_issue_reports+0x6e>
      igmp_report_groups(netif);
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f006 fecf 	bl	8010d30 <igmp_report_groups>
 8009f92:	e000      	b.n	8009f96 <netif_issue_reports+0x6e>
    return;
 8009f94:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009fa8:	f06f 030b 	mvn.w	r3, #11
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3714      	adds	r7, #20
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b085      	sub	sp, #20
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009fc2:	79fb      	ldrb	r3, [r7, #7]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d013      	beq.n	8009ff0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009fc8:	4b0d      	ldr	r3, [pc, #52]	; (800a000 <netif_get_by_index+0x48>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	60fb      	str	r3, [r7, #12]
 8009fce:	e00c      	b.n	8009fea <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	79fa      	ldrb	r2, [r7, #7]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d101      	bne.n	8009fe4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	e006      	b.n	8009ff2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	60fb      	str	r3, [r7, #12]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1ef      	bne.n	8009fd0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3714      	adds	r7, #20
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	200080bc 	.word	0x200080bc

0800a004 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	4611      	mov	r1, r2
 800a010:	461a      	mov	r2, r3
 800a012:	460b      	mov	r3, r1
 800a014:	80fb      	strh	r3, [r7, #6]
 800a016:	4613      	mov	r3, r2
 800a018:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	88fa      	ldrh	r2, [r7, #6]
 800a02a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	88ba      	ldrh	r2, [r7, #4]
 800a030:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a032:	8b3b      	ldrh	r3, [r7, #24]
 800a034:	b2da      	uxtb	r2, r3
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	7f3a      	ldrb	r2, [r7, #28]
 800a03e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2201      	movs	r2, #1
 800a044:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2200      	movs	r2, #0
 800a04a:	73da      	strb	r2, [r3, #15]
}
 800a04c:	bf00      	nop
 800a04e:	3714      	adds	r7, #20
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b08c      	sub	sp, #48	; 0x30
 800a05c:	af02      	add	r7, sp, #8
 800a05e:	4603      	mov	r3, r0
 800a060:	71fb      	strb	r3, [r7, #7]
 800a062:	460b      	mov	r3, r1
 800a064:	80bb      	strh	r3, [r7, #4]
 800a066:	4613      	mov	r3, r2
 800a068:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a06a:	79fb      	ldrb	r3, [r7, #7]
 800a06c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a06e:	887b      	ldrh	r3, [r7, #2]
 800a070:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a074:	d062      	beq.n	800a13c <pbuf_alloc+0xe4>
 800a076:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a07a:	f300 809e 	bgt.w	800a1ba <pbuf_alloc+0x162>
 800a07e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a082:	d010      	beq.n	800a0a6 <pbuf_alloc+0x4e>
 800a084:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a088:	f300 8097 	bgt.w	800a1ba <pbuf_alloc+0x162>
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d002      	beq.n	800a096 <pbuf_alloc+0x3e>
 800a090:	2b41      	cmp	r3, #65	; 0x41
 800a092:	f040 8092 	bne.w	800a1ba <pbuf_alloc+0x162>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a096:	887a      	ldrh	r2, [r7, #2]
 800a098:	88bb      	ldrh	r3, [r7, #4]
 800a09a:	4619      	mov	r1, r3
 800a09c:	2000      	movs	r0, #0
 800a09e:	f000 f893 	bl	800a1c8 <pbuf_alloc_reference>
 800a0a2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a0a4:	e08b      	b.n	800a1be <pbuf_alloc+0x166>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a0ae:	88bb      	ldrh	r3, [r7, #4]
 800a0b0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a0b2:	2009      	movs	r0, #9
 800a0b4:	f7ff fc26 	bl	8009904 <memp_malloc>
 800a0b8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d107      	bne.n	800a0d0 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d002      	beq.n	800a0cc <pbuf_alloc+0x74>
            pbuf_free(p);
 800a0c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0c8:	f000 fa0d 	bl	800a4e6 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	e077      	b.n	800a1c0 <pbuf_alloc+0x168>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a0d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a0d2:	3303      	adds	r3, #3
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	f023 0303 	bic.w	r3, r3, #3
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	8b7a      	ldrh	r2, [r7, #26]
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	bf28      	it	cs
 800a0e8:	4613      	movcs	r3, r2
 800a0ea:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a0ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a0ee:	3310      	adds	r3, #16
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	3303      	adds	r3, #3
 800a0f6:	f023 0303 	bic.w	r3, r3, #3
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	89f9      	ldrh	r1, [r7, #14]
 800a0fe:	8b7a      	ldrh	r2, [r7, #26]
 800a100:	2300      	movs	r3, #0
 800a102:	9301      	str	r3, [sp, #4]
 800a104:	887b      	ldrh	r3, [r7, #2]
 800a106:	9300      	str	r3, [sp, #0]
 800a108:	460b      	mov	r3, r1
 800a10a:	4601      	mov	r1, r0
 800a10c:	6938      	ldr	r0, [r7, #16]
 800a10e:	f7ff ff79 	bl	800a004 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a114:	2b00      	cmp	r3, #0
 800a116:	d102      	bne.n	800a11e <pbuf_alloc+0xc6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	627b      	str	r3, [r7, #36]	; 0x24
 800a11c:	e002      	b.n	800a124 <pbuf_alloc+0xcc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a128:	8b7a      	ldrh	r2, [r7, #26]
 800a12a:	89fb      	ldrh	r3, [r7, #14]
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a130:	2300      	movs	r3, #0
 800a132:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a134:	8b7b      	ldrh	r3, [r7, #26]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1bb      	bne.n	800a0b2 <pbuf_alloc+0x5a>
      break;
 800a13a:	e040      	b.n	800a1be <pbuf_alloc+0x166>
    }
    case PBUF_RAM: {
      mem_size_t payload_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a13c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a13e:	3303      	adds	r3, #3
 800a140:	b29b      	uxth	r3, r3
 800a142:	f023 0303 	bic.w	r3, r3, #3
 800a146:	b29a      	uxth	r2, r3
 800a148:	88bb      	ldrh	r3, [r7, #4]
 800a14a:	3303      	adds	r3, #3
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	f023 0303 	bic.w	r3, r3, #3
 800a152:	b29b      	uxth	r3, r3
 800a154:	4413      	add	r3, r2
 800a156:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a158:	8b3b      	ldrh	r3, [r7, #24]
 800a15a:	3310      	adds	r3, #16
 800a15c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a15e:	8b3a      	ldrh	r2, [r7, #24]
 800a160:	88bb      	ldrh	r3, [r7, #4]
 800a162:	3303      	adds	r3, #3
 800a164:	f023 0303 	bic.w	r3, r3, #3
 800a168:	429a      	cmp	r2, r3
 800a16a:	d306      	bcc.n	800a17a <pbuf_alloc+0x122>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a16c:	8afa      	ldrh	r2, [r7, #22]
 800a16e:	88bb      	ldrh	r3, [r7, #4]
 800a170:	3303      	adds	r3, #3
 800a172:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a176:	429a      	cmp	r2, r3
 800a178:	d201      	bcs.n	800a17e <pbuf_alloc+0x126>
        return NULL;
 800a17a:	2300      	movs	r3, #0
 800a17c:	e020      	b.n	800a1c0 <pbuf_alloc+0x168>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a17e:	8afb      	ldrh	r3, [r7, #22]
 800a180:	4618      	mov	r0, r3
 800a182:	f7ff fa13 	bl	80095ac <mem_malloc>
 800a186:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d101      	bne.n	800a192 <pbuf_alloc+0x13a>
        return NULL;
 800a18e:	2300      	movs	r3, #0
 800a190:	e016      	b.n	800a1c0 <pbuf_alloc+0x168>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a192:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a194:	3310      	adds	r3, #16
 800a196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a198:	4413      	add	r3, r2
 800a19a:	3303      	adds	r3, #3
 800a19c:	f023 0303 	bic.w	r3, r3, #3
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	88b9      	ldrh	r1, [r7, #4]
 800a1a4:	88ba      	ldrh	r2, [r7, #4]
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	9301      	str	r3, [sp, #4]
 800a1aa:	887b      	ldrh	r3, [r7, #2]
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	4601      	mov	r1, r0
 800a1b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1b4:	f7ff ff26 	bl	800a004 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a1b8:	e001      	b.n	800a1be <pbuf_alloc+0x166>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
      return NULL;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	e000      	b.n	800a1c0 <pbuf_alloc+0x168>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3728      	adds	r7, #40	; 0x28
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b086      	sub	sp, #24
 800a1cc:	af02      	add	r7, sp, #8
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	807b      	strh	r3, [r7, #2]
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a1d8:	2008      	movs	r0, #8
 800a1da:	f7ff fb93 	bl	8009904 <memp_malloc>
 800a1de:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d101      	bne.n	800a1ea <pbuf_alloc_reference+0x22>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	e00b      	b.n	800a202 <pbuf_alloc_reference+0x3a>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a1ea:	8879      	ldrh	r1, [r7, #2]
 800a1ec:	887a      	ldrh	r2, [r7, #2]
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	883b      	ldrh	r3, [r7, #0]
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	6879      	ldr	r1, [r7, #4]
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f7ff ff02 	bl	800a004 <pbuf_init_alloced_pbuf>
  return p;
 800a200:	68fb      	ldr	r3, [r7, #12]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b088      	sub	sp, #32
 800a20e:	af02      	add	r7, sp, #8
 800a210:	607b      	str	r3, [r7, #4]
 800a212:	4603      	mov	r3, r0
 800a214:	73fb      	strb	r3, [r7, #15]
 800a216:	460b      	mov	r3, r1
 800a218:	81bb      	strh	r3, [r7, #12]
 800a21a:	4613      	mov	r3, r2
 800a21c:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a21e:	7bfb      	ldrb	r3, [r7, #15]
 800a220:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a222:	8a7b      	ldrh	r3, [r7, #18]
 800a224:	3303      	adds	r3, #3
 800a226:	f023 0203 	bic.w	r2, r3, #3
 800a22a:	89bb      	ldrh	r3, [r7, #12]
 800a22c:	441a      	add	r2, r3
 800a22e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a230:	429a      	cmp	r2, r3
 800a232:	d901      	bls.n	800a238 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a234:	2300      	movs	r3, #0
 800a236:	e018      	b.n	800a26a <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a238:	6a3b      	ldr	r3, [r7, #32]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d007      	beq.n	800a24e <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a23e:	8a7b      	ldrh	r3, [r7, #18]
 800a240:	3303      	adds	r3, #3
 800a242:	f023 0303 	bic.w	r3, r3, #3
 800a246:	6a3a      	ldr	r2, [r7, #32]
 800a248:	4413      	add	r3, r2
 800a24a:	617b      	str	r3, [r7, #20]
 800a24c:	e001      	b.n	800a252 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a24e:	2300      	movs	r3, #0
 800a250:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	89b9      	ldrh	r1, [r7, #12]
 800a256:	89ba      	ldrh	r2, [r7, #12]
 800a258:	2302      	movs	r3, #2
 800a25a:	9301      	str	r3, [sp, #4]
 800a25c:	897b      	ldrh	r3, [r7, #10]
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	460b      	mov	r3, r1
 800a262:	6979      	ldr	r1, [r7, #20]
 800a264:	f7ff fece 	bl	800a004 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a268:	687b      	ldr	r3, [r7, #4]
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3718      	adds	r7, #24
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a272:	b580      	push	{r7, lr}
 800a274:	b084      	sub	sp, #16
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
 800a27a:	460b      	mov	r3, r1
 800a27c:	807b      	strh	r3, [r7, #2]
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	891b      	ldrh	r3, [r3, #8]
 800a282:	887a      	ldrh	r2, [r7, #2]
 800a284:	429a      	cmp	r2, r3
 800a286:	d24f      	bcs.n	800a328 <pbuf_realloc+0xb6>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	891a      	ldrh	r2, [r3, #8]
 800a28c:	887b      	ldrh	r3, [r7, #2]
 800a28e:	1ad3      	subs	r3, r2, r3
 800a290:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a292:	887b      	ldrh	r3, [r7, #2]
 800a294:	817b      	strh	r3, [r7, #10]
  q = p;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a29a:	e00e      	b.n	800a2ba <pbuf_realloc+0x48>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	895b      	ldrh	r3, [r3, #10]
 800a2a0:	897a      	ldrh	r2, [r7, #10]
 800a2a2:	1ad3      	subs	r3, r2, r3
 800a2a4:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	891a      	ldrh	r2, [r3, #8]
 800a2aa:	893b      	ldrh	r3, [r7, #8]
 800a2ac:	1ad3      	subs	r3, r2, r3
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	60fb      	str	r3, [r7, #12]
  while (rem_len > q->len) {
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	895b      	ldrh	r3, [r3, #10]
 800a2be:	897a      	ldrh	r2, [r7, #10]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d8eb      	bhi.n	800a29c <pbuf_realloc+0x2a>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	7b1b      	ldrb	r3, [r3, #12]
 800a2c8:	f003 030f 	and.w	r3, r3, #15
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d117      	bne.n	800a300 <pbuf_realloc+0x8e>
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	895b      	ldrh	r3, [r3, #10]
 800a2d4:	897a      	ldrh	r2, [r7, #10]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d012      	beq.n	800a300 <pbuf_realloc+0x8e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	7b5b      	ldrb	r3, [r3, #13]
 800a2de:	f003 0302 	and.w	r3, r3, #2
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d10c      	bne.n	800a300 <pbuf_realloc+0x8e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	685a      	ldr	r2, [r3, #4]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	1ad3      	subs	r3, r2, r3
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	897b      	ldrh	r3, [r7, #10]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	68f8      	ldr	r0, [r7, #12]
 800a2fa:	f7ff f873 	bl	80093e4 <mem_trim>
 800a2fe:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	897a      	ldrh	r2, [r7, #10]
 800a304:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	895a      	ldrh	r2, [r3, #10]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d004      	beq.n	800a320 <pbuf_realloc+0xae>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4618      	mov	r0, r3
 800a31c:	f000 f8e3 	bl	800a4e6 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]
 800a326:	e000      	b.n	800a32a <pbuf_realloc+0xb8>
    return;
 800a328:	bf00      	nop

}
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a330:	b480      	push	{r7}
 800a332:	b087      	sub	sp, #28
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	4613      	mov	r3, r2
 800a33c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d003      	beq.n	800a34c <pbuf_add_header_impl+0x1c>
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a34a:	d301      	bcc.n	800a350 <pbuf_add_header_impl+0x20>
    return 1;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e043      	b.n	800a3d8 <pbuf_add_header_impl+0xa8>
  }
  if (header_size_increment == 0) {
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d101      	bne.n	800a35a <pbuf_add_header_impl+0x2a>
    return 0;
 800a356:	2300      	movs	r3, #0
 800a358:	e03e      	b.n	800a3d8 <pbuf_add_header_impl+0xa8>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	891a      	ldrh	r2, [r3, #8]
 800a362:	8a7b      	ldrh	r3, [r7, #18]
 800a364:	4413      	add	r3, r2
 800a366:	b29b      	uxth	r3, r3
 800a368:	8a7a      	ldrh	r2, [r7, #18]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d901      	bls.n	800a372 <pbuf_add_header_impl+0x42>
    return 1;
 800a36e:	2301      	movs	r3, #1
 800a370:	e032      	b.n	800a3d8 <pbuf_add_header_impl+0xa8>
  }

  type_internal = p->type_internal;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	7b1b      	ldrb	r3, [r3, #12]
 800a376:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a378:	8a3b      	ldrh	r3, [r7, #16]
 800a37a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00c      	beq.n	800a39c <pbuf_add_header_impl+0x6c>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	685a      	ldr	r2, [r3, #4]
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	425b      	negs	r3, r3
 800a38a:	4413      	add	r3, r2
 800a38c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	3310      	adds	r3, #16
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	429a      	cmp	r2, r3
 800a396:	d20d      	bcs.n	800a3b4 <pbuf_add_header_impl+0x84>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a398:	2301      	movs	r3, #1
 800a39a:	e01d      	b.n	800a3d8 <pbuf_add_header_impl+0xa8>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a39c:	79fb      	ldrb	r3, [r7, #7]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d006      	beq.n	800a3b0 <pbuf_add_header_impl+0x80>
      payload = (u8_t *)p->payload - header_size_increment;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	685a      	ldr	r2, [r3, #4]
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	425b      	negs	r3, r3
 800a3aa:	4413      	add	r3, r2
 800a3ac:	617b      	str	r3, [r7, #20]
 800a3ae:	e001      	b.n	800a3b4 <pbuf_add_header_impl+0x84>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e011      	b.n	800a3d8 <pbuf_add_header_impl+0xa8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	895a      	ldrh	r2, [r3, #10]
 800a3be:	8a7b      	ldrh	r3, [r7, #18]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	b29a      	uxth	r2, r3
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	891a      	ldrh	r2, [r3, #8]
 800a3cc:	8a7b      	ldrh	r3, [r7, #18]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	b29a      	uxth	r2, r3
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	811a      	strh	r2, [r3, #8]


  return 0;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	371c      	adds	r7, #28
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	6839      	ldr	r1, [r7, #0]
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f7ff ff9c 	bl	800a330 <pbuf_add_header_impl>
 800a3f8:	4603      	mov	r3, r0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
	...

0800a404 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d003      	beq.n	800a41c <pbuf_remove_header+0x18>
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a41a:	d301      	bcc.n	800a420 <pbuf_remove_header+0x1c>
    return 1;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e028      	b.n	800a472 <pbuf_remove_header+0x6e>
  }
  if (header_size_decrement == 0) {
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d101      	bne.n	800a42a <pbuf_remove_header+0x26>
    return 0;
 800a426:	2300      	movs	r3, #0
 800a428:	e023      	b.n	800a472 <pbuf_remove_header+0x6e>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	895b      	ldrh	r3, [r3, #10]
 800a432:	89fa      	ldrh	r2, [r7, #14]
 800a434:	429a      	cmp	r2, r3
 800a436:	d904      	bls.n	800a442 <pbuf_remove_header+0x3e>
 800a438:	4810      	ldr	r0, [pc, #64]	; (800a47c <pbuf_remove_header+0x78>)
 800a43a:	f7f5 ff2a 	bl	8000292 <Console_DEBUG>
 800a43e:	2301      	movs	r3, #1
 800a440:	e017      	b.n	800a472 <pbuf_remove_header+0x6e>

  /* remember current payload pointer */
  payload = p->payload;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	685a      	ldr	r2, [r3, #4]
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	441a      	add	r2, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	895a      	ldrh	r2, [r3, #10]
 800a458:	89fb      	ldrh	r3, [r7, #14]
 800a45a:	1ad3      	subs	r3, r2, r3
 800a45c:	b29a      	uxth	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	891a      	ldrh	r2, [r3, #8]
 800a466:	89fb      	ldrh	r3, [r7, #14]
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	b29a      	uxth	r2, r3
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	08016328 	.word	0x08016328

0800a480 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	460b      	mov	r3, r1
 800a48a:	807b      	strh	r3, [r7, #2]
 800a48c:	4613      	mov	r3, r2
 800a48e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a490:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a494:	2b00      	cmp	r3, #0
 800a496:	da08      	bge.n	800a4aa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a498:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a49c:	425b      	negs	r3, r3
 800a49e:	4619      	mov	r1, r3
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f7ff ffaf 	bl	800a404 <pbuf_remove_header>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	e007      	b.n	800a4ba <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a4aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a4ae:	787a      	ldrb	r2, [r7, #1]
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f7ff ff3c 	bl	800a330 <pbuf_add_header_impl>
 800a4b8:	4603      	mov	r3, r0
  }
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3708      	adds	r7, #8
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b082      	sub	sp, #8
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a4ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f7ff ffd2 	bl	800a480 <pbuf_header_impl>
 800a4dc:	4603      	mov	r3, r0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3708      	adds	r7, #8
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b086      	sub	sp, #24
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d101      	bne.n	800a4f8 <pbuf_free+0x12>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	e045      	b.n	800a584 <pbuf_free+0x9e>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a4fc:	e03e      	b.n	800a57c <pbuf_free+0x96>
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	7b9b      	ldrb	r3, [r3, #14]
 800a502:	3b01      	subs	r3, #1
 800a504:	b2da      	uxtb	r2, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	739a      	strb	r2, [r3, #14]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	7b9b      	ldrb	r3, [r3, #14]
 800a50e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a510:	7dbb      	ldrb	r3, [r7, #22]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d130      	bne.n	800a578 <pbuf_free+0x92>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	7b1b      	ldrb	r3, [r3, #12]
 800a520:	f003 030f 	and.w	r3, r3, #15
 800a524:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	7b5b      	ldrb	r3, [r3, #13]
 800a52a:	f003 0302 	and.w	r3, r3, #2
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d006      	beq.n	800a540 <pbuf_free+0x5a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
        pc->custom_free_function(p);
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	4798      	blx	r3
 800a53e:	e015      	b.n	800a56c <pbuf_free+0x86>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a540:	7bfb      	ldrb	r3, [r7, #15]
 800a542:	2b02      	cmp	r3, #2
 800a544:	d104      	bne.n	800a550 <pbuf_free+0x6a>
          memp_free(MEMP_PBUF_POOL, p);
 800a546:	6879      	ldr	r1, [r7, #4]
 800a548:	2009      	movs	r0, #9
 800a54a:	f7ff fa15 	bl	8009978 <memp_free>
 800a54e:	e00d      	b.n	800a56c <pbuf_free+0x86>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a550:	7bfb      	ldrb	r3, [r7, #15]
 800a552:	2b01      	cmp	r3, #1
 800a554:	d104      	bne.n	800a560 <pbuf_free+0x7a>
          memp_free(MEMP_PBUF, p);
 800a556:	6879      	ldr	r1, [r7, #4]
 800a558:	2008      	movs	r0, #8
 800a55a:	f7ff fa0d 	bl	8009978 <memp_free>
 800a55e:	e005      	b.n	800a56c <pbuf_free+0x86>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a560:	7bfb      	ldrb	r3, [r7, #15]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d102      	bne.n	800a56c <pbuf_free+0x86>
          mem_free(p);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f7fe fec6 	bl	80092f8 <mem_free>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 800a56c:	7dfb      	ldrb	r3, [r7, #23]
 800a56e:	3301      	adds	r3, #1
 800a570:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	607b      	str	r3, [r7, #4]
 800a576:	e001      	b.n	800a57c <pbuf_free+0x96>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a578:	2300      	movs	r3, #0
 800a57a:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d1bd      	bne.n	800a4fe <pbuf_free+0x18>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a582:	7dfb      	ldrb	r3, [r7, #23]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3718      	adds	r7, #24
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b085      	sub	sp, #20
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a594:	2300      	movs	r3, #0
 800a596:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a598:	e005      	b.n	800a5a6 <pbuf_clen+0x1a>
    ++len;
 800a59a:	89fb      	ldrh	r3, [r7, #14]
 800a59c:	3301      	adds	r3, #1
 800a59e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d1f6      	bne.n	800a59a <pbuf_clen+0xe>
  }
  return len;
 800a5ac:	89fb      	ldrh	r3, [r7, #14]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3714      	adds	r7, #20
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr

0800a5ba <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	b083      	sub	sp, #12
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d005      	beq.n	800a5d4 <pbuf_ref+0x1a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	7b9b      	ldrb	r3, [r3, #14]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	b2da      	uxtb	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
  }
}
 800a5d4:	bf00      	nop
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d002      	beq.n	800a5f6 <pbuf_cat+0x16>
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d103      	bne.n	800a5fe <pbuf_cat+0x1e>
 800a5f6:	4812      	ldr	r0, [pc, #72]	; (800a640 <pbuf_cat+0x60>)
 800a5f8:	f7f5 fe4b 	bl	8000292 <Console_DEBUG>
 800a5fc:	e01c      	b.n	800a638 <pbuf_cat+0x58>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	60fb      	str	r3, [r7, #12]
 800a602:	e00a      	b.n	800a61a <pbuf_cat+0x3a>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	891a      	ldrh	r2, [r3, #8]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	891b      	ldrh	r3, [r3, #8]
 800a60c:	4413      	add	r3, r2
 800a60e:	b29a      	uxth	r2, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	60fb      	str	r3, [r7, #12]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1f0      	bne.n	800a604 <pbuf_cat+0x24>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	891a      	ldrh	r2, [r3, #8]
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	891b      	ldrh	r3, [r3, #8]
 800a62a:	4413      	add	r3, r2
 800a62c:	b29a      	uxth	r2, r3
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	683a      	ldr	r2, [r7, #0]
 800a636:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	08016348 	.word	0x08016348

0800a644 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  LWIP_ERROR("pbuf_copy: invalid source", p_from != NULL, return ERR_ARG;);
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d105      	bne.n	800a660 <pbuf_copy+0x1c>
 800a654:	4808      	ldr	r0, [pc, #32]	; (800a678 <pbuf_copy+0x34>)
 800a656:	f7f5 fe1c 	bl	8000292 <Console_DEBUG>
 800a65a:	f06f 030f 	mvn.w	r3, #15
 800a65e:	e007      	b.n	800a670 <pbuf_copy+0x2c>
  return pbuf_copy_partial_pbuf(p_to, p_from, p_from->tot_len, 0);
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	891a      	ldrh	r2, [r3, #8]
 800a664:	2300      	movs	r3, #0
 800a666:	6839      	ldr	r1, [r7, #0]
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 f807 	bl	800a67c <pbuf_copy_partial_pbuf>
 800a66e:	4603      	mov	r3, r0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3708      	adds	r7, #8
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	08016380 	.word	0x08016380

0800a67c <pbuf_copy_partial_pbuf>:
 *                 or p_to is not big enough to hold copy_len at offset
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy_partial_pbuf(struct pbuf *p_to, const struct pbuf *p_from, u16_t copy_len, u16_t offset)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b088      	sub	sp, #32
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	4611      	mov	r1, r2
 800a688:	461a      	mov	r2, r3
 800a68a:	460b      	mov	r3, r1
 800a68c:	80fb      	strh	r3, [r7, #6]
 800a68e:	4613      	mov	r3, r2
 800a690:	80bb      	strh	r3, [r7, #4]
  size_t offset_to = offset, offset_from = 0, len_calc;
 800a692:	88bb      	ldrh	r3, [r7, #4]
 800a694:	61fb      	str	r3, [r7, #28]
 800a696:	2300      	movs	r3, #0
 800a698:	61bb      	str	r3, [r7, #24]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf(%p, %p, %"U16_F", %"U16_F")\n",
              (const void *)p_to, (const void *)p_from, copy_len, offset));

  /* is the copy_len in range? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d004      	beq.n	800a6aa <pbuf_copy_partial_pbuf+0x2e>
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	891b      	ldrh	r3, [r3, #8]
 800a6a4:	88fa      	ldrh	r2, [r7, #6]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d905      	bls.n	800a6b6 <pbuf_copy_partial_pbuf+0x3a>
 800a6aa:	4857      	ldr	r0, [pc, #348]	; (800a808 <pbuf_copy_partial_pbuf+0x18c>)
 800a6ac:	f7f5 fdf1 	bl	8000292 <Console_DEBUG>
 800a6b0:	f06f 030f 	mvn.w	r3, #15
 800a6b4:	e0a3      	b.n	800a7fe <pbuf_copy_partial_pbuf+0x182>
             (p_from->tot_len >= copy_len)), return ERR_ARG;);
  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: target not big enough", ((p_to != NULL) &&
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d007      	beq.n	800a6cc <pbuf_copy_partial_pbuf+0x50>
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	891b      	ldrh	r3, [r3, #8]
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	88ba      	ldrh	r2, [r7, #4]
 800a6c4:	88fb      	ldrh	r3, [r7, #6]
 800a6c6:	4413      	add	r3, r2
 800a6c8:	4299      	cmp	r1, r3
 800a6ca:	da05      	bge.n	800a6d8 <pbuf_copy_partial_pbuf+0x5c>
 800a6cc:	484f      	ldr	r0, [pc, #316]	; (800a80c <pbuf_copy_partial_pbuf+0x190>)
 800a6ce:	f7f5 fde0 	bl	8000292 <Console_DEBUG>
 800a6d2:	f06f 030f 	mvn.w	r3, #15
 800a6d6:	e092      	b.n	800a7fe <pbuf_copy_partial_pbuf+0x182>
             (p_to->tot_len >= (offset + copy_len))), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	895b      	ldrh	r3, [r3, #10]
 800a6dc:	461a      	mov	r2, r3
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	1ad2      	subs	r2, r2, r3
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	895b      	ldrh	r3, [r3, #10]
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	1acb      	subs	r3, r1, r3
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d306      	bcc.n	800a6fe <pbuf_copy_partial_pbuf+0x82>
      /* complete current p_from fits into current p_to */
      len_calc = p_from->len - offset_from;
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	895b      	ldrh	r3, [r3, #10]
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	1ad3      	subs	r3, r2, r3
 800a6fa:	617b      	str	r3, [r7, #20]
 800a6fc:	e005      	b.n	800a70a <pbuf_copy_partial_pbuf+0x8e>
    } else {
      /* current p_from does not fit into current p_to */
      len_calc = p_to->len - offset_to;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	895b      	ldrh	r3, [r3, #10]
 800a702:	461a      	mov	r2, r3
 800a704:	69fb      	ldr	r3, [r7, #28]
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	617b      	str	r3, [r7, #20]
    }
    len = (u16_t)LWIP_MIN(copy_len, len_calc);
 800a70a:	88fb      	ldrh	r3, [r7, #6]
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d802      	bhi.n	800a718 <pbuf_copy_partial_pbuf+0x9c>
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	b29b      	uxth	r3, r3
 800a716:	e000      	b.n	800a71a <pbuf_copy_partial_pbuf+0x9e>
 800a718:	88fb      	ldrh	r3, [r7, #6]
 800a71a:	827b      	strh	r3, [r7, #18]
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	685a      	ldr	r2, [r3, #4]
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	18d0      	adds	r0, r2, r3
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	685a      	ldr	r2, [r3, #4]
 800a728:	69bb      	ldr	r3, [r7, #24]
 800a72a:	4413      	add	r3, r2
 800a72c:	8a7a      	ldrh	r2, [r7, #18]
 800a72e:	4619      	mov	r1, r3
 800a730:	f008 ff06 	bl	8013540 <memcpy>
    offset_to += len;
 800a734:	8a7b      	ldrh	r3, [r7, #18]
 800a736:	69fa      	ldr	r2, [r7, #28]
 800a738:	4413      	add	r3, r2
 800a73a:	61fb      	str	r3, [r7, #28]
    offset_from += len;
 800a73c:	8a7b      	ldrh	r3, [r7, #18]
 800a73e:	69ba      	ldr	r2, [r7, #24]
 800a740:	4413      	add	r3, r2
 800a742:	61bb      	str	r3, [r7, #24]
    copy_len -= len;
 800a744:	88fa      	ldrh	r2, [r7, #6]
 800a746:	8a7b      	ldrh	r3, [r7, #18]
 800a748:	1ad3      	subs	r3, r2, r3
 800a74a:	80fb      	strh	r3, [r7, #6]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	895b      	ldrh	r3, [r3, #10]
 800a750:	461a      	mov	r2, r3
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	4293      	cmp	r3, r2
 800a756:	d310      	bcc.n	800a77a <pbuf_copy_partial_pbuf+0xfe>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a758:	2300      	movs	r3, #0
 800a75a:	61bb      	str	r3, [r7, #24]
      p_from = p_from->next;
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	60bb      	str	r3, [r7, #8]
      LWIP_ERROR("p_from != NULL", (p_from != NULL) || (copy_len == 0), return ERR_ARG;);
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d108      	bne.n	800a77a <pbuf_copy_partial_pbuf+0xfe>
 800a768:	88fb      	ldrh	r3, [r7, #6]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d005      	beq.n	800a77a <pbuf_copy_partial_pbuf+0xfe>
 800a76e:	4828      	ldr	r0, [pc, #160]	; (800a810 <pbuf_copy_partial_pbuf+0x194>)
 800a770:	f7f5 fd8f 	bl	8000292 <Console_DEBUG>
 800a774:	f06f 030f 	mvn.w	r3, #15
 800a778:	e041      	b.n	800a7fe <pbuf_copy_partial_pbuf+0x182>
    }
    if (offset_to == p_to->len) {
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	895b      	ldrh	r3, [r3, #10]
 800a77e:	461a      	mov	r2, r3
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	4293      	cmp	r3, r2
 800a784:	d110      	bne.n	800a7a8 <pbuf_copy_partial_pbuf+0x12c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a786:	2300      	movs	r3, #0
 800a788:	61fb      	str	r3, [r7, #28]
      p_to = p_to->next;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	60fb      	str	r3, [r7, #12]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (copy_len == 0), return ERR_ARG;);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d108      	bne.n	800a7a8 <pbuf_copy_partial_pbuf+0x12c>
 800a796:	88fb      	ldrh	r3, [r7, #6]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d005      	beq.n	800a7a8 <pbuf_copy_partial_pbuf+0x12c>
 800a79c:	481d      	ldr	r0, [pc, #116]	; (800a814 <pbuf_copy_partial_pbuf+0x198>)
 800a79e:	f7f5 fd78 	bl	8000292 <Console_DEBUG>
 800a7a2:	f06f 030f 	mvn.w	r3, #15
 800a7a6:	e02a      	b.n	800a7fe <pbuf_copy_partial_pbuf+0x182>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00f      	beq.n	800a7ce <pbuf_copy_partial_pbuf+0x152>
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	895a      	ldrh	r2, [r3, #10]
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	891b      	ldrh	r3, [r3, #8]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d109      	bne.n	800a7ce <pbuf_copy_partial_pbuf+0x152>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d005      	beq.n	800a7ce <pbuf_copy_partial_pbuf+0x152>
 800a7c2:	4815      	ldr	r0, [pc, #84]	; (800a818 <pbuf_copy_partial_pbuf+0x19c>)
 800a7c4:	f7f5 fd65 	bl	8000292 <Console_DEBUG>
 800a7c8:	f06f 0305 	mvn.w	r3, #5
 800a7cc:	e017      	b.n	800a7fe <pbuf_copy_partial_pbuf+0x182>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d00f      	beq.n	800a7f4 <pbuf_copy_partial_pbuf+0x178>
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	895a      	ldrh	r2, [r3, #10]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	891b      	ldrh	r3, [r3, #8]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d109      	bne.n	800a7f4 <pbuf_copy_partial_pbuf+0x178>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d005      	beq.n	800a7f4 <pbuf_copy_partial_pbuf+0x178>
 800a7e8:	480b      	ldr	r0, [pc, #44]	; (800a818 <pbuf_copy_partial_pbuf+0x19c>)
 800a7ea:	f7f5 fd52 	bl	8000292 <Console_DEBUG>
 800a7ee:	f06f 0305 	mvn.w	r3, #5
 800a7f2:	e004      	b.n	800a7fe <pbuf_copy_partial_pbuf+0x182>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (copy_len);
 800a7f4:	88fb      	ldrh	r3, [r7, #6]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f47f af6e 	bne.w	800a6d8 <pbuf_copy_partial_pbuf+0x5c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf: copy complete.\n"));
  return ERR_OK;
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3720      	adds	r7, #32
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	0801639c 	.word	0x0801639c
 800a80c:	080163d0 	.word	0x080163d0
 800a810:	08016400 	.word	0x08016400
 800a814:	08016410 	.word	0x08016410
 800a818:	08016420 	.word	0x08016420

0800a81c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b088      	sub	sp, #32
 800a820:	af00      	add	r7, sp, #0
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	60b9      	str	r1, [r7, #8]
 800a826:	4611      	mov	r1, r2
 800a828:	461a      	mov	r2, r3
 800a82a:	460b      	mov	r3, r1
 800a82c:	80fb      	strh	r3, [r7, #6]
 800a82e:	4613      	mov	r3, r2
 800a830:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a832:	2300      	movs	r3, #0
 800a834:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a836:	2300      	movs	r3, #0
 800a838:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d104      	bne.n	800a84a <pbuf_copy_partial+0x2e>
 800a840:	4827      	ldr	r0, [pc, #156]	; (800a8e0 <pbuf_copy_partial+0xc4>)
 800a842:	f7f5 fd26 	bl	8000292 <Console_DEBUG>
 800a846:	2300      	movs	r3, #0
 800a848:	e046      	b.n	800a8d8 <pbuf_copy_partial+0xbc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d104      	bne.n	800a85a <pbuf_copy_partial+0x3e>
 800a850:	4824      	ldr	r0, [pc, #144]	; (800a8e4 <pbuf_copy_partial+0xc8>)
 800a852:	f7f5 fd1e 	bl	8000292 <Console_DEBUG>
 800a856:	2300      	movs	r3, #0
 800a858:	e03e      	b.n	800a8d8 <pbuf_copy_partial+0xbc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	61fb      	str	r3, [r7, #28]
 800a85e:	e034      	b.n	800a8ca <pbuf_copy_partial+0xae>
    if ((offset != 0) && (offset >= p->len)) {
 800a860:	88bb      	ldrh	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00a      	beq.n	800a87c <pbuf_copy_partial+0x60>
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	895b      	ldrh	r3, [r3, #10]
 800a86a:	88ba      	ldrh	r2, [r7, #4]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d305      	bcc.n	800a87c <pbuf_copy_partial+0x60>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	895b      	ldrh	r3, [r3, #10]
 800a874:	88ba      	ldrh	r2, [r7, #4]
 800a876:	1ad3      	subs	r3, r2, r3
 800a878:	80bb      	strh	r3, [r7, #4]
 800a87a:	e023      	b.n	800a8c4 <pbuf_copy_partial+0xa8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	895a      	ldrh	r2, [r3, #10]
 800a880:	88bb      	ldrh	r3, [r7, #4]
 800a882:	1ad3      	subs	r3, r2, r3
 800a884:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a886:	8b3a      	ldrh	r2, [r7, #24]
 800a888:	88fb      	ldrh	r3, [r7, #6]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d901      	bls.n	800a892 <pbuf_copy_partial+0x76>
        buf_copy_len = len;
 800a88e:	88fb      	ldrh	r3, [r7, #6]
 800a890:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a892:	8b7b      	ldrh	r3, [r7, #26]
 800a894:	68ba      	ldr	r2, [r7, #8]
 800a896:	18d0      	adds	r0, r2, r3
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	685a      	ldr	r2, [r3, #4]
 800a89c:	88bb      	ldrh	r3, [r7, #4]
 800a89e:	4413      	add	r3, r2
 800a8a0:	8b3a      	ldrh	r2, [r7, #24]
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	f008 fe4c 	bl	8013540 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a8a8:	8afa      	ldrh	r2, [r7, #22]
 800a8aa:	8b3b      	ldrh	r3, [r7, #24]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a8b0:	8b7a      	ldrh	r2, [r7, #26]
 800a8b2:	8b3b      	ldrh	r3, [r7, #24]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a8b8:	88fa      	ldrh	r2, [r7, #6]
 800a8ba:	8b3b      	ldrh	r3, [r7, #24]
 800a8bc:	1ad3      	subs	r3, r2, r3
 800a8be:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	61fb      	str	r3, [r7, #28]
 800a8ca:	88fb      	ldrh	r3, [r7, #6]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d002      	beq.n	800a8d6 <pbuf_copy_partial+0xba>
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d1c4      	bne.n	800a860 <pbuf_copy_partial+0x44>
    }
  }
  return copied_total;
 800a8d6:	8afb      	ldrh	r3, [r7, #22]
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3720      	adds	r7, #32
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	08016458 	.word	0x08016458
 800a8e4:	08016478 	.word	0x08016478

0800a8e8 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b087      	sub	sp, #28
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	607a      	str	r2, [r7, #4]
 800a8f4:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800a8f6:	897b      	ldrh	r3, [r7, #10]
 800a8f8:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800a8fe:	e007      	b.n	800a910 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	895b      	ldrh	r3, [r3, #10]
 800a904:	8afa      	ldrh	r2, [r7, #22]
 800a906:	1ad3      	subs	r3, r2, r3
 800a908:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d004      	beq.n	800a920 <pbuf_skip_const+0x38>
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	895b      	ldrh	r3, [r3, #10]
 800a91a:	8afa      	ldrh	r2, [r7, #22]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d2ef      	bcs.n	800a900 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d002      	beq.n	800a92c <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	8afa      	ldrh	r2, [r7, #22]
 800a92a:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800a92c:	693b      	ldr	r3, [r7, #16]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	371c      	adds	r7, #28
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr

0800a93a <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b084      	sub	sp, #16
 800a93e:	af00      	add	r7, sp, #0
 800a940:	4603      	mov	r3, r0
 800a942:	603a      	str	r2, [r7, #0]
 800a944:	71fb      	strb	r3, [r7, #7]
 800a946:	460b      	mov	r3, r1
 800a948:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	8919      	ldrh	r1, [r3, #8]
 800a94e:	88ba      	ldrh	r2, [r7, #4]
 800a950:	79fb      	ldrb	r3, [r7, #7]
 800a952:	4618      	mov	r0, r3
 800a954:	f7ff fb80 	bl	800a058 <pbuf_alloc>
 800a958:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d101      	bne.n	800a964 <pbuf_clone+0x2a>
    return NULL;
 800a960:	2300      	movs	r3, #0
 800a962:	e005      	b.n	800a970 <pbuf_clone+0x36>
  }
  err = pbuf_copy(q, p);
 800a964:	6839      	ldr	r1, [r7, #0]
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f7ff fe6c 	bl	800a644 <pbuf_copy>
 800a96c:	60b8      	str	r0, [r7, #8]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
  return q;
 800a96e:	68fb      	ldr	r3, [r7, #12]
}
 800a970:	4618      	mov	r0, r3
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	460b      	mov	r3, r1
 800a982:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800a984:	887b      	ldrh	r3, [r7, #2]
 800a986:	4619      	mov	r1, r3
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 f80c 	bl	800a9a6 <pbuf_try_get_at>
 800a98e:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2b00      	cmp	r3, #0
 800a994:	db02      	blt.n	800a99c <pbuf_get_at+0x24>
    return (u8_t)ret;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	e000      	b.n	800a99e <pbuf_get_at+0x26>
  }
  return 0;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b084      	sub	sp, #16
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800a9b2:	f107 020a 	add.w	r2, r7, #10
 800a9b6:	887b      	ldrh	r3, [r7, #2]
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f7ff ff94 	bl	800a8e8 <pbuf_skip_const>
 800a9c0:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d00a      	beq.n	800a9de <pbuf_try_get_at+0x38>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	895a      	ldrh	r2, [r3, #10]
 800a9cc:	897b      	ldrh	r3, [r7, #10]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d905      	bls.n	800a9de <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	897a      	ldrh	r2, [r7, #10]
 800a9d8:	4413      	add	r3, r2
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	e001      	b.n	800a9e2 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800a9de:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
	...

0800a9ec <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
 800a9f0:	4b04      	ldr	r3, [pc, #16]	; (800aa04 <stats_init+0x18>)
 800a9f2:	4a05      	ldr	r2, [pc, #20]	; (800aa08 <stats_init+0x1c>)
 800a9f4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 800a9f8:	bf00      	nop
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	200080c8 	.word	0x200080c8
 800aa08:	0801653c 	.word	0x0801653c

0800aa0c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RAND */
}
 800aa10:	bf00      	nop
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr

0800aa1a <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b082      	sub	sp, #8
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800aa22:	6879      	ldr	r1, [r7, #4]
 800aa24:	2001      	movs	r0, #1
 800aa26:	f7fe ffa7 	bl	8009978 <memp_free>
}
 800aa2a:	bf00      	nop
 800aa2c:	3708      	adds	r7, #8
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b082      	sub	sp, #8
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800aa3a:	6879      	ldr	r1, [r7, #4]
 800aa3c:	2002      	movs	r0, #2
 800aa3e:	f7fe ff9b 	bl	8009978 <memp_free>
}
 800aa42:	bf00      	nop
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
	...

0800aa4c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800aa50:	f000 ff16 	bl	800b880 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800aa54:	4b07      	ldr	r3, [pc, #28]	; (800aa74 <tcp_tmr+0x28>)
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	b2da      	uxtb	r2, r3
 800aa5c:	4b05      	ldr	r3, [pc, #20]	; (800aa74 <tcp_tmr+0x28>)
 800aa5e:	701a      	strb	r2, [r3, #0]
 800aa60:	4b04      	ldr	r3, [pc, #16]	; (800aa74 <tcp_tmr+0x28>)
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	f003 0301 	and.w	r3, r3, #1
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d001      	beq.n	800aa70 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800aa6c:	f000 fc76 	bl	800b35c <tcp_slowtmr>
  }
}
 800aa70:	bf00      	nop
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	200081d9 	.word	0x200081d9

0800aa78 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b085      	sub	sp, #20
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	60fb      	str	r3, [r7, #12]
 800aa86:	e00a      	b.n	800aa9e <tcp_remove_listener+0x26>
    if (pcb->listener == lpcb) {
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa8c:	683a      	ldr	r2, [r7, #0]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d102      	bne.n	800aa98 <tcp_remove_listener+0x20>
      pcb->listener = NULL;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	679a      	str	r2, [r3, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	60fb      	str	r3, [r7, #12]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1f1      	bne.n	800aa88 <tcp_remove_listener+0x10>
    }
  }
}
 800aaa4:	bf00      	nop
 800aaa6:	bf00      	nop
 800aaa8:	3714      	adds	r7, #20
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr
	...

0800aab4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800aabc:	2301      	movs	r3, #1
 800aabe:	60fb      	str	r3, [r7, #12]
 800aac0:	e00b      	b.n	800aada <tcp_listen_closed+0x26>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800aac2:	4a0a      	ldr	r2, [pc, #40]	; (800aaec <tcp_listen_closed+0x38>)
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	6879      	ldr	r1, [r7, #4]
 800aace:	4618      	mov	r0, r3
 800aad0:	f7ff ffd2 	bl	800aa78 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	3301      	adds	r3, #1
 800aad8:	60fb      	str	r3, [r7, #12]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2b03      	cmp	r3, #3
 800aade:	d9f0      	bls.n	800aac2 <tcp_listen_closed+0xe>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800aae0:	bf00      	nop
 800aae2:	bf00      	nop
 800aae4:	3710      	adds	r7, #16
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop
 800aaec:	08016c70 	.word	0x08016c70

0800aaf0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800aaf0:	b5b0      	push	{r4, r5, r7, lr}
 800aaf2:	b088      	sub	sp, #32
 800aaf4:	af04      	add	r7, sp, #16
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800aafc:	78fb      	ldrb	r3, [r7, #3]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d05a      	beq.n	800abb8 <tcp_close_shutdown+0xc8>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	7d1b      	ldrb	r3, [r3, #20]
 800ab06:	2b04      	cmp	r3, #4
 800ab08:	d003      	beq.n	800ab12 <tcp_close_shutdown+0x22>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	7d1b      	ldrb	r3, [r3, #20]
 800ab0e:	2b07      	cmp	r3, #7
 800ab10:	d152      	bne.n	800abb8 <tcp_close_shutdown+0xc8>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d105      	bne.n	800ab26 <tcp_close_shutdown+0x36>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab1e:	f641 4284 	movw	r2, #7300	; 0x1c84
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d048      	beq.n	800abb8 <tcp_close_shutdown+0xc8>
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ab2e:	687d      	ldr	r5, [r7, #4]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	3304      	adds	r3, #4
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	8ad2      	ldrh	r2, [r2, #22]
 800ab38:	6879      	ldr	r1, [r7, #4]
 800ab3a:	8b09      	ldrh	r1, [r1, #24]
 800ab3c:	9102      	str	r1, [sp, #8]
 800ab3e:	9201      	str	r2, [sp, #4]
 800ab40:	9300      	str	r3, [sp, #0]
 800ab42:	462b      	mov	r3, r5
 800ab44:	4622      	mov	r2, r4
 800ab46:	4601      	mov	r1, r0
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f004 fbd5 	bl	800f2f8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f001 f9bc 	bl	800becc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ab54:	4b43      	ldr	r3, [pc, #268]	; (800ac64 <tcp_close_shutdown+0x174>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d105      	bne.n	800ab6a <tcp_close_shutdown+0x7a>
 800ab5e:	4b41      	ldr	r3, [pc, #260]	; (800ac64 <tcp_close_shutdown+0x174>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	68db      	ldr	r3, [r3, #12]
 800ab64:	4a3f      	ldr	r2, [pc, #252]	; (800ac64 <tcp_close_shutdown+0x174>)
 800ab66:	6013      	str	r3, [r2, #0]
 800ab68:	e013      	b.n	800ab92 <tcp_close_shutdown+0xa2>
 800ab6a:	4b3e      	ldr	r3, [pc, #248]	; (800ac64 <tcp_close_shutdown+0x174>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	60fb      	str	r3, [r7, #12]
 800ab70:	e00c      	b.n	800ab8c <tcp_close_shutdown+0x9c>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d104      	bne.n	800ab86 <tcp_close_shutdown+0x96>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	68da      	ldr	r2, [r3, #12]
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	60da      	str	r2, [r3, #12]
 800ab84:	e005      	b.n	800ab92 <tcp_close_shutdown+0xa2>
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	60fb      	str	r3, [r7, #12]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d1ef      	bne.n	800ab72 <tcp_close_shutdown+0x82>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2200      	movs	r2, #0
 800ab96:	60da      	str	r2, [r3, #12]
 800ab98:	4b33      	ldr	r3, [pc, #204]	; (800ac68 <tcp_close_shutdown+0x178>)
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ab9e:	4b33      	ldr	r3, [pc, #204]	; (800ac6c <tcp_close_shutdown+0x17c>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d102      	bne.n	800abae <tcp_close_shutdown+0xbe>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800aba8:	f003 f89c 	bl	800dce4 <tcp_trigger_input_pcb_close>
 800abac:	e002      	b.n	800abb4 <tcp_close_shutdown+0xc4>
      } else {
        tcp_free(pcb);
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f7ff ff33 	bl	800aa1a <tcp_free>
      }
      return ERR_OK;
 800abb4:	2300      	movs	r3, #0
 800abb6:	e050      	b.n	800ac5a <tcp_close_shutdown+0x16a>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	7d1b      	ldrb	r3, [r3, #20]
 800abbc:	2b02      	cmp	r3, #2
 800abbe:	d03b      	beq.n	800ac38 <tcp_close_shutdown+0x148>
 800abc0:	2b02      	cmp	r3, #2
 800abc2:	dc44      	bgt.n	800ac4e <tcp_close_shutdown+0x15e>
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d002      	beq.n	800abce <tcp_close_shutdown+0xde>
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d02a      	beq.n	800ac22 <tcp_close_shutdown+0x132>
 800abcc:	e03f      	b.n	800ac4e <tcp_close_shutdown+0x15e>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	8adb      	ldrh	r3, [r3, #22]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d021      	beq.n	800ac1a <tcp_close_shutdown+0x12a>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800abd6:	4b26      	ldr	r3, [pc, #152]	; (800ac70 <tcp_close_shutdown+0x180>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d105      	bne.n	800abec <tcp_close_shutdown+0xfc>
 800abe0:	4b23      	ldr	r3, [pc, #140]	; (800ac70 <tcp_close_shutdown+0x180>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	4a22      	ldr	r2, [pc, #136]	; (800ac70 <tcp_close_shutdown+0x180>)
 800abe8:	6013      	str	r3, [r2, #0]
 800abea:	e013      	b.n	800ac14 <tcp_close_shutdown+0x124>
 800abec:	4b20      	ldr	r3, [pc, #128]	; (800ac70 <tcp_close_shutdown+0x180>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	60bb      	str	r3, [r7, #8]
 800abf2:	e00c      	b.n	800ac0e <tcp_close_shutdown+0x11e>
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d104      	bne.n	800ac08 <tcp_close_shutdown+0x118>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	68da      	ldr	r2, [r3, #12]
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	60da      	str	r2, [r3, #12]
 800ac06:	e005      	b.n	800ac14 <tcp_close_shutdown+0x124>
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	68db      	ldr	r3, [r3, #12]
 800ac0c:	60bb      	str	r3, [r7, #8]
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d1ef      	bne.n	800abf4 <tcp_close_shutdown+0x104>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f7ff fefd 	bl	800aa1a <tcp_free>
      break;
 800ac20:	e01a      	b.n	800ac58 <tcp_close_shutdown+0x168>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f7ff ff46 	bl	800aab4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ac28:	6879      	ldr	r1, [r7, #4]
 800ac2a:	4812      	ldr	r0, [pc, #72]	; (800ac74 <tcp_close_shutdown+0x184>)
 800ac2c:	f001 f990 	bl	800bf50 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f7ff fefe 	bl	800aa32 <tcp_free_listen>
      break;
 800ac36:	e00f      	b.n	800ac58 <tcp_close_shutdown+0x168>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ac38:	6879      	ldr	r1, [r7, #4]
 800ac3a:	480a      	ldr	r0, [pc, #40]	; (800ac64 <tcp_close_shutdown+0x174>)
 800ac3c:	f001 f988 	bl	800bf50 <tcp_pcb_remove>
 800ac40:	4b09      	ldr	r3, [pc, #36]	; (800ac68 <tcp_close_shutdown+0x178>)
 800ac42:	2201      	movs	r2, #1
 800ac44:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f7ff fee7 	bl	800aa1a <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ac4c:	e004      	b.n	800ac58 <tcp_close_shutdown+0x168>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 f812 	bl	800ac78 <tcp_close_shutdown_fin>
 800ac54:	4603      	mov	r3, r0
 800ac56:	e000      	b.n	800ac5a <tcp_close_shutdown+0x16a>
  }
  return ERR_OK;
 800ac58:	2300      	movs	r3, #0
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3710      	adds	r7, #16
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bdb0      	pop	{r4, r5, r7, pc}
 800ac62:	bf00      	nop
 800ac64:	200081d0 	.word	0x200081d0
 800ac68:	200081d8 	.word	0x200081d8
 800ac6c:	20008214 	.word	0x20008214
 800ac70:	200081c8 	.word	0x200081c8
 800ac74:	200081cc 	.word	0x200081cc

0800ac78 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);

  switch (pcb->state) {
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	7d1b      	ldrb	r3, [r3, #20]
 800ac84:	2b07      	cmp	r3, #7
 800ac86:	d01c      	beq.n	800acc2 <tcp_close_shutdown_fin+0x4a>
 800ac88:	2b07      	cmp	r3, #7
 800ac8a:	dc25      	bgt.n	800acd8 <tcp_close_shutdown_fin+0x60>
 800ac8c:	2b03      	cmp	r3, #3
 800ac8e:	d002      	beq.n	800ac96 <tcp_close_shutdown_fin+0x1e>
 800ac90:	2b04      	cmp	r3, #4
 800ac92:	d00b      	beq.n	800acac <tcp_close_shutdown_fin+0x34>
 800ac94:	e020      	b.n	800acd8 <tcp_close_shutdown_fin+0x60>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f003 fd7c 	bl	800e794 <tcp_send_fin>
 800ac9c:	60f8      	str	r0, [r7, #12]
      if (err == ERR_OK) {
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d11b      	bne.n	800acdc <tcp_close_shutdown_fin+0x64>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2205      	movs	r2, #5
 800aca8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800acaa:	e017      	b.n	800acdc <tcp_close_shutdown_fin+0x64>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f003 fd71 	bl	800e794 <tcp_send_fin>
 800acb2:	60f8      	str	r0, [r7, #12]
      if (err == ERR_OK) {
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d112      	bne.n	800ace0 <tcp_close_shutdown_fin+0x68>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2205      	movs	r2, #5
 800acbe:	751a      	strb	r2, [r3, #20]
      }
      break;
 800acc0:	e00e      	b.n	800ace0 <tcp_close_shutdown_fin+0x68>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f003 fd66 	bl	800e794 <tcp_send_fin>
 800acc8:	60f8      	str	r0, [r7, #12]
      if (err == ERR_OK) {
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d109      	bne.n	800ace4 <tcp_close_shutdown_fin+0x6c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2209      	movs	r2, #9
 800acd4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800acd6:	e005      	b.n	800ace4 <tcp_close_shutdown_fin+0x6c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800acd8:	2300      	movs	r3, #0
 800acda:	e019      	b.n	800ad10 <tcp_close_shutdown_fin+0x98>
      break;
 800acdc:	bf00      	nop
 800acde:	e002      	b.n	800ace6 <tcp_close_shutdown_fin+0x6e>
      break;
 800ace0:	bf00      	nop
 800ace2:	e000      	b.n	800ace6 <tcp_close_shutdown_fin+0x6e>
      break;
 800ace4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d103      	bne.n	800acf4 <tcp_close_shutdown_fin+0x7c>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f003 fe39 	bl	800e964 <tcp_output>
 800acf2:	e00c      	b.n	800ad0e <tcp_close_shutdown_fin+0x96>
  } else if (err == ERR_MEM) {
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acfa:	d108      	bne.n	800ad0e <tcp_close_shutdown_fin+0x96>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	8b5b      	ldrh	r3, [r3, #26]
 800ad00:	f043 0308 	orr.w	r3, r3, #8
 800ad04:	b29a      	uxth	r2, r3
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	e000      	b.n	800ad10 <tcp_close_shutdown_fin+0x98>
  }
  return err;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d105      	bne.n	800ad32 <tcp_close+0x1a>
 800ad26:	480d      	ldr	r0, [pc, #52]	; (800ad5c <tcp_close+0x44>)
 800ad28:	f7f5 fab3 	bl	8000292 <Console_DEBUG>
 800ad2c:	f06f 030f 	mvn.w	r3, #15
 800ad30:	e00f      	b.n	800ad52 <tcp_close+0x3a>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	7d1b      	ldrb	r3, [r3, #20]
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d006      	beq.n	800ad48 <tcp_close+0x30>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	8b5b      	ldrh	r3, [r3, #26]
 800ad3e:	f043 0310 	orr.w	r3, r3, #16
 800ad42:	b29a      	uxth	r2, r3
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ad48:	2101      	movs	r1, #1
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f7ff fed0 	bl	800aaf0 <tcp_close_shutdown>
 800ad50:	4603      	mov	r3, r0
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3708      	adds	r7, #8
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	080165b8 	.word	0x080165b8

0800ad60 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b08e      	sub	sp, #56	; 0x38
 800ad64:	af04      	add	r7, sp, #16
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d103      	bne.n	800ad78 <tcp_abandon+0x18>
 800ad70:	4846      	ldr	r0, [pc, #280]	; (800ae8c <tcp_abandon+0x12c>)
 800ad72:	f7f5 fa8e 	bl	8000292 <Console_DEBUG>
 800ad76:	e085      	b.n	800ae84 <tcp_abandon+0x124>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	7d1b      	ldrb	r3, [r3, #20]
 800ad7c:	2b0a      	cmp	r3, #10
 800ad7e:	d107      	bne.n	800ad90 <tcp_abandon+0x30>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ad80:	6879      	ldr	r1, [r7, #4]
 800ad82:	4843      	ldr	r0, [pc, #268]	; (800ae90 <tcp_abandon+0x130>)
 800ad84:	f001 f8e4 	bl	800bf50 <tcp_pcb_remove>
    tcp_free(pcb);
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f7ff fe46 	bl	800aa1a <tcp_free>
 800ad8e:	e079      	b.n	800ae84 <tcp_abandon+0x124>
  } else {
    int send_rst = 0;
 800ad90:	2300      	movs	r3, #0
 800ad92:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800ad94:	2300      	movs	r3, #0
 800ad96:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad9c:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada2:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adaa:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	691b      	ldr	r3, [r3, #16]
 800adb0:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	7d1b      	ldrb	r3, [r3, #20]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d126      	bne.n	800ae08 <tcp_abandon+0xa8>
      if (pcb->local_port != 0) {
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	8adb      	ldrh	r3, [r3, #22]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d02e      	beq.n	800ae20 <tcp_abandon+0xc0>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800adc2:	4b34      	ldr	r3, [pc, #208]	; (800ae94 <tcp_abandon+0x134>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	429a      	cmp	r2, r3
 800adca:	d105      	bne.n	800add8 <tcp_abandon+0x78>
 800adcc:	4b31      	ldr	r3, [pc, #196]	; (800ae94 <tcp_abandon+0x134>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	4a30      	ldr	r2, [pc, #192]	; (800ae94 <tcp_abandon+0x134>)
 800add4:	6013      	str	r3, [r2, #0]
 800add6:	e013      	b.n	800ae00 <tcp_abandon+0xa0>
 800add8:	4b2e      	ldr	r3, [pc, #184]	; (800ae94 <tcp_abandon+0x134>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	61fb      	str	r3, [r7, #28]
 800adde:	e00c      	b.n	800adfa <tcp_abandon+0x9a>
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d104      	bne.n	800adf4 <tcp_abandon+0x94>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	68da      	ldr	r2, [r3, #12]
 800adee:	69fb      	ldr	r3, [r7, #28]
 800adf0:	60da      	str	r2, [r3, #12]
 800adf2:	e005      	b.n	800ae00 <tcp_abandon+0xa0>
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	61fb      	str	r3, [r7, #28]
 800adfa:	69fb      	ldr	r3, [r7, #28]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d1ef      	bne.n	800ade0 <tcp_abandon+0x80>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	60da      	str	r2, [r3, #12]
 800ae06:	e00b      	b.n	800ae20 <tcp_abandon+0xc0>
      }
    } else {
      send_rst = reset;
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	8adb      	ldrh	r3, [r3, #22]
 800ae10:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ae12:	6879      	ldr	r1, [r7, #4]
 800ae14:	4820      	ldr	r0, [pc, #128]	; (800ae98 <tcp_abandon+0x138>)
 800ae16:	f001 f89b 	bl	800bf50 <tcp_pcb_remove>
 800ae1a:	4b20      	ldr	r3, [pc, #128]	; (800ae9c <tcp_abandon+0x13c>)
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d004      	beq.n	800ae32 <tcp_abandon+0xd2>
      tcp_segs_free(pcb->unacked);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f000 fdfb 	bl	800ba28 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d004      	beq.n	800ae44 <tcp_abandon+0xe4>
      tcp_segs_free(pcb->unsent);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 fdf2 	bl	800ba28 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
      tcp_segs_free(pcb->ooseq);
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ae44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d00e      	beq.n	800ae68 <tcp_abandon+0x108>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ae4a:	6879      	ldr	r1, [r7, #4]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	3304      	adds	r3, #4
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	8b12      	ldrh	r2, [r2, #24]
 800ae54:	9202      	str	r2, [sp, #8]
 800ae56:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ae58:	9201      	str	r2, [sp, #4]
 800ae5a:	9300      	str	r3, [sp, #0]
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	697a      	ldr	r2, [r7, #20]
 800ae60:	69b9      	ldr	r1, [r7, #24]
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f004 fa48 	bl	800f2f8 <tcp_rst>
    }
    last_state = pcb->state;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	7d1b      	ldrb	r3, [r3, #20]
 800ae6c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7ff fdd3 	bl	800aa1a <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d004      	beq.n	800ae84 <tcp_abandon+0x124>
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	f06f 010c 	mvn.w	r1, #12
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	4798      	blx	r3
  }
}
 800ae84:	3728      	adds	r7, #40	; 0x28
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	080165ec 	.word	0x080165ec
 800ae90:	200081d4 	.word	0x200081d4
 800ae94:	200081c8 	.word	0x200081c8
 800ae98:	200081d0 	.word	0x200081d0
 800ae9c:	200081d8 	.word	0x200081d8

0800aea0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800aea8:	2101      	movs	r1, #1
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f7ff ff58 	bl	800ad60 <tcp_abandon>
}
 800aeb0:	bf00      	nop
 800aeb2:	3708      	adds	r7, #8
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b088      	sub	sp, #32
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	4613      	mov	r3, r2
 800aec4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800aec6:	2304      	movs	r3, #4
 800aec8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d101      	bne.n	800aed4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800aed0:	4b3a      	ldr	r3, [pc, #232]	; (800afbc <tcp_bind+0x104>)
 800aed2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d105      	bne.n	800aee6 <tcp_bind+0x2e>
 800aeda:	4839      	ldr	r0, [pc, #228]	; (800afc0 <tcp_bind+0x108>)
 800aedc:	f7f5 f9d9 	bl	8000292 <Console_DEBUG>
 800aee0:	f06f 030f 	mvn.w	r3, #15
 800aee4:	e066      	b.n	800afb4 <tcp_bind+0xfc>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	7d1b      	ldrb	r3, [r3, #20]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d005      	beq.n	800aefa <tcp_bind+0x42>
 800aeee:	4835      	ldr	r0, [pc, #212]	; (800afc4 <tcp_bind+0x10c>)
 800aef0:	f7f5 f9cf 	bl	8000292 <Console_DEBUG>
 800aef4:	f06f 0305 	mvn.w	r3, #5
 800aef8:	e05c      	b.n	800afb4 <tcp_bind+0xfc>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800aefa:	88fb      	ldrh	r3, [r7, #6]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d109      	bne.n	800af14 <tcp_bind+0x5c>
    port = tcp_new_port();
 800af00:	f000 f8e0 	bl	800b0c4 <tcp_new_port>
 800af04:	4603      	mov	r3, r0
 800af06:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800af08:	88fb      	ldrh	r3, [r7, #6]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d135      	bne.n	800af7a <tcp_bind+0xc2>
      return ERR_BUF;
 800af0e:	f06f 0301 	mvn.w	r3, #1
 800af12:	e04f      	b.n	800afb4 <tcp_bind+0xfc>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800af14:	2300      	movs	r3, #0
 800af16:	61fb      	str	r3, [r7, #28]
 800af18:	e02b      	b.n	800af72 <tcp_bind+0xba>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800af1a:	4a2b      	ldr	r2, [pc, #172]	; (800afc8 <tcp_bind+0x110>)
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	61bb      	str	r3, [r7, #24]
 800af26:	e01e      	b.n	800af66 <tcp_bind+0xae>
        if (cpcb->local_port == port) {
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	8adb      	ldrh	r3, [r3, #22]
 800af2c:	88fa      	ldrh	r2, [r7, #6]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d116      	bne.n	800af60 <tcp_bind+0xa8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800af32:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800af34:	2b00      	cmp	r3, #0
 800af36:	d010      	beq.n	800af5a <tcp_bind+0xa2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800af38:	69bb      	ldr	r3, [r7, #24]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d00c      	beq.n	800af5a <tcp_bind+0xa2>
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d009      	beq.n	800af5a <tcp_bind+0xa2>
                 ip_addr_isany(ipaddr) ||
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d005      	beq.n	800af5a <tcp_bind+0xa2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800af56:	429a      	cmp	r2, r3
 800af58:	d102      	bne.n	800af60 <tcp_bind+0xa8>
              return ERR_USE;
 800af5a:	f06f 0307 	mvn.w	r3, #7
 800af5e:	e029      	b.n	800afb4 <tcp_bind+0xfc>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	68db      	ldr	r3, [r3, #12]
 800af64:	61bb      	str	r3, [r7, #24]
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d1dd      	bne.n	800af28 <tcp_bind+0x70>
    for (i = 0; i < max_pcb_list; i++) {
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	3301      	adds	r3, #1
 800af70:	61fb      	str	r3, [r7, #28]
 800af72:	69fa      	ldr	r2, [r7, #28]
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	429a      	cmp	r2, r3
 800af78:	dbcf      	blt.n	800af1a <tcp_bind+0x62>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00c      	beq.n	800af9a <tcp_bind+0xe2>
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d008      	beq.n	800af9a <tcp_bind+0xe2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d002      	beq.n	800af94 <tcp_bind+0xdc>
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	e000      	b.n	800af96 <tcp_bind+0xde>
 800af94:	2300      	movs	r3, #0
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	88fa      	ldrh	r2, [r7, #6]
 800af9e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800afa0:	4b0a      	ldr	r3, [pc, #40]	; (800afcc <tcp_bind+0x114>)
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	60da      	str	r2, [r3, #12]
 800afa8:	4a08      	ldr	r2, [pc, #32]	; (800afcc <tcp_bind+0x114>)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6013      	str	r3, [r2, #0]
 800afae:	f004 fb11 	bl	800f5d4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800afb2:	2300      	movs	r3, #0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3720      	adds	r7, #32
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	08016ca0 	.word	0x08016ca0
 800afc0:	08016608 	.word	0x08016608
 800afc4:	08016620 	.word	0x08016620
 800afc8:	08016c70 	.word	0x08016c70
 800afcc:	200081c8 	.word	0x200081c8

0800afd0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800afe0:	4413      	add	r3, r2
 800afe2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800afec:	f640 6142 	movw	r1, #3650	; 0xe42
 800aff0:	428a      	cmp	r2, r1
 800aff2:	bf28      	it	cs
 800aff4:	460a      	movcs	r2, r1
 800aff6:	b292      	uxth	r2, r2
 800aff8:	4413      	add	r3, r2
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	1ad3      	subs	r3, r2, r3
 800affe:	2b00      	cmp	r3, #0
 800b000:	db08      	blt.n	800b014 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	1ad3      	subs	r3, r2, r3
 800b012:	e015      	b.n	800b040 <tcp_update_rcv_ann_wnd+0x70>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b01c:	1ad3      	subs	r3, r2, r3
 800b01e:	2b00      	cmp	r3, #0
 800b020:	dd03      	ble.n	800b02a <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b028:	e009      	b.n	800b03e <tcp_update_rcv_ann_wnd+0x6e>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b032:	1ad3      	subs	r3, r2, r3
 800b034:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	b29a      	uxth	r2, r3
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b03e:	2300      	movs	r3, #0
  }
}
 800b040:	4618      	mov	r0, r3
 800b042:	3714      	adds	r7, #20
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	460b      	mov	r3, r1
 800b056:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d103      	bne.n	800b066 <tcp_recved+0x1a>
 800b05e:	4818      	ldr	r0, [pc, #96]	; (800b0c0 <tcp_recved+0x74>)
 800b060:	f7f5 f917 	bl	8000292 <Console_DEBUG>
 800b064:	e028      	b.n	800b0b8 <tcp_recved+0x6c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b06a:	887b      	ldrh	r3, [r7, #2]
 800b06c:	4413      	add	r3, r2
 800b06e:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b070:	89fb      	ldrh	r3, [r7, #14]
 800b072:	f641 4284 	movw	r2, #7300	; 0x1c84
 800b076:	4293      	cmp	r3, r2
 800b078:	d804      	bhi.n	800b084 <tcp_recved+0x38>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b07e:	89fa      	ldrh	r2, [r7, #14]
 800b080:	429a      	cmp	r2, r3
 800b082:	d204      	bcs.n	800b08e <tcp_recved+0x42>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f641 4284 	movw	r2, #7300	; 0x1c84
 800b08a:	851a      	strh	r2, [r3, #40]	; 0x28
 800b08c:	e002      	b.n	800b094 <tcp_recved+0x48>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	89fa      	ldrh	r2, [r7, #14]
 800b092:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f7ff ff9b 	bl	800afd0 <tcp_update_rcv_ann_wnd>
 800b09a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	f5b3 6fe4 	cmp.w	r3, #1824	; 0x720
 800b0a2:	d909      	bls.n	800b0b8 <tcp_recved+0x6c>
    tcp_ack_now(pcb);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	8b5b      	ldrh	r3, [r3, #26]
 800b0a8:	f043 0302 	orr.w	r3, r3, #2
 800b0ac:	b29a      	uxth	r2, r3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f003 fc56 	bl	800e964 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	080166b0 	.word	0x080166b0

0800b0c4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800b0ce:	4b1e      	ldr	r3, [pc, #120]	; (800b148 <tcp_new_port+0x84>)
 800b0d0:	881b      	ldrh	r3, [r3, #0]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	b29a      	uxth	r2, r3
 800b0d6:	4b1c      	ldr	r3, [pc, #112]	; (800b148 <tcp_new_port+0x84>)
 800b0d8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800b0da:	4b1b      	ldr	r3, [pc, #108]	; (800b148 <tcp_new_port+0x84>)
 800b0dc:	881b      	ldrh	r3, [r3, #0]
 800b0de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d103      	bne.n	800b0ee <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800b0e6:	4b18      	ldr	r3, [pc, #96]	; (800b148 <tcp_new_port+0x84>)
 800b0e8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b0ec:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	71fb      	strb	r3, [r7, #7]
 800b0f2:	e01e      	b.n	800b132 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b0f4:	79fb      	ldrb	r3, [r7, #7]
 800b0f6:	4a15      	ldr	r2, [pc, #84]	; (800b14c <tcp_new_port+0x88>)
 800b0f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	603b      	str	r3, [r7, #0]
 800b100:	e011      	b.n	800b126 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	8ada      	ldrh	r2, [r3, #22]
 800b106:	4b10      	ldr	r3, [pc, #64]	; (800b148 <tcp_new_port+0x84>)
 800b108:	881b      	ldrh	r3, [r3, #0]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d108      	bne.n	800b120 <tcp_new_port+0x5c>
        n++;
 800b10e:	88bb      	ldrh	r3, [r7, #4]
 800b110:	3301      	adds	r3, #1
 800b112:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800b114:	88bb      	ldrh	r3, [r7, #4]
 800b116:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b11a:	d3d8      	bcc.n	800b0ce <tcp_new_port+0xa>
          return 0;
 800b11c:	2300      	movs	r3, #0
 800b11e:	e00d      	b.n	800b13c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	603b      	str	r3, [r7, #0]
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d1ea      	bne.n	800b102 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b12c:	79fb      	ldrb	r3, [r7, #7]
 800b12e:	3301      	adds	r3, #1
 800b130:	71fb      	strb	r3, [r7, #7]
 800b132:	79fb      	ldrb	r3, [r7, #7]
 800b134:	2b03      	cmp	r3, #3
 800b136:	d9dd      	bls.n	800b0f4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800b138:	4b03      	ldr	r3, [pc, #12]	; (800b148 <tcp_new_port+0x84>)
 800b13a:	881b      	ldrh	r3, [r3, #0]
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	370c      	adds	r7, #12
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr
 800b148:	200000a0 	.word	0x200000a0
 800b14c:	08016c70 	.word	0x08016c70

0800b150 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b08a      	sub	sp, #40	; 0x28
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	603b      	str	r3, [r7, #0]
 800b15c:	4613      	mov	r3, r2
 800b15e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800b160:	2300      	movs	r3, #0
 800b162:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d105      	bne.n	800b176 <tcp_connect+0x26>
 800b16a:	4876      	ldr	r0, [pc, #472]	; (800b344 <tcp_connect+0x1f4>)
 800b16c:	f7f5 f891 	bl	8000292 <Console_DEBUG>
 800b170:	f06f 030f 	mvn.w	r3, #15
 800b174:	e0e1      	b.n	800b33a <tcp_connect+0x1ea>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d105      	bne.n	800b188 <tcp_connect+0x38>
 800b17c:	4872      	ldr	r0, [pc, #456]	; (800b348 <tcp_connect+0x1f8>)
 800b17e:	f7f5 f888 	bl	8000292 <Console_DEBUG>
 800b182:	f06f 030f 	mvn.w	r3, #15
 800b186:	e0d8      	b.n	800b33a <tcp_connect+0x1ea>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	7d1b      	ldrb	r3, [r3, #20]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d005      	beq.n	800b19c <tcp_connect+0x4c>
 800b190:	486e      	ldr	r0, [pc, #440]	; (800b34c <tcp_connect+0x1fc>)
 800b192:	f7f5 f87e 	bl	8000292 <Console_DEBUG>
 800b196:	f06f 0309 	mvn.w	r3, #9
 800b19a:	e0ce      	b.n	800b33a <tcp_connect+0x1ea>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d002      	beq.n	800b1a8 <tcp_connect+0x58>
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	e000      	b.n	800b1aa <tcp_connect+0x5a>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	68fa      	ldr	r2, [r7, #12]
 800b1ac:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	88fa      	ldrh	r2, [r7, #6]
 800b1b2:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	7a1b      	ldrb	r3, [r3, #8]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d006      	beq.n	800b1ca <tcp_connect+0x7a>
    netif = netif_get_by_index(pcb->netif_idx);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	7a1b      	ldrb	r3, [r3, #8]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7fe fef9 	bl	8009fb8 <netif_get_by_index>
 800b1c6:	6278      	str	r0, [r7, #36]	; 0x24
 800b1c8:	e005      	b.n	800b1d6 <tcp_connect+0x86>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	3304      	adds	r3, #4
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f006 f858 	bl	8011284 <ip4_route>
 800b1d4:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800b1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d102      	bne.n	800b1e2 <tcp_connect+0x92>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800b1dc:	f06f 0303 	mvn.w	r3, #3
 800b1e0:	e0ab      	b.n	800b33a <tcp_connect+0x1ea>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d003      	beq.n	800b1f0 <tcp_connect+0xa0>
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d111      	bne.n	800b214 <tcp_connect+0xc4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800b1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d002      	beq.n	800b1fc <tcp_connect+0xac>
 800b1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f8:	3304      	adds	r3, #4
 800b1fa:	e000      	b.n	800b1fe <tcp_connect+0xae>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d102      	bne.n	800b20c <tcp_connect+0xbc>
      return ERR_RTE;
 800b206:	f06f 0303 	mvn.w	r3, #3
 800b20a:	e096      	b.n	800b33a <tcp_connect+0x1ea>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	8adb      	ldrh	r3, [r3, #22]
 800b218:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	8adb      	ldrh	r3, [r3, #22]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d10c      	bne.n	800b23c <tcp_connect+0xec>
    pcb->local_port = tcp_new_port();
 800b222:	f7ff ff4f 	bl	800b0c4 <tcp_new_port>
 800b226:	4603      	mov	r3, r0
 800b228:	461a      	mov	r2, r3
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	8adb      	ldrh	r3, [r3, #22]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d102      	bne.n	800b23c <tcp_connect+0xec>
      return ERR_BUF;
 800b236:	f06f 0301 	mvn.w	r3, #1
 800b23a:	e07e      	b.n	800b33a <tcp_connect+0x1ea>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800b23c:	68f8      	ldr	r0, [r7, #12]
 800b23e:	f000 fed7 	bl	800bff0 <tcp_next_iss>
 800b242:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2200      	movs	r2, #0
 800b248:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	697a      	ldr	r2, [r7, #20]
 800b24e:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	1e5a      	subs	r2, r3, #1
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	1e5a      	subs	r2, r3, #1
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	1e5a      	subs	r2, r3, #1
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f641 4284 	movw	r2, #7300	; 0x1c84
 800b26e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f641 4284 	movw	r2, #7300	; 0x1c84
 800b286:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b290:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	3304      	adds	r3, #4
 800b29a:	461a      	mov	r2, r3
 800b29c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b29e:	f000 febf 	bl	800c020 <tcp_eff_send_mss_netif>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	683a      	ldr	r2, [r7, #0]
 800b2b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800b2ba:	2102      	movs	r1, #2
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	f003 faa9 	bl	800e814 <tcp_enqueue_flags>
 800b2c2:	6138      	str	r0, [r7, #16]
  if (ret == ERR_OK) {
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d136      	bne.n	800b338 <tcp_connect+0x1e8>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2202      	movs	r2, #2
 800b2ce:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800b2d0:	8b7b      	ldrh	r3, [r7, #26]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d021      	beq.n	800b31a <tcp_connect+0x1ca>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800b2d6:	4b1e      	ldr	r3, [pc, #120]	; (800b350 <tcp_connect+0x200>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d105      	bne.n	800b2ec <tcp_connect+0x19c>
 800b2e0:	4b1b      	ldr	r3, [pc, #108]	; (800b350 <tcp_connect+0x200>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	68db      	ldr	r3, [r3, #12]
 800b2e6:	4a1a      	ldr	r2, [pc, #104]	; (800b350 <tcp_connect+0x200>)
 800b2e8:	6013      	str	r3, [r2, #0]
 800b2ea:	e013      	b.n	800b314 <tcp_connect+0x1c4>
 800b2ec:	4b18      	ldr	r3, [pc, #96]	; (800b350 <tcp_connect+0x200>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	623b      	str	r3, [r7, #32]
 800b2f2:	e00c      	b.n	800b30e <tcp_connect+0x1be>
 800b2f4:	6a3b      	ldr	r3, [r7, #32]
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d104      	bne.n	800b308 <tcp_connect+0x1b8>
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	68da      	ldr	r2, [r3, #12]
 800b302:	6a3b      	ldr	r3, [r7, #32]
 800b304:	60da      	str	r2, [r3, #12]
 800b306:	e005      	b.n	800b314 <tcp_connect+0x1c4>
 800b308:	6a3b      	ldr	r3, [r7, #32]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	623b      	str	r3, [r7, #32]
 800b30e:	6a3b      	ldr	r3, [r7, #32]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d1ef      	bne.n	800b2f4 <tcp_connect+0x1a4>
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2200      	movs	r2, #0
 800b318:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800b31a:	4b0e      	ldr	r3, [pc, #56]	; (800b354 <tcp_connect+0x204>)
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	60da      	str	r2, [r3, #12]
 800b322:	4a0c      	ldr	r2, [pc, #48]	; (800b354 <tcp_connect+0x204>)
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	6013      	str	r3, [r2, #0]
 800b328:	f004 f954 	bl	800f5d4 <tcp_timer_needed>
 800b32c:	4b0a      	ldr	r3, [pc, #40]	; (800b358 <tcp_connect+0x208>)
 800b32e:	2201      	movs	r2, #1
 800b330:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800b332:	68f8      	ldr	r0, [r7, #12]
 800b334:	f003 fb16 	bl	800e964 <tcp_output>
  }
  return ret;
 800b338:	693b      	ldr	r3, [r7, #16]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3728      	adds	r7, #40	; 0x28
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	080166c8 	.word	0x080166c8
 800b348:	080166e4 	.word	0x080166e4
 800b34c:	08016700 	.word	0x08016700
 800b350:	200081c8 	.word	0x200081c8
 800b354:	200081d0 	.word	0x200081d0
 800b358:	200081d8 	.word	0x200081d8

0800b35c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b35c:	b5b0      	push	{r4, r5, r7, lr}
 800b35e:	b092      	sub	sp, #72	; 0x48
 800b360:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b362:	2300      	movs	r3, #0
 800b364:	62bb      	str	r3, [r7, #40]	; 0x28

  ++tcp_ticks;
 800b366:	4b79      	ldr	r3, [pc, #484]	; (800b54c <tcp_slowtmr+0x1f0>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	3301      	adds	r3, #1
 800b36c:	4a77      	ldr	r2, [pc, #476]	; (800b54c <tcp_slowtmr+0x1f0>)
 800b36e:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b370:	4b77      	ldr	r3, [pc, #476]	; (800b550 <tcp_slowtmr+0x1f4>)
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	3301      	adds	r3, #1
 800b376:	b2da      	uxtb	r2, r3
 800b378:	4b75      	ldr	r3, [pc, #468]	; (800b550 <tcp_slowtmr+0x1f4>)
 800b37a:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b37c:	2300      	movs	r3, #0
 800b37e:	633b      	str	r3, [r7, #48]	; 0x30
  pcb = tcp_active_pcbs;
 800b380:	4b74      	ldr	r3, [pc, #464]	; (800b554 <tcp_slowtmr+0x1f8>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	637b      	str	r3, [r7, #52]	; 0x34
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b386:	e229      	b.n	800b7dc <tcp_slowtmr+0x480>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
    if (pcb->last_timer == tcp_timer_ctr) {
 800b388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b38a:	7f9a      	ldrb	r2, [r3, #30]
 800b38c:	4b70      	ldr	r3, [pc, #448]	; (800b550 <tcp_slowtmr+0x1f4>)
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	429a      	cmp	r2, r3
 800b392:	d105      	bne.n	800b3a0 <tcp_slowtmr+0x44>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b396:	633b      	str	r3, [r7, #48]	; 0x30
      pcb = pcb->next;
 800b398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	637b      	str	r3, [r7, #52]	; 0x34
      continue;
 800b39e:	e21d      	b.n	800b7dc <tcp_slowtmr+0x480>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b3a0:	4b6b      	ldr	r3, [pc, #428]	; (800b550 <tcp_slowtmr+0x1f4>)
 800b3a2:	781a      	ldrb	r2, [r3, #0]
 800b3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3a6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    pcb_reset = 0;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b3b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3b6:	7d1b      	ldrb	r3, [r3, #20]
 800b3b8:	2b02      	cmp	r3, #2
 800b3ba:	d10a      	bne.n	800b3d2 <tcp_slowtmr+0x76>
 800b3bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b3c2:	2b05      	cmp	r3, #5
 800b3c4:	d905      	bls.n	800b3d2 <tcp_slowtmr+0x76>
      ++pcb_remove;
 800b3c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 800b3d0:	e0fa      	b.n	800b5c8 <tcp_slowtmr+0x26c>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b3d8:	2b0b      	cmp	r3, #11
 800b3da:	d905      	bls.n	800b3e8 <tcp_slowtmr+0x8c>
      ++pcb_remove;
 800b3dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b3e6:	e0ef      	b.n	800b5c8 <tcp_slowtmr+0x26c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ea:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d05f      	beq.n	800b4b2 <tcp_slowtmr+0x156>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3f4:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800b3f8:	2b0b      	cmp	r3, #11
 800b3fa:	d905      	bls.n	800b408 <tcp_slowtmr+0xac>
          ++pcb_remove; /* max probes reached */
 800b3fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b400:	3301      	adds	r3, #1
 800b402:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b406:	e0df      	b.n	800b5c8 <tcp_slowtmr+0x26c>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b40a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b40e:	3b01      	subs	r3, #1
 800b410:	4a51      	ldr	r2, [pc, #324]	; (800b558 <tcp_slowtmr+0x1fc>)
 800b412:	5cd3      	ldrb	r3, [r2, r3]
 800b414:	757b      	strb	r3, [r7, #21]
          if (pcb->persist_cnt < backoff_cnt) {
 800b416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b418:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800b41c:	7d7a      	ldrb	r2, [r7, #21]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d907      	bls.n	800b432 <tcp_slowtmr+0xd6>
            pcb->persist_cnt++;
 800b422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b424:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800b428:	3301      	adds	r3, #1
 800b42a:	b2da      	uxtb	r2, r3
 800b42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b42e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b434:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800b438:	7d7a      	ldrb	r2, [r7, #21]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	f200 80c4 	bhi.w	800b5c8 <tcp_slowtmr+0x26c>
            int next_slot = 1; /* increment timer to next slot */
 800b440:	2301      	movs	r3, #1
 800b442:	627b      	str	r3, [r7, #36]	; 0x24
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b446:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d108      	bne.n	800b460 <tcp_slowtmr+0x104>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b44e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b450:	f004 f803 	bl	800f45a <tcp_zero_window_probe>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d014      	beq.n	800b484 <tcp_slowtmr+0x128>
                next_slot = 0; /* try probe again with current slot */
 800b45a:	2300      	movs	r3, #0
 800b45c:	627b      	str	r3, [r7, #36]	; 0x24
 800b45e:	e011      	b.n	800b484 <tcp_slowtmr+0x128>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b462:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b466:	4619      	mov	r1, r3
 800b468:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b46a:	f003 f87d 	bl	800e568 <tcp_split_unsent_seg>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d107      	bne.n	800b484 <tcp_slowtmr+0x128>
                if (tcp_output(pcb) == ERR_OK) {
 800b474:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b476:	f003 fa75 	bl	800e964 <tcp_output>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d101      	bne.n	800b484 <tcp_slowtmr+0x128>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b480:	2300      	movs	r3, #0
 800b482:	627b      	str	r3, [r7, #36]	; 0x24
                }
              }
            }
            if (next_slot) {
 800b484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b486:	2b00      	cmp	r3, #0
 800b488:	f000 809e 	beq.w	800b5c8 <tcp_slowtmr+0x26c>
              pcb->persist_cnt = 0;
 800b48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b48e:	2200      	movs	r2, #0
 800b490:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b496:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b49a:	2b06      	cmp	r3, #6
 800b49c:	f200 8094 	bhi.w	800b5c8 <tcp_slowtmr+0x26c>
                pcb->persist_backoff++;
 800b4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4a2:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	b2da      	uxtb	r2, r3
 800b4aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ac:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800b4b0:	e08a      	b.n	800b5c8 <tcp_slowtmr+0x26c>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	db0f      	blt.n	800b4dc <tcp_slowtmr+0x180>
 800b4bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b4c2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d008      	beq.n	800b4dc <tcp_slowtmr+0x180>
          ++pcb->rtime;
 800b4ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	b21a      	sxth	r2, r3
 800b4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4da:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800b4dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4de:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4e4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	db6d      	blt.n	800b5c8 <tcp_slowtmr+0x26c>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b4ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b4ee:	f003 fccd 	bl	800ee8c <tcp_rexmit_rto_prepare>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d007      	beq.n	800b508 <tcp_slowtmr+0x1ac>
 800b4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d163      	bne.n	800b5c8 <tcp_slowtmr+0x26c>
 800b500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b504:	2b00      	cmp	r3, #0
 800b506:	d05f      	beq.n	800b5c8 <tcp_slowtmr+0x26c>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800b508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b50a:	7d1b      	ldrb	r3, [r3, #20]
 800b50c:	2b02      	cmp	r3, #2
 800b50e:	d02c      	beq.n	800b56a <tcp_slowtmr+0x20e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b512:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b516:	2b0c      	cmp	r3, #12
 800b518:	bf28      	it	cs
 800b51a:	230c      	movcs	r3, #12
 800b51c:	77fb      	strb	r3, [r7, #31]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b520:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b524:	10db      	asrs	r3, r3, #3
 800b526:	b21b      	sxth	r3, r3
 800b528:	461a      	mov	r2, r3
 800b52a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b52c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b530:	4413      	add	r3, r2
 800b532:	7ffa      	ldrb	r2, [r7, #31]
 800b534:	4909      	ldr	r1, [pc, #36]	; (800b55c <tcp_slowtmr+0x200>)
 800b536:	5c8a      	ldrb	r2, [r1, r2]
 800b538:	4093      	lsls	r3, r2
 800b53a:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b53c:	69bb      	ldr	r3, [r7, #24]
 800b53e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b542:	4293      	cmp	r3, r2
 800b544:	dc0c      	bgt.n	800b560 <tcp_slowtmr+0x204>
 800b546:	69bb      	ldr	r3, [r7, #24]
 800b548:	b21a      	sxth	r2, r3
 800b54a:	e00b      	b.n	800b564 <tcp_slowtmr+0x208>
 800b54c:	200081c4 	.word	0x200081c4
 800b550:	200081da 	.word	0x200081da
 800b554:	200081d0 	.word	0x200081d0
 800b558:	08016c68 	.word	0x08016c68
 800b55c:	08016c58 	.word	0x08016c58
 800b560:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b566:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800b56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b56c:	2200      	movs	r2, #0
 800b56e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b572:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b578:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b57c:	4293      	cmp	r3, r2
 800b57e:	bf28      	it	cs
 800b580:	4613      	movcs	r3, r2
 800b582:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 800b584:	8afb      	ldrh	r3, [r7, #22]
 800b586:	085b      	lsrs	r3, r3, #1
 800b588:	b29a      	uxth	r2, r3
 800b58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b58c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b592:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b598:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b59a:	005b      	lsls	r3, r3, #1
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d206      	bcs.n	800b5b0 <tcp_slowtmr+0x254>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b5a6:	005b      	lsls	r3, r3, #1
 800b5a8:	b29a      	uxth	r2, r3
 800b5aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800b5b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5b2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b5b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800b5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800b5c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b5c4:	f003 fccb 	bl	800ef5e <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ca:	7d1b      	ldrb	r3, [r3, #20]
 800b5cc:	2b06      	cmp	r3, #6
 800b5ce:	d112      	bne.n	800b5f6 <tcp_slowtmr+0x29a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b5d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5d2:	8b5b      	ldrh	r3, [r3, #26]
 800b5d4:	f003 0310 	and.w	r3, r3, #16
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d00c      	beq.n	800b5f6 <tcp_slowtmr+0x29a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b5dc:	4b9b      	ldr	r3, [pc, #620]	; (800b84c <tcp_slowtmr+0x4f0>)
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5e2:	6a1b      	ldr	r3, [r3, #32]
 800b5e4:	1ad3      	subs	r3, r2, r3
 800b5e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b5ea:	d904      	bls.n	800b5f6 <tcp_slowtmr+0x29a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b5ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5f8:	7a5b      	ldrb	r3, [r3, #9]
 800b5fa:	f003 0308 	and.w	r3, r3, #8
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d049      	beq.n	800b696 <tcp_slowtmr+0x33a>
        ((pcb->state == ESTABLISHED) ||
 800b602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b604:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b606:	2b04      	cmp	r3, #4
 800b608:	d003      	beq.n	800b612 <tcp_slowtmr+0x2b6>
         (pcb->state == CLOSE_WAIT))) {
 800b60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b60c:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b60e:	2b07      	cmp	r3, #7
 800b610:	d141      	bne.n	800b696 <tcp_slowtmr+0x33a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b612:	4b8e      	ldr	r3, [pc, #568]	; (800b84c <tcp_slowtmr+0x4f0>)
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b618:	6a1b      	ldr	r3, [r3, #32]
 800b61a:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b61e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b622:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800b626:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800b62a:	4989      	ldr	r1, [pc, #548]	; (800b850 <tcp_slowtmr+0x4f4>)
 800b62c:	fba1 1303 	umull	r1, r3, r1, r3
 800b630:	091b      	lsrs	r3, r3, #4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b632:	429a      	cmp	r2, r3
 800b634:	d90a      	bls.n	800b64c <tcp_slowtmr+0x2f0>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b636:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b63a:	3301      	adds	r3, #1
 800b63c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        ++pcb_reset;
 800b640:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b644:	3301      	adds	r3, #1
 800b646:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800b64a:	e024      	b.n	800b696 <tcp_slowtmr+0x33a>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b64c:	4b7f      	ldr	r3, [pc, #508]	; (800b84c <tcp_slowtmr+0x4f0>)
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b652:	6a1b      	ldr	r3, [r3, #32]
 800b654:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b658:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800b65c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b65e:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800b662:	4618      	mov	r0, r3
 800b664:	4b7b      	ldr	r3, [pc, #492]	; (800b854 <tcp_slowtmr+0x4f8>)
 800b666:	fb00 f303 	mul.w	r3, r0, r3
 800b66a:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b66c:	4978      	ldr	r1, [pc, #480]	; (800b850 <tcp_slowtmr+0x4f4>)
 800b66e:	fba1 1303 	umull	r1, r3, r1, r3
 800b672:	091b      	lsrs	r3, r3, #4
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b674:	429a      	cmp	r2, r3
 800b676:	d90e      	bls.n	800b696 <tcp_slowtmr+0x33a>
        err = tcp_keepalive(pcb);
 800b678:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b67a:	f003 fec0 	bl	800f3fe <tcp_keepalive>
 800b67e:	62b8      	str	r0, [r7, #40]	; 0x28
        if (err == ERR_OK) {
 800b680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b682:	2b00      	cmp	r3, #0
 800b684:	d107      	bne.n	800b696 <tcp_slowtmr+0x33a>
          pcb->keep_cnt_sent++;
 800b686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b688:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800b68c:	3301      	adds	r3, #1
 800b68e:	b2da      	uxtb	r2, r3
 800b690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b692:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
      tcp_free_ooseq(pcb);
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b698:	7d1b      	ldrb	r3, [r3, #20]
 800b69a:	2b03      	cmp	r3, #3
 800b69c:	d10c      	bne.n	800b6b8 <tcp_slowtmr+0x35c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b69e:	4b6b      	ldr	r3, [pc, #428]	; (800b84c <tcp_slowtmr+0x4f0>)
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6a4:	6a1b      	ldr	r3, [r3, #32]
 800b6a6:	1ad3      	subs	r3, r2, r3
 800b6a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b6ac:	d904      	bls.n	800b6b8 <tcp_slowtmr+0x35c>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b6ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b6b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ba:	7d1b      	ldrb	r3, [r3, #20]
 800b6bc:	2b09      	cmp	r3, #9
 800b6be:	d10d      	bne.n	800b6dc <tcp_slowtmr+0x380>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b6c0:	4b62      	ldr	r3, [pc, #392]	; (800b84c <tcp_slowtmr+0x4f0>)
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6c6:	6a1b      	ldr	r3, [r3, #32]
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	f241 7270 	movw	r2, #6000	; 0x1770
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d904      	bls.n	800b6dc <tcp_slowtmr+0x380>
        ++pcb_remove;
 800b6d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b6dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d048      	beq.n	800b776 <tcp_slowtmr+0x41a>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6ea:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b6ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b6ee:	f000 fbed 	bl	800becc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d004      	beq.n	800b702 <tcp_slowtmr+0x3a6>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
        prev->next = pcb->next;
 800b6f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6fa:	68da      	ldr	r2, [r3, #12]
 800b6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fe:	60da      	str	r2, [r3, #12]
 800b700:	e003      	b.n	800b70a <tcp_slowtmr+0x3ae>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
 800b702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	4a54      	ldr	r2, [pc, #336]	; (800b858 <tcp_slowtmr+0x4fc>)
 800b708:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b70a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d013      	beq.n	800b73a <tcp_slowtmr+0x3de>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b714:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b718:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b71a:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800b71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b71e:	3304      	adds	r3, #4
 800b720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b722:	8ad2      	ldrh	r2, [r2, #22]
 800b724:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b726:	8b09      	ldrh	r1, [r1, #24]
 800b728:	9102      	str	r1, [sp, #8]
 800b72a:	9201      	str	r2, [sp, #4]
 800b72c:	9300      	str	r3, [sp, #0]
 800b72e:	462b      	mov	r3, r5
 800b730:	4622      	mov	r2, r4
 800b732:	4601      	mov	r1, r0
 800b734:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b736:	f003 fddf 	bl	800f2f8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b73c:	691b      	ldr	r3, [r3, #16]
 800b73e:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 800b740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b742:	7d1b      	ldrb	r3, [r3, #20]
 800b744:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 800b746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b748:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 800b74a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	637b      	str	r3, [r7, #52]	; 0x34
      tcp_free(pcb2);
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f7ff f962 	bl	800aa1a <tcp_free>

      tcp_active_pcbs_changed = 0;
 800b756:	4b41      	ldr	r3, [pc, #260]	; (800b85c <tcp_slowtmr+0x500>)
 800b758:	2200      	movs	r2, #0
 800b75a:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d004      	beq.n	800b76c <tcp_slowtmr+0x410>
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	f06f 010c 	mvn.w	r1, #12
 800b768:	68f8      	ldr	r0, [r7, #12]
 800b76a:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b76c:	4b3b      	ldr	r3, [pc, #236]	; (800b85c <tcp_slowtmr+0x500>)
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d033      	beq.n	800b7dc <tcp_slowtmr+0x480>
        goto tcp_slowtmr_start;
 800b774:	e602      	b.n	800b37c <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b778:	633b      	str	r3, [r7, #48]	; 0x30
      pcb = pcb->next;
 800b77a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	637b      	str	r3, [r7, #52]	; 0x34

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b782:	7f1b      	ldrb	r3, [r3, #28]
 800b784:	3301      	adds	r3, #1
 800b786:	b2da      	uxtb	r2, r3
 800b788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78a:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78e:	7f1a      	ldrb	r2, [r3, #28]
 800b790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b792:	7f5b      	ldrb	r3, [r3, #29]
 800b794:	429a      	cmp	r2, r3
 800b796:	d321      	bcc.n	800b7dc <tcp_slowtmr+0x480>
        prev->polltmr = 0;
 800b798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79a:	2200      	movs	r2, #0
 800b79c:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b79e:	4b2f      	ldr	r3, [pc, #188]	; (800b85c <tcp_slowtmr+0x500>)
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d009      	beq.n	800b7c2 <tcp_slowtmr+0x466>
 800b7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7b6:	6912      	ldr	r2, [r2, #16]
 800b7b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7ba:	4610      	mov	r0, r2
 800b7bc:	4798      	blx	r3
 800b7be:	62b8      	str	r0, [r7, #40]	; 0x28
 800b7c0:	e001      	b.n	800b7c6 <tcp_slowtmr+0x46a>
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	62bb      	str	r3, [r7, #40]	; 0x28
        if (tcp_active_pcbs_changed) {
 800b7c6:	4b25      	ldr	r3, [pc, #148]	; (800b85c <tcp_slowtmr+0x500>)
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d000      	beq.n	800b7d0 <tcp_slowtmr+0x474>
          goto tcp_slowtmr_start;
 800b7ce:	e5d5      	b.n	800b37c <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d102      	bne.n	800b7dc <tcp_slowtmr+0x480>
          tcp_output(prev);
 800b7d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7d8:	f003 f8c4 	bl	800e964 <tcp_output>
  while (pcb != NULL) {
 800b7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	f47f add2 	bne.w	800b388 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	633b      	str	r3, [r7, #48]	; 0x30
  pcb = tcp_tw_pcbs;
 800b7e8:	4b1d      	ldr	r3, [pc, #116]	; (800b860 <tcp_slowtmr+0x504>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	637b      	str	r3, [r7, #52]	; 0x34
  while (pcb != NULL) {
 800b7ee:	e03e      	b.n	800b86e <tcp_slowtmr+0x512>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    pcb_remove = 0;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b7f6:	4b15      	ldr	r3, [pc, #84]	; (800b84c <tcp_slowtmr+0x4f0>)
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7fc:	6a1b      	ldr	r3, [r3, #32]
 800b7fe:	1ad3      	subs	r3, r2, r3
 800b800:	f241 7270 	movw	r2, #6000	; 0x1770
 800b804:	4293      	cmp	r3, r2
 800b806:	d904      	bls.n	800b812 <tcp_slowtmr+0x4b6>
      ++pcb_remove;
 800b808:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b80c:	3301      	adds	r3, #1
 800b80e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b812:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b816:	2b00      	cmp	r3, #0
 800b818:	d024      	beq.n	800b864 <tcp_slowtmr+0x508>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b81a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b81c:	f000 fb56 	bl	800becc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b822:	2b00      	cmp	r3, #0
 800b824:	d004      	beq.n	800b830 <tcp_slowtmr+0x4d4>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
        prev->next = pcb->next;
 800b826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b828:	68da      	ldr	r2, [r3, #12]
 800b82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82c:	60da      	str	r2, [r3, #12]
 800b82e:	e003      	b.n	800b838 <tcp_slowtmr+0x4dc>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
 800b830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b832:	68db      	ldr	r3, [r3, #12]
 800b834:	4a0a      	ldr	r2, [pc, #40]	; (800b860 <tcp_slowtmr+0x504>)
 800b836:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b83a:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800b83c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	637b      	str	r3, [r7, #52]	; 0x34
      tcp_free(pcb2);
 800b842:	6a38      	ldr	r0, [r7, #32]
 800b844:	f7ff f8e9 	bl	800aa1a <tcp_free>
 800b848:	e011      	b.n	800b86e <tcp_slowtmr+0x512>
 800b84a:	bf00      	nop
 800b84c:	200081c4 	.word	0x200081c4
 800b850:	cccccccd 	.word	0xcccccccd
 800b854:	000124f8 	.word	0x000124f8
 800b858:	200081d0 	.word	0x200081d0
 800b85c:	200081d8 	.word	0x200081d8
 800b860:	200081d4 	.word	0x200081d4
    } else {
      prev = pcb;
 800b864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b866:	633b      	str	r3, [r7, #48]	; 0x30
      pcb = pcb->next;
 800b868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	637b      	str	r3, [r7, #52]	; 0x34
  while (pcb != NULL) {
 800b86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b870:	2b00      	cmp	r3, #0
 800b872:	d1bd      	bne.n	800b7f0 <tcp_slowtmr+0x494>
    }
  }
}
 800b874:	bf00      	nop
 800b876:	bf00      	nop
 800b878:	3738      	adds	r7, #56	; 0x38
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bdb0      	pop	{r4, r5, r7, pc}
 800b87e:	bf00      	nop

0800b880 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b886:	4b2d      	ldr	r3, [pc, #180]	; (800b93c <tcp_fasttmr+0xbc>)
 800b888:	781b      	ldrb	r3, [r3, #0]
 800b88a:	3301      	adds	r3, #1
 800b88c:	b2da      	uxtb	r2, r3
 800b88e:	4b2b      	ldr	r3, [pc, #172]	; (800b93c <tcp_fasttmr+0xbc>)
 800b890:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b892:	4b2b      	ldr	r3, [pc, #172]	; (800b940 <tcp_fasttmr+0xc0>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b898:	e048      	b.n	800b92c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	7f9a      	ldrb	r2, [r3, #30]
 800b89e:	4b27      	ldr	r3, [pc, #156]	; (800b93c <tcp_fasttmr+0xbc>)
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d03f      	beq.n	800b926 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b8a6:	4b25      	ldr	r3, [pc, #148]	; (800b93c <tcp_fasttmr+0xbc>)
 800b8a8:	781a      	ldrb	r2, [r3, #0]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	8b5b      	ldrh	r3, [r3, #26]
 800b8b2:	f003 0301 	and.w	r3, r3, #1
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d010      	beq.n	800b8dc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	8b5b      	ldrh	r3, [r3, #26]
 800b8be:	f043 0302 	orr.w	r3, r3, #2
 800b8c2:	b29a      	uxth	r2, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f003 f84b 	bl	800e964 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	8b5b      	ldrh	r3, [r3, #26]
 800b8d2:	f023 0303 	bic.w	r3, r3, #3
 800b8d6:	b29a      	uxth	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	8b5b      	ldrh	r3, [r3, #26]
 800b8e0:	f003 0308 	and.w	r3, r3, #8
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d009      	beq.n	800b8fc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	8b5b      	ldrh	r3, [r3, #26]
 800b8ec:	f023 0308 	bic.w	r3, r3, #8
 800b8f0:	b29a      	uxth	r2, r3
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f7ff f9be 	bl	800ac78 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b906:	2b00      	cmp	r3, #0
 800b908:	d00a      	beq.n	800b920 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b90a:	4b0e      	ldr	r3, [pc, #56]	; (800b944 <tcp_fasttmr+0xc4>)
 800b90c:	2200      	movs	r2, #0
 800b90e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 f819 	bl	800b948 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b916:	4b0b      	ldr	r3, [pc, #44]	; (800b944 <tcp_fasttmr+0xc4>)
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d000      	beq.n	800b920 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b91e:	e7b8      	b.n	800b892 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	607b      	str	r3, [r7, #4]
 800b924:	e002      	b.n	800b92c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	68db      	ldr	r3, [r3, #12]
 800b92a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1b3      	bne.n	800b89a <tcp_fasttmr+0x1a>
    }
  }
}
 800b932:	bf00      	nop
 800b934:	bf00      	nop
 800b936:	3708      	adds	r7, #8
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	200081da 	.word	0x200081da
 800b940:	200081d0 	.word	0x200081d0
 800b944:	200081d8 	.word	0x200081d8

0800b948 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b948:	b590      	push	{r4, r7, lr}
 800b94a:	b087      	sub	sp, #28
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d105      	bne.n	800b962 <tcp_process_refused_data+0x1a>
 800b956:	4833      	ldr	r0, [pc, #204]	; (800ba24 <tcp_process_refused_data+0xdc>)
 800b958:	f7f4 fc9b 	bl	8000292 <Console_DEBUG>
 800b95c:	f06f 030f 	mvn.w	r3, #15
 800b960:	e05b      	b.n	800ba1a <tcp_process_refused_data+0xd2>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b966:	7b5b      	ldrb	r3, [r3, #13]
 800b968:	74fb      	strb	r3, [r7, #19]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b96e:	60fb      	str	r3, [r7, #12]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00a      	beq.n	800b996 <tcp_process_refused_data+0x4e>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6918      	ldr	r0, [r3, #16]
 800b98a:	2300      	movs	r3, #0
 800b98c:	68fa      	ldr	r2, [r7, #12]
 800b98e:	6879      	ldr	r1, [r7, #4]
 800b990:	47a0      	blx	r4
 800b992:	6178      	str	r0, [r7, #20]
 800b994:	e006      	b.n	800b9a4 <tcp_process_refused_data+0x5c>
 800b996:	2300      	movs	r3, #0
 800b998:	68fa      	ldr	r2, [r7, #12]
 800b99a:	6879      	ldr	r1, [r7, #4]
 800b99c:	2000      	movs	r0, #0
 800b99e:	f000 f871 	bl	800ba84 <tcp_recv_null>
 800b9a2:	6178      	str	r0, [r7, #20]
    if (err == ERR_OK) {
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d129      	bne.n	800b9fe <tcp_process_refused_data+0xb6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b9aa:	7cfb      	ldrb	r3, [r7, #19]
 800b9ac:	f003 0320 	and.w	r3, r3, #32
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d031      	beq.n	800ba18 <tcp_process_refused_data+0xd0>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9b8:	f641 4284 	movw	r2, #7300	; 0x1c84
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d005      	beq.n	800b9cc <tcp_process_refused_data+0x84>
          pcb->rcv_wnd++;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	b29a      	uxth	r2, r3
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00a      	beq.n	800b9ec <tcp_process_refused_data+0xa4>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6918      	ldr	r0, [r3, #16]
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	6879      	ldr	r1, [r7, #4]
 800b9e6:	47a0      	blx	r4
 800b9e8:	6178      	str	r0, [r7, #20]
 800b9ea:	e001      	b.n	800b9f0 <tcp_process_refused_data+0xa8>
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	617b      	str	r3, [r7, #20]
        if (err == ERR_ABRT) {
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	f113 0f0d 	cmn.w	r3, #13
 800b9f6:	d10f      	bne.n	800ba18 <tcp_process_refused_data+0xd0>
          return ERR_ABRT;
 800b9f8:	f06f 030c 	mvn.w	r3, #12
 800b9fc:	e00d      	b.n	800ba1a <tcp_process_refused_data+0xd2>
        }
      }
    } else if (err == ERR_ABRT) {
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	f113 0f0d 	cmn.w	r3, #13
 800ba04:	d102      	bne.n	800ba0c <tcp_process_refused_data+0xc4>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ba06:	f06f 030c 	mvn.w	r3, #12
 800ba0a:	e006      	b.n	800ba1a <tcp_process_refused_data+0xd2>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	68fa      	ldr	r2, [r7, #12]
 800ba10:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800ba12:	f06f 0304 	mvn.w	r3, #4
 800ba16:	e000      	b.n	800ba1a <tcp_process_refused_data+0xd2>
    }
  }
  return ERR_OK;
 800ba18:	2300      	movs	r3, #0
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	371c      	adds	r7, #28
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd90      	pop	{r4, r7, pc}
 800ba22:	bf00      	nop
 800ba24:	08016730 	.word	0x08016730

0800ba28 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ba30:	e007      	b.n	800ba42 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 f80a 	bl	800ba52 <tcp_seg_free>
    seg = next;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d1f4      	bne.n	800ba32 <tcp_segs_free+0xa>
  }
}
 800ba48:	bf00      	nop
 800ba4a:	bf00      	nop
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b082      	sub	sp, #8
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d00c      	beq.n	800ba7a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d004      	beq.n	800ba72 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7fe fd3a 	bl	800a4e6 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ba72:	6879      	ldr	r1, [r7, #4]
 800ba74:	2003      	movs	r0, #3
 800ba76:	f7fd ff7f 	bl	8009978 <memp_free>
  }
}
 800ba7a:	bf00      	nop
 800ba7c:	3708      	adds	r7, #8
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
	...

0800ba84 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	607a      	str	r2, [r7, #4]
 800ba90:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d105      	bne.n	800baa4 <tcp_recv_null+0x20>
 800ba98:	480f      	ldr	r0, [pc, #60]	; (800bad8 <tcp_recv_null+0x54>)
 800ba9a:	f7f4 fbfa 	bl	8000292 <Console_DEBUG>
 800ba9e:	f06f 030f 	mvn.w	r3, #15
 800baa2:	e015      	b.n	800bad0 <tcp_recv_null+0x4c>

  if (p != NULL) {
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d009      	beq.n	800babe <tcp_recv_null+0x3a>
    tcp_recved(pcb, p->tot_len);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	891b      	ldrh	r3, [r3, #8]
 800baae:	4619      	mov	r1, r3
 800bab0:	68b8      	ldr	r0, [r7, #8]
 800bab2:	f7ff facb 	bl	800b04c <tcp_recved>
    pbuf_free(p);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f7fe fd15 	bl	800a4e6 <pbuf_free>
 800babc:	e007      	b.n	800bace <tcp_recv_null+0x4a>
  } else if (err == ERR_OK) {
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d104      	bne.n	800bace <tcp_recv_null+0x4a>
    return tcp_close(pcb);
 800bac4:	68b8      	ldr	r0, [r7, #8]
 800bac6:	f7ff f927 	bl	800ad18 <tcp_close>
 800baca:	4603      	mov	r3, r0
 800bacc:	e000      	b.n	800bad0 <tcp_recv_null+0x4c>
  }
  return ERR_OK;
 800bace:	2300      	movs	r3, #0
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3710      	adds	r7, #16
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	08016774 	.word	0x08016774

0800badc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b086      	sub	sp, #24
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	4603      	mov	r3, r0
 800bae4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800bae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800baea:	2b00      	cmp	r3, #0
 800baec:	db01      	blt.n	800baf2 <tcp_kill_prio+0x16>
 800baee:	79fb      	ldrb	r3, [r7, #7]
 800baf0:	e000      	b.n	800baf4 <tcp_kill_prio+0x18>
 800baf2:	237f      	movs	r3, #127	; 0x7f
 800baf4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800baf6:	7afb      	ldrb	r3, [r7, #11]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d034      	beq.n	800bb66 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800bafc:	7afb      	ldrb	r3, [r7, #11]
 800bafe:	3b01      	subs	r3, #1
 800bb00:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800bb02:	2300      	movs	r3, #0
 800bb04:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bb06:	2300      	movs	r3, #0
 800bb08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb0a:	4b19      	ldr	r3, [pc, #100]	; (800bb70 <tcp_kill_prio+0x94>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	617b      	str	r3, [r7, #20]
 800bb10:	e01f      	b.n	800bb52 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	7d5b      	ldrb	r3, [r3, #21]
 800bb16:	7afa      	ldrb	r2, [r7, #11]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d80c      	bhi.n	800bb36 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800bb20:	7afa      	ldrb	r2, [r7, #11]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d112      	bne.n	800bb4c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bb26:	4b13      	ldr	r3, [pc, #76]	; (800bb74 <tcp_kill_prio+0x98>)
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	6a1b      	ldr	r3, [r3, #32]
 800bb2e:	1ad3      	subs	r3, r2, r3
 800bb30:	68fa      	ldr	r2, [r7, #12]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d80a      	bhi.n	800bb4c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800bb36:	4b0f      	ldr	r3, [pc, #60]	; (800bb74 <tcp_kill_prio+0x98>)
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	6a1b      	ldr	r3, [r3, #32]
 800bb3e:	1ad3      	subs	r3, r2, r3
 800bb40:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	7d5b      	ldrb	r3, [r3, #21]
 800bb4a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	617b      	str	r3, [r7, #20]
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d1dc      	bne.n	800bb12 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d004      	beq.n	800bb68 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bb5e:	6938      	ldr	r0, [r7, #16]
 800bb60:	f7ff f99e 	bl	800aea0 <tcp_abort>
 800bb64:	e000      	b.n	800bb68 <tcp_kill_prio+0x8c>
    return;
 800bb66:	bf00      	nop
  }
}
 800bb68:	3718      	adds	r7, #24
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	200081d0 	.word	0x200081d0
 800bb74:	200081c4 	.word	0x200081c4

0800bb78 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b086      	sub	sp, #24
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	4603      	mov	r3, r0
 800bb80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));

  inactivity = 0;
 800bb82:	2300      	movs	r3, #0
 800bb84:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bb86:	2300      	movs	r3, #0
 800bb88:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb8a:	4b15      	ldr	r3, [pc, #84]	; (800bbe0 <tcp_kill_state+0x68>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	617b      	str	r3, [r7, #20]
 800bb90:	e017      	b.n	800bbc2 <tcp_kill_state+0x4a>
    if (pcb->state == state) {
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	7d1b      	ldrb	r3, [r3, #20]
 800bb96:	79fa      	ldrb	r2, [r7, #7]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d10f      	bne.n	800bbbc <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bb9c:	4b11      	ldr	r3, [pc, #68]	; (800bbe4 <tcp_kill_state+0x6c>)
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	6a1b      	ldr	r3, [r3, #32]
 800bba4:	1ad3      	subs	r3, r2, r3
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d807      	bhi.n	800bbbc <tcp_kill_state+0x44>
        inactivity = tcp_ticks - pcb->tmr;
 800bbac:	4b0d      	ldr	r3, [pc, #52]	; (800bbe4 <tcp_kill_state+0x6c>)
 800bbae:	681a      	ldr	r2, [r3, #0]
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	6a1b      	ldr	r3, [r3, #32]
 800bbb4:	1ad3      	subs	r3, r2, r3
 800bbb6:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	68db      	ldr	r3, [r3, #12]
 800bbc0:	617b      	str	r3, [r7, #20]
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d1e4      	bne.n	800bb92 <tcp_kill_state+0x1a>
      }
    }
  }
  if (inactive != NULL) {
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d003      	beq.n	800bbd6 <tcp_kill_state+0x5e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800bbce:	2100      	movs	r1, #0
 800bbd0:	6938      	ldr	r0, [r7, #16]
 800bbd2:	f7ff f8c5 	bl	800ad60 <tcp_abandon>
  }
}
 800bbd6:	bf00      	nop
 800bbd8:	3718      	adds	r7, #24
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	200081d0 	.word	0x200081d0
 800bbe4:	200081c4 	.word	0x200081c4

0800bbe8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbf6:	4b12      	ldr	r3, [pc, #72]	; (800bc40 <tcp_kill_timewait+0x58>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	60fb      	str	r3, [r7, #12]
 800bbfc:	e012      	b.n	800bc24 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bbfe:	4b11      	ldr	r3, [pc, #68]	; (800bc44 <tcp_kill_timewait+0x5c>)
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6a1b      	ldr	r3, [r3, #32]
 800bc06:	1ad3      	subs	r3, r2, r3
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d807      	bhi.n	800bc1e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800bc0e:	4b0d      	ldr	r3, [pc, #52]	; (800bc44 <tcp_kill_timewait+0x5c>)
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	6a1b      	ldr	r3, [r3, #32]
 800bc16:	1ad3      	subs	r3, r2, r3
 800bc18:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	60fb      	str	r3, [r7, #12]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d1e9      	bne.n	800bbfe <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d002      	beq.n	800bc36 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bc30:	68b8      	ldr	r0, [r7, #8]
 800bc32:	f7ff f935 	bl	800aea0 <tcp_abort>
  }
}
 800bc36:	bf00      	nop
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	200081d4 	.word	0x200081d4
 800bc44:	200081c4 	.word	0x200081c4

0800bc48 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800bc4e:	4b10      	ldr	r3, [pc, #64]	; (800bc90 <tcp_handle_closepend+0x48>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bc54:	e014      	b.n	800bc80 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	8b5b      	ldrh	r3, [r3, #26]
 800bc60:	f003 0308 	and.w	r3, r3, #8
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d009      	beq.n	800bc7c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	8b5b      	ldrh	r3, [r3, #26]
 800bc6c:	f023 0308 	bic.w	r3, r3, #8
 800bc70:	b29a      	uxth	r2, r3
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f7fe fffe 	bl	800ac78 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d1e7      	bne.n	800bc56 <tcp_handle_closepend+0xe>
  }
}
 800bc86:	bf00      	nop
 800bc88:	bf00      	nop
 800bc8a:	3708      	adds	r7, #8
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	200081d0 	.word	0x200081d0

0800bc94 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bc9e:	2001      	movs	r0, #1
 800bca0:	f7fd fe30 	bl	8009904 <memp_malloc>
 800bca4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d14e      	bne.n	800bd4a <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800bcac:	f7ff ffcc 	bl	800bc48 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800bcb0:	f7ff ff9a 	bl	800bbe8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bcb4:	2001      	movs	r0, #1
 800bcb6:	f7fd fe25 	bl	8009904 <memp_malloc>
 800bcba:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d139      	bne.n	800bd36 <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800bcc2:	2009      	movs	r0, #9
 800bcc4:	f7ff ff58 	bl	800bb78 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bcc8:	2001      	movs	r0, #1
 800bcca:	f7fd fe1b 	bl	8009904 <memp_malloc>
 800bcce:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d125      	bne.n	800bd22 <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800bcd6:	2008      	movs	r0, #8
 800bcd8:	f7ff ff4e 	bl	800bb78 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bcdc:	2001      	movs	r0, #1
 800bcde:	f7fd fe11 	bl	8009904 <memp_malloc>
 800bce2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d111      	bne.n	800bd0e <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800bcea:	79fb      	ldrb	r3, [r7, #7]
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7ff fef5 	bl	800badc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bcf2:	2001      	movs	r0, #1
 800bcf4:	f7fd fe06 	bl	8009904 <memp_malloc>
 800bcf8:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d006      	beq.n	800bd0e <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 800bd00:	4b36      	ldr	r3, [pc, #216]	; (800bddc <tcp_alloc+0x148>)
 800bd02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bd06:	889a      	ldrh	r2, [r3, #4]
 800bd08:	3a01      	subs	r2, #1
 800bd0a:	b292      	uxth	r2, r2
 800bd0c:	809a      	strh	r2, [r3, #4]
          }
        }
        if (pcb != NULL) {
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d006      	beq.n	800bd22 <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 800bd14:	4b31      	ldr	r3, [pc, #196]	; (800bddc <tcp_alloc+0x148>)
 800bd16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bd1a:	889a      	ldrh	r2, [r3, #4]
 800bd1c:	3a01      	subs	r2, #1
 800bd1e:	b292      	uxth	r2, r2
 800bd20:	809a      	strh	r2, [r3, #4]
        }
      }
      if (pcb != NULL) {
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d006      	beq.n	800bd36 <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 800bd28:	4b2c      	ldr	r3, [pc, #176]	; (800bddc <tcp_alloc+0x148>)
 800bd2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bd2e:	889a      	ldrh	r2, [r3, #4]
 800bd30:	3a01      	subs	r2, #1
 800bd32:	b292      	uxth	r2, r2
 800bd34:	809a      	strh	r2, [r3, #4]
      }
    }
    if (pcb != NULL) {
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d006      	beq.n	800bd4a <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 800bd3c:	4b27      	ldr	r3, [pc, #156]	; (800bddc <tcp_alloc+0x148>)
 800bd3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bd42:	889a      	ldrh	r2, [r3, #4]
 800bd44:	3a01      	subs	r2, #1
 800bd46:	b292      	uxth	r2, r2
 800bd48:	809a      	strh	r2, [r3, #4]
    }
  }
  if (pcb != NULL) {
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d03f      	beq.n	800bdd0 <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bd50:	2298      	movs	r2, #152	; 0x98
 800bd52:	2100      	movs	r1, #0
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	f007 fc1b 	bl	8013590 <memset>
    pcb->prio = prio;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	79fa      	ldrb	r2, [r7, #7]
 800bd5e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800bd66:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f641 4284 	movw	r2, #7300	; 0x1c84
 800bd70:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	22ff      	movs	r2, #255	; 0xff
 800bd7e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bd86:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2296      	movs	r2, #150	; 0x96
 800bd8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2296      	movs	r2, #150	; 0x96
 800bd94:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd9c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2201      	movs	r2, #1
 800bda2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800bda6:	4b0e      	ldr	r3, [pc, #56]	; (800bde0 <tcp_alloc+0x14c>)
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800bdae:	4b0d      	ldr	r3, [pc, #52]	; (800bde4 <tcp_alloc+0x150>)
 800bdb0:	781a      	ldrb	r2, [r3, #0]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800bdbc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	4a09      	ldr	r2, [pc, #36]	; (800bde8 <tcp_alloc+0x154>)
 800bdc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	4a08      	ldr	r2, [pc, #32]	; (800bdec <tcp_alloc+0x158>)
 800bdcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3710      	adds	r7, #16
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	200080c8 	.word	0x200080c8
 800bde0:	200081c4 	.word	0x200081c4
 800bde4:	200081da 	.word	0x200081da
 800bde8:	0800ba85 	.word	0x0800ba85
 800bdec:	006ddd00 	.word	0x006ddd00

0800bdf0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800bdfa:	2040      	movs	r0, #64	; 0x40
 800bdfc:	f7ff ff4a 	bl	800bc94 <tcp_alloc>
 800be00:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800be02:	68fb      	ldr	r3, [r7, #12]
}
 800be04:	4618      	mov	r0, r3
 800be06:	3710      	adds	r7, #16
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d002      	beq.n	800be22 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	683a      	ldr	r2, [r7, #0]
 800be20:	611a      	str	r2, [r3, #16]
  }
}
 800be22:	bf00      	nop
 800be24:	370c      	adds	r7, #12
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr

0800be2e <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800be2e:	b480      	push	{r7}
 800be30:	b083      	sub	sp, #12
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
 800be36:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d003      	beq.n	800be46 <tcp_recv+0x18>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
    pcb->recv = recv;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	683a      	ldr	r2, [r7, #0]
 800be42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800be46:	bf00      	nop
 800be48:	370c      	adds	r7, #12
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr

0800be52 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800be52:	b480      	push	{r7}
 800be54:	b083      	sub	sp, #12
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
 800be5a:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d002      	beq.n	800be68 <tcp_sent+0x16>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
    pcb->sent = sent;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	683a      	ldr	r2, [r7, #0]
 800be66:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800be68:	bf00      	nop
 800be6a:	370c      	adds	r7, #12
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d003      	beq.n	800be8c <tcp_err+0x18>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
    pcb->errf = err;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	683a      	ldr	r2, [r7, #0]
 800be88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800be8c:	bf00      	nop
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	60f8      	str	r0, [r7, #12]
 800bea0:	60b9      	str	r1, [r7, #8]
 800bea2:	4613      	mov	r3, r2
 800bea4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d103      	bne.n	800beb4 <tcp_poll+0x1c>
 800beac:	4806      	ldr	r0, [pc, #24]	; (800bec8 <tcp_poll+0x30>)
 800beae:	f7f4 f9f0 	bl	8000292 <Console_DEBUG>
 800beb2:	e006      	b.n	800bec2 <tcp_poll+0x2a>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	68ba      	ldr	r2, [r7, #8]
 800beb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	79fa      	ldrb	r2, [r7, #7]
 800bec0:	775a      	strb	r2, [r3, #29]
}
 800bec2:	3710      	adds	r7, #16
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	08016790 	.word	0x08016790

0800becc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d103      	bne.n	800bee2 <tcp_pcb_purge+0x16>
 800beda:	481c      	ldr	r0, [pc, #112]	; (800bf4c <tcp_pcb_purge+0x80>)
 800bedc:	f7f4 f9d9 	bl	8000292 <Console_DEBUG>
 800bee0:	e030      	b.n	800bf44 <tcp_pcb_purge+0x78>

  if (pcb->state != CLOSED &&
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	7d1b      	ldrb	r3, [r3, #20]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d02c      	beq.n	800bf44 <tcp_pcb_purge+0x78>
      pcb->state != TIME_WAIT &&
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800beee:	2b0a      	cmp	r3, #10
 800bef0:	d028      	beq.n	800bf44 <tcp_pcb_purge+0x78>
      pcb->state != LISTEN) {
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d024      	beq.n	800bf44 <tcp_pcb_purge+0x78>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d007      	beq.n	800bf12 <tcp_pcb_purge+0x46>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7fe faed 	bl	800a4e6 <pbuf_free>
      pcb->refused_data = NULL;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	675a      	str	r2, [r3, #116]	; 0x74
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf18:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7ff fd82 	bl	800ba28 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7ff fd7d 	bl	800ba28 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2200      	movs	r2, #0
 800bf32:	66da      	str	r2, [r3, #108]	; 0x6c
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800bf44:	3708      	adds	r7, #8
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	080167a8 	.word	0x080167a8

0800bf50 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);

  TCP_RMV(pcblist, pcb);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	683a      	ldr	r2, [r7, #0]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d105      	bne.n	800bf70 <tcp_pcb_remove+0x20>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	68da      	ldr	r2, [r3, #12]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	601a      	str	r2, [r3, #0]
 800bf6e:	e013      	b.n	800bf98 <tcp_pcb_remove+0x48>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	60fb      	str	r3, [r7, #12]
 800bf76:	e00c      	b.n	800bf92 <tcp_pcb_remove+0x42>
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	683a      	ldr	r2, [r7, #0]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d104      	bne.n	800bf8c <tcp_pcb_remove+0x3c>
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	68da      	ldr	r2, [r3, #12]
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	60da      	str	r2, [r3, #12]
 800bf8a:	e005      	b.n	800bf98 <tcp_pcb_remove+0x48>
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	60fb      	str	r3, [r7, #12]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d1ef      	bne.n	800bf78 <tcp_pcb_remove+0x28>
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800bf9e:	6838      	ldr	r0, [r7, #0]
 800bfa0:	f7ff ff94 	bl	800becc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	7d1b      	ldrb	r3, [r3, #20]
 800bfa8:	2b0a      	cmp	r3, #10
 800bfaa:	d013      	beq.n	800bfd4 <tcp_pcb_remove+0x84>
      (pcb->state != LISTEN) &&
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d00f      	beq.n	800bfd4 <tcp_pcb_remove+0x84>
      (pcb->flags & TF_ACK_DELAY)) {
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	8b5b      	ldrh	r3, [r3, #26]
 800bfb8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d009      	beq.n	800bfd4 <tcp_pcb_remove+0x84>
    tcp_ack_now(pcb);
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	8b5b      	ldrh	r3, [r3, #26]
 800bfc4:	f043 0302 	orr.w	r3, r3, #2
 800bfc8:	b29a      	uxth	r2, r3
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bfce:	6838      	ldr	r0, [r7, #0]
 800bfd0:	f002 fcc8 	bl	800e964 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	7d1b      	ldrb	r3, [r3, #20]
 800bfd8:	2b01      	cmp	r3, #1
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800bfe6:	bf00      	nop
 800bfe8:	3710      	adds	r7, #16
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
	...

0800bff0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b083      	sub	sp, #12
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800bff8:	4b07      	ldr	r3, [pc, #28]	; (800c018 <tcp_next_iss+0x28>)
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	4b07      	ldr	r3, [pc, #28]	; (800c01c <tcp_next_iss+0x2c>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4413      	add	r3, r2
 800c002:	4a05      	ldr	r2, [pc, #20]	; (800c018 <tcp_next_iss+0x28>)
 800c004:	6013      	str	r3, [r2, #0]
  return iss;
 800c006:	4b04      	ldr	r3, [pc, #16]	; (800c018 <tcp_next_iss+0x28>)
 800c008:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	370c      	adds	r7, #12
 800c00e:	46bd      	mov	sp, r7
 800c010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c014:	4770      	bx	lr
 800c016:	bf00      	nop
 800c018:	200000a4 	.word	0x200000a4
 800c01c:	200081c4 	.word	0x200081c4

0800c020 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c020:	b480      	push	{r7}
 800c022:	b087      	sub	sp, #28
 800c024:	af00      	add	r7, sp, #0
 800c026:	4603      	mov	r3, r0
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	607a      	str	r2, [r7, #4]
 800c02c:	81fb      	strh	r3, [r7, #14]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d101      	bne.n	800c038 <tcp_eff_send_mss_netif+0x18>
      return sendmss;
 800c034:	89fb      	ldrh	r3, [r7, #14]
 800c036:	e019      	b.n	800c06c <tcp_eff_send_mss_netif+0x4c>
    }
    mtu = outif->mtu;
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c03c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c03e:	8afb      	ldrh	r3, [r7, #22]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d012      	beq.n	800c06a <tcp_eff_send_mss_netif+0x4a>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c044:	2328      	movs	r3, #40	; 0x28
 800c046:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c048:	8afa      	ldrh	r2, [r7, #22]
 800c04a:	8abb      	ldrh	r3, [r7, #20]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d904      	bls.n	800c05a <tcp_eff_send_mss_netif+0x3a>
 800c050:	8afa      	ldrh	r2, [r7, #22]
 800c052:	8abb      	ldrh	r3, [r7, #20]
 800c054:	1ad3      	subs	r3, r2, r3
 800c056:	b29b      	uxth	r3, r3
 800c058:	e000      	b.n	800c05c <tcp_eff_send_mss_netif+0x3c>
 800c05a:	2300      	movs	r3, #0
 800c05c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c05e:	8a7a      	ldrh	r2, [r7, #18]
 800c060:	89fb      	ldrh	r3, [r7, #14]
 800c062:	4293      	cmp	r3, r2
 800c064:	bf28      	it	cs
 800c066:	4613      	movcs	r3, r2
 800c068:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c06a:	89fb      	ldrh	r3, [r7, #14]
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	371c      	adds	r7, #28
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);

  while (pcb != NULL) {
 800c086:	e015      	b.n	800c0b4 <tcp_netif_ip_addr_changed_pcblist+0x3c>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	429a      	cmp	r2, r3
 800c092:	d10c      	bne.n	800c0ae <tcp_netif_ip_addr_changed_pcblist+0x36>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 800c09a:	68f9      	ldr	r1, [r7, #12]
 800c09c:	4809      	ldr	r0, [pc, #36]	; (800c0c4 <tcp_netif_ip_addr_changed_pcblist+0x4c>)
 800c09e:	f7f4 f8f8 	bl	8000292 <Console_DEBUG>
      tcp_abort(pcb);
 800c0a2:	68f8      	ldr	r0, [r7, #12]
 800c0a4:	f7fe fefc 	bl	800aea0 <tcp_abort>
      pcb = next;
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	60fb      	str	r3, [r7, #12]
 800c0ac:	e002      	b.n	800c0b4 <tcp_netif_ip_addr_changed_pcblist+0x3c>
    } else {
      pcb = pcb->next;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	68db      	ldr	r3, [r3, #12]
 800c0b2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d1e6      	bne.n	800c088 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800c0ba:	bf00      	nop
 800c0bc:	bf00      	nop
 800c0be:	3710      	adds	r7, #16
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	080167c4 	.word	0x080167c4

0800c0c8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d02a      	beq.n	800c12e <tcp_netif_ip_addr_changed+0x66>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d026      	beq.n	800c12e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c0e0:	4b15      	ldr	r3, [pc, #84]	; (800c138 <tcp_netif_ip_addr_changed+0x70>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f7ff ffc6 	bl	800c078 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c0ec:	4b13      	ldr	r3, [pc, #76]	; (800c13c <tcp_netif_ip_addr_changed+0x74>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f7ff ffc0 	bl	800c078 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d017      	beq.n	800c12e <tcp_netif_ip_addr_changed+0x66>
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d013      	beq.n	800c12e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c106:	4b0e      	ldr	r3, [pc, #56]	; (800c140 <tcp_netif_ip_addr_changed+0x78>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	60fb      	str	r3, [r7, #12]
 800c10c:	e00c      	b.n	800c128 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	429a      	cmp	r2, r3
 800c118:	d103      	bne.n	800c122 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	68db      	ldr	r3, [r3, #12]
 800c126:	60fb      	str	r3, [r7, #12]
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d1ef      	bne.n	800c10e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c12e:	bf00      	nop
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	200081d0 	.word	0x200081d0
 800c13c:	200081c8 	.word	0x200081c8
 800c140:	200081cc 	.word	0x200081cc

0800c144 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c144:	b590      	push	{r4, r7, lr}
 800c146:	b08d      	sub	sp, #52	; 0x34
 800c148:	af04      	add	r7, sp, #16
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 800c14e:	4b90      	ldr	r3, [pc, #576]	; (800c390 <tcp_input+0x24c>)
 800c150:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 800c154:	3301      	adds	r3, #1
 800c156:	b29a      	uxth	r2, r3
 800c158:	4b8d      	ldr	r3, [pc, #564]	; (800c390 <tcp_input+0x24c>)
 800c15a:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	4a8c      	ldr	r2, [pc, #560]	; (800c394 <tcp_input+0x250>)
 800c164:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	895b      	ldrh	r3, [r3, #10]
 800c16a:	2b13      	cmp	r3, #19
 800c16c:	d808      	bhi.n	800c180 <tcp_input+0x3c>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 800c16e:	4b88      	ldr	r3, [pc, #544]	; (800c390 <tcp_input+0x24c>)
 800c170:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800c174:	3301      	adds	r3, #1
 800c176:	b29a      	uxth	r2, r3
 800c178:	4b85      	ldr	r3, [pc, #532]	; (800c390 <tcp_input+0x24c>)
 800c17a:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
    goto dropped;
 800c17e:	e37d      	b.n	800c87c <tcp_input+0x738>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c180:	4b85      	ldr	r3, [pc, #532]	; (800c398 <tcp_input+0x254>)
 800c182:	695b      	ldr	r3, [r3, #20]
 800c184:	4a84      	ldr	r2, [pc, #528]	; (800c398 <tcp_input+0x254>)
 800c186:	6812      	ldr	r2, [r2, #0]
 800c188:	4611      	mov	r1, r2
 800c18a:	4618      	mov	r0, r3
 800c18c:	f005 fc9e 	bl	8011acc <ip4_addr_isbroadcast_u32>
 800c190:	4603      	mov	r3, r0
 800c192:	2b00      	cmp	r3, #0
 800c194:	d105      	bne.n	800c1a2 <tcp_input+0x5e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c196:	4b80      	ldr	r3, [pc, #512]	; (800c398 <tcp_input+0x254>)
 800c198:	695b      	ldr	r3, [r3, #20]
 800c19a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c19e:	2be0      	cmp	r3, #224	; 0xe0
 800c1a0:	d108      	bne.n	800c1b4 <tcp_input+0x70>
    TCP_STATS_INC(tcp.proterr);
 800c1a2:	4b7b      	ldr	r3, [pc, #492]	; (800c390 <tcp_input+0x24c>)
 800c1a4:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	b29a      	uxth	r2, r3
 800c1ac:	4b78      	ldr	r3, [pc, #480]	; (800c390 <tcp_input+0x24c>)
 800c1ae:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
    goto dropped;
 800c1b2:	e363      	b.n	800c87c <tcp_input+0x738>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c1b4:	4b77      	ldr	r3, [pc, #476]	; (800c394 <tcp_input+0x250>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	899b      	ldrh	r3, [r3, #12]
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7fc fe1d 	bl	8008dfc <lwip_htons>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	0b1b      	lsrs	r3, r3, #12
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c1ce:	7bfb      	ldrb	r3, [r7, #15]
 800c1d0:	2b13      	cmp	r3, #19
 800c1d2:	d905      	bls.n	800c1e0 <tcp_input+0x9c>
 800c1d4:	7bfb      	ldrb	r3, [r7, #15]
 800c1d6:	b29a      	uxth	r2, r3
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	891b      	ldrh	r3, [r3, #8]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d908      	bls.n	800c1f2 <tcp_input+0xae>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 800c1e0:	4b6b      	ldr	r3, [pc, #428]	; (800c390 <tcp_input+0x24c>)
 800c1e2:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	b29a      	uxth	r2, r3
 800c1ea:	4b69      	ldr	r3, [pc, #420]	; (800c390 <tcp_input+0x24c>)
 800c1ec:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
    goto dropped;
 800c1f0:	e344      	b.n	800c87c <tcp_input+0x738>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c1f2:	7bfb      	ldrb	r3, [r7, #15]
 800c1f4:	b29b      	uxth	r3, r3
 800c1f6:	3b14      	subs	r3, #20
 800c1f8:	b29a      	uxth	r2, r3
 800c1fa:	4b68      	ldr	r3, [pc, #416]	; (800c39c <tcp_input+0x258>)
 800c1fc:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c1fe:	4b68      	ldr	r3, [pc, #416]	; (800c3a0 <tcp_input+0x25c>)
 800c200:	2200      	movs	r2, #0
 800c202:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	895a      	ldrh	r2, [r3, #10]
 800c208:	7bfb      	ldrb	r3, [r7, #15]
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d309      	bcc.n	800c224 <tcp_input+0xe0>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c210:	4b62      	ldr	r3, [pc, #392]	; (800c39c <tcp_input+0x258>)
 800c212:	881a      	ldrh	r2, [r3, #0]
 800c214:	4b63      	ldr	r3, [pc, #396]	; (800c3a4 <tcp_input+0x260>)
 800c216:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c218:	7bfb      	ldrb	r3, [r7, #15]
 800c21a:	4619      	mov	r1, r3
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f7fe f8f1 	bl	800a404 <pbuf_remove_header>
 800c222:	e035      	b.n	800c290 <tcp_input+0x14c>
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c224:	2114      	movs	r1, #20
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f7fe f8ec 	bl	800a404 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	895a      	ldrh	r2, [r3, #10]
 800c230:	4b5c      	ldr	r3, [pc, #368]	; (800c3a4 <tcp_input+0x260>)
 800c232:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c234:	4b59      	ldr	r3, [pc, #356]	; (800c39c <tcp_input+0x258>)
 800c236:	881a      	ldrh	r2, [r3, #0]
 800c238:	4b5a      	ldr	r3, [pc, #360]	; (800c3a4 <tcp_input+0x260>)
 800c23a:	881b      	ldrh	r3, [r3, #0]
 800c23c:	1ad3      	subs	r3, r2, r3
 800c23e:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c240:	4b58      	ldr	r3, [pc, #352]	; (800c3a4 <tcp_input+0x260>)
 800c242:	881b      	ldrh	r3, [r3, #0]
 800c244:	4619      	mov	r1, r3
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f7fe f8dc 	bl	800a404 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	895b      	ldrh	r3, [r3, #10]
 800c252:	89ba      	ldrh	r2, [r7, #12]
 800c254:	429a      	cmp	r2, r3
 800c256:	d908      	bls.n	800c26a <tcp_input+0x126>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 800c258:	4b4d      	ldr	r3, [pc, #308]	; (800c390 <tcp_input+0x24c>)
 800c25a:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800c25e:	3301      	adds	r3, #1
 800c260:	b29a      	uxth	r2, r3
 800c262:	4b4b      	ldr	r3, [pc, #300]	; (800c390 <tcp_input+0x24c>)
 800c264:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
      goto dropped;
 800c268:	e308      	b.n	800c87c <tcp_input+0x738>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	4a4b      	ldr	r2, [pc, #300]	; (800c3a0 <tcp_input+0x25c>)
 800c272:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	89ba      	ldrh	r2, [r7, #12]
 800c27a:	4611      	mov	r1, r2
 800c27c:	4618      	mov	r0, r3
 800c27e:	f7fe f8c1 	bl	800a404 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	891a      	ldrh	r2, [r3, #8]
 800c286:	89bb      	ldrh	r3, [r7, #12]
 800c288:	1ad3      	subs	r3, r2, r3
 800c28a:	b29a      	uxth	r2, r3
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c290:	4b40      	ldr	r3, [pc, #256]	; (800c394 <tcp_input+0x250>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	881b      	ldrh	r3, [r3, #0]
 800c296:	b29b      	uxth	r3, r3
 800c298:	4a3e      	ldr	r2, [pc, #248]	; (800c394 <tcp_input+0x250>)
 800c29a:	6814      	ldr	r4, [r2, #0]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7fc fdad 	bl	8008dfc <lwip_htons>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c2a6:	4b3b      	ldr	r3, [pc, #236]	; (800c394 <tcp_input+0x250>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	885b      	ldrh	r3, [r3, #2]
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	4a39      	ldr	r2, [pc, #228]	; (800c394 <tcp_input+0x250>)
 800c2b0:	6814      	ldr	r4, [r2, #0]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7fc fda2 	bl	8008dfc <lwip_htons>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c2bc:	4b35      	ldr	r3, [pc, #212]	; (800c394 <tcp_input+0x250>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	4a34      	ldr	r2, [pc, #208]	; (800c394 <tcp_input+0x250>)
 800c2c4:	6814      	ldr	r4, [r2, #0]
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7fc fdad 	bl	8008e26 <lwip_htonl>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	6063      	str	r3, [r4, #4]
 800c2d0:	6863      	ldr	r3, [r4, #4]
 800c2d2:	4a35      	ldr	r2, [pc, #212]	; (800c3a8 <tcp_input+0x264>)
 800c2d4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c2d6:	4b2f      	ldr	r3, [pc, #188]	; (800c394 <tcp_input+0x250>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	4a2d      	ldr	r2, [pc, #180]	; (800c394 <tcp_input+0x250>)
 800c2de:	6814      	ldr	r4, [r2, #0]
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7fc fda0 	bl	8008e26 <lwip_htonl>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	60a3      	str	r3, [r4, #8]
 800c2ea:	68a3      	ldr	r3, [r4, #8]
 800c2ec:	4a2f      	ldr	r2, [pc, #188]	; (800c3ac <tcp_input+0x268>)
 800c2ee:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c2f0:	4b28      	ldr	r3, [pc, #160]	; (800c394 <tcp_input+0x250>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	89db      	ldrh	r3, [r3, #14]
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	4a26      	ldr	r2, [pc, #152]	; (800c394 <tcp_input+0x250>)
 800c2fa:	6814      	ldr	r4, [r2, #0]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7fc fd7d 	bl	8008dfc <lwip_htons>
 800c302:	4603      	mov	r3, r0
 800c304:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c306:	4b23      	ldr	r3, [pc, #140]	; (800c394 <tcp_input+0x250>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	899b      	ldrh	r3, [r3, #12]
 800c30c:	b29b      	uxth	r3, r3
 800c30e:	4618      	mov	r0, r3
 800c310:	f7fc fd74 	bl	8008dfc <lwip_htons>
 800c314:	4603      	mov	r3, r0
 800c316:	b2db      	uxtb	r3, r3
 800c318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c31c:	b2da      	uxtb	r2, r3
 800c31e:	4b24      	ldr	r3, [pc, #144]	; (800c3b0 <tcp_input+0x26c>)
 800c320:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	891a      	ldrh	r2, [r3, #8]
 800c326:	4b23      	ldr	r3, [pc, #140]	; (800c3b4 <tcp_input+0x270>)
 800c328:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c32a:	4b21      	ldr	r3, [pc, #132]	; (800c3b0 <tcp_input+0x26c>)
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	f003 0303 	and.w	r3, r3, #3
 800c332:	2b00      	cmp	r3, #0
 800c334:	d014      	beq.n	800c360 <tcp_input+0x21c>
    tcplen++;
 800c336:	4b1f      	ldr	r3, [pc, #124]	; (800c3b4 <tcp_input+0x270>)
 800c338:	881b      	ldrh	r3, [r3, #0]
 800c33a:	3301      	adds	r3, #1
 800c33c:	b29a      	uxth	r2, r3
 800c33e:	4b1d      	ldr	r3, [pc, #116]	; (800c3b4 <tcp_input+0x270>)
 800c340:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	891a      	ldrh	r2, [r3, #8]
 800c346:	4b1b      	ldr	r3, [pc, #108]	; (800c3b4 <tcp_input+0x270>)
 800c348:	881b      	ldrh	r3, [r3, #0]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d908      	bls.n	800c360 <tcp_input+0x21c>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 800c34e:	4b10      	ldr	r3, [pc, #64]	; (800c390 <tcp_input+0x24c>)
 800c350:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800c354:	3301      	adds	r3, #1
 800c356:	b29a      	uxth	r2, r3
 800c358:	4b0d      	ldr	r3, [pc, #52]	; (800c390 <tcp_input+0x24c>)
 800c35a:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
      goto dropped;
 800c35e:	e28d      	b.n	800c87c <tcp_input+0x738>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c360:	2300      	movs	r3, #0
 800c362:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c364:	4b14      	ldr	r3, [pc, #80]	; (800c3b8 <tcp_input+0x274>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	61bb      	str	r3, [r7, #24]
 800c36a:	e060      	b.n	800c42e <tcp_input+0x2ea>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	7a1b      	ldrb	r3, [r3, #8]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d023      	beq.n	800c3bc <tcp_input+0x278>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	7a1a      	ldrb	r2, [r3, #8]
 800c378:	4b07      	ldr	r3, [pc, #28]	; (800c398 <tcp_input+0x254>)
 800c37a:	685b      	ldr	r3, [r3, #4]
 800c37c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c380:	3301      	adds	r3, #1
 800c382:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c384:	429a      	cmp	r2, r3
 800c386:	d019      	beq.n	800c3bc <tcp_input+0x278>
      prev = pcb;
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	61fb      	str	r3, [r7, #28]
      continue;
 800c38c:	e04c      	b.n	800c428 <tcp_input+0x2e4>
 800c38e:	bf00      	nop
 800c390:	200080c8 	.word	0x200080c8
 800c394:	200081f0 	.word	0x200081f0
 800c398:	20000ee4 	.word	0x20000ee4
 800c39c:	200081f4 	.word	0x200081f4
 800c3a0:	200081f8 	.word	0x200081f8
 800c3a4:	200081f6 	.word	0x200081f6
 800c3a8:	20008200 	.word	0x20008200
 800c3ac:	20008204 	.word	0x20008204
 800c3b0:	2000820c 	.word	0x2000820c
 800c3b4:	2000820a 	.word	0x2000820a
 800c3b8:	200081d0 	.word	0x200081d0
    }

    if (pcb->remote_port == tcphdr->src &&
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	8b1a      	ldrh	r2, [r3, #24]
 800c3c0:	4b68      	ldr	r3, [pc, #416]	; (800c564 <tcp_input+0x420>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	881b      	ldrh	r3, [r3, #0]
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d12b      	bne.n	800c424 <tcp_input+0x2e0>
        pcb->local_port == tcphdr->dest &&
 800c3cc:	69bb      	ldr	r3, [r7, #24]
 800c3ce:	8ada      	ldrh	r2, [r3, #22]
 800c3d0:	4b64      	ldr	r3, [pc, #400]	; (800c564 <tcp_input+0x420>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	885b      	ldrh	r3, [r3, #2]
 800c3d6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d123      	bne.n	800c424 <tcp_input+0x2e0>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	685a      	ldr	r2, [r3, #4]
 800c3e0:	4b61      	ldr	r3, [pc, #388]	; (800c568 <tcp_input+0x424>)
 800c3e2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d11d      	bne.n	800c424 <tcp_input+0x2e0>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c3e8:	69bb      	ldr	r3, [r7, #24]
 800c3ea:	681a      	ldr	r2, [r3, #0]
 800c3ec:	4b5e      	ldr	r3, [pc, #376]	; (800c568 <tcp_input+0x424>)
 800c3ee:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d117      	bne.n	800c424 <tcp_input+0x2e0>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
      if (prev != NULL) {
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00b      	beq.n	800c412 <tcp_input+0x2ce>
        prev->next = pcb->next;
 800c3fa:	69bb      	ldr	r3, [r7, #24]
 800c3fc:	68da      	ldr	r2, [r3, #12]
 800c3fe:	69fb      	ldr	r3, [r7, #28]
 800c400:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c402:	4b5a      	ldr	r3, [pc, #360]	; (800c56c <tcp_input+0x428>)
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c40a:	4a58      	ldr	r2, [pc, #352]	; (800c56c <tcp_input+0x428>)
 800c40c:	69bb      	ldr	r3, [r7, #24]
 800c40e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
      break;
 800c410:	e010      	b.n	800c434 <tcp_input+0x2f0>
        TCP_STATS_INC(tcp.cachehit);
 800c412:	4b57      	ldr	r3, [pc, #348]	; (800c570 <tcp_input+0x42c>)
 800c414:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800c418:	3301      	adds	r3, #1
 800c41a:	b29a      	uxth	r2, r3
 800c41c:	4b54      	ldr	r3, [pc, #336]	; (800c570 <tcp_input+0x42c>)
 800c41e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
      break;
 800c422:	e007      	b.n	800c434 <tcp_input+0x2f0>
    }
    prev = pcb;
 800c424:	69bb      	ldr	r3, [r7, #24]
 800c426:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c428:	69bb      	ldr	r3, [r7, #24]
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	61bb      	str	r3, [r7, #24]
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d19b      	bne.n	800c36c <tcp_input+0x228>
  }

  if (pcb == NULL) {
 800c434:	69bb      	ldr	r3, [r7, #24]
 800c436:	2b00      	cmp	r3, #0
 800c438:	f040 80a0 	bne.w	800c57c <tcp_input+0x438>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c43c:	4b4d      	ldr	r3, [pc, #308]	; (800c574 <tcp_input+0x430>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	61bb      	str	r3, [r7, #24]
 800c442:	e034      	b.n	800c4ae <tcp_input+0x36a>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c444:	69bb      	ldr	r3, [r7, #24]
 800c446:	7a1b      	ldrb	r3, [r3, #8]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d009      	beq.n	800c460 <tcp_input+0x31c>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c44c:	69bb      	ldr	r3, [r7, #24]
 800c44e:	7a1a      	ldrb	r2, [r3, #8]
 800c450:	4b45      	ldr	r3, [pc, #276]	; (800c568 <tcp_input+0x424>)
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c458:	3301      	adds	r3, #1
 800c45a:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d122      	bne.n	800c4a6 <tcp_input+0x362>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c460:	69bb      	ldr	r3, [r7, #24]
 800c462:	8b1a      	ldrh	r2, [r3, #24]
 800c464:	4b3f      	ldr	r3, [pc, #252]	; (800c564 <tcp_input+0x420>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	881b      	ldrh	r3, [r3, #0]
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d11b      	bne.n	800c4a8 <tcp_input+0x364>
          pcb->local_port == tcphdr->dest &&
 800c470:	69bb      	ldr	r3, [r7, #24]
 800c472:	8ada      	ldrh	r2, [r3, #22]
 800c474:	4b3b      	ldr	r3, [pc, #236]	; (800c564 <tcp_input+0x420>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	885b      	ldrh	r3, [r3, #2]
 800c47a:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d113      	bne.n	800c4a8 <tcp_input+0x364>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c480:	69bb      	ldr	r3, [r7, #24]
 800c482:	685a      	ldr	r2, [r3, #4]
 800c484:	4b38      	ldr	r3, [pc, #224]	; (800c568 <tcp_input+0x424>)
 800c486:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c488:	429a      	cmp	r2, r3
 800c48a:	d10d      	bne.n	800c4a8 <tcp_input+0x364>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c48c:	69bb      	ldr	r3, [r7, #24]
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	4b35      	ldr	r3, [pc, #212]	; (800c568 <tcp_input+0x424>)
 800c492:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c494:	429a      	cmp	r2, r3
 800c496:	d107      	bne.n	800c4a8 <tcp_input+0x364>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c498:	69b8      	ldr	r0, [r7, #24]
 800c49a:	f000 fb33 	bl	800cb04 <tcp_timewait_input>
        }
        pbuf_free(p);
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f7fe f821 	bl	800a4e6 <pbuf_free>
        return;
 800c4a4:	e1f7      	b.n	800c896 <tcp_input+0x752>
        continue;
 800c4a6:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	68db      	ldr	r3, [r3, #12]
 800c4ac:	61bb      	str	r3, [r7, #24]
 800c4ae:	69bb      	ldr	r3, [r7, #24]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d1c7      	bne.n	800c444 <tcp_input+0x300>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c4b8:	4b2f      	ldr	r3, [pc, #188]	; (800c578 <tcp_input+0x434>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	617b      	str	r3, [r7, #20]
 800c4be:	e02a      	b.n	800c516 <tcp_input+0x3d2>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	7a1b      	ldrb	r3, [r3, #8]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d00c      	beq.n	800c4e2 <tcp_input+0x39e>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	7a1a      	ldrb	r2, [r3, #8]
 800c4cc:	4b26      	ldr	r3, [pc, #152]	; (800c568 <tcp_input+0x424>)
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d002      	beq.n	800c4e2 <tcp_input+0x39e>
        prev = (struct tcp_pcb *)lpcb;
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	61fb      	str	r3, [r7, #28]
        continue;
 800c4e0:	e016      	b.n	800c510 <tcp_input+0x3cc>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	8ada      	ldrh	r2, [r3, #22]
 800c4e6:	4b1f      	ldr	r3, [pc, #124]	; (800c564 <tcp_input+0x420>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	885b      	ldrh	r3, [r3, #2]
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d10c      	bne.n	800c50c <tcp_input+0x3c8>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	681a      	ldr	r2, [r3, #0]
 800c4f6:	4b1c      	ldr	r3, [pc, #112]	; (800c568 <tcp_input+0x424>)
 800c4f8:	695b      	ldr	r3, [r3, #20]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d00f      	beq.n	800c51e <tcp_input+0x3da>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d00d      	beq.n	800c520 <tcp_input+0x3dc>
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d009      	beq.n	800c520 <tcp_input+0x3dc>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	617b      	str	r3, [r7, #20]
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d1d1      	bne.n	800c4c0 <tcp_input+0x37c>
 800c51c:	e000      	b.n	800c520 <tcp_input+0x3dc>
            break;
 800c51e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d02a      	beq.n	800c57c <tcp_input+0x438>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c526:	69fb      	ldr	r3, [r7, #28]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d00b      	beq.n	800c544 <tcp_input+0x400>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	68da      	ldr	r2, [r3, #12]
 800c530:	69fb      	ldr	r3, [r7, #28]
 800c532:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c534:	4b10      	ldr	r3, [pc, #64]	; (800c578 <tcp_input+0x434>)
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c53c:	4a0e      	ldr	r2, [pc, #56]	; (800c578 <tcp_input+0x434>)
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	6013      	str	r3, [r2, #0]
 800c542:	e007      	b.n	800c554 <tcp_input+0x410>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 800c544:	4b0a      	ldr	r3, [pc, #40]	; (800c570 <tcp_input+0x42c>)
 800c546:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800c54a:	3301      	adds	r3, #1
 800c54c:	b29a      	uxth	r2, r3
 800c54e:	4b08      	ldr	r3, [pc, #32]	; (800c570 <tcp_input+0x42c>)
 800c550:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c554:	6978      	ldr	r0, [r7, #20]
 800c556:	f000 f9df 	bl	800c918 <tcp_listen_input>
      }
      pbuf_free(p);
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f7fd ffc3 	bl	800a4e6 <pbuf_free>
      return;
 800c560:	e199      	b.n	800c896 <tcp_input+0x752>
 800c562:	bf00      	nop
 800c564:	200081f0 	.word	0x200081f0
 800c568:	20000ee4 	.word	0x20000ee4
 800c56c:	200081d0 	.word	0x200081d0
 800c570:	200080c8 	.word	0x200080c8
 800c574:	200081d4 	.word	0x200081d4
 800c578:	200081cc 	.word	0x200081cc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	f000 8142 	beq.w	800c808 <tcp_input+0x6c4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c584:	4b96      	ldr	r3, [pc, #600]	; (800c7e0 <tcp_input+0x69c>)
 800c586:	2200      	movs	r2, #0
 800c588:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	891a      	ldrh	r2, [r3, #8]
 800c58e:	4b94      	ldr	r3, [pc, #592]	; (800c7e0 <tcp_input+0x69c>)
 800c590:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c592:	4a93      	ldr	r2, [pc, #588]	; (800c7e0 <tcp_input+0x69c>)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c598:	4b92      	ldr	r3, [pc, #584]	; (800c7e4 <tcp_input+0x6a0>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a90      	ldr	r2, [pc, #576]	; (800c7e0 <tcp_input+0x69c>)
 800c59e:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 800c5a0:	4b91      	ldr	r3, [pc, #580]	; (800c7e8 <tcp_input+0x6a4>)
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c5a6:	4b91      	ldr	r3, [pc, #580]	; (800c7ec <tcp_input+0x6a8>)
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c5ac:	4b90      	ldr	r3, [pc, #576]	; (800c7f0 <tcp_input+0x6ac>)
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c5b2:	4b90      	ldr	r3, [pc, #576]	; (800c7f4 <tcp_input+0x6b0>)
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	f003 0308 	and.w	r3, r3, #8
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d006      	beq.n	800c5cc <tcp_input+0x488>
      p->flags |= PBUF_FLAG_PUSH;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	7b5b      	ldrb	r3, [r3, #13]
 800c5c2:	f043 0301 	orr.w	r3, r3, #1
 800c5c6:	b2da      	uxtb	r2, r3
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c5cc:	69bb      	ldr	r3, [r7, #24]
 800c5ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d01e      	beq.n	800c612 <tcp_input+0x4ce>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c5d4:	69b8      	ldr	r0, [r7, #24]
 800c5d6:	f7ff f9b7 	bl	800b948 <tcp_process_refused_data>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	f113 0f0d 	cmn.w	r3, #13
 800c5e0:	d007      	beq.n	800c5f2 <tcp_input+0x4ae>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c5e2:	69bb      	ldr	r3, [r7, #24]
 800c5e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d013      	beq.n	800c612 <tcp_input+0x4ce>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c5ea:	4b83      	ldr	r3, [pc, #524]	; (800c7f8 <tcp_input+0x6b4>)
 800c5ec:	881b      	ldrh	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d00f      	beq.n	800c612 <tcp_input+0x4ce>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c5f2:	69bb      	ldr	r3, [r7, #24]
 800c5f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d102      	bne.n	800c600 <tcp_input+0x4bc>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c5fa:	69b8      	ldr	r0, [r7, #24]
 800c5fc:	f002 feb1 	bl	800f362 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 800c600:	4b7e      	ldr	r3, [pc, #504]	; (800c7fc <tcp_input+0x6b8>)
 800c602:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800c606:	3301      	adds	r3, #1
 800c608:	b29a      	uxth	r2, r3
 800c60a:	4b7c      	ldr	r3, [pc, #496]	; (800c7fc <tcp_input+0x6b8>)
 800c60c:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c610:	e0d2      	b.n	800c7b8 <tcp_input+0x674>
      }
    }
    tcp_input_pcb = pcb;
 800c612:	4a7b      	ldr	r2, [pc, #492]	; (800c800 <tcp_input+0x6bc>)
 800c614:	69bb      	ldr	r3, [r7, #24]
 800c616:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c618:	69b8      	ldr	r0, [r7, #24]
 800c61a:	f000 fadd 	bl	800cbd8 <tcp_process>
 800c61e:	6138      	str	r0, [r7, #16]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	f113 0f0d 	cmn.w	r3, #13
 800c626:	f000 80bc 	beq.w	800c7a2 <tcp_input+0x65e>
      if (recv_flags & TF_RESET) {
 800c62a:	4b70      	ldr	r3, [pc, #448]	; (800c7ec <tcp_input+0x6a8>)
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	f003 0308 	and.w	r3, r3, #8
 800c632:	2b00      	cmp	r3, #0
 800c634:	d015      	beq.n	800c662 <tcp_input+0x51e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c636:	69bb      	ldr	r3, [r7, #24]
 800c638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d008      	beq.n	800c652 <tcp_input+0x50e>
 800c640:	69bb      	ldr	r3, [r7, #24]
 800c642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c646:	69ba      	ldr	r2, [r7, #24]
 800c648:	6912      	ldr	r2, [r2, #16]
 800c64a:	f06f 010d 	mvn.w	r1, #13
 800c64e:	4610      	mov	r0, r2
 800c650:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c652:	69b9      	ldr	r1, [r7, #24]
 800c654:	486b      	ldr	r0, [pc, #428]	; (800c804 <tcp_input+0x6c0>)
 800c656:	f7ff fc7b 	bl	800bf50 <tcp_pcb_remove>
        tcp_free(pcb);
 800c65a:	69b8      	ldr	r0, [r7, #24]
 800c65c:	f7fe f9dd 	bl	800aa1a <tcp_free>
 800c660:	e0aa      	b.n	800c7b8 <tcp_input+0x674>
      } else {
        err = ERR_OK;
 800c662:	2300      	movs	r3, #0
 800c664:	613b      	str	r3, [r7, #16]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c666:	4b62      	ldr	r3, [pc, #392]	; (800c7f0 <tcp_input+0x6ac>)
 800c668:	881b      	ldrh	r3, [r3, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d019      	beq.n	800c6a2 <tcp_input+0x55e>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c66e:	4b60      	ldr	r3, [pc, #384]	; (800c7f0 <tcp_input+0x6ac>)
 800c670:	881b      	ldrh	r3, [r3, #0]
 800c672:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c674:	69bb      	ldr	r3, [r7, #24]
 800c676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d008      	beq.n	800c68e <tcp_input+0x54a>
 800c67c:	69bb      	ldr	r3, [r7, #24]
 800c67e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c680:	69ba      	ldr	r2, [r7, #24]
 800c682:	6910      	ldr	r0, [r2, #16]
 800c684:	897a      	ldrh	r2, [r7, #10]
 800c686:	69b9      	ldr	r1, [r7, #24]
 800c688:	4798      	blx	r3
 800c68a:	6138      	str	r0, [r7, #16]
 800c68c:	e001      	b.n	800c692 <tcp_input+0x54e>
 800c68e:	2300      	movs	r3, #0
 800c690:	613b      	str	r3, [r7, #16]
            if (err == ERR_ABRT) {
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	f113 0f0d 	cmn.w	r3, #13
 800c698:	f000 8085 	beq.w	800c7a6 <tcp_input+0x662>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c69c:	4b54      	ldr	r3, [pc, #336]	; (800c7f0 <tcp_input+0x6ac>)
 800c69e:	2200      	movs	r2, #0
 800c6a0:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c6a2:	69b8      	ldr	r0, [r7, #24]
 800c6a4:	f000 f908 	bl	800c8b8 <tcp_input_delayed_close>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d17d      	bne.n	800c7aa <tcp_input+0x666>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c6ae:	4b4e      	ldr	r3, [pc, #312]	; (800c7e8 <tcp_input+0x6a4>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d032      	beq.n	800c71c <tcp_input+0x5d8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
          if (pcb->flags & TF_RXCLOSED) {
 800c6b6:	69bb      	ldr	r3, [r7, #24]
 800c6b8:	8b5b      	ldrh	r3, [r3, #26]
 800c6ba:	f003 0310 	and.w	r3, r3, #16
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d008      	beq.n	800c6d4 <tcp_input+0x590>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c6c2:	4b49      	ldr	r3, [pc, #292]	; (800c7e8 <tcp_input+0x6a4>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7fd ff0d 	bl	800a4e6 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c6cc:	69b8      	ldr	r0, [r7, #24]
 800c6ce:	f7fe fbe7 	bl	800aea0 <tcp_abort>
            goto aborted;
 800c6d2:	e071      	b.n	800c7b8 <tcp_input+0x674>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c6d4:	69bb      	ldr	r3, [r7, #24]
 800c6d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00b      	beq.n	800c6f6 <tcp_input+0x5b2>
 800c6de:	69bb      	ldr	r3, [r7, #24]
 800c6e0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800c6e4:	69bb      	ldr	r3, [r7, #24]
 800c6e6:	6918      	ldr	r0, [r3, #16]
 800c6e8:	4b3f      	ldr	r3, [pc, #252]	; (800c7e8 <tcp_input+0x6a4>)
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	69b9      	ldr	r1, [r7, #24]
 800c6f0:	47a0      	blx	r4
 800c6f2:	6138      	str	r0, [r7, #16]
 800c6f4:	e007      	b.n	800c706 <tcp_input+0x5c2>
 800c6f6:	4b3c      	ldr	r3, [pc, #240]	; (800c7e8 <tcp_input+0x6a4>)
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	69b9      	ldr	r1, [r7, #24]
 800c6fe:	2000      	movs	r0, #0
 800c700:	f7ff f9c0 	bl	800ba84 <tcp_recv_null>
 800c704:	6138      	str	r0, [r7, #16]
          if (err == ERR_ABRT) {
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	f113 0f0d 	cmn.w	r3, #13
 800c70c:	d04f      	beq.n	800c7ae <tcp_input+0x66a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d003      	beq.n	800c71c <tcp_input+0x5d8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c714:	4b34      	ldr	r3, [pc, #208]	; (800c7e8 <tcp_input+0x6a4>)
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c71c:	4b33      	ldr	r3, [pc, #204]	; (800c7ec <tcp_input+0x6a8>)
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	f003 0320 	and.w	r3, r3, #32
 800c724:	2b00      	cmp	r3, #0
 800c726:	d02f      	beq.n	800c788 <tcp_input+0x644>
          if (pcb->refused_data != NULL) {
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d009      	beq.n	800c744 <tcp_input+0x600>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c730:	69bb      	ldr	r3, [r7, #24]
 800c732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c734:	7b5a      	ldrb	r2, [r3, #13]
 800c736:	69bb      	ldr	r3, [r7, #24]
 800c738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c73a:	f042 0220 	orr.w	r2, r2, #32
 800c73e:	b2d2      	uxtb	r2, r2
 800c740:	735a      	strb	r2, [r3, #13]
 800c742:	e021      	b.n	800c788 <tcp_input+0x644>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c744:	69bb      	ldr	r3, [r7, #24]
 800c746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c748:	f641 4284 	movw	r2, #7300	; 0x1c84
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d005      	beq.n	800c75c <tcp_input+0x618>
              pcb->rcv_wnd++;
 800c750:	69bb      	ldr	r3, [r7, #24]
 800c752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c754:	3301      	adds	r3, #1
 800c756:	b29a      	uxth	r2, r3
 800c758:	69bb      	ldr	r3, [r7, #24]
 800c75a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c75c:	69bb      	ldr	r3, [r7, #24]
 800c75e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00a      	beq.n	800c77c <tcp_input+0x638>
 800c766:	69bb      	ldr	r3, [r7, #24]
 800c768:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800c76c:	69bb      	ldr	r3, [r7, #24]
 800c76e:	6918      	ldr	r0, [r3, #16]
 800c770:	2300      	movs	r3, #0
 800c772:	2200      	movs	r2, #0
 800c774:	69b9      	ldr	r1, [r7, #24]
 800c776:	47a0      	blx	r4
 800c778:	6138      	str	r0, [r7, #16]
 800c77a:	e001      	b.n	800c780 <tcp_input+0x63c>
 800c77c:	2300      	movs	r3, #0
 800c77e:	613b      	str	r3, [r7, #16]
            if (err == ERR_ABRT) {
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	f113 0f0d 	cmn.w	r3, #13
 800c786:	d014      	beq.n	800c7b2 <tcp_input+0x66e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c788:	4b1d      	ldr	r3, [pc, #116]	; (800c800 <tcp_input+0x6bc>)
 800c78a:	2200      	movs	r2, #0
 800c78c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c78e:	69b8      	ldr	r0, [r7, #24]
 800c790:	f000 f892 	bl	800c8b8 <tcp_input_delayed_close>
 800c794:	4603      	mov	r3, r0
 800c796:	2b00      	cmp	r3, #0
 800c798:	d10d      	bne.n	800c7b6 <tcp_input+0x672>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c79a:	69b8      	ldr	r0, [r7, #24]
 800c79c:	f002 f8e2 	bl	800e964 <tcp_output>
 800c7a0:	e00a      	b.n	800c7b8 <tcp_input+0x674>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c7a2:	bf00      	nop
 800c7a4:	e008      	b.n	800c7b8 <tcp_input+0x674>
              goto aborted;
 800c7a6:	bf00      	nop
 800c7a8:	e006      	b.n	800c7b8 <tcp_input+0x674>
          goto aborted;
 800c7aa:	bf00      	nop
 800c7ac:	e004      	b.n	800c7b8 <tcp_input+0x674>
            goto aborted;
 800c7ae:	bf00      	nop
 800c7b0:	e002      	b.n	800c7b8 <tcp_input+0x674>
              goto aborted;
 800c7b2:	bf00      	nop
 800c7b4:	e000      	b.n	800c7b8 <tcp_input+0x674>
          goto aborted;
 800c7b6:	bf00      	nop
    tcp_input_pcb = NULL;
 800c7b8:	4b11      	ldr	r3, [pc, #68]	; (800c800 <tcp_input+0x6bc>)
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c7be:	4b0a      	ldr	r3, [pc, #40]	; (800c7e8 <tcp_input+0x6a4>)
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c7c4:	4b06      	ldr	r3, [pc, #24]	; (800c7e0 <tcp_input+0x69c>)
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d063      	beq.n	800c894 <tcp_input+0x750>
      pbuf_free(inseg.p);
 800c7cc:	4b04      	ldr	r3, [pc, #16]	; (800c7e0 <tcp_input+0x69c>)
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f7fd fe88 	bl	800a4e6 <pbuf_free>
      inseg.p = NULL;
 800c7d6:	4b02      	ldr	r3, [pc, #8]	; (800c7e0 <tcp_input+0x69c>)
 800c7d8:	2200      	movs	r2, #0
 800c7da:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c7dc:	e05a      	b.n	800c894 <tcp_input+0x750>
 800c7de:	bf00      	nop
 800c7e0:	200081dc 	.word	0x200081dc
 800c7e4:	200081f0 	.word	0x200081f0
 800c7e8:	20008210 	.word	0x20008210
 800c7ec:	2000820d 	.word	0x2000820d
 800c7f0:	20008208 	.word	0x20008208
 800c7f4:	2000820c 	.word	0x2000820c
 800c7f8:	2000820a 	.word	0x2000820a
 800c7fc:	200080c8 	.word	0x200080c8
 800c800:	20008214 	.word	0x20008214
 800c804:	200081d0 	.word	0x200081d0
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c808:	4b24      	ldr	r3, [pc, #144]	; (800c89c <tcp_input+0x758>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	899b      	ldrh	r3, [r3, #12]
 800c80e:	b29b      	uxth	r3, r3
 800c810:	4618      	mov	r0, r3
 800c812:	f7fc faf3 	bl	8008dfc <lwip_htons>
 800c816:	4603      	mov	r3, r0
 800c818:	b2db      	uxtb	r3, r3
 800c81a:	f003 0304 	and.w	r3, r3, #4
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d128      	bne.n	800c874 <tcp_input+0x730>
      TCP_STATS_INC(tcp.proterr);
 800c822:	4b1f      	ldr	r3, [pc, #124]	; (800c8a0 <tcp_input+0x75c>)
 800c824:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800c828:	3301      	adds	r3, #1
 800c82a:	b29a      	uxth	r2, r3
 800c82c:	4b1c      	ldr	r3, [pc, #112]	; (800c8a0 <tcp_input+0x75c>)
 800c82e:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
      TCP_STATS_INC(tcp.drop);
 800c832:	4b1b      	ldr	r3, [pc, #108]	; (800c8a0 <tcp_input+0x75c>)
 800c834:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800c838:	3301      	adds	r3, #1
 800c83a:	b29a      	uxth	r2, r3
 800c83c:	4b18      	ldr	r3, [pc, #96]	; (800c8a0 <tcp_input+0x75c>)
 800c83e:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c842:	4b18      	ldr	r3, [pc, #96]	; (800c8a4 <tcp_input+0x760>)
 800c844:	6819      	ldr	r1, [r3, #0]
 800c846:	4b18      	ldr	r3, [pc, #96]	; (800c8a8 <tcp_input+0x764>)
 800c848:	881b      	ldrh	r3, [r3, #0]
 800c84a:	461a      	mov	r2, r3
 800c84c:	4b17      	ldr	r3, [pc, #92]	; (800c8ac <tcp_input+0x768>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c852:	4b12      	ldr	r3, [pc, #72]	; (800c89c <tcp_input+0x758>)
 800c854:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c856:	885b      	ldrh	r3, [r3, #2]
 800c858:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c85a:	4a10      	ldr	r2, [pc, #64]	; (800c89c <tcp_input+0x758>)
 800c85c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c85e:	8812      	ldrh	r2, [r2, #0]
 800c860:	b292      	uxth	r2, r2
 800c862:	9202      	str	r2, [sp, #8]
 800c864:	9301      	str	r3, [sp, #4]
 800c866:	4b12      	ldr	r3, [pc, #72]	; (800c8b0 <tcp_input+0x76c>)
 800c868:	9300      	str	r3, [sp, #0]
 800c86a:	4b12      	ldr	r3, [pc, #72]	; (800c8b4 <tcp_input+0x770>)
 800c86c:	4602      	mov	r2, r0
 800c86e:	2000      	movs	r0, #0
 800c870:	f002 fd42 	bl	800f2f8 <tcp_rst>
    pbuf_free(p);
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f7fd fe36 	bl	800a4e6 <pbuf_free>
  return;
 800c87a:	e00b      	b.n	800c894 <tcp_input+0x750>
dropped:
  TCP_STATS_INC(tcp.drop);
 800c87c:	4b08      	ldr	r3, [pc, #32]	; (800c8a0 <tcp_input+0x75c>)
 800c87e:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800c882:	3301      	adds	r3, #1
 800c884:	b29a      	uxth	r2, r3
 800c886:	4b06      	ldr	r3, [pc, #24]	; (800c8a0 <tcp_input+0x75c>)
 800c888:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f7fd fe2a 	bl	800a4e6 <pbuf_free>
 800c892:	e000      	b.n	800c896 <tcp_input+0x752>
  return;
 800c894:	bf00      	nop
}
 800c896:	3724      	adds	r7, #36	; 0x24
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd90      	pop	{r4, r7, pc}
 800c89c:	200081f0 	.word	0x200081f0
 800c8a0:	200080c8 	.word	0x200080c8
 800c8a4:	20008204 	.word	0x20008204
 800c8a8:	2000820a 	.word	0x2000820a
 800c8ac:	20008200 	.word	0x20008200
 800c8b0:	20000ef4 	.word	0x20000ef4
 800c8b4:	20000ef8 	.word	0x20000ef8

0800c8b8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);

  if (recv_flags & TF_CLOSED) {
 800c8c0:	4b13      	ldr	r3, [pc, #76]	; (800c910 <tcp_input_delayed_close+0x58>)
 800c8c2:	781b      	ldrb	r3, [r3, #0]
 800c8c4:	f003 0310 	and.w	r3, r3, #16
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d01c      	beq.n	800c906 <tcp_input_delayed_close+0x4e>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	8b5b      	ldrh	r3, [r3, #26]
 800c8d0:	f003 0310 	and.w	r3, r3, #16
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d10d      	bne.n	800c8f4 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d008      	beq.n	800c8f4 <tcp_input_delayed_close+0x3c>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8e8:	687a      	ldr	r2, [r7, #4]
 800c8ea:	6912      	ldr	r2, [r2, #16]
 800c8ec:	f06f 010e 	mvn.w	r1, #14
 800c8f0:	4610      	mov	r0, r2
 800c8f2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c8f4:	6879      	ldr	r1, [r7, #4]
 800c8f6:	4807      	ldr	r0, [pc, #28]	; (800c914 <tcp_input_delayed_close+0x5c>)
 800c8f8:	f7ff fb2a 	bl	800bf50 <tcp_pcb_remove>
    tcp_free(pcb);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f7fe f88c 	bl	800aa1a <tcp_free>
    return 1;
 800c902:	2301      	movs	r3, #1
 800c904:	e000      	b.n	800c908 <tcp_input_delayed_close+0x50>
  }
  return 0;
 800c906:	2300      	movs	r3, #0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	2000820d 	.word	0x2000820d
 800c914:	200081d0 	.word	0x200081d0

0800c918 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c918:	b590      	push	{r4, r7, lr}
 800c91a:	b08b      	sub	sp, #44	; 0x2c
 800c91c:	af04      	add	r7, sp, #16
 800c91e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c920:	4b6d      	ldr	r3, [pc, #436]	; (800cad8 <tcp_listen_input+0x1c0>)
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	f003 0304 	and.w	r3, r3, #4
 800c928:	2b00      	cmp	r3, #0
 800c92a:	f040 80ce 	bne.w	800caca <tcp_listen_input+0x1b2>

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c92e:	4b6a      	ldr	r3, [pc, #424]	; (800cad8 <tcp_listen_input+0x1c0>)
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	f003 0310 	and.w	r3, r3, #16
 800c936:	2b00      	cmp	r3, #0
 800c938:	d019      	beq.n	800c96e <tcp_listen_input+0x56>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c93a:	4b68      	ldr	r3, [pc, #416]	; (800cadc <tcp_listen_input+0x1c4>)
 800c93c:	6819      	ldr	r1, [r3, #0]
 800c93e:	4b68      	ldr	r3, [pc, #416]	; (800cae0 <tcp_listen_input+0x1c8>)
 800c940:	881b      	ldrh	r3, [r3, #0]
 800c942:	461a      	mov	r2, r3
 800c944:	4b67      	ldr	r3, [pc, #412]	; (800cae4 <tcp_listen_input+0x1cc>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c94a:	4b67      	ldr	r3, [pc, #412]	; (800cae8 <tcp_listen_input+0x1d0>)
 800c94c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c94e:	885b      	ldrh	r3, [r3, #2]
 800c950:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c952:	4a65      	ldr	r2, [pc, #404]	; (800cae8 <tcp_listen_input+0x1d0>)
 800c954:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c956:	8812      	ldrh	r2, [r2, #0]
 800c958:	b292      	uxth	r2, r2
 800c95a:	9202      	str	r2, [sp, #8]
 800c95c:	9301      	str	r3, [sp, #4]
 800c95e:	4b63      	ldr	r3, [pc, #396]	; (800caec <tcp_listen_input+0x1d4>)
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	4b63      	ldr	r3, [pc, #396]	; (800caf0 <tcp_listen_input+0x1d8>)
 800c964:	4602      	mov	r2, r0
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f002 fcc6 	bl	800f2f8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c96c:	e0af      	b.n	800cace <tcp_listen_input+0x1b6>
  } else if (flags & TCP_SYN) {
 800c96e:	4b5a      	ldr	r3, [pc, #360]	; (800cad8 <tcp_listen_input+0x1c0>)
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	f003 0302 	and.w	r3, r3, #2
 800c976:	2b00      	cmp	r3, #0
 800c978:	f000 80a9 	beq.w	800cace <tcp_listen_input+0x1b6>
    npcb = tcp_alloc(pcb->prio);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	7d5b      	ldrb	r3, [r3, #21]
 800c980:	4618      	mov	r0, r3
 800c982:	f7ff f987 	bl	800bc94 <tcp_alloc>
 800c986:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d119      	bne.n	800c9c2 <tcp_listen_input+0xaa>
      TCP_STATS_INC(tcp.memerr);
 800c98e:	4b59      	ldr	r3, [pc, #356]	; (800caf4 <tcp_listen_input+0x1dc>)
 800c990:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800c994:	3301      	adds	r3, #1
 800c996:	b29a      	uxth	r2, r3
 800c998:	4b56      	ldr	r3, [pc, #344]	; (800caf4 <tcp_listen_input+0x1dc>)
 800c99a:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	699b      	ldr	r3, [r3, #24]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d009      	beq.n	800c9ba <tcp_listen_input+0xa2>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	699b      	ldr	r3, [r3, #24]
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	6910      	ldr	r0, [r2, #16]
 800c9ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c9b2:	2100      	movs	r1, #0
 800c9b4:	4798      	blx	r3
 800c9b6:	60b8      	str	r0, [r7, #8]
      return;
 800c9b8:	e08a      	b.n	800cad0 <tcp_listen_input+0x1b8>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c9ba:	f06f 030f 	mvn.w	r3, #15
 800c9be:	60bb      	str	r3, [r7, #8]
      return;
 800c9c0:	e086      	b.n	800cad0 <tcp_listen_input+0x1b8>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c9c2:	4b4d      	ldr	r3, [pc, #308]	; (800caf8 <tcp_listen_input+0x1e0>)
 800c9c4:	695a      	ldr	r2, [r3, #20]
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c9ca:	4b4b      	ldr	r3, [pc, #300]	; (800caf8 <tcp_listen_input+0x1e0>)
 800c9cc:	691a      	ldr	r2, [r3, #16]
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	8ada      	ldrh	r2, [r3, #22]
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c9da:	4b43      	ldr	r3, [pc, #268]	; (800cae8 <tcp_listen_input+0x1d0>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	881b      	ldrh	r3, [r3, #0]
 800c9e0:	b29a      	uxth	r2, r3
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	2203      	movs	r2, #3
 800c9ea:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c9ec:	4b3d      	ldr	r3, [pc, #244]	; (800cae4 <tcp_listen_input+0x1cc>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	1c5a      	adds	r2, r3, #1
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c9fe:	6978      	ldr	r0, [r7, #20]
 800ca00:	f7ff faf6 	bl	800bff0 <tcp_next_iss>
 800ca04:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	693a      	ldr	r2, [r7, #16]
 800ca0a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	693a      	ldr	r2, [r7, #16]
 800ca10:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	693a      	ldr	r2, [r7, #16]
 800ca16:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	693a      	ldr	r2, [r7, #16]
 800ca1c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ca1e:	4b31      	ldr	r3, [pc, #196]	; (800cae4 <tcp_listen_input+0x1cc>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	1e5a      	subs	r2, r3, #1
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	691a      	ldr	r2, [r3, #16]
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	687a      	ldr	r2, [r7, #4]
 800ca34:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	7a5b      	ldrb	r3, [r3, #9]
 800ca3a:	f003 030c 	and.w	r3, r3, #12
 800ca3e:	b2da      	uxtb	r2, r3
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	7a1a      	ldrb	r2, [r3, #8]
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ca4c:	4b2b      	ldr	r3, [pc, #172]	; (800cafc <tcp_listen_input+0x1e4>)
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	60da      	str	r2, [r3, #12]
 800ca54:	4a29      	ldr	r2, [pc, #164]	; (800cafc <tcp_listen_input+0x1e4>)
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	6013      	str	r3, [r2, #0]
 800ca5a:	f002 fdbb 	bl	800f5d4 <tcp_timer_needed>
 800ca5e:	4b28      	ldr	r3, [pc, #160]	; (800cb00 <tcp_listen_input+0x1e8>)
 800ca60:	2201      	movs	r2, #1
 800ca62:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ca64:	6978      	ldr	r0, [r7, #20]
 800ca66:	f001 f8d7 	bl	800dc18 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ca6a:	4b1f      	ldr	r3, [pc, #124]	; (800cae8 <tcp_listen_input+0x1d0>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	89db      	ldrh	r3, [r3, #14]
 800ca70:	b29a      	uxth	r2, r3
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	3304      	adds	r3, #4
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f004 fbf9 	bl	8011284 <ip4_route>
 800ca92:	4601      	mov	r1, r0
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	3304      	adds	r3, #4
 800ca98:	461a      	mov	r2, r3
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	f7ff fac0 	bl	800c020 <tcp_eff_send_mss_netif>
 800caa0:	4603      	mov	r3, r0
 800caa2:	461a      	mov	r2, r3
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800caa8:	2112      	movs	r1, #18
 800caaa:	6978      	ldr	r0, [r7, #20]
 800caac:	f001 feb2 	bl	800e814 <tcp_enqueue_flags>
 800cab0:	60f8      	str	r0, [r7, #12]
    if (rc != ERR_OK) {
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d004      	beq.n	800cac2 <tcp_listen_input+0x1aa>
      tcp_abandon(npcb, 0);
 800cab8:	2100      	movs	r1, #0
 800caba:	6978      	ldr	r0, [r7, #20]
 800cabc:	f7fe f950 	bl	800ad60 <tcp_abandon>
      return;
 800cac0:	e006      	b.n	800cad0 <tcp_listen_input+0x1b8>
    tcp_output(npcb);
 800cac2:	6978      	ldr	r0, [r7, #20]
 800cac4:	f001 ff4e 	bl	800e964 <tcp_output>
  return;
 800cac8:	e001      	b.n	800cace <tcp_listen_input+0x1b6>
    return;
 800caca:	bf00      	nop
 800cacc:	e000      	b.n	800cad0 <tcp_listen_input+0x1b8>
  return;
 800cace:	bf00      	nop
}
 800cad0:	371c      	adds	r7, #28
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd90      	pop	{r4, r7, pc}
 800cad6:	bf00      	nop
 800cad8:	2000820c 	.word	0x2000820c
 800cadc:	20008204 	.word	0x20008204
 800cae0:	2000820a 	.word	0x2000820a
 800cae4:	20008200 	.word	0x20008200
 800cae8:	200081f0 	.word	0x200081f0
 800caec:	20000ef4 	.word	0x20000ef4
 800caf0:	20000ef8 	.word	0x20000ef8
 800caf4:	200080c8 	.word	0x200080c8
 800caf8:	20000ee4 	.word	0x20000ee4
 800cafc:	200081d0 	.word	0x200081d0
 800cb00:	200081d8 	.word	0x200081d8

0800cb04 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b086      	sub	sp, #24
 800cb08:	af04      	add	r7, sp, #16
 800cb0a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800cb0c:	4b2a      	ldr	r3, [pc, #168]	; (800cbb8 <tcp_timewait_input+0xb4>)
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	f003 0304 	and.w	r3, r3, #4
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d149      	bne.n	800cbac <tcp_timewait_input+0xa8>
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800cb18:	4b27      	ldr	r3, [pc, #156]	; (800cbb8 <tcp_timewait_input+0xb4>)
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	f003 0302 	and.w	r3, r3, #2
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d02a      	beq.n	800cb7a <tcp_timewait_input+0x76>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800cb24:	4b25      	ldr	r3, [pc, #148]	; (800cbbc <tcp_timewait_input+0xb8>)
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb2c:	1ad3      	subs	r3, r2, r3
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	db2d      	blt.n	800cb8e <tcp_timewait_input+0x8a>
 800cb32:	4b22      	ldr	r3, [pc, #136]	; (800cbbc <tcp_timewait_input+0xb8>)
 800cb34:	681a      	ldr	r2, [r3, #0]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb3a:	6879      	ldr	r1, [r7, #4]
 800cb3c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cb3e:	440b      	add	r3, r1
 800cb40:	1ad3      	subs	r3, r2, r3
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	dc23      	bgt.n	800cb8e <tcp_timewait_input+0x8a>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb46:	4b1e      	ldr	r3, [pc, #120]	; (800cbc0 <tcp_timewait_input+0xbc>)
 800cb48:	6819      	ldr	r1, [r3, #0]
 800cb4a:	4b1e      	ldr	r3, [pc, #120]	; (800cbc4 <tcp_timewait_input+0xc0>)
 800cb4c:	881b      	ldrh	r3, [r3, #0]
 800cb4e:	461a      	mov	r2, r3
 800cb50:	4b1a      	ldr	r3, [pc, #104]	; (800cbbc <tcp_timewait_input+0xb8>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cb56:	4b1c      	ldr	r3, [pc, #112]	; (800cbc8 <tcp_timewait_input+0xc4>)
 800cb58:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb5a:	885b      	ldrh	r3, [r3, #2]
 800cb5c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cb5e:	4a1a      	ldr	r2, [pc, #104]	; (800cbc8 <tcp_timewait_input+0xc4>)
 800cb60:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb62:	8812      	ldrh	r2, [r2, #0]
 800cb64:	b292      	uxth	r2, r2
 800cb66:	9202      	str	r2, [sp, #8]
 800cb68:	9301      	str	r3, [sp, #4]
 800cb6a:	4b18      	ldr	r3, [pc, #96]	; (800cbcc <tcp_timewait_input+0xc8>)
 800cb6c:	9300      	str	r3, [sp, #0]
 800cb6e:	4b18      	ldr	r3, [pc, #96]	; (800cbd0 <tcp_timewait_input+0xcc>)
 800cb70:	4602      	mov	r2, r0
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f002 fbc0 	bl	800f2f8 <tcp_rst>
      return;
 800cb78:	e01b      	b.n	800cbb2 <tcp_timewait_input+0xae>
    }
  } else if (flags & TCP_FIN) {
 800cb7a:	4b0f      	ldr	r3, [pc, #60]	; (800cbb8 <tcp_timewait_input+0xb4>)
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	f003 0301 	and.w	r3, r3, #1
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d003      	beq.n	800cb8e <tcp_timewait_input+0x8a>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800cb86:	4b13      	ldr	r3, [pc, #76]	; (800cbd4 <tcp_timewait_input+0xd0>)
 800cb88:	681a      	ldr	r2, [r3, #0]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800cb8e:	4b0d      	ldr	r3, [pc, #52]	; (800cbc4 <tcp_timewait_input+0xc0>)
 800cb90:	881b      	ldrh	r3, [r3, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d00c      	beq.n	800cbb0 <tcp_timewait_input+0xac>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	8b5b      	ldrh	r3, [r3, #26]
 800cb9a:	f043 0302 	orr.w	r3, r3, #2
 800cb9e:	b29a      	uxth	r2, r3
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f001 fedd 	bl	800e964 <tcp_output>
  }
  return;
 800cbaa:	e001      	b.n	800cbb0 <tcp_timewait_input+0xac>
    return;
 800cbac:	bf00      	nop
 800cbae:	e000      	b.n	800cbb2 <tcp_timewait_input+0xae>
  return;
 800cbb0:	bf00      	nop
}
 800cbb2:	3708      	adds	r7, #8
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	2000820c 	.word	0x2000820c
 800cbbc:	20008200 	.word	0x20008200
 800cbc0:	20008204 	.word	0x20008204
 800cbc4:	2000820a 	.word	0x2000820a
 800cbc8:	200081f0 	.word	0x200081f0
 800cbcc:	20000ef4 	.word	0x20000ef4
 800cbd0:	20000ef8 	.word	0x20000ef8
 800cbd4:	200081c4 	.word	0x200081c4

0800cbd8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800cbd8:	b590      	push	{r4, r7, lr}
 800cbda:	b08d      	sub	sp, #52	; 0x34
 800cbdc:	af04      	add	r7, sp, #16
 800cbde:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	75fb      	strb	r3, [r7, #23]
  err_t err;

  err = ERR_OK;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800cbe8:	4b9c      	ldr	r3, [pc, #624]	; (800ce5c <tcp_process+0x284>)
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	f003 0304 	and.w	r3, r3, #4
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d043      	beq.n	800cc7c <tcp_process+0xa4>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	7d1b      	ldrb	r3, [r3, #20]
 800cbf8:	2b02      	cmp	r3, #2
 800cbfa:	d108      	bne.n	800cc0e <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cc00:	4b97      	ldr	r3, [pc, #604]	; (800ce60 <tcp_process+0x288>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d123      	bne.n	800cc50 <tcp_process+0x78>
        acceptable = 1;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	75fb      	strb	r3, [r7, #23]
 800cc0c:	e020      	b.n	800cc50 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc12:	4b94      	ldr	r3, [pc, #592]	; (800ce64 <tcp_process+0x28c>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d102      	bne.n	800cc20 <tcp_process+0x48>
        acceptable = 1;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	75fb      	strb	r3, [r7, #23]
 800cc1e:	e017      	b.n	800cc50 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cc20:	4b90      	ldr	r3, [pc, #576]	; (800ce64 <tcp_process+0x28c>)
 800cc22:	681a      	ldr	r2, [r3, #0]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc28:	1ad3      	subs	r3, r2, r3
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	db10      	blt.n	800cc50 <tcp_process+0x78>
 800cc2e:	4b8d      	ldr	r3, [pc, #564]	; (800ce64 <tcp_process+0x28c>)
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc36:	6879      	ldr	r1, [r7, #4]
 800cc38:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cc3a:	440b      	add	r3, r1
 800cc3c:	1ad3      	subs	r3, r2, r3
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	dc06      	bgt.n	800cc50 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	8b5b      	ldrh	r3, [r3, #26]
 800cc46:	f043 0302 	orr.w	r3, r3, #2
 800cc4a:	b29a      	uxth	r2, r3
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800cc50:	7dfb      	ldrb	r3, [r7, #23]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d010      	beq.n	800cc78 <tcp_process+0xa0>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
      recv_flags |= TF_RESET;
 800cc56:	4b84      	ldr	r3, [pc, #528]	; (800ce68 <tcp_process+0x290>)
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	f043 0308 	orr.w	r3, r3, #8
 800cc5e:	b2da      	uxtb	r2, r3
 800cc60:	4b81      	ldr	r3, [pc, #516]	; (800ce68 <tcp_process+0x290>)
 800cc62:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	8b5b      	ldrh	r3, [r3, #26]
 800cc68:	f023 0301 	bic.w	r3, r3, #1
 800cc6c:	b29a      	uxth	r2, r3
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800cc72:	f06f 030d 	mvn.w	r3, #13
 800cc76:	e343      	b.n	800d300 <tcp_process+0x728>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	e341      	b.n	800d300 <tcp_process+0x728>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800cc7c:	4b77      	ldr	r3, [pc, #476]	; (800ce5c <tcp_process+0x284>)
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	f003 0302 	and.w	r3, r3, #2
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d010      	beq.n	800ccaa <tcp_process+0xd2>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	7d1b      	ldrb	r3, [r3, #20]
 800cc8c:	2b02      	cmp	r3, #2
 800cc8e:	d00c      	beq.n	800ccaa <tcp_process+0xd2>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	7d1b      	ldrb	r3, [r3, #20]
 800cc94:	2b03      	cmp	r3, #3
 800cc96:	d008      	beq.n	800ccaa <tcp_process+0xd2>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	8b5b      	ldrh	r3, [r3, #26]
 800cc9c:	f043 0302 	orr.w	r3, r3, #2
 800cca0:	b29a      	uxth	r2, r3
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800cca6:	2300      	movs	r3, #0
 800cca8:	e32a      	b.n	800d300 <tcp_process+0x728>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	8b5b      	ldrh	r3, [r3, #26]
 800ccae:	f003 0310 	and.w	r3, r3, #16
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d103      	bne.n	800ccbe <tcp_process+0xe6>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ccb6:	4b6d      	ldr	r3, [pc, #436]	; (800ce6c <tcp_process+0x294>)
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
  pcb->persist_probe = 0;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 ffa2 	bl	800dc18 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	7d1b      	ldrb	r3, [r3, #20]
 800ccd8:	3b02      	subs	r3, #2
 800ccda:	2b07      	cmp	r3, #7
 800ccdc:	f200 8300 	bhi.w	800d2e0 <tcp_process+0x708>
 800cce0:	a201      	add	r2, pc, #4	; (adr r2, 800cce8 <tcp_process+0x110>)
 800cce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cce6:	bf00      	nop
 800cce8:	0800cd09 	.word	0x0800cd09
 800ccec:	0800cef1 	.word	0x0800cef1
 800ccf0:	0800d04f 	.word	0x0800d04f
 800ccf4:	0800d079 	.word	0x0800d079
 800ccf8:	0800d18f 	.word	0x0800d18f
 800ccfc:	0800d04f 	.word	0x0800d04f
 800cd00:	0800d21b 	.word	0x0800d21b
 800cd04:	0800d2ab 	.word	0x0800d2ab
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %s %"U32_F"\n",
                                    ackno, pcb->snd_nxt, pcb->unacked ? "" : " empty:",
                                    pcb->unacked ? lwip_ntohl(pcb->unacked->tcphdr->seqno) : 0));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800cd08:	4b54      	ldr	r3, [pc, #336]	; (800ce5c <tcp_process+0x284>)
 800cd0a:	781b      	ldrb	r3, [r3, #0]
 800cd0c:	f003 0310 	and.w	r3, r3, #16
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	f000 80c0 	beq.w	800ce96 <tcp_process+0x2be>
 800cd16:	4b51      	ldr	r3, [pc, #324]	; (800ce5c <tcp_process+0x284>)
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	f003 0302 	and.w	r3, r3, #2
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	f000 80b9 	beq.w	800ce96 <tcp_process+0x2be>
          && (ackno == pcb->lastack + 1)) {
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd28:	1c5a      	adds	r2, r3, #1
 800cd2a:	4b4d      	ldr	r3, [pc, #308]	; (800ce60 <tcp_process+0x288>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	f040 80b1 	bne.w	800ce96 <tcp_process+0x2be>
        pcb->rcv_nxt = seqno + 1;
 800cd34:	4b4b      	ldr	r3, [pc, #300]	; (800ce64 <tcp_process+0x28c>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	1c5a      	adds	r2, r3, #1
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800cd46:	4b46      	ldr	r3, [pc, #280]	; (800ce60 <tcp_process+0x288>)
 800cd48:	681a      	ldr	r2, [r3, #0]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800cd4e:	4b48      	ldr	r3, [pc, #288]	; (800ce70 <tcp_process+0x298>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	89db      	ldrh	r3, [r3, #14]
 800cd54:	b29a      	uxth	r2, r3
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800cd68:	4b3e      	ldr	r3, [pc, #248]	; (800ce64 <tcp_process+0x28c>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	1e5a      	subs	r2, r3, #1
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2204      	movs	r2, #4
 800cd76:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	3304      	adds	r3, #4
 800cd80:	4618      	mov	r0, r3
 800cd82:	f004 fa7f 	bl	8011284 <ip4_route>
 800cd86:	4601      	mov	r1, r0
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	3304      	adds	r3, #4
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	4620      	mov	r0, r4
 800cd90:	f7ff f946 	bl	800c020 <tcp_eff_send_mss_netif>
 800cd94:	4603      	mov	r3, r0
 800cd96:	461a      	mov	r2, r3
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cda0:	009a      	lsls	r2, r3, #2
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cda6:	005b      	lsls	r3, r3, #1
 800cda8:	f241 111c 	movw	r1, #4380	; 0x111c
 800cdac:	428b      	cmp	r3, r1
 800cdae:	bf38      	it	cc
 800cdb0:	460b      	movcc	r3, r1
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d204      	bcs.n	800cdc0 <tcp_process+0x1e8>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cdba:	009b      	lsls	r3, r3, #2
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	e00d      	b.n	800cddc <tcp_process+0x204>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cdc4:	005b      	lsls	r3, r3, #1
 800cdc6:	f241 121c 	movw	r2, #4380	; 0x111c
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d904      	bls.n	800cdd8 <tcp_process+0x200>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cdd2:	005b      	lsls	r3, r3, #1
 800cdd4:	b29b      	uxth	r3, r3
 800cdd6:	e001      	b.n	800cddc <tcp_process+0x204>
 800cdd8:	f241 131c 	movw	r3, #4380	; 0x111c
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
        --pcb->snd_queuelen;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cde8:	3b01      	subs	r3, #1
 800cdea:	b29a      	uxth	r2, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdf6:	613b      	str	r3, [r7, #16]
        if (rseg == NULL) {
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d107      	bne.n	800ce0e <tcp_process+0x236>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce02:	613b      	str	r3, [r7, #16]
          LWIP_ASSERT("no segment to free", rseg != NULL);
          pcb->unsent = rseg->next;
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	66da      	str	r2, [r3, #108]	; 0x6c
 800ce0c:	e003      	b.n	800ce16 <tcp_process+0x23e>
        } else {
          pcb->unacked = rseg->next;
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	681a      	ldr	r2, [r3, #0]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800ce16:	6938      	ldr	r0, [r7, #16]
 800ce18:	f7fe fe1b 	bl	800ba52 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d104      	bne.n	800ce2e <tcp_process+0x256>
          pcb->rtime = -1;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce2a:	861a      	strh	r2, [r3, #48]	; 0x30
 800ce2c:	e006      	b.n	800ce3c <tcp_process+0x264>
        } else {
          pcb->rtime = 0;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2200      	movs	r2, #0
 800ce32:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2200      	movs	r2, #0
 800ce38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d016      	beq.n	800ce74 <tcp_process+0x29c>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	6910      	ldr	r0, [r2, #16]
 800ce50:	2200      	movs	r2, #0
 800ce52:	6879      	ldr	r1, [r7, #4]
 800ce54:	4798      	blx	r3
 800ce56:	61b8      	str	r0, [r7, #24]
 800ce58:	e00e      	b.n	800ce78 <tcp_process+0x2a0>
 800ce5a:	bf00      	nop
 800ce5c:	2000820c 	.word	0x2000820c
 800ce60:	20008204 	.word	0x20008204
 800ce64:	20008200 	.word	0x20008200
 800ce68:	2000820d 	.word	0x2000820d
 800ce6c:	200081c4 	.word	0x200081c4
 800ce70:	200081f0 	.word	0x200081f0
 800ce74:	2300      	movs	r3, #0
 800ce76:	61bb      	str	r3, [r7, #24]
        if (err == ERR_ABRT) {
 800ce78:	69bb      	ldr	r3, [r7, #24]
 800ce7a:	f113 0f0d 	cmn.w	r3, #13
 800ce7e:	d102      	bne.n	800ce86 <tcp_process+0x2ae>
          return ERR_ABRT;
 800ce80:	f06f 030c 	mvn.w	r3, #12
 800ce84:	e23c      	b.n	800d300 <tcp_process+0x728>
        }
        tcp_ack_now(pcb);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	8b5b      	ldrh	r3, [r3, #26]
 800ce8a:	f043 0302 	orr.w	r3, r3, #2
 800ce8e:	b29a      	uxth	r2, r3
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ce94:	e226      	b.n	800d2e4 <tcp_process+0x70c>
      else if (flags & TCP_ACK) {
 800ce96:	4b96      	ldr	r3, [pc, #600]	; (800d0f0 <tcp_process+0x518>)
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	f003 0310 	and.w	r3, r3, #16
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	f000 8220 	beq.w	800d2e4 <tcp_process+0x70c>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cea4:	4b93      	ldr	r3, [pc, #588]	; (800d0f4 <tcp_process+0x51c>)
 800cea6:	6819      	ldr	r1, [r3, #0]
 800cea8:	4b93      	ldr	r3, [pc, #588]	; (800d0f8 <tcp_process+0x520>)
 800ceaa:	881b      	ldrh	r3, [r3, #0]
 800ceac:	461a      	mov	r2, r3
 800ceae:	4b93      	ldr	r3, [pc, #588]	; (800d0fc <tcp_process+0x524>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ceb4:	4b92      	ldr	r3, [pc, #584]	; (800d100 <tcp_process+0x528>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ceb8:	885b      	ldrh	r3, [r3, #2]
 800ceba:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cebc:	4a90      	ldr	r2, [pc, #576]	; (800d100 <tcp_process+0x528>)
 800cebe:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cec0:	8812      	ldrh	r2, [r2, #0]
 800cec2:	b292      	uxth	r2, r2
 800cec4:	9202      	str	r2, [sp, #8]
 800cec6:	9301      	str	r3, [sp, #4]
 800cec8:	4b8e      	ldr	r3, [pc, #568]	; (800d104 <tcp_process+0x52c>)
 800ceca:	9300      	str	r3, [sp, #0]
 800cecc:	4b8e      	ldr	r3, [pc, #568]	; (800d108 <tcp_process+0x530>)
 800cece:	4602      	mov	r2, r0
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f002 fa11 	bl	800f2f8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cedc:	2b05      	cmp	r3, #5
 800cede:	f200 8201 	bhi.w	800d2e4 <tcp_process+0x70c>
          pcb->rtime = 0;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2200      	movs	r2, #0
 800cee6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f002 f850 	bl	800ef8e <tcp_rexmit_rto>
      break;
 800ceee:	e1f9      	b.n	800d2e4 <tcp_process+0x70c>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800cef0:	4b7f      	ldr	r3, [pc, #508]	; (800d0f0 <tcp_process+0x518>)
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	f003 0310 	and.w	r3, r3, #16
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	f000 8094 	beq.w	800d026 <tcp_process+0x44e>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cefe:	4b7d      	ldr	r3, [pc, #500]	; (800d0f4 <tcp_process+0x51c>)
 800cf00:	681a      	ldr	r2, [r3, #0]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf06:	1ad3      	subs	r3, r2, r3
 800cf08:	3b01      	subs	r3, #1
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	db71      	blt.n	800cff2 <tcp_process+0x41a>
 800cf0e:	4b79      	ldr	r3, [pc, #484]	; (800d0f4 <tcp_process+0x51c>)
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf16:	1ad3      	subs	r3, r2, r3
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	dc6a      	bgt.n	800cff2 <tcp_process+0x41a>
          pcb->state = ESTABLISHED;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2204      	movs	r2, #4
 800cf20:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d103      	bne.n	800cf32 <tcp_process+0x35a>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800cf2a:	f06f 0305 	mvn.w	r3, #5
 800cf2e:	61bb      	str	r3, [r7, #24]
 800cf30:	e011      	b.n	800cf56 <tcp_process+0x37e>
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf36:	699b      	ldr	r3, [r3, #24]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d009      	beq.n	800cf50 <tcp_process+0x378>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf40:	699b      	ldr	r3, [r3, #24]
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	6910      	ldr	r0, [r2, #16]
 800cf46:	2200      	movs	r2, #0
 800cf48:	6879      	ldr	r1, [r7, #4]
 800cf4a:	4798      	blx	r3
 800cf4c:	61b8      	str	r0, [r7, #24]
 800cf4e:	e002      	b.n	800cf56 <tcp_process+0x37e>
 800cf50:	f06f 030f 	mvn.w	r3, #15
 800cf54:	61bb      	str	r3, [r7, #24]
          }
          if (err != ERR_OK) {
 800cf56:	69bb      	ldr	r3, [r7, #24]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d009      	beq.n	800cf70 <tcp_process+0x398>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800cf5c:	69bb      	ldr	r3, [r7, #24]
 800cf5e:	f113 0f0d 	cmn.w	r3, #13
 800cf62:	d002      	beq.n	800cf6a <tcp_process+0x392>
              tcp_abort(pcb);
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f7fd ff9b 	bl	800aea0 <tcp_abort>
            }
            return ERR_ABRT;
 800cf6a:	f06f 030c 	mvn.w	r3, #12
 800cf6e:	e1c7      	b.n	800d300 <tcp_process+0x728>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 fa2b 	bl	800d3cc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800cf76:	4b65      	ldr	r3, [pc, #404]	; (800d10c <tcp_process+0x534>)
 800cf78:	881b      	ldrh	r3, [r3, #0]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d005      	beq.n	800cf8a <tcp_process+0x3b2>
            recv_acked--;
 800cf7e:	4b63      	ldr	r3, [pc, #396]	; (800d10c <tcp_process+0x534>)
 800cf80:	881b      	ldrh	r3, [r3, #0]
 800cf82:	3b01      	subs	r3, #1
 800cf84:	b29a      	uxth	r2, r3
 800cf86:	4b61      	ldr	r3, [pc, #388]	; (800d10c <tcp_process+0x534>)
 800cf88:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf8e:	009a      	lsls	r2, r3, #2
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf94:	005b      	lsls	r3, r3, #1
 800cf96:	f241 111c 	movw	r1, #4380	; 0x111c
 800cf9a:	428b      	cmp	r3, r1
 800cf9c:	bf38      	it	cc
 800cf9e:	460b      	movcc	r3, r1
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d204      	bcs.n	800cfae <tcp_process+0x3d6>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cfa8:	009b      	lsls	r3, r3, #2
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	e00d      	b.n	800cfca <tcp_process+0x3f2>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cfb2:	005b      	lsls	r3, r3, #1
 800cfb4:	f241 121c 	movw	r2, #4380	; 0x111c
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d904      	bls.n	800cfc6 <tcp_process+0x3ee>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cfc0:	005b      	lsls	r3, r3, #1
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	e001      	b.n	800cfca <tcp_process+0x3f2>
 800cfc6:	f241 131c 	movw	r3, #4380	; 0x111c
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800cfd0:	4b4f      	ldr	r3, [pc, #316]	; (800d110 <tcp_process+0x538>)
 800cfd2:	781b      	ldrb	r3, [r3, #0]
 800cfd4:	f003 0320 	and.w	r3, r3, #32
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d037      	beq.n	800d04c <tcp_process+0x474>
            tcp_ack_now(pcb);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	8b5b      	ldrh	r3, [r3, #26]
 800cfe0:	f043 0302 	orr.w	r3, r3, #2
 800cfe4:	b29a      	uxth	r2, r3
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2207      	movs	r2, #7
 800cfee:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800cff0:	e02c      	b.n	800d04c <tcp_process+0x474>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cff2:	4b40      	ldr	r3, [pc, #256]	; (800d0f4 <tcp_process+0x51c>)
 800cff4:	6819      	ldr	r1, [r3, #0]
 800cff6:	4b40      	ldr	r3, [pc, #256]	; (800d0f8 <tcp_process+0x520>)
 800cff8:	881b      	ldrh	r3, [r3, #0]
 800cffa:	461a      	mov	r2, r3
 800cffc:	4b3f      	ldr	r3, [pc, #252]	; (800d0fc <tcp_process+0x524>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d002:	4b3f      	ldr	r3, [pc, #252]	; (800d100 <tcp_process+0x528>)
 800d004:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d006:	885b      	ldrh	r3, [r3, #2]
 800d008:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d00a:	4a3d      	ldr	r2, [pc, #244]	; (800d100 <tcp_process+0x528>)
 800d00c:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d00e:	8812      	ldrh	r2, [r2, #0]
 800d010:	b292      	uxth	r2, r2
 800d012:	9202      	str	r2, [sp, #8]
 800d014:	9301      	str	r3, [sp, #4]
 800d016:	4b3b      	ldr	r3, [pc, #236]	; (800d104 <tcp_process+0x52c>)
 800d018:	9300      	str	r3, [sp, #0]
 800d01a:	4b3b      	ldr	r3, [pc, #236]	; (800d108 <tcp_process+0x530>)
 800d01c:	4602      	mov	r2, r0
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f002 f96a 	bl	800f2f8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d024:	e160      	b.n	800d2e8 <tcp_process+0x710>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d026:	4b32      	ldr	r3, [pc, #200]	; (800d0f0 <tcp_process+0x518>)
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	f003 0302 	and.w	r3, r3, #2
 800d02e:	2b00      	cmp	r3, #0
 800d030:	f000 815a 	beq.w	800d2e8 <tcp_process+0x710>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d038:	1e5a      	subs	r2, r3, #1
 800d03a:	4b30      	ldr	r3, [pc, #192]	; (800d0fc <tcp_process+0x524>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	429a      	cmp	r2, r3
 800d040:	f040 8152 	bne.w	800d2e8 <tcp_process+0x710>
        tcp_rexmit(pcb);
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f001 ffb3 	bl	800efb0 <tcp_rexmit>
      break;
 800d04a:	e14d      	b.n	800d2e8 <tcp_process+0x710>
 800d04c:	e14c      	b.n	800d2e8 <tcp_process+0x710>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f000 f9bc 	bl	800d3cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d054:	4b2e      	ldr	r3, [pc, #184]	; (800d110 <tcp_process+0x538>)
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	f003 0320 	and.w	r3, r3, #32
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	f000 8145 	beq.w	800d2ec <tcp_process+0x714>
        tcp_ack_now(pcb);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	8b5b      	ldrh	r3, [r3, #26]
 800d066:	f043 0302 	orr.w	r3, r3, #2
 800d06a:	b29a      	uxth	r2, r3
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2207      	movs	r2, #7
 800d074:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d076:	e139      	b.n	800d2ec <tcp_process+0x714>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f000 f9a7 	bl	800d3cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d07e:	4b24      	ldr	r3, [pc, #144]	; (800d110 <tcp_process+0x538>)
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	f003 0320 	and.w	r3, r3, #32
 800d086:	2b00      	cmp	r3, #0
 800d088:	d06a      	beq.n	800d160 <tcp_process+0x588>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d08a:	4b19      	ldr	r3, [pc, #100]	; (800d0f0 <tcp_process+0x518>)
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	f003 0310 	and.w	r3, r3, #16
 800d092:	2b00      	cmp	r3, #0
 800d094:	d059      	beq.n	800d14a <tcp_process+0x572>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d09a:	4b16      	ldr	r3, [pc, #88]	; (800d0f4 <tcp_process+0x51c>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d153      	bne.n	800d14a <tcp_process+0x572>
            pcb->unsent == NULL) {
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d14f      	bne.n	800d14a <tcp_process+0x572>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	8b5b      	ldrh	r3, [r3, #26]
 800d0ae:	f043 0302 	orr.w	r3, r3, #2
 800d0b2:	b29a      	uxth	r2, r3
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f7fe ff07 	bl	800becc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d0be:	4b15      	ldr	r3, [pc, #84]	; (800d114 <tcp_process+0x53c>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d105      	bne.n	800d0d4 <tcp_process+0x4fc>
 800d0c8:	4b12      	ldr	r3, [pc, #72]	; (800d114 <tcp_process+0x53c>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	68db      	ldr	r3, [r3, #12]
 800d0ce:	4a11      	ldr	r2, [pc, #68]	; (800d114 <tcp_process+0x53c>)
 800d0d0:	6013      	str	r3, [r2, #0]
 800d0d2:	e027      	b.n	800d124 <tcp_process+0x54c>
 800d0d4:	4b0f      	ldr	r3, [pc, #60]	; (800d114 <tcp_process+0x53c>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	60fb      	str	r3, [r7, #12]
 800d0da:	e020      	b.n	800d11e <tcp_process+0x546>
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	68db      	ldr	r3, [r3, #12]
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d118      	bne.n	800d118 <tcp_process+0x540>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	68da      	ldr	r2, [r3, #12]
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	60da      	str	r2, [r3, #12]
 800d0ee:	e019      	b.n	800d124 <tcp_process+0x54c>
 800d0f0:	2000820c 	.word	0x2000820c
 800d0f4:	20008204 	.word	0x20008204
 800d0f8:	2000820a 	.word	0x2000820a
 800d0fc:	20008200 	.word	0x20008200
 800d100:	200081f0 	.word	0x200081f0
 800d104:	20000ef4 	.word	0x20000ef4
 800d108:	20000ef8 	.word	0x20000ef8
 800d10c:	20008208 	.word	0x20008208
 800d110:	2000820d 	.word	0x2000820d
 800d114:	200081d0 	.word	0x200081d0
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	68db      	ldr	r3, [r3, #12]
 800d11c:	60fb      	str	r3, [r7, #12]
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d1db      	bne.n	800d0dc <tcp_process+0x504>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2200      	movs	r2, #0
 800d128:	60da      	str	r2, [r3, #12]
 800d12a:	4b77      	ldr	r3, [pc, #476]	; (800d308 <tcp_process+0x730>)
 800d12c:	2201      	movs	r2, #1
 800d12e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	220a      	movs	r2, #10
 800d134:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d136:	4b75      	ldr	r3, [pc, #468]	; (800d30c <tcp_process+0x734>)
 800d138:	681a      	ldr	r2, [r3, #0]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	60da      	str	r2, [r3, #12]
 800d13e:	4a73      	ldr	r2, [pc, #460]	; (800d30c <tcp_process+0x734>)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6013      	str	r3, [r2, #0]
 800d144:	f002 fa46 	bl	800f5d4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d148:	e0d2      	b.n	800d2f0 <tcp_process+0x718>
          tcp_ack_now(pcb);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	8b5b      	ldrh	r3, [r3, #26]
 800d14e:	f043 0302 	orr.w	r3, r3, #2
 800d152:	b29a      	uxth	r2, r3
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2208      	movs	r2, #8
 800d15c:	751a      	strb	r2, [r3, #20]
      break;
 800d15e:	e0c7      	b.n	800d2f0 <tcp_process+0x718>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d160:	4b6b      	ldr	r3, [pc, #428]	; (800d310 <tcp_process+0x738>)
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	f003 0310 	and.w	r3, r3, #16
 800d168:	2b00      	cmp	r3, #0
 800d16a:	f000 80c1 	beq.w	800d2f0 <tcp_process+0x718>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d172:	4b68      	ldr	r3, [pc, #416]	; (800d314 <tcp_process+0x73c>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	429a      	cmp	r2, r3
 800d178:	f040 80ba 	bne.w	800d2f0 <tcp_process+0x718>
                 pcb->unsent == NULL) {
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d180:	2b00      	cmp	r3, #0
 800d182:	f040 80b5 	bne.w	800d2f0 <tcp_process+0x718>
        pcb->state = FIN_WAIT_2;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2206      	movs	r2, #6
 800d18a:	751a      	strb	r2, [r3, #20]
      break;
 800d18c:	e0b0      	b.n	800d2f0 <tcp_process+0x718>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f000 f91c 	bl	800d3cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d194:	4b60      	ldr	r3, [pc, #384]	; (800d318 <tcp_process+0x740>)
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	f003 0320 	and.w	r3, r3, #32
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	f000 80a9 	beq.w	800d2f4 <tcp_process+0x71c>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	8b5b      	ldrh	r3, [r3, #26]
 800d1a6:	f043 0302 	orr.w	r3, r3, #2
 800d1aa:	b29a      	uxth	r2, r3
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f7fe fe8b 	bl	800becc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d1b6:	4b59      	ldr	r3, [pc, #356]	; (800d31c <tcp_process+0x744>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d105      	bne.n	800d1cc <tcp_process+0x5f4>
 800d1c0:	4b56      	ldr	r3, [pc, #344]	; (800d31c <tcp_process+0x744>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	4a55      	ldr	r2, [pc, #340]	; (800d31c <tcp_process+0x744>)
 800d1c8:	6013      	str	r3, [r2, #0]
 800d1ca:	e013      	b.n	800d1f4 <tcp_process+0x61c>
 800d1cc:	4b53      	ldr	r3, [pc, #332]	; (800d31c <tcp_process+0x744>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	60bb      	str	r3, [r7, #8]
 800d1d2:	e00c      	b.n	800d1ee <tcp_process+0x616>
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	68db      	ldr	r3, [r3, #12]
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d104      	bne.n	800d1e8 <tcp_process+0x610>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	68da      	ldr	r2, [r3, #12]
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	60da      	str	r2, [r3, #12]
 800d1e6:	e005      	b.n	800d1f4 <tcp_process+0x61c>
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	68db      	ldr	r3, [r3, #12]
 800d1ec:	60bb      	str	r3, [r7, #8]
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d1ef      	bne.n	800d1d4 <tcp_process+0x5fc>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	60da      	str	r2, [r3, #12]
 800d1fa:	4b43      	ldr	r3, [pc, #268]	; (800d308 <tcp_process+0x730>)
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	220a      	movs	r2, #10
 800d204:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d206:	4b41      	ldr	r3, [pc, #260]	; (800d30c <tcp_process+0x734>)
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	60da      	str	r2, [r3, #12]
 800d20e:	4a3f      	ldr	r2, [pc, #252]	; (800d30c <tcp_process+0x734>)
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6013      	str	r3, [r2, #0]
 800d214:	f002 f9de 	bl	800f5d4 <tcp_timer_needed>
      }
      break;
 800d218:	e06c      	b.n	800d2f4 <tcp_process+0x71c>
    case CLOSING:
      tcp_receive(pcb);
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f000 f8d6 	bl	800d3cc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d220:	4b3b      	ldr	r3, [pc, #236]	; (800d310 <tcp_process+0x738>)
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	f003 0310 	and.w	r3, r3, #16
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d065      	beq.n	800d2f8 <tcp_process+0x720>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d230:	4b38      	ldr	r3, [pc, #224]	; (800d314 <tcp_process+0x73c>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	429a      	cmp	r2, r3
 800d236:	d15f      	bne.n	800d2f8 <tcp_process+0x720>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d15b      	bne.n	800d2f8 <tcp_process+0x720>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f7fe fe43 	bl	800becc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d246:	4b35      	ldr	r3, [pc, #212]	; (800d31c <tcp_process+0x744>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	687a      	ldr	r2, [r7, #4]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d105      	bne.n	800d25c <tcp_process+0x684>
 800d250:	4b32      	ldr	r3, [pc, #200]	; (800d31c <tcp_process+0x744>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	68db      	ldr	r3, [r3, #12]
 800d256:	4a31      	ldr	r2, [pc, #196]	; (800d31c <tcp_process+0x744>)
 800d258:	6013      	str	r3, [r2, #0]
 800d25a:	e013      	b.n	800d284 <tcp_process+0x6ac>
 800d25c:	4b2f      	ldr	r3, [pc, #188]	; (800d31c <tcp_process+0x744>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	61fb      	str	r3, [r7, #28]
 800d262:	e00c      	b.n	800d27e <tcp_process+0x6a6>
 800d264:	69fb      	ldr	r3, [r7, #28]
 800d266:	68db      	ldr	r3, [r3, #12]
 800d268:	687a      	ldr	r2, [r7, #4]
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d104      	bne.n	800d278 <tcp_process+0x6a0>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	68da      	ldr	r2, [r3, #12]
 800d272:	69fb      	ldr	r3, [r7, #28]
 800d274:	60da      	str	r2, [r3, #12]
 800d276:	e005      	b.n	800d284 <tcp_process+0x6ac>
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	68db      	ldr	r3, [r3, #12]
 800d27c:	61fb      	str	r3, [r7, #28]
 800d27e:	69fb      	ldr	r3, [r7, #28]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d1ef      	bne.n	800d264 <tcp_process+0x68c>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2200      	movs	r2, #0
 800d288:	60da      	str	r2, [r3, #12]
 800d28a:	4b1f      	ldr	r3, [pc, #124]	; (800d308 <tcp_process+0x730>)
 800d28c:	2201      	movs	r2, #1
 800d28e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	220a      	movs	r2, #10
 800d294:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d296:	4b1d      	ldr	r3, [pc, #116]	; (800d30c <tcp_process+0x734>)
 800d298:	681a      	ldr	r2, [r3, #0]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	60da      	str	r2, [r3, #12]
 800d29e:	4a1b      	ldr	r2, [pc, #108]	; (800d30c <tcp_process+0x734>)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6013      	str	r3, [r2, #0]
 800d2a4:	f002 f996 	bl	800f5d4 <tcp_timer_needed>
      }
      break;
 800d2a8:	e026      	b.n	800d2f8 <tcp_process+0x720>
    case LAST_ACK:
      tcp_receive(pcb);
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f000 f88e 	bl	800d3cc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d2b0:	4b17      	ldr	r3, [pc, #92]	; (800d310 <tcp_process+0x738>)
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	f003 0310 	and.w	r3, r3, #16
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d01f      	beq.n	800d2fc <tcp_process+0x724>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d2c0:	4b14      	ldr	r3, [pc, #80]	; (800d314 <tcp_process+0x73c>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d119      	bne.n	800d2fc <tcp_process+0x724>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d115      	bne.n	800d2fc <tcp_process+0x724>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d2d0:	4b11      	ldr	r3, [pc, #68]	; (800d318 <tcp_process+0x740>)
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	f043 0310 	orr.w	r3, r3, #16
 800d2d8:	b2da      	uxtb	r2, r3
 800d2da:	4b0f      	ldr	r3, [pc, #60]	; (800d318 <tcp_process+0x740>)
 800d2dc:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d2de:	e00d      	b.n	800d2fc <tcp_process+0x724>
    default:
      break;
 800d2e0:	bf00      	nop
 800d2e2:	e00c      	b.n	800d2fe <tcp_process+0x726>
      break;
 800d2e4:	bf00      	nop
 800d2e6:	e00a      	b.n	800d2fe <tcp_process+0x726>
      break;
 800d2e8:	bf00      	nop
 800d2ea:	e008      	b.n	800d2fe <tcp_process+0x726>
      break;
 800d2ec:	bf00      	nop
 800d2ee:	e006      	b.n	800d2fe <tcp_process+0x726>
      break;
 800d2f0:	bf00      	nop
 800d2f2:	e004      	b.n	800d2fe <tcp_process+0x726>
      break;
 800d2f4:	bf00      	nop
 800d2f6:	e002      	b.n	800d2fe <tcp_process+0x726>
      break;
 800d2f8:	bf00      	nop
 800d2fa:	e000      	b.n	800d2fe <tcp_process+0x726>
      break;
 800d2fc:	bf00      	nop
  }
  return ERR_OK;
 800d2fe:	2300      	movs	r3, #0
}
 800d300:	4618      	mov	r0, r3
 800d302:	3724      	adds	r7, #36	; 0x24
 800d304:	46bd      	mov	sp, r7
 800d306:	bd90      	pop	{r4, r7, pc}
 800d308:	200081d8 	.word	0x200081d8
 800d30c:	200081d4 	.word	0x200081d4
 800d310:	2000820c 	.word	0x2000820c
 800d314:	20008204 	.word	0x20008204
 800d318:	2000820d 	.word	0x2000820d
 800d31c:	200081d0 	.word	0x200081d0

0800d320 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d320:	b5b0      	push	{r4, r5, r7, lr}
 800d322:	b086      	sub	sp, #24
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	607a      	str	r2, [r7, #4]
 800d32c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d32e:	e01f      	b.n	800d370 <tcp_free_acked_segments+0x50>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	685b      	ldr	r3, [r3, #4]
 800d33e:	4618      	mov	r0, r3
 800d340:	f7fd f924 	bl	800a58c <pbuf_clen>
 800d344:	4603      	mov	r3, r0
 800d346:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800d34e:	8a7b      	ldrh	r3, [r7, #18]
 800d350:	1ad3      	subs	r3, r2, r3
 800d352:	b29a      	uxth	r2, r3
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	891a      	ldrh	r2, [r3, #8]
 800d35e:	4b19      	ldr	r3, [pc, #100]	; (800d3c4 <tcp_free_acked_segments+0xa4>)
 800d360:	881b      	ldrh	r3, [r3, #0]
 800d362:	4413      	add	r3, r2
 800d364:	b29a      	uxth	r2, r3
 800d366:	4b17      	ldr	r3, [pc, #92]	; (800d3c4 <tcp_free_acked_segments+0xa4>)
 800d368:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d36a:	6978      	ldr	r0, [r7, #20]
 800d36c:	f7fe fb71 	bl	800ba52 <tcp_seg_free>
  while (seg_list != NULL &&
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d020      	beq.n	800d3b8 <tcp_free_acked_segments+0x98>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	691b      	ldr	r3, [r3, #16]
 800d37a:	685b      	ldr	r3, [r3, #4]
 800d37c:	4618      	mov	r0, r3
 800d37e:	f7fb fd52 	bl	8008e26 <lwip_htonl>
 800d382:	4604      	mov	r4, r0
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	891b      	ldrh	r3, [r3, #8]
 800d388:	461d      	mov	r5, r3
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	691b      	ldr	r3, [r3, #16]
 800d38e:	899b      	ldrh	r3, [r3, #12]
 800d390:	b29b      	uxth	r3, r3
 800d392:	4618      	mov	r0, r3
 800d394:	f7fb fd32 	bl	8008dfc <lwip_htons>
 800d398:	4603      	mov	r3, r0
 800d39a:	b2db      	uxtb	r3, r3
 800d39c:	f003 0303 	and.w	r3, r3, #3
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d001      	beq.n	800d3a8 <tcp_free_acked_segments+0x88>
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	e000      	b.n	800d3aa <tcp_free_acked_segments+0x8a>
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	442b      	add	r3, r5
 800d3ac:	18e2      	adds	r2, r4, r3
 800d3ae:	4b06      	ldr	r3, [pc, #24]	; (800d3c8 <tcp_free_acked_segments+0xa8>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	ddbb      	ble.n	800d330 <tcp_free_acked_segments+0x10>
    if (pcb->snd_queuelen != 0) {
      LWIP_ASSERT("tcp_receive: valid queue length",
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d3b8:	68bb      	ldr	r3, [r7, #8]
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3718      	adds	r7, #24
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bdb0      	pop	{r4, r5, r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	20008208 	.word	0x20008208
 800d3c8:	20008204 	.word	0x20008204

0800d3cc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d3cc:	b590      	push	{r4, r7, lr}
 800d3ce:	b08d      	sub	sp, #52	; 0x34
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	62bb      	str	r3, [r7, #40]	; 0x28

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
 800d3d8:	4b9c      	ldr	r3, [pc, #624]	; (800d64c <tcp_receive+0x280>)
 800d3da:	781b      	ldrb	r3, [r3, #0]
 800d3dc:	f003 0310 	and.w	r3, r3, #16
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	f000 8251 	beq.w	800d888 <tcp_receive+0x4bc>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d3ec:	461a      	mov	r2, r3
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3f2:	4413      	add	r3, r2
 800d3f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d3fa:	4b95      	ldr	r3, [pc, #596]	; (800d650 <tcp_receive+0x284>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	1ad3      	subs	r3, r2, r3
 800d400:	2b00      	cmp	r3, #0
 800d402:	db1b      	blt.n	800d43c <tcp_receive+0x70>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d408:	4b91      	ldr	r3, [pc, #580]	; (800d650 <tcp_receive+0x284>)
 800d40a:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d106      	bne.n	800d41e <tcp_receive+0x52>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d414:	4b8f      	ldr	r3, [pc, #572]	; (800d654 <tcp_receive+0x288>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	1ad3      	subs	r3, r2, r3
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	db0e      	blt.n	800d43c <tcp_receive+0x70>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d422:	4b8c      	ldr	r3, [pc, #560]	; (800d654 <tcp_receive+0x288>)
 800d424:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d426:	429a      	cmp	r2, r3
 800d428:	d125      	bne.n	800d476 <tcp_receive+0xaa>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d42a:	4b8b      	ldr	r3, [pc, #556]	; (800d658 <tcp_receive+0x28c>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	89db      	ldrh	r3, [r3, #14]
 800d430:	b29a      	uxth	r2, r3
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d438:	429a      	cmp	r2, r3
 800d43a:	d91c      	bls.n	800d476 <tcp_receive+0xaa>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d43c:	4b86      	ldr	r3, [pc, #536]	; (800d658 <tcp_receive+0x28c>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	89db      	ldrh	r3, [r3, #14]
 800d442:	b29a      	uxth	r2, r3
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d456:	429a      	cmp	r2, r3
 800d458:	d205      	bcs.n	800d466 <tcp_receive+0x9a>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800d466:	4b7a      	ldr	r3, [pc, #488]	; (800d650 <tcp_receive+0x284>)
 800d468:	681a      	ldr	r2, [r3, #0]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800d46e:	4b79      	ldr	r3, [pc, #484]	; (800d654 <tcp_receive+0x288>)
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d476:	4b77      	ldr	r3, [pc, #476]	; (800d654 <tcp_receive+0x288>)
 800d478:	681a      	ldr	r2, [r3, #0]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d47e:	1ad3      	subs	r3, r2, r3
 800d480:	2b00      	cmp	r3, #0
 800d482:	dc58      	bgt.n	800d536 <tcp_receive+0x16a>
      /* Clause 2 */
      if (tcplen == 0) {
 800d484:	4b75      	ldr	r3, [pc, #468]	; (800d65c <tcp_receive+0x290>)
 800d486:	881b      	ldrh	r3, [r3, #0]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d14b      	bne.n	800d524 <tcp_receive+0x158>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d490:	687a      	ldr	r2, [r7, #4]
 800d492:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800d496:	4413      	add	r3, r2
 800d498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d49a:	429a      	cmp	r2, r3
 800d49c:	d142      	bne.n	800d524 <tcp_receive+0x158>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	db3d      	blt.n	800d524 <tcp_receive+0x158>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4ac:	4b69      	ldr	r3, [pc, #420]	; (800d654 <tcp_receive+0x288>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d137      	bne.n	800d524 <tcp_receive+0x158>
              found_dupack = 1;
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	62bb      	str	r3, [r7, #40]	; 0x28
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d4be:	2bff      	cmp	r3, #255	; 0xff
 800d4c0:	d007      	beq.n	800d4d2 <tcp_receive+0x106>
                ++pcb->dupacks;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d4c8:	3301      	adds	r3, #1
 800d4ca:	b2da      	uxtb	r2, r3
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d4d8:	2b03      	cmp	r3, #3
 800d4da:	d91b      	bls.n	800d514 <tcp_receive+0x148>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d4e6:	4413      	add	r3, r2
 800d4e8:	b29a      	uxth	r2, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d30a      	bcc.n	800d50a <tcp_receive+0x13e>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d4fe:	4413      	add	r3, r2
 800d500:	b29a      	uxth	r2, r3
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d508:	e004      	b.n	800d514 <tcp_receive+0x148>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d510:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d51a:	2b02      	cmp	r3, #2
 800d51c:	d902      	bls.n	800d524 <tcp_receive+0x158>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f001 fda2 	bl	800f068 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d526:	2b00      	cmp	r3, #0
 800d528:	f040 8157 	bne.w	800d7da <tcp_receive+0x40e>
        pcb->dupacks = 0;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2200      	movs	r2, #0
 800d530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d534:	e151      	b.n	800d7da <tcp_receive+0x40e>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d536:	4b47      	ldr	r3, [pc, #284]	; (800d654 <tcp_receive+0x288>)
 800d538:	681a      	ldr	r2, [r3, #0]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d53e:	1ad3      	subs	r3, r2, r3
 800d540:	3b01      	subs	r3, #1
 800d542:	2b00      	cmp	r3, #0
 800d544:	f2c0 8144 	blt.w	800d7d0 <tcp_receive+0x404>
 800d548:	4b42      	ldr	r3, [pc, #264]	; (800d654 <tcp_receive+0x288>)
 800d54a:	681a      	ldr	r2, [r3, #0]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d550:	1ad3      	subs	r3, r2, r3
 800d552:	2b00      	cmp	r3, #0
 800d554:	f300 813c 	bgt.w	800d7d0 <tcp_receive+0x404>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	8b5b      	ldrh	r3, [r3, #26]
 800d55c:	f003 0304 	and.w	r3, r3, #4
 800d560:	2b00      	cmp	r3, #0
 800d562:	d010      	beq.n	800d586 <tcp_receive+0x1ba>
        tcp_clear_flags(pcb, TF_INFR);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	8b5b      	ldrh	r3, [r3, #26]
 800d568:	f023 0304 	bic.w	r3, r3, #4
 800d56c:	b29a      	uxth	r2, r3
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2200      	movs	r2, #0
 800d582:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2200      	movs	r2, #0
 800d58a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d594:	10db      	asrs	r3, r3, #3
 800d596:	b21b      	sxth	r3, r3
 800d598:	b29a      	uxth	r2, r3
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d5a0:	b29b      	uxth	r3, r3
 800d5a2:	4413      	add	r3, r2
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	b21a      	sxth	r2, r3
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d5ae:	4b29      	ldr	r3, [pc, #164]	; (800d654 <tcp_receive+0x288>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	b29a      	uxth	r2, r3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5b8:	b29b      	uxth	r3, r3
 800d5ba:	1ad3      	subs	r3, r2, r3
 800d5bc:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800d5c6:	4b23      	ldr	r3, [pc, #140]	; (800d654 <tcp_receive+0x288>)
 800d5c8:	681a      	ldr	r2, [r3, #0]
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	7d1b      	ldrb	r3, [r3, #20]
 800d5d2:	2b03      	cmp	r3, #3
 800d5d4:	f240 808d 	bls.w	800d6f2 <tcp_receive+0x326>
        if (pcb->cwnd < pcb->ssthresh) {
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d23b      	bcs.n	800d660 <tcp_receive+0x294>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	8b5b      	ldrh	r3, [r3, #26]
 800d5ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d001      	beq.n	800d5f8 <tcp_receive+0x22c>
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	e000      	b.n	800d5fa <tcp_receive+0x22e>
 800d5f8:	2302      	movs	r3, #2
 800d5fa:	767b      	strb	r3, [r7, #25]
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d5fc:	7e7b      	ldrb	r3, [r7, #25]
 800d5fe:	b29a      	uxth	r2, r3
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d604:	fb12 f303 	smulbb	r3, r2, r3
 800d608:	b29b      	uxth	r3, r3
 800d60a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d60c:	4293      	cmp	r3, r2
 800d60e:	bf28      	it	cs
 800d610:	4613      	movcs	r3, r2
 800d612:	82fb      	strh	r3, [r7, #22]
          TCP_WND_INC(pcb->cwnd, increase);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d61a:	8afb      	ldrh	r3, [r7, #22]
 800d61c:	4413      	add	r3, r2
 800d61e:	b29a      	uxth	r2, r3
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d626:	429a      	cmp	r2, r3
 800d628:	d309      	bcc.n	800d63e <tcp_receive+0x272>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d630:	8afb      	ldrh	r3, [r7, #22]
 800d632:	4413      	add	r3, r2
 800d634:	b29a      	uxth	r2, r3
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d63c:	e059      	b.n	800d6f2 <tcp_receive+0x326>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d644:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d648:	e053      	b.n	800d6f2 <tcp_receive+0x326>
 800d64a:	bf00      	nop
 800d64c:	2000820c 	.word	0x2000820c
 800d650:	20008200 	.word	0x20008200
 800d654:	20008204 	.word	0x20008204
 800d658:	200081f0 	.word	0x200081f0
 800d65c:	2000820a 	.word	0x2000820a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d666:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d668:	4413      	add	r3, r2
 800d66a:	b29a      	uxth	r2, r3
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d672:	429a      	cmp	r2, r3
 800d674:	d309      	bcc.n	800d68a <tcp_receive+0x2be>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d67c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d67e:	4413      	add	r3, r2
 800d680:	b29a      	uxth	r2, r3
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d688:	e004      	b.n	800d694 <tcp_receive+0x2c8>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d690:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d326      	bcc.n	800d6f2 <tcp_receive+0x326>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d6b0:	1ad3      	subs	r3, r2, r3
 800d6b2:	b29a      	uxth	r2, r3
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d6c4:	4413      	add	r3, r2
 800d6c6:	b29a      	uxth	r2, r3
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d30a      	bcc.n	800d6e8 <tcp_receive+0x31c>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d6dc:	4413      	add	r3, r2
 800d6de:	b29a      	uxth	r2, r3
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d6e6:	e004      	b.n	800d6f2 <tcp_receive+0x326>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6fa:	4a90      	ldr	r2, [pc, #576]	; (800d93c <tcp_receive+0x570>)
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f7ff fe0f 	bl	800d320 <tcp_free_acked_segments>
 800d702:	4602      	mov	r2, r0
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d710:	4a8b      	ldr	r2, [pc, #556]	; (800d940 <tcp_receive+0x574>)
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f7ff fe04 	bl	800d320 <tcp_free_acked_segments>
 800d718:	4602      	mov	r2, r0
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d722:	2b00      	cmp	r3, #0
 800d724:	d104      	bne.n	800d730 <tcp_receive+0x364>
        pcb->rtime = -1;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d72c:	861a      	strh	r2, [r3, #48]	; 0x30
 800d72e:	e002      	b.n	800d736 <tcp_receive+0x36a>
      } else {
        pcb->rtime = 0;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2200      	movs	r2, #0
 800d734:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2200      	movs	r2, #0
 800d73a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d740:	2b00      	cmp	r3, #0
 800d742:	d103      	bne.n	800d74c <tcp_receive+0x380>
        pcb->unsent_oversize = 0;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2200      	movs	r2, #0
 800d748:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d752:	4b7c      	ldr	r3, [pc, #496]	; (800d944 <tcp_receive+0x578>)
 800d754:	881b      	ldrh	r3, [r3, #0]
 800d756:	4413      	add	r3, r2
 800d758:	b29a      	uxth	r2, r3
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	8b5b      	ldrh	r3, [r3, #26]
 800d764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d035      	beq.n	800d7d8 <tcp_receive+0x40c>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d770:	2b00      	cmp	r3, #0
 800d772:	d118      	bne.n	800d7a6 <tcp_receive+0x3da>
          if ((pcb->unsent == NULL) ||
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d00c      	beq.n	800d796 <tcp_receive+0x3ca>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d784:	691b      	ldr	r3, [r3, #16]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	4618      	mov	r0, r3
 800d78a:	f7fb fb4c 	bl	8008e26 <lwip_htonl>
 800d78e:	4603      	mov	r3, r0
 800d790:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d792:	2b00      	cmp	r3, #0
 800d794:	dc20      	bgt.n	800d7d8 <tcp_receive+0x40c>
            tcp_clear_flags(pcb, TF_RTO);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	8b5b      	ldrh	r3, [r3, #26]
 800d79a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d79e:	b29a      	uxth	r2, r3
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d7a4:	e018      	b.n	800d7d8 <tcp_receive+0x40c>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7ae:	691b      	ldr	r3, [r3, #16]
 800d7b0:	685b      	ldr	r3, [r3, #4]
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7fb fb37 	bl	8008e26 <lwip_htonl>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	1ae3      	subs	r3, r4, r3
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	dc0b      	bgt.n	800d7d8 <tcp_receive+0x40c>
          tcp_clear_flags(pcb, TF_RTO);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	8b5b      	ldrh	r3, [r3, #26]
 800d7c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d7c8:	b29a      	uxth	r2, r3
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d7ce:	e003      	b.n	800d7d8 <tcp_receive+0x40c>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f001 fdc6 	bl	800f362 <tcp_send_empty_ack>
 800d7d6:	e000      	b.n	800d7da <tcp_receive+0x40e>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d7d8:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d052      	beq.n	800d888 <tcp_receive+0x4bc>
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7e6:	4b58      	ldr	r3, [pc, #352]	; (800d948 <tcp_receive+0x57c>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	1ad3      	subs	r3, r2, r3
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	da4b      	bge.n	800d888 <tcp_receive+0x4bc>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d7f0:	4b56      	ldr	r3, [pc, #344]	; (800d94c <tcp_receive+0x580>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	b29a      	uxth	r2, r3
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	1ad3      	subs	r3, r2, r3
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d802:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d80a:	10db      	asrs	r3, r3, #3
 800d80c:	b21b      	sxth	r3, r3
 800d80e:	b29b      	uxth	r3, r3
 800d810:	1ad3      	subs	r3, r2, r3
 800d812:	b29b      	uxth	r3, r3
 800d814:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa = (s16_t)(pcb->sa + m);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d81c:	b29a      	uxth	r2, r3
 800d81e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d820:	4413      	add	r3, r2
 800d822:	b29b      	uxth	r3, r3
 800d824:	b21a      	sxth	r2, r3
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800d82a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d82e:	2b00      	cmp	r3, #0
 800d830:	da03      	bge.n	800d83a <tcp_receive+0x46e>
        m = (s16_t) - m;
 800d832:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d834:	425b      	negs	r3, r3
 800d836:	b29b      	uxth	r3, r3
 800d838:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800d83a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d842:	109b      	asrs	r3, r3, #2
 800d844:	b21b      	sxth	r3, r3
 800d846:	b29b      	uxth	r3, r3
 800d848:	1ad3      	subs	r3, r2, r3
 800d84a:	b29b      	uxth	r3, r3
 800d84c:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv = (s16_t)(pcb->sv + m);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d854:	b29a      	uxth	r2, r3
 800d856:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d858:	4413      	add	r3, r2
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	b21a      	sxth	r2, r3
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d868:	10db      	asrs	r3, r3, #3
 800d86a:	b21b      	sxth	r3, r3
 800d86c:	b29a      	uxth	r2, r3
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d874:	b29b      	uxth	r3, r3
 800d876:	4413      	add	r3, r2
 800d878:	b29b      	uxth	r3, r3
 800d87a:	b21a      	sxth	r2, r3
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2200      	movs	r2, #0
 800d886:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d888:	4b31      	ldr	r3, [pc, #196]	; (800d950 <tcp_receive+0x584>)
 800d88a:	881b      	ldrh	r3, [r3, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	f000 8165 	beq.w	800db5c <tcp_receive+0x790>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	7d1b      	ldrb	r3, [r3, #20]
 800d896:	2b06      	cmp	r3, #6
 800d898:	f200 8160 	bhi.w	800db5c <tcp_receive+0x790>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8a0:	4b2c      	ldr	r3, [pc, #176]	; (800d954 <tcp_receive+0x588>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	1ad3      	subs	r3, r2, r3
 800d8a6:	3b01      	subs	r3, #1
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	db57      	blt.n	800d95c <tcp_receive+0x590>
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8b0:	4b27      	ldr	r3, [pc, #156]	; (800d950 <tcp_receive+0x584>)
 800d8b2:	881b      	ldrh	r3, [r3, #0]
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	4b27      	ldr	r3, [pc, #156]	; (800d954 <tcp_receive+0x588>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	440b      	add	r3, r1
 800d8bc:	1ad3      	subs	r3, r2, r3
 800d8be:	3301      	adds	r3, #1
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	dc4b      	bgt.n	800d95c <tcp_receive+0x590>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d8c4:	4b24      	ldr	r3, [pc, #144]	; (800d958 <tcp_receive+0x58c>)
 800d8c6:	685b      	ldr	r3, [r3, #4]
 800d8c8:	61fb      	str	r3, [r7, #28]
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8ce:	4b21      	ldr	r3, [pc, #132]	; (800d954 <tcp_receive+0x588>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	1ad3      	subs	r3, r2, r3
 800d8d4:	613b      	str	r3, [r7, #16]
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
      off = (u16_t)off32;
 800d8d6:	693b      	ldr	r3, [r7, #16]
 800d8d8:	837b      	strh	r3, [r7, #26]
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
      inseg.len -= off;
 800d8da:	4b1f      	ldr	r3, [pc, #124]	; (800d958 <tcp_receive+0x58c>)
 800d8dc:	891a      	ldrh	r2, [r3, #8]
 800d8de:	8b7b      	ldrh	r3, [r7, #26]
 800d8e0:	1ad3      	subs	r3, r2, r3
 800d8e2:	b29a      	uxth	r2, r3
 800d8e4:	4b1c      	ldr	r3, [pc, #112]	; (800d958 <tcp_receive+0x58c>)
 800d8e6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d8e8:	4b1b      	ldr	r3, [pc, #108]	; (800d958 <tcp_receive+0x58c>)
 800d8ea:	685b      	ldr	r3, [r3, #4]
 800d8ec:	891a      	ldrh	r2, [r3, #8]
 800d8ee:	8b7b      	ldrh	r3, [r7, #26]
 800d8f0:	1ad3      	subs	r3, r2, r3
 800d8f2:	81fb      	strh	r3, [r7, #14]
      while (p->len < off) {
 800d8f4:	e00d      	b.n	800d912 <tcp_receive+0x546>
        off -= p->len;
 800d8f6:	69fb      	ldr	r3, [r7, #28]
 800d8f8:	895b      	ldrh	r3, [r3, #10]
 800d8fa:	8b7a      	ldrh	r2, [r7, #26]
 800d8fc:	1ad3      	subs	r3, r2, r3
 800d8fe:	837b      	strh	r3, [r7, #26]
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d900:	69fb      	ldr	r3, [r7, #28]
 800d902:	89fa      	ldrh	r2, [r7, #14]
 800d904:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d906:	69fb      	ldr	r3, [r7, #28]
 800d908:	2200      	movs	r2, #0
 800d90a:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d90c:	69fb      	ldr	r3, [r7, #28]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	61fb      	str	r3, [r7, #28]
      while (p->len < off) {
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	895b      	ldrh	r3, [r3, #10]
 800d916:	8b7a      	ldrh	r2, [r7, #26]
 800d918:	429a      	cmp	r2, r3
 800d91a:	d8ec      	bhi.n	800d8f6 <tcp_receive+0x52a>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d91c:	8b7b      	ldrh	r3, [r7, #26]
 800d91e:	4619      	mov	r1, r3
 800d920:	69f8      	ldr	r0, [r7, #28]
 800d922:	f7fc fd6f 	bl	800a404 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d92a:	4a0a      	ldr	r2, [pc, #40]	; (800d954 <tcp_receive+0x588>)
 800d92c:	6013      	str	r3, [r2, #0]
 800d92e:	4b0a      	ldr	r3, [pc, #40]	; (800d958 <tcp_receive+0x58c>)
 800d930:	691b      	ldr	r3, [r3, #16]
 800d932:	4a08      	ldr	r2, [pc, #32]	; (800d954 <tcp_receive+0x588>)
 800d934:	6812      	ldr	r2, [r2, #0]
 800d936:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d938:	e01e      	b.n	800d978 <tcp_receive+0x5ac>
 800d93a:	bf00      	nop
 800d93c:	080167ec 	.word	0x080167ec
 800d940:	080167f4 	.word	0x080167f4
 800d944:	20008208 	.word	0x20008208
 800d948:	20008204 	.word	0x20008204
 800d94c:	200081c4 	.word	0x200081c4
 800d950:	2000820a 	.word	0x2000820a
 800d954:	20008200 	.word	0x20008200
 800d958:	200081dc 	.word	0x200081dc
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d95c:	4b8e      	ldr	r3, [pc, #568]	; (800db98 <tcp_receive+0x7cc>)
 800d95e:	681a      	ldr	r2, [r3, #0]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d964:	1ad3      	subs	r3, r2, r3
 800d966:	2b00      	cmp	r3, #0
 800d968:	da06      	bge.n	800d978 <tcp_receive+0x5ac>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	8b5b      	ldrh	r3, [r3, #26]
 800d96e:	f043 0302 	orr.w	r3, r3, #2
 800d972:	b29a      	uxth	r2, r3
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d978:	4b87      	ldr	r3, [pc, #540]	; (800db98 <tcp_receive+0x7cc>)
 800d97a:	681a      	ldr	r2, [r3, #0]
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d980:	1ad3      	subs	r3, r2, r3
 800d982:	2b00      	cmp	r3, #0
 800d984:	f2c0 80e5 	blt.w	800db52 <tcp_receive+0x786>
 800d988:	4b83      	ldr	r3, [pc, #524]	; (800db98 <tcp_receive+0x7cc>)
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d990:	6879      	ldr	r1, [r7, #4]
 800d992:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d994:	440b      	add	r3, r1
 800d996:	1ad3      	subs	r3, r2, r3
 800d998:	3301      	adds	r3, #1
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	f300 80d9 	bgt.w	800db52 <tcp_receive+0x786>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9a4:	4b7c      	ldr	r3, [pc, #496]	; (800db98 <tcp_receive+0x7cc>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	f040 80ce 	bne.w	800db4a <tcp_receive+0x77e>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d9ae:	4b7b      	ldr	r3, [pc, #492]	; (800db9c <tcp_receive+0x7d0>)
 800d9b0:	891c      	ldrh	r4, [r3, #8]
 800d9b2:	4b7a      	ldr	r3, [pc, #488]	; (800db9c <tcp_receive+0x7d0>)
 800d9b4:	691b      	ldr	r3, [r3, #16]
 800d9b6:	899b      	ldrh	r3, [r3, #12]
 800d9b8:	b29b      	uxth	r3, r3
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7fb fa1e 	bl	8008dfc <lwip_htons>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	b2db      	uxtb	r3, r3
 800d9c4:	f003 0303 	and.w	r3, r3, #3
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d001      	beq.n	800d9d0 <tcp_receive+0x604>
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	e000      	b.n	800d9d2 <tcp_receive+0x606>
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	4423      	add	r3, r4
 800d9d4:	b29a      	uxth	r2, r3
 800d9d6:	4b72      	ldr	r3, [pc, #456]	; (800dba0 <tcp_receive+0x7d4>)
 800d9d8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d9de:	4b70      	ldr	r3, [pc, #448]	; (800dba0 <tcp_receive+0x7d4>)
 800d9e0:	881b      	ldrh	r3, [r3, #0]
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d261      	bcs.n	800daaa <tcp_receive+0x6de>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d9e6:	4b6d      	ldr	r3, [pc, #436]	; (800db9c <tcp_receive+0x7d0>)
 800d9e8:	691b      	ldr	r3, [r3, #16]
 800d9ea:	899b      	ldrh	r3, [r3, #12]
 800d9ec:	b29b      	uxth	r3, r3
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7fb fa04 	bl	8008dfc <lwip_htons>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	f003 0301 	and.w	r3, r3, #1
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d01f      	beq.n	800da40 <tcp_receive+0x674>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800da00:	4b66      	ldr	r3, [pc, #408]	; (800db9c <tcp_receive+0x7d0>)
 800da02:	691b      	ldr	r3, [r3, #16]
 800da04:	899b      	ldrh	r3, [r3, #12]
 800da06:	b29b      	uxth	r3, r3
 800da08:	b21b      	sxth	r3, r3
 800da0a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800da0e:	b21c      	sxth	r4, r3
 800da10:	4b62      	ldr	r3, [pc, #392]	; (800db9c <tcp_receive+0x7d0>)
 800da12:	691b      	ldr	r3, [r3, #16]
 800da14:	899b      	ldrh	r3, [r3, #12]
 800da16:	b29b      	uxth	r3, r3
 800da18:	4618      	mov	r0, r3
 800da1a:	f7fb f9ef 	bl	8008dfc <lwip_htons>
 800da1e:	4603      	mov	r3, r0
 800da20:	b2db      	uxtb	r3, r3
 800da22:	b29b      	uxth	r3, r3
 800da24:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800da28:	b29b      	uxth	r3, r3
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7fb f9e6 	bl	8008dfc <lwip_htons>
 800da30:	4603      	mov	r3, r0
 800da32:	b21b      	sxth	r3, r3
 800da34:	4323      	orrs	r3, r4
 800da36:	b21a      	sxth	r2, r3
 800da38:	4b58      	ldr	r3, [pc, #352]	; (800db9c <tcp_receive+0x7d0>)
 800da3a:	691b      	ldr	r3, [r3, #16]
 800da3c:	b292      	uxth	r2, r2
 800da3e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800da44:	4b55      	ldr	r3, [pc, #340]	; (800db9c <tcp_receive+0x7d0>)
 800da46:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800da48:	4b54      	ldr	r3, [pc, #336]	; (800db9c <tcp_receive+0x7d0>)
 800da4a:	691b      	ldr	r3, [r3, #16]
 800da4c:	899b      	ldrh	r3, [r3, #12]
 800da4e:	b29b      	uxth	r3, r3
 800da50:	4618      	mov	r0, r3
 800da52:	f7fb f9d3 	bl	8008dfc <lwip_htons>
 800da56:	4603      	mov	r3, r0
 800da58:	b2db      	uxtb	r3, r3
 800da5a:	f003 0302 	and.w	r3, r3, #2
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d005      	beq.n	800da6e <tcp_receive+0x6a2>
            inseg.len -= 1;
 800da62:	4b4e      	ldr	r3, [pc, #312]	; (800db9c <tcp_receive+0x7d0>)
 800da64:	891b      	ldrh	r3, [r3, #8]
 800da66:	3b01      	subs	r3, #1
 800da68:	b29a      	uxth	r2, r3
 800da6a:	4b4c      	ldr	r3, [pc, #304]	; (800db9c <tcp_receive+0x7d0>)
 800da6c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800da6e:	4b4b      	ldr	r3, [pc, #300]	; (800db9c <tcp_receive+0x7d0>)
 800da70:	685b      	ldr	r3, [r3, #4]
 800da72:	4a4a      	ldr	r2, [pc, #296]	; (800db9c <tcp_receive+0x7d0>)
 800da74:	8912      	ldrh	r2, [r2, #8]
 800da76:	4611      	mov	r1, r2
 800da78:	4618      	mov	r0, r3
 800da7a:	f7fc fbfa 	bl	800a272 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800da7e:	4b47      	ldr	r3, [pc, #284]	; (800db9c <tcp_receive+0x7d0>)
 800da80:	891c      	ldrh	r4, [r3, #8]
 800da82:	4b46      	ldr	r3, [pc, #280]	; (800db9c <tcp_receive+0x7d0>)
 800da84:	691b      	ldr	r3, [r3, #16]
 800da86:	899b      	ldrh	r3, [r3, #12]
 800da88:	b29b      	uxth	r3, r3
 800da8a:	4618      	mov	r0, r3
 800da8c:	f7fb f9b6 	bl	8008dfc <lwip_htons>
 800da90:	4603      	mov	r3, r0
 800da92:	b2db      	uxtb	r3, r3
 800da94:	f003 0303 	and.w	r3, r3, #3
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d001      	beq.n	800daa0 <tcp_receive+0x6d4>
 800da9c:	2301      	movs	r3, #1
 800da9e:	e000      	b.n	800daa2 <tcp_receive+0x6d6>
 800daa0:	2300      	movs	r3, #0
 800daa2:	4423      	add	r3, r4
 800daa4:	b29a      	uxth	r2, r3
 800daa6:	4b3e      	ldr	r3, [pc, #248]	; (800dba0 <tcp_receive+0x7d4>)
 800daa8:	801a      	strh	r2, [r3, #0]
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800daaa:	4b3d      	ldr	r3, [pc, #244]	; (800dba0 <tcp_receive+0x7d4>)
 800daac:	881b      	ldrh	r3, [r3, #0]
 800daae:	461a      	mov	r2, r3
 800dab0:	4b39      	ldr	r3, [pc, #228]	; (800db98 <tcp_receive+0x7cc>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	441a      	add	r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dabe:	4b38      	ldr	r3, [pc, #224]	; (800dba0 <tcp_receive+0x7d4>)
 800dac0:	881b      	ldrh	r3, [r3, #0]
 800dac2:	1ad3      	subs	r3, r2, r3
 800dac4:	b29a      	uxth	r2, r3
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f7fd fa80 	bl	800afd0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800dad0:	4b32      	ldr	r3, [pc, #200]	; (800db9c <tcp_receive+0x7d0>)
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	891b      	ldrh	r3, [r3, #8]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d006      	beq.n	800dae8 <tcp_receive+0x71c>
          recv_data = inseg.p;
 800dada:	4b30      	ldr	r3, [pc, #192]	; (800db9c <tcp_receive+0x7d0>)
 800dadc:	685b      	ldr	r3, [r3, #4]
 800dade:	4a31      	ldr	r2, [pc, #196]	; (800dba4 <tcp_receive+0x7d8>)
 800dae0:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800dae2:	4b2e      	ldr	r3, [pc, #184]	; (800db9c <tcp_receive+0x7d0>)
 800dae4:	2200      	movs	r2, #0
 800dae6:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dae8:	4b2c      	ldr	r3, [pc, #176]	; (800db9c <tcp_receive+0x7d0>)
 800daea:	691b      	ldr	r3, [r3, #16]
 800daec:	899b      	ldrh	r3, [r3, #12]
 800daee:	b29b      	uxth	r3, r3
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7fb f983 	bl	8008dfc <lwip_htons>
 800daf6:	4603      	mov	r3, r0
 800daf8:	b2db      	uxtb	r3, r3
 800dafa:	f003 0301 	and.w	r3, r3, #1
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d006      	beq.n	800db10 <tcp_receive+0x744>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800db02:	4b29      	ldr	r3, [pc, #164]	; (800dba8 <tcp_receive+0x7dc>)
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	f043 0320 	orr.w	r3, r3, #32
 800db0a:	b2da      	uxtb	r2, r3
 800db0c:	4b26      	ldr	r3, [pc, #152]	; (800dba8 <tcp_receive+0x7dc>)
 800db0e:	701a      	strb	r2, [r3, #0]
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	8b5b      	ldrh	r3, [r3, #26]
 800db14:	f003 0301 	and.w	r3, r3, #1
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d00e      	beq.n	800db3a <tcp_receive+0x76e>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	8b5b      	ldrh	r3, [r3, #26]
 800db20:	f023 0301 	bic.w	r3, r3, #1
 800db24:	b29a      	uxth	r2, r3
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	835a      	strh	r2, [r3, #26]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	8b5b      	ldrh	r3, [r3, #26]
 800db2e:	f043 0302 	orr.w	r3, r3, #2
 800db32:	b29a      	uxth	r2, r3
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800db38:	e00f      	b.n	800db5a <tcp_receive+0x78e>
        tcp_ack(pcb);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	8b5b      	ldrh	r3, [r3, #26]
 800db3e:	f043 0301 	orr.w	r3, r3, #1
 800db42:	b29a      	uxth	r2, r3
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800db48:	e007      	b.n	800db5a <tcp_receive+0x78e>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f001 fc09 	bl	800f362 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800db50:	e003      	b.n	800db5a <tcp_receive+0x78e>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f001 fc05 	bl	800f362 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800db58:	e01a      	b.n	800db90 <tcp_receive+0x7c4>
 800db5a:	e019      	b.n	800db90 <tcp_receive+0x7c4>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800db5c:	4b0e      	ldr	r3, [pc, #56]	; (800db98 <tcp_receive+0x7cc>)
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db64:	1ad3      	subs	r3, r2, r3
 800db66:	2b00      	cmp	r3, #0
 800db68:	db0a      	blt.n	800db80 <tcp_receive+0x7b4>
 800db6a:	4b0b      	ldr	r3, [pc, #44]	; (800db98 <tcp_receive+0x7cc>)
 800db6c:	681a      	ldr	r2, [r3, #0]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db72:	6879      	ldr	r1, [r7, #4]
 800db74:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800db76:	440b      	add	r3, r1
 800db78:	1ad3      	subs	r3, r2, r3
 800db7a:	3301      	adds	r3, #1
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	dd07      	ble.n	800db90 <tcp_receive+0x7c4>
      tcp_ack_now(pcb);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	8b5b      	ldrh	r3, [r3, #26]
 800db84:	f043 0302 	orr.w	r3, r3, #2
 800db88:	b29a      	uxth	r2, r3
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800db8e:	e7ff      	b.n	800db90 <tcp_receive+0x7c4>
 800db90:	bf00      	nop
 800db92:	3734      	adds	r7, #52	; 0x34
 800db94:	46bd      	mov	sp, r7
 800db96:	bd90      	pop	{r4, r7, pc}
 800db98:	20008200 	.word	0x20008200
 800db9c:	200081dc 	.word	0x200081dc
 800dba0:	2000820a 	.word	0x2000820a
 800dba4:	20008210 	.word	0x20008210
 800dba8:	2000820d 	.word	0x2000820d

0800dbac <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800dbac:	b480      	push	{r7}
 800dbae:	b083      	sub	sp, #12
 800dbb0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800dbb2:	4b15      	ldr	r3, [pc, #84]	; (800dc08 <tcp_get_next_optbyte+0x5c>)
 800dbb4:	881b      	ldrh	r3, [r3, #0]
 800dbb6:	1c5a      	adds	r2, r3, #1
 800dbb8:	b291      	uxth	r1, r2
 800dbba:	4a13      	ldr	r2, [pc, #76]	; (800dc08 <tcp_get_next_optbyte+0x5c>)
 800dbbc:	8011      	strh	r1, [r2, #0]
 800dbbe:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800dbc0:	4b12      	ldr	r3, [pc, #72]	; (800dc0c <tcp_get_next_optbyte+0x60>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d004      	beq.n	800dbd2 <tcp_get_next_optbyte+0x26>
 800dbc8:	4b11      	ldr	r3, [pc, #68]	; (800dc10 <tcp_get_next_optbyte+0x64>)
 800dbca:	881b      	ldrh	r3, [r3, #0]
 800dbcc:	88fa      	ldrh	r2, [r7, #6]
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d208      	bcs.n	800dbe4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800dbd2:	4b10      	ldr	r3, [pc, #64]	; (800dc14 <tcp_get_next_optbyte+0x68>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	3314      	adds	r3, #20
 800dbd8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800dbda:	88fb      	ldrh	r3, [r7, #6]
 800dbdc:	683a      	ldr	r2, [r7, #0]
 800dbde:	4413      	add	r3, r2
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	e00b      	b.n	800dbfc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800dbe4:	88fb      	ldrh	r3, [r7, #6]
 800dbe6:	b2da      	uxtb	r2, r3
 800dbe8:	4b09      	ldr	r3, [pc, #36]	; (800dc10 <tcp_get_next_optbyte+0x64>)
 800dbea:	881b      	ldrh	r3, [r3, #0]
 800dbec:	b2db      	uxtb	r3, r3
 800dbee:	1ad3      	subs	r3, r2, r3
 800dbf0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800dbf2:	4b06      	ldr	r3, [pc, #24]	; (800dc0c <tcp_get_next_optbyte+0x60>)
 800dbf4:	681a      	ldr	r2, [r3, #0]
 800dbf6:	797b      	ldrb	r3, [r7, #5]
 800dbf8:	4413      	add	r3, r2
 800dbfa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	370c      	adds	r7, #12
 800dc00:	46bd      	mov	sp, r7
 800dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc06:	4770      	bx	lr
 800dc08:	200081fc 	.word	0x200081fc
 800dc0c:	200081f8 	.word	0x200081f8
 800dc10:	200081f6 	.word	0x200081f6
 800dc14:	200081f0 	.word	0x200081f0

0800dc18 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800dc20:	4b2e      	ldr	r3, [pc, #184]	; (800dcdc <tcp_parseopt+0xc4>)
 800dc22:	881b      	ldrh	r3, [r3, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d056      	beq.n	800dcd6 <tcp_parseopt+0xbe>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800dc28:	4b2d      	ldr	r3, [pc, #180]	; (800dce0 <tcp_parseopt+0xc8>)
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	801a      	strh	r2, [r3, #0]
 800dc2e:	e046      	b.n	800dcbe <tcp_parseopt+0xa6>
      u8_t opt = tcp_get_next_optbyte();
 800dc30:	f7ff ffbc 	bl	800dbac <tcp_get_next_optbyte>
 800dc34:	4603      	mov	r3, r0
 800dc36:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800dc38:	7bfb      	ldrb	r3, [r7, #15]
 800dc3a:	2b02      	cmp	r3, #2
 800dc3c:	d006      	beq.n	800dc4c <tcp_parseopt+0x34>
 800dc3e:	2b02      	cmp	r3, #2
 800dc40:	dc2c      	bgt.n	800dc9c <tcp_parseopt+0x84>
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d042      	beq.n	800dccc <tcp_parseopt+0xb4>
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d128      	bne.n	800dc9c <tcp_parseopt+0x84>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800dc4a:	e038      	b.n	800dcbe <tcp_parseopt+0xa6>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800dc4c:	f7ff ffae 	bl	800dbac <tcp_get_next_optbyte>
 800dc50:	4603      	mov	r3, r0
 800dc52:	2b04      	cmp	r3, #4
 800dc54:	d13c      	bne.n	800dcd0 <tcp_parseopt+0xb8>
 800dc56:	4b22      	ldr	r3, [pc, #136]	; (800dce0 <tcp_parseopt+0xc8>)
 800dc58:	881b      	ldrh	r3, [r3, #0]
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	4a1f      	ldr	r2, [pc, #124]	; (800dcdc <tcp_parseopt+0xc4>)
 800dc5e:	8812      	ldrh	r2, [r2, #0]
 800dc60:	4293      	cmp	r3, r2
 800dc62:	da35      	bge.n	800dcd0 <tcp_parseopt+0xb8>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800dc64:	f7ff ffa2 	bl	800dbac <tcp_get_next_optbyte>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	b29b      	uxth	r3, r3
 800dc6c:	021b      	lsls	r3, r3, #8
 800dc6e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800dc70:	f7ff ff9c 	bl	800dbac <tcp_get_next_optbyte>
 800dc74:	4603      	mov	r3, r0
 800dc76:	b29a      	uxth	r2, r3
 800dc78:	89bb      	ldrh	r3, [r7, #12]
 800dc7a:	4313      	orrs	r3, r2
 800dc7c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800dc7e:	89bb      	ldrh	r3, [r7, #12]
 800dc80:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800dc84:	4293      	cmp	r3, r2
 800dc86:	d804      	bhi.n	800dc92 <tcp_parseopt+0x7a>
 800dc88:	89bb      	ldrh	r3, [r7, #12]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d001      	beq.n	800dc92 <tcp_parseopt+0x7a>
 800dc8e:	89ba      	ldrh	r2, [r7, #12]
 800dc90:	e001      	b.n	800dc96 <tcp_parseopt+0x7e>
 800dc92:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800dc9a:	e010      	b.n	800dcbe <tcp_parseopt+0xa6>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800dc9c:	f7ff ff86 	bl	800dbac <tcp_get_next_optbyte>
 800dca0:	4603      	mov	r3, r0
 800dca2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800dca4:	7afb      	ldrb	r3, [r7, #11]
 800dca6:	2b01      	cmp	r3, #1
 800dca8:	d914      	bls.n	800dcd4 <tcp_parseopt+0xbc>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800dcaa:	7afb      	ldrb	r3, [r7, #11]
 800dcac:	b29a      	uxth	r2, r3
 800dcae:	4b0c      	ldr	r3, [pc, #48]	; (800dce0 <tcp_parseopt+0xc8>)
 800dcb0:	881b      	ldrh	r3, [r3, #0]
 800dcb2:	4413      	add	r3, r2
 800dcb4:	b29b      	uxth	r3, r3
 800dcb6:	3b02      	subs	r3, #2
 800dcb8:	b29a      	uxth	r2, r3
 800dcba:	4b09      	ldr	r3, [pc, #36]	; (800dce0 <tcp_parseopt+0xc8>)
 800dcbc:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800dcbe:	4b08      	ldr	r3, [pc, #32]	; (800dce0 <tcp_parseopt+0xc8>)
 800dcc0:	881a      	ldrh	r2, [r3, #0]
 800dcc2:	4b06      	ldr	r3, [pc, #24]	; (800dcdc <tcp_parseopt+0xc4>)
 800dcc4:	881b      	ldrh	r3, [r3, #0]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d3b2      	bcc.n	800dc30 <tcp_parseopt+0x18>
 800dcca:	e004      	b.n	800dcd6 <tcp_parseopt+0xbe>
          return;
 800dccc:	bf00      	nop
 800dcce:	e002      	b.n	800dcd6 <tcp_parseopt+0xbe>
            return;
 800dcd0:	bf00      	nop
 800dcd2:	e000      	b.n	800dcd6 <tcp_parseopt+0xbe>
            return;
 800dcd4:	bf00      	nop
      }
    }
  }
}
 800dcd6:	3710      	adds	r7, #16
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	200081f4 	.word	0x200081f4
 800dce0:	200081fc 	.word	0x200081fc

0800dce4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800dce4:	b480      	push	{r7}
 800dce6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800dce8:	4b05      	ldr	r3, [pc, #20]	; (800dd00 <tcp_trigger_input_pcb_close+0x1c>)
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	f043 0310 	orr.w	r3, r3, #16
 800dcf0:	b2da      	uxtb	r2, r3
 800dcf2:	4b03      	ldr	r3, [pc, #12]	; (800dd00 <tcp_trigger_input_pcb_close+0x1c>)
 800dcf4:	701a      	strb	r2, [r3, #0]
}
 800dcf6:	bf00      	nop
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr
 800dd00:	2000820d 	.word	0x2000820d

0800dd04 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	60f8      	str	r0, [r7, #12]
 800dd0c:	60b9      	str	r1, [r7, #8]
 800dd0e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d00a      	beq.n	800dd2c <tcp_route+0x28>
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	7a1b      	ldrb	r3, [r3, #8]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d006      	beq.n	800dd2c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	7a1b      	ldrb	r3, [r3, #8]
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7fc f948 	bl	8009fb8 <netif_get_by_index>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	e003      	b.n	800dd34 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f003 faa9 	bl	8011284 <ip4_route>
 800dd32:	4603      	mov	r3, r0
  }
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3710      	adds	r7, #16
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800dd3c:	b590      	push	{r4, r7, lr}
 800dd3e:	b087      	sub	sp, #28
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	60f8      	str	r0, [r7, #12]
 800dd44:	60b9      	str	r1, [r7, #8]
 800dd46:	603b      	str	r3, [r7, #0]
 800dd48:	4613      	mov	r3, r2
 800dd4a:	71fb      	strb	r3, [r7, #7]
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dd4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dd50:	009b      	lsls	r3, r3, #2
 800dd52:	b2db      	uxtb	r3, r3
 800dd54:	f003 0304 	and.w	r3, r3, #4
 800dd58:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800dd5a:	2003      	movs	r0, #3
 800dd5c:	f7fb fdd2 	bl	8009904 <memp_malloc>
 800dd60:	6138      	str	r0, [r7, #16]
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d104      	bne.n	800dd72 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800dd68:	68b8      	ldr	r0, [r7, #8]
 800dd6a:	f7fc fbbc 	bl	800a4e6 <pbuf_free>
    return NULL;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	e060      	b.n	800de34 <tcp_create_segment+0xf8>
  }
  seg->flags = optflags;
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800dd78:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	68ba      	ldr	r2, [r7, #8]
 800dd84:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  seg->len = p->tot_len - optlen;
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	891a      	ldrh	r2, [r3, #8]
 800dd8a:	7dfb      	ldrb	r3, [r7, #23]
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	1ad3      	subs	r3, r2, r3
 800dd90:	b29a      	uxth	r2, r3
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800dd9c:	2114      	movs	r1, #20
 800dd9e:	68b8      	ldr	r0, [r7, #8]
 800dda0:	f7fc fb20 	bl	800a3e4 <pbuf_add_header>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d00c      	beq.n	800ddc4 <tcp_create_segment+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 800ddaa:	4b24      	ldr	r3, [pc, #144]	; (800de3c <tcp_create_segment+0x100>)
 800ddac:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	b29a      	uxth	r2, r3
 800ddb4:	4b21      	ldr	r3, [pc, #132]	; (800de3c <tcp_create_segment+0x100>)
 800ddb6:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    tcp_seg_free(seg);
 800ddba:	6938      	ldr	r0, [r7, #16]
 800ddbc:	f7fd fe49 	bl	800ba52 <tcp_seg_free>
    return NULL;
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	e037      	b.n	800de34 <tcp_create_segment+0xf8>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	685b      	ldr	r3, [r3, #4]
 800ddc8:	685a      	ldr	r2, [r3, #4]
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	8ada      	ldrh	r2, [r3, #22]
 800ddd2:	693b      	ldr	r3, [r7, #16]
 800ddd4:	691c      	ldr	r4, [r3, #16]
 800ddd6:	4610      	mov	r0, r2
 800ddd8:	f7fb f810 	bl	8008dfc <lwip_htons>
 800dddc:	4603      	mov	r3, r0
 800ddde:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	8b1a      	ldrh	r2, [r3, #24]
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	691c      	ldr	r4, [r3, #16]
 800dde8:	4610      	mov	r0, r2
 800ddea:	f7fb f807 	bl	8008dfc <lwip_htons>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	691c      	ldr	r4, [r3, #16]
 800ddf6:	6838      	ldr	r0, [r7, #0]
 800ddf8:	f7fb f815 	bl	8008e26 <lwip_htonl>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800de00:	7dfb      	ldrb	r3, [r7, #23]
 800de02:	089b      	lsrs	r3, r3, #2
 800de04:	b2db      	uxtb	r3, r3
 800de06:	b29b      	uxth	r3, r3
 800de08:	3305      	adds	r3, #5
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	031b      	lsls	r3, r3, #12
 800de0e:	b29a      	uxth	r2, r3
 800de10:	79fb      	ldrb	r3, [r7, #7]
 800de12:	b29b      	uxth	r3, r3
 800de14:	4313      	orrs	r3, r2
 800de16:	b29a      	uxth	r2, r3
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	691c      	ldr	r4, [r3, #16]
 800de1c:	4610      	mov	r0, r2
 800de1e:	f7fa ffed 	bl	8008dfc <lwip_htons>
 800de22:	4603      	mov	r3, r0
 800de24:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	691b      	ldr	r3, [r3, #16]
 800de2a:	2200      	movs	r2, #0
 800de2c:	749a      	strb	r2, [r3, #18]
 800de2e:	2200      	movs	r2, #0
 800de30:	74da      	strb	r2, [r3, #19]
  return seg;
 800de32:	693b      	ldr	r3, [r7, #16]
}
 800de34:	4618      	mov	r0, r3
 800de36:	371c      	adds	r7, #28
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd90      	pop	{r4, r7, pc}
 800de3c:	200080c8 	.word	0x200080c8

0800de40 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b086      	sub	sp, #24
 800de44:	af00      	add	r7, sp, #0
 800de46:	607b      	str	r3, [r7, #4]
 800de48:	4603      	mov	r3, r0
 800de4a:	73fb      	strb	r3, [r7, #15]
 800de4c:	460b      	mov	r3, r1
 800de4e:	81bb      	strh	r3, [r7, #12]
 800de50:	4613      	mov	r3, r2
 800de52:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800de54:	89bb      	ldrh	r3, [r7, #12]
 800de56:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800de58:	89ba      	ldrh	r2, [r7, #12]
 800de5a:	897b      	ldrh	r3, [r7, #10]
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d221      	bcs.n	800dea4 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800de60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800de64:	f003 0302 	and.w	r3, r3, #2
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d111      	bne.n	800de90 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 800de6c:	6a3b      	ldr	r3, [r7, #32]
 800de6e:	8b5b      	ldrh	r3, [r3, #26]
 800de70:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800de74:	2b00      	cmp	r3, #0
 800de76:	d115      	bne.n	800dea4 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 800de78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d007      	beq.n	800de90 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 800de80:	6a3b      	ldr	r3, [r7, #32]
 800de82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800de84:	2b00      	cmp	r3, #0
 800de86:	d103      	bne.n	800de90 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 800de88:	6a3b      	ldr	r3, [r7, #32]
 800de8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d009      	beq.n	800dea4 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800de90:	89bb      	ldrh	r3, [r7, #12]
 800de92:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 800de96:	f023 0203 	bic.w	r2, r3, #3
 800de9a:	897b      	ldrh	r3, [r7, #10]
 800de9c:	4293      	cmp	r3, r2
 800de9e:	bf28      	it	cs
 800dea0:	4613      	movcs	r3, r2
 800dea2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800dea4:	8af9      	ldrh	r1, [r7, #22]
 800dea6:	7bfb      	ldrb	r3, [r7, #15]
 800dea8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800deac:	4618      	mov	r0, r3
 800deae:	f7fc f8d3 	bl	800a058 <pbuf_alloc>
 800deb2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d101      	bne.n	800debe <tcp_pbuf_prealloc+0x7e>
    return NULL;
 800deba:	2300      	movs	r3, #0
 800debc:	e00e      	b.n	800dedc <tcp_pbuf_prealloc+0x9c>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  *oversize = p->len - length;
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	895a      	ldrh	r2, [r3, #10]
 800dec2:	89bb      	ldrh	r3, [r7, #12]
 800dec4:	1ad3      	subs	r3, r2, r3
 800dec6:	b29a      	uxth	r2, r3
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800decc:	693b      	ldr	r3, [r7, #16]
 800dece:	89ba      	ldrh	r2, [r7, #12]
 800ded0:	811a      	strh	r2, [r3, #8]
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	891a      	ldrh	r2, [r3, #8]
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	815a      	strh	r2, [r3, #10]
  return p;
 800deda:	693b      	ldr	r3, [r7, #16]
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3718      	adds	r7, #24
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800dee4:	b480      	push	{r7}
 800dee6:	b083      	sub	sp, #12
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	460b      	mov	r3, r1
 800deee:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	7d1b      	ldrb	r3, [r3, #20]
 800def4:	2b04      	cmp	r3, #4
 800def6:	d00e      	beq.n	800df16 <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800defc:	2b07      	cmp	r3, #7
 800defe:	d00a      	beq.n	800df16 <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800df04:	2b02      	cmp	r3, #2
 800df06:	d006      	beq.n	800df16 <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800df0c:	2b03      	cmp	r3, #3
 800df0e:	d002      	beq.n	800df16 <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800df10:	f06f 030a 	mvn.w	r3, #10
 800df14:	e038      	b.n	800df88 <tcp_write_checks+0xa4>
  } else if (len == 0) {
 800df16:	887b      	ldrh	r3, [r7, #2]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d101      	bne.n	800df20 <tcp_write_checks+0x3c>
    return ERR_OK;
 800df1c:	2300      	movs	r3, #0
 800df1e:	e033      	b.n	800df88 <tcp_write_checks+0xa4>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800df26:	887a      	ldrh	r2, [r7, #2]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d909      	bls.n	800df40 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	8b5b      	ldrh	r3, [r3, #26]
 800df30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df34:	b29a      	uxth	r2, r3
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800df3a:	f04f 33ff 	mov.w	r3, #4294967295
 800df3e:	e023      	b.n	800df88 <tcp_write_checks+0xa4>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800df46:	2b0f      	cmp	r3, #15
 800df48:	d911      	bls.n	800df6e <tcp_write_checks+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 800df4a:	4b12      	ldr	r3, [pc, #72]	; (800df94 <tcp_write_checks+0xb0>)
 800df4c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800df50:	3301      	adds	r3, #1
 800df52:	b29a      	uxth	r2, r3
 800df54:	4b0f      	ldr	r3, [pc, #60]	; (800df94 <tcp_write_checks+0xb0>)
 800df56:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	8b5b      	ldrh	r3, [r3, #26]
 800df5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df62:	b29a      	uxth	r2, r3
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800df68:	f04f 33ff 	mov.w	r3, #4294967295
 800df6c:	e00c      	b.n	800df88 <tcp_write_checks+0xa4>
  }
  if (pcb->snd_queuelen != 0) {
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800df74:	2b00      	cmp	r3, #0
 800df76:	d003      	beq.n	800df80 <tcp_write_checks+0x9c>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	e002      	b.n	800df86 <tcp_write_checks+0xa2>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df84:	2b00      	cmp	r3, #0
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800df86:	2300      	movs	r3, #0
}
 800df88:	4618      	mov	r0, r3
 800df8a:	370c      	adds	r7, #12
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr
 800df94:	200080c8 	.word	0x200080c8

0800df98 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800df98:	b590      	push	{r4, r7, lr}
 800df9a:	b09d      	sub	sp, #116	; 0x74
 800df9c:	af04      	add	r7, sp, #16
 800df9e:	60f8      	str	r0, [r7, #12]
 800dfa0:	60b9      	str	r1, [r7, #8]
 800dfa2:	4611      	mov	r1, r2
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	460b      	mov	r3, r1
 800dfa8:	80fb      	strh	r3, [r7, #6]
 800dfaa:	4613      	mov	r3, r2
 800dfac:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	643b      	str	r3, [r7, #64]	; 0x40
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	657b      	str	r3, [r7, #84]	; 0x54
 800dfba:	2300      	movs	r3, #0
 800dfbc:	653b      	str	r3, [r7, #80]	; 0x50
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d105      	bne.n	800dff6 <tcp_write+0x5e>
 800dfea:	48a6      	ldr	r0, [pc, #664]	; (800e284 <tcp_write+0x2ec>)
 800dfec:	f7f2 f951 	bl	8000292 <Console_DEBUG>
 800dff0:	f06f 030f 	mvn.w	r3, #15
 800dff4:	e2b2      	b.n	800e55c <tcp_write+0x5c4>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dffc:	085b      	lsrs	r3, r3, #1
 800dffe:	b29a      	uxth	r2, r3
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e004:	4293      	cmp	r3, r2
 800e006:	bf28      	it	cs
 800e008:	4613      	movcs	r3, r2
 800e00a:	853b      	strh	r3, [r7, #40]	; 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 800e00c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d102      	bne.n	800e018 <tcp_write+0x80>
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e016:	e000      	b.n	800e01a <tcp_write+0x82>
 800e018:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e01a:	853b      	strh	r3, [r7, #40]	; 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d105      	bne.n	800e02e <tcp_write+0x96>
 800e022:	4899      	ldr	r0, [pc, #612]	; (800e288 <tcp_write+0x2f0>)
 800e024:	f7f2 f935 	bl	8000292 <Console_DEBUG>
 800e028:	f06f 030f 	mvn.w	r3, #15
 800e02c:	e296      	b.n	800e55c <tcp_write+0x5c4>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800e02e:	88fb      	ldrh	r3, [r7, #6]
 800e030:	4619      	mov	r1, r3
 800e032:	68f8      	ldr	r0, [r7, #12]
 800e034:	f7ff ff56 	bl	800dee4 <tcp_write_checks>
 800e038:	6278      	str	r0, [r7, #36]	; 0x24
  if (err != ERR_OK) {
 800e03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d001      	beq.n	800e044 <tcp_write+0xac>
    return err;
 800e040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e042:	e28b      	b.n	800e55c <tcp_write+0x5c4>
  }
  queuelen = pcb->snd_queuelen;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e04a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e04e:	2300      	movs	r3, #0
 800e050:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e058:	2b00      	cmp	r3, #0
 800e05a:	f000 8176 	beq.w	800e34a <tcp_write+0x3b2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e062:	643b      	str	r3, [r7, #64]	; 0x40
 800e064:	e002      	b.n	800e06c <tcp_write+0xd4>
         last_unsent = last_unsent->next);
 800e066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	643b      	str	r3, [r7, #64]	; 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e06c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d1f8      	bne.n	800e066 <tcp_write+0xce>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800e074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e076:	7b1b      	ldrb	r3, [r3, #12]
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	f003 0304 	and.w	r3, r3, #4
 800e080:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
    space = mss_local - (last_unsent->len + unsent_optlen);
 800e082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e084:	891a      	ldrh	r2, [r3, #8]
 800e086:	8c3b      	ldrh	r3, [r7, #32]
 800e088:	4413      	add	r3, r2
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e08e:	1ad3      	subs	r3, r2, r3
 800e090:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e09a:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800e09c:	8a7b      	ldrh	r3, [r7, #18]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d022      	beq.n	800e0e8 <tcp_write+0x150>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
      seg = last_unsent;
 800e0a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0a4:	657b      	str	r3, [r7, #84]	; 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800e0a6:	8a7b      	ldrh	r3, [r7, #18]
 800e0a8:	88fa      	ldrh	r2, [r7, #6]
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	bf28      	it	cs
 800e0ae:	4613      	movcs	r3, r2
 800e0b0:	b29b      	uxth	r3, r3
 800e0b2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800e0b6:	4293      	cmp	r3, r2
 800e0b8:	bf28      	it	cs
 800e0ba:	4613      	movcs	r3, r2
 800e0bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      pos += oversize_used;
 800e0c0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800e0c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e0c8:	4413      	add	r3, r2
 800e0ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      oversize -= oversize_used;
 800e0ce:	8a7a      	ldrh	r2, [r7, #18]
 800e0d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e0d4:	1ad3      	subs	r3, r2, r3
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800e0da:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800e0de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e0e2:	1ad3      	subs	r3, r2, r3
 800e0e4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800e0e8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800e0ec:	88fb      	ldrh	r3, [r7, #6]
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	f080 812b 	bcs.w	800e34a <tcp_write+0x3b2>
 800e0f4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	f000 8126 	beq.w	800e34a <tcp_write+0x3b2>
 800e0fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e100:	891b      	ldrh	r3, [r3, #8]
 800e102:	2b00      	cmp	r3, #0
 800e104:	f000 8121 	beq.w	800e34a <tcp_write+0x3b2>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800e108:	88fa      	ldrh	r2, [r7, #6]
 800e10a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e10e:	1ad2      	subs	r2, r2, r3
 800e110:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e114:	4293      	cmp	r3, r2
 800e116:	bfa8      	it	ge
 800e118:	4613      	movge	r3, r2
 800e11a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800e11c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e11e:	657b      	str	r3, [r7, #84]	; 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800e120:	797b      	ldrb	r3, [r7, #5]
 800e122:	f003 0301 	and.w	r3, r3, #1
 800e126:	2b00      	cmp	r3, #0
 800e128:	d02b      	beq.n	800e182 <tcp_write+0x1ea>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800e12a:	f107 0012 	add.w	r0, r7, #18
 800e12e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800e132:	8bf9      	ldrh	r1, [r7, #30]
 800e134:	2301      	movs	r3, #1
 800e136:	9302      	str	r3, [sp, #8]
 800e138:	797b      	ldrb	r3, [r7, #5]
 800e13a:	9301      	str	r3, [sp, #4]
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	9300      	str	r3, [sp, #0]
 800e140:	4603      	mov	r3, r0
 800e142:	2000      	movs	r0, #0
 800e144:	f7ff fe7c 	bl	800de40 <tcp_pbuf_prealloc>
 800e148:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e14a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	f000 81d7 	beq.w	800e500 <tcp_write+0x568>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 800e152:	8a7b      	ldrh	r3, [r7, #18]
 800e154:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800e158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e15a:	6858      	ldr	r0, [r3, #4]
 800e15c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e160:	68ba      	ldr	r2, [r7, #8]
 800e162:	4413      	add	r3, r2
 800e164:	8bfa      	ldrh	r2, [r7, #30]
 800e166:	4619      	mov	r1, r3
 800e168:	f005 f9ea 	bl	8013540 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800e16c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e16e:	f7fc fa0d 	bl	800a58c <pbuf_clen>
 800e172:	4603      	mov	r3, r0
 800e174:	461a      	mov	r2, r3
 800e176:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800e17a:	4413      	add	r3, r2
 800e17c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800e180:	e037      	b.n	800e1f2 <tcp_write+0x25a>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800e182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e184:	685b      	ldr	r3, [r3, #4]
 800e186:	63bb      	str	r3, [r7, #56]	; 0x38
 800e188:	e002      	b.n	800e190 <tcp_write+0x1f8>
 800e18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d1f8      	bne.n	800e18a <tcp_write+0x1f2>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800e198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19a:	7b1b      	ldrb	r3, [r3, #12]
 800e19c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d10b      	bne.n	800e1bc <tcp_write+0x224>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800e1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a6:	685b      	ldr	r3, [r3, #4]
 800e1a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1aa:	8952      	ldrh	r2, [r2, #10]
 800e1ac:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800e1ae:	68ba      	ldr	r2, [r7, #8]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d103      	bne.n	800e1bc <tcp_write+0x224>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
          extendlen = seglen;
 800e1b4:	8bfb      	ldrh	r3, [r7, #30]
 800e1b6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800e1ba:	e01a      	b.n	800e1f2 <tcp_write+0x25a>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800e1bc:	8bfb      	ldrh	r3, [r7, #30]
 800e1be:	2201      	movs	r2, #1
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	2000      	movs	r0, #0
 800e1c4:	f7fb ff48 	bl	800a058 <pbuf_alloc>
 800e1c8:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e1ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	f000 8199 	beq.w	800e504 <tcp_write+0x56c>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800e1d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e1d6:	68ba      	ldr	r2, [r7, #8]
 800e1d8:	441a      	add	r2, r3
 800e1da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1dc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800e1de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e1e0:	f7fc f9d4 	bl	800a58c <pbuf_clen>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800e1ec:	4413      	add	r3, r2
 800e1ee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800e1f2:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800e1f6:	8bfb      	ldrh	r3, [r7, #30]
 800e1f8:	4413      	add	r3, r2
 800e1fa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800e1fe:	e0a4      	b.n	800e34a <tcp_write+0x3b2>
    struct pbuf *p;
    u16_t left = len - pos;
 800e200:	88fa      	ldrh	r2, [r7, #6]
 800e202:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e206:	1ad3      	subs	r3, r2, r3
 800e208:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800e20a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e20e:	b29b      	uxth	r3, r3
 800e210:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e212:	1ad3      	subs	r3, r2, r3
 800e214:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800e216:	8b7a      	ldrh	r2, [r7, #26]
 800e218:	8bbb      	ldrh	r3, [r7, #28]
 800e21a:	4293      	cmp	r3, r2
 800e21c:	bf28      	it	cs
 800e21e:	4613      	movcs	r3, r2
 800e220:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800e222:	797b      	ldrb	r3, [r7, #5]
 800e224:	f003 0301 	and.w	r3, r3, #1
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d02f      	beq.n	800e28c <tcp_write+0x2f4>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800e22c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e230:	b29a      	uxth	r2, r3
 800e232:	8b3b      	ldrh	r3, [r7, #24]
 800e234:	4413      	add	r3, r2
 800e236:	b299      	uxth	r1, r3
 800e238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	bf0c      	ite	eq
 800e23e:	2301      	moveq	r3, #1
 800e240:	2300      	movne	r3, #0
 800e242:	b2db      	uxtb	r3, r3
 800e244:	f107 0012 	add.w	r0, r7, #18
 800e248:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e24a:	9302      	str	r3, [sp, #8]
 800e24c:	797b      	ldrb	r3, [r7, #5]
 800e24e:	9301      	str	r3, [sp, #4]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	9300      	str	r3, [sp, #0]
 800e254:	4603      	mov	r3, r0
 800e256:	2036      	movs	r0, #54	; 0x36
 800e258:	f7ff fdf2 	bl	800de40 <tcp_pbuf_prealloc>
 800e25c:	6378      	str	r0, [r7, #52]	; 0x34
 800e25e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e260:	2b00      	cmp	r3, #0
 800e262:	f000 8151 	beq.w	800e508 <tcp_write+0x570>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800e266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e268:	685a      	ldr	r2, [r3, #4]
 800e26a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e26e:	18d0      	adds	r0, r2, r3
 800e270:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e274:	68ba      	ldr	r2, [r7, #8]
 800e276:	4413      	add	r3, r2
 800e278:	8b3a      	ldrh	r2, [r7, #24]
 800e27a:	4619      	mov	r1, r3
 800e27c:	f005 f960 	bl	8013540 <memcpy>
 800e280:	e02a      	b.n	800e2d8 <tcp_write+0x340>
 800e282:	bf00      	nop
 800e284:	080167fc 	.word	0x080167fc
 800e288:	08016814 	.word	0x08016814
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800e28c:	8b3b      	ldrh	r3, [r7, #24]
 800e28e:	2201      	movs	r2, #1
 800e290:	4619      	mov	r1, r3
 800e292:	2036      	movs	r0, #54	; 0x36
 800e294:	f7fb fee0 	bl	800a058 <pbuf_alloc>
 800e298:	6178      	str	r0, [r7, #20]
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	f000 8135 	beq.w	800e50c <tcp_write+0x574>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800e2a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e2a6:	68ba      	ldr	r2, [r7, #8]
 800e2a8:	441a      	add	r2, r3
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e2ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e2b8:	4619      	mov	r1, r3
 800e2ba:	2036      	movs	r0, #54	; 0x36
 800e2bc:	f7fb fecc 	bl	800a058 <pbuf_alloc>
 800e2c0:	6378      	str	r0, [r7, #52]	; 0x34
 800e2c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d103      	bne.n	800e2d0 <tcp_write+0x338>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800e2c8:	6978      	ldr	r0, [r7, #20]
 800e2ca:	f7fc f90c 	bl	800a4e6 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800e2ce:	e120      	b.n	800e512 <tcp_write+0x57a>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800e2d0:	6979      	ldr	r1, [r7, #20]
 800e2d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e2d4:	f7fc f984 	bl	800a5e0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800e2d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e2da:	f7fc f957 	bl	800a58c <pbuf_clen>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800e2e6:	4413      	add	r3, r2
 800e2e8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800e2ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800e2f0:	2b10      	cmp	r3, #16
 800e2f2:	d903      	bls.n	800e2fc <tcp_write+0x364>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800e2f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e2f6:	f7fc f8f6 	bl	800a4e6 <pbuf_free>
      goto memerr;
 800e2fa:	e10a      	b.n	800e512 <tcp_write+0x57a>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e300:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e304:	441a      	add	r2, r3
 800e306:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e30a:	9300      	str	r3, [sp, #0]
 800e30c:	4613      	mov	r3, r2
 800e30e:	2200      	movs	r2, #0
 800e310:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e312:	68f8      	ldr	r0, [r7, #12]
 800e314:	f7ff fd12 	bl	800dd3c <tcp_create_segment>
 800e318:	6578      	str	r0, [r7, #84]	; 0x54
 800e31a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	f000 80f7 	beq.w	800e510 <tcp_write+0x578>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 800e322:	8a7a      	ldrh	r2, [r7, #18]
 800e324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e326:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800e328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d102      	bne.n	800e334 <tcp_write+0x39c>
      queue = seg;
 800e32e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e330:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e332:	e002      	b.n	800e33a <tcp_write+0x3a2>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
      prev_seg->next = seg;
 800e334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e336:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e338:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800e33a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e33c:	653b      	str	r3, [r7, #80]	; 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800e33e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800e342:	8b3b      	ldrh	r3, [r7, #24]
 800e344:	4413      	add	r3, r2
 800e346:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  while (pos < len) {
 800e34a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800e34e:	88fb      	ldrh	r3, [r7, #6]
 800e350:	429a      	cmp	r2, r3
 800e352:	f4ff af55 	bcc.w	800e200 <tcp_write+0x268>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 800e356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d00b      	beq.n	800e374 <tcp_write+0x3dc>
 800e35c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800e360:	2b00      	cmp	r3, #0
 800e362:	d007      	beq.n	800e374 <tcp_write+0x3dc>
    last_unsent->oversize_left += oversize_add;
 800e364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e366:	895a      	ldrh	r2, [r3, #10]
 800e368:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800e36c:	4413      	add	r3, r2
 800e36e:	b29a      	uxth	r2, r3
 800e370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e372:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800e374:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d038      	beq.n	800e3ee <tcp_write+0x456>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800e37c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	633b      	str	r3, [r7, #48]	; 0x30
 800e382:	e021      	b.n	800e3c8 <tcp_write+0x430>
      p->tot_len += oversize_used;
 800e384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e386:	891a      	ldrh	r2, [r3, #8]
 800e388:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e38c:	4413      	add	r3, r2
 800e38e:	b29a      	uxth	r2, r3
 800e390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e392:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800e394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d112      	bne.n	800e3c2 <tcp_write+0x42a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800e39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e39e:	685b      	ldr	r3, [r3, #4]
 800e3a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3a2:	8952      	ldrh	r2, [r2, #10]
 800e3a4:	4413      	add	r3, r2
 800e3a6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e3aa:	68b9      	ldr	r1, [r7, #8]
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f005 f8c7 	bl	8013540 <memcpy>
        p->len += oversize_used;
 800e3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b4:	895a      	ldrh	r2, [r3, #10]
 800e3b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e3ba:	4413      	add	r3, r2
 800e3bc:	b29a      	uxth	r2, r3
 800e3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c0:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800e3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	633b      	str	r3, [r7, #48]	; 0x30
 800e3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d1da      	bne.n	800e384 <tcp_write+0x3ec>
      }
    }
    last_unsent->len += oversize_used;
 800e3ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3d0:	891a      	ldrh	r2, [r3, #8]
 800e3d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e3d6:	4413      	add	r3, r2
 800e3d8:	b29a      	uxth	r2, r3
 800e3da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3dc:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 800e3de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3e0:	895a      	ldrh	r2, [r3, #10]
 800e3e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e3e6:	1ad3      	subs	r3, r2, r3
 800e3e8:	b29a      	uxth	r2, r3
 800e3ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3ec:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800e3ee:	8a7a      	ldrh	r2, [r7, #18]
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800e3f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d00e      	beq.n	800e41a <tcp_write+0x482>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800e3fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3fe:	685b      	ldr	r3, [r3, #4]
 800e400:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e402:	4618      	mov	r0, r3
 800e404:	f7fc f8ec 	bl	800a5e0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800e408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e40a:	891a      	ldrh	r2, [r3, #8]
 800e40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e40e:	891b      	ldrh	r3, [r3, #8]
 800e410:	4413      	add	r3, r2
 800e412:	b29a      	uxth	r2, r3
 800e414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e416:	811a      	strh	r2, [r3, #8]
 800e418:	e030      	b.n	800e47c <tcp_write+0x4e4>
  } else if (extendlen > 0) {
 800e41a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d02c      	beq.n	800e47c <tcp_write+0x4e4>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800e422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e424:	2b00      	cmp	r3, #0
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e428:	685b      	ldr	r3, [r3, #4]
 800e42a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e42c:	e00a      	b.n	800e444 <tcp_write+0x4ac>
      p->tot_len += extendlen;
 800e42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e430:	891a      	ldrh	r2, [r3, #8]
 800e432:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800e436:	4413      	add	r3, r2
 800e438:	b29a      	uxth	r2, r3
 800e43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d1f0      	bne.n	800e42e <tcp_write+0x496>
    }
    p->tot_len += extendlen;
 800e44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e44e:	891a      	ldrh	r2, [r3, #8]
 800e450:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800e454:	4413      	add	r3, r2
 800e456:	b29a      	uxth	r2, r3
 800e458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45a:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800e45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45e:	895a      	ldrh	r2, [r3, #10]
 800e460:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800e464:	4413      	add	r3, r2
 800e466:	b29a      	uxth	r2, r3
 800e468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e46a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800e46c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e46e:	891a      	ldrh	r2, [r3, #8]
 800e470:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800e474:	4413      	add	r3, r2
 800e476:	b29a      	uxth	r2, r3
 800e478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e47a:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800e47c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d103      	bne.n	800e48a <tcp_write+0x4f2>
    pcb->unsent = queue;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e486:	66da      	str	r2, [r3, #108]	; 0x6c
 800e488:	e002      	b.n	800e490 <tcp_write+0x4f8>
  } else {
    last_unsent->next = queue;
 800e48a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e48c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e48e:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e494:	88fb      	ldrh	r3, [r7, #6]
 800e496:	441a      	add	r2, r3
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e4a2:	88fb      	ldrh	r3, [r7, #6]
 800e4a4:	1ad3      	subs	r3, r2, r3
 800e4a6:	b29a      	uxth	r2, r3
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800e4b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d002      	beq.n	800e4c8 <tcp_write+0x530>
    LWIP_ASSERT("tcp_write: valid queue length",
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4c6:	2b00      	cmp	r3, #0
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800e4c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d016      	beq.n	800e4fc <tcp_write+0x564>
 800e4ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4d0:	691b      	ldr	r3, [r3, #16]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d012      	beq.n	800e4fc <tcp_write+0x564>
 800e4d6:	797b      	ldrb	r3, [r7, #5]
 800e4d8:	f003 0302 	and.w	r3, r3, #2
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d10d      	bne.n	800e4fc <tcp_write+0x564>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800e4e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4e2:	691b      	ldr	r3, [r3, #16]
 800e4e4:	899b      	ldrh	r3, [r3, #12]
 800e4e6:	b29c      	uxth	r4, r3
 800e4e8:	2008      	movs	r0, #8
 800e4ea:	f7fa fc87 	bl	8008dfc <lwip_htons>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	461a      	mov	r2, r3
 800e4f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4f4:	691b      	ldr	r3, [r3, #16]
 800e4f6:	4322      	orrs	r2, r4
 800e4f8:	b292      	uxth	r2, r2
 800e4fa:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	e02d      	b.n	800e55c <tcp_write+0x5c4>
          goto memerr;
 800e500:	bf00      	nop
 800e502:	e006      	b.n	800e512 <tcp_write+0x57a>
            goto memerr;
 800e504:	bf00      	nop
 800e506:	e004      	b.n	800e512 <tcp_write+0x57a>
        goto memerr;
 800e508:	bf00      	nop
 800e50a:	e002      	b.n	800e512 <tcp_write+0x57a>
        goto memerr;
 800e50c:	bf00      	nop
 800e50e:	e000      	b.n	800e512 <tcp_write+0x57a>
      goto memerr;
 800e510:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	8b5b      	ldrh	r3, [r3, #26]
 800e516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e51a:	b29a      	uxth	r2, r3
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 800e520:	4b10      	ldr	r3, [pc, #64]	; (800e564 <tcp_write+0x5cc>)
 800e522:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800e526:	3301      	adds	r3, #1
 800e528:	b29a      	uxth	r2, r3
 800e52a:	4b0e      	ldr	r3, [pc, #56]	; (800e564 <tcp_write+0x5cc>)
 800e52c:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

  if (concat_p != NULL) {
 800e530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e532:	2b00      	cmp	r3, #0
 800e534:	d002      	beq.n	800e53c <tcp_write+0x5a4>
    pbuf_free(concat_p);
 800e536:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e538:	f7fb ffd5 	bl	800a4e6 <pbuf_free>
  }
  if (queue != NULL) {
 800e53c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d002      	beq.n	800e548 <tcp_write+0x5b0>
    tcp_segs_free(queue);
 800e542:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e544:	f7fd fa70 	bl	800ba28 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d002      	beq.n	800e558 <tcp_write+0x5c0>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e556:	2b00      	cmp	r3, #0
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800e558:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	3764      	adds	r7, #100	; 0x64
 800e560:	46bd      	mov	sp, r7
 800e562:	bd90      	pop	{r4, r7, pc}
 800e564:	200080c8 	.word	0x200080c8

0800e568 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e568:	b590      	push	{r4, r7, lr}
 800e56a:	b08b      	sub	sp, #44	; 0x2c
 800e56c:	af02      	add	r7, sp, #8
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	460b      	mov	r3, r1
 800e572:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e574:	2300      	movs	r3, #0
 800e576:	617b      	str	r3, [r7, #20]
 800e578:	2300      	movs	r3, #0
 800e57a:	613b      	str	r3, [r7, #16]
  struct pbuf *p = NULL;
 800e57c:	2300      	movs	r3, #0
 800e57e:	61bb      	str	r3, [r7, #24]
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);

  useg = pcb->unsent;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e584:	613b      	str	r3, [r7, #16]
  if (useg == NULL) {
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d102      	bne.n	800e592 <tcp_split_unsent_seg+0x2a>
    return ERR_MEM;
 800e58c:	f04f 33ff 	mov.w	r3, #4294967295
 800e590:	e0fa      	b.n	800e788 <tcp_split_unsent_seg+0x220>
  }

  if (split == 0) {
 800e592:	887b      	ldrh	r3, [r7, #2]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d102      	bne.n	800e59e <tcp_split_unsent_seg+0x36>
    LWIP_ASSERT("Can't split segment into length 0", 0);
    return ERR_VAL;
 800e598:	f06f 0305 	mvn.w	r3, #5
 800e59c:	e0f4      	b.n	800e788 <tcp_split_unsent_seg+0x220>
  }

  if (useg->len <= split) {
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	891b      	ldrh	r3, [r3, #8]
 800e5a2:	887a      	ldrh	r2, [r7, #2]
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d301      	bcc.n	800e5ac <tcp_split_unsent_seg+0x44>
    return ERR_OK;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	e0ed      	b.n	800e788 <tcp_split_unsent_seg+0x220>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	7b1b      	ldrb	r3, [r3, #12]
 800e5b0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e5b2:	7bfb      	ldrb	r3, [r7, #15]
 800e5b4:	009b      	lsls	r3, r3, #2
 800e5b6:	b2db      	uxtb	r3, r3
 800e5b8:	f003 0304 	and.w	r3, r3, #4
 800e5bc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	891a      	ldrh	r2, [r3, #8]
 800e5c2:	887b      	ldrh	r3, [r7, #2]
 800e5c4:	1ad3      	subs	r3, r2, r3
 800e5c6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e5c8:	7bbb      	ldrb	r3, [r7, #14]
 800e5ca:	b29a      	uxth	r2, r3
 800e5cc:	89bb      	ldrh	r3, [r7, #12]
 800e5ce:	4413      	add	r3, r2
 800e5d0:	b29b      	uxth	r3, r3
 800e5d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e5d6:	4619      	mov	r1, r3
 800e5d8:	2036      	movs	r0, #54	; 0x36
 800e5da:	f7fb fd3d 	bl	800a058 <pbuf_alloc>
 800e5de:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e5e0:	69bb      	ldr	r3, [r7, #24]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	f000 80bd 	beq.w	800e762 <tcp_split_unsent_seg+0x1fa>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	685b      	ldr	r3, [r3, #4]
 800e5ec:	891a      	ldrh	r2, [r3, #8]
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	891b      	ldrh	r3, [r3, #8]
 800e5f2:	1ad3      	subs	r3, r2, r3
 800e5f4:	b29a      	uxth	r2, r3
 800e5f6:	887b      	ldrh	r3, [r7, #2]
 800e5f8:	4413      	add	r3, r2
 800e5fa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	6858      	ldr	r0, [r3, #4]
 800e600:	69bb      	ldr	r3, [r7, #24]
 800e602:	685a      	ldr	r2, [r3, #4]
 800e604:	7bbb      	ldrb	r3, [r7, #14]
 800e606:	18d1      	adds	r1, r2, r3
 800e608:	897b      	ldrh	r3, [r7, #10]
 800e60a:	89ba      	ldrh	r2, [r7, #12]
 800e60c:	f7fc f906 	bl	800a81c <pbuf_copy_partial>
 800e610:	4603      	mov	r3, r0
 800e612:	461a      	mov	r2, r3
 800e614:	89bb      	ldrh	r3, [r7, #12]
 800e616:	4293      	cmp	r3, r2
 800e618:	f040 80a5 	bne.w	800e766 <tcp_split_unsent_seg+0x1fe>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	691b      	ldr	r3, [r3, #16]
 800e620:	899b      	ldrh	r3, [r3, #12]
 800e622:	b29b      	uxth	r3, r3
 800e624:	4618      	mov	r0, r3
 800e626:	f7fa fbe9 	bl	8008dfc <lwip_htons>
 800e62a:	4603      	mov	r3, r0
 800e62c:	b2db      	uxtb	r3, r3
 800e62e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e632:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e634:	2300      	movs	r3, #0
 800e636:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 800e638:	7ffb      	ldrb	r3, [r7, #31]
 800e63a:	f003 0308 	and.w	r3, r3, #8
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d007      	beq.n	800e652 <tcp_split_unsent_seg+0xea>
    split_flags &= ~TCP_PSH;
 800e642:	7ffb      	ldrb	r3, [r7, #31]
 800e644:	f023 0308 	bic.w	r3, r3, #8
 800e648:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 800e64a:	7fbb      	ldrb	r3, [r7, #30]
 800e64c:	f043 0308 	orr.w	r3, r3, #8
 800e650:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 800e652:	7ffb      	ldrb	r3, [r7, #31]
 800e654:	f003 0301 	and.w	r3, r3, #1
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d007      	beq.n	800e66c <tcp_split_unsent_seg+0x104>
    split_flags &= ~TCP_FIN;
 800e65c:	7ffb      	ldrb	r3, [r7, #31]
 800e65e:	f023 0301 	bic.w	r3, r3, #1
 800e662:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 800e664:	7fbb      	ldrb	r3, [r7, #30]
 800e666:	f043 0301 	orr.w	r3, r3, #1
 800e66a:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e66c:	693b      	ldr	r3, [r7, #16]
 800e66e:	691b      	ldr	r3, [r3, #16]
 800e670:	685b      	ldr	r3, [r3, #4]
 800e672:	4618      	mov	r0, r3
 800e674:	f7fa fbd7 	bl	8008e26 <lwip_htonl>
 800e678:	4602      	mov	r2, r0
 800e67a:	887b      	ldrh	r3, [r7, #2]
 800e67c:	18d1      	adds	r1, r2, r3
 800e67e:	7fba      	ldrb	r2, [r7, #30]
 800e680:	7bfb      	ldrb	r3, [r7, #15]
 800e682:	9300      	str	r3, [sp, #0]
 800e684:	460b      	mov	r3, r1
 800e686:	69b9      	ldr	r1, [r7, #24]
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f7ff fb57 	bl	800dd3c <tcp_create_segment>
 800e68e:	6178      	str	r0, [r7, #20]
  if (seg == NULL) {
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d102      	bne.n	800e69c <tcp_split_unsent_seg+0x134>
    p = NULL; /* Freed by tcp_create_segment */
 800e696:	2300      	movs	r3, #0
 800e698:	61bb      	str	r3, [r7, #24]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("tcp_split_unsent_seg: could not create new TCP segment\n"));
    goto memerr;
 800e69a:	e065      	b.n	800e768 <tcp_split_unsent_seg+0x200>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	685b      	ldr	r3, [r3, #4]
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7fb ff73 	bl	800a58c <pbuf_clen>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	461a      	mov	r2, r3
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e6b0:	1a9b      	subs	r3, r3, r2
 800e6b2:	b29a      	uxth	r2, r3
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	6858      	ldr	r0, [r3, #4]
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	685b      	ldr	r3, [r3, #4]
 800e6c2:	891a      	ldrh	r2, [r3, #8]
 800e6c4:	89bb      	ldrh	r3, [r7, #12]
 800e6c6:	1ad3      	subs	r3, r2, r3
 800e6c8:	b29b      	uxth	r3, r3
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	f7fb fdd1 	bl	800a272 <pbuf_realloc>
  useg->len -= remainder;
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	891a      	ldrh	r2, [r3, #8]
 800e6d4:	89bb      	ldrh	r3, [r7, #12]
 800e6d6:	1ad3      	subs	r3, r2, r3
 800e6d8:	b29a      	uxth	r2, r3
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e6de:	693b      	ldr	r3, [r7, #16]
 800e6e0:	691b      	ldr	r3, [r3, #16]
 800e6e2:	899b      	ldrh	r3, [r3, #12]
 800e6e4:	b29c      	uxth	r4, r3
 800e6e6:	7ffb      	ldrb	r3, [r7, #31]
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7fa fb86 	bl	8008dfc <lwip_htons>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	461a      	mov	r2, r3
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	691b      	ldr	r3, [r3, #16]
 800e6f8:	4322      	orrs	r2, r4
 800e6fa:	b292      	uxth	r2, r2
 800e6fc:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	2200      	movs	r2, #0
 800e702:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	685b      	ldr	r3, [r3, #4]
 800e708:	4618      	mov	r0, r3
 800e70a:	f7fb ff3f 	bl	800a58c <pbuf_clen>
 800e70e:	4603      	mov	r3, r0
 800e710:	461a      	mov	r2, r3
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e718:	4413      	add	r3, r2
 800e71a:	b29a      	uxth	r2, r3
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	685b      	ldr	r3, [r3, #4]
 800e726:	4618      	mov	r0, r3
 800e728:	f7fb ff30 	bl	800a58c <pbuf_clen>
 800e72c:	4603      	mov	r3, r0
 800e72e:	461a      	mov	r2, r3
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e736:	4413      	add	r3, r2
 800e738:	b29a      	uxth	r2, r3
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	681a      	ldr	r2, [r3, #0]
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	697a      	ldr	r2, [r7, #20]
 800e74c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d103      	bne.n	800e75e <tcp_split_unsent_seg+0x1f6>
    pcb->unsent_oversize = 0;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2200      	movs	r2, #0
 800e75a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e75e:	2300      	movs	r3, #0
 800e760:	e012      	b.n	800e788 <tcp_split_unsent_seg+0x220>
    goto memerr;
 800e762:	bf00      	nop
 800e764:	e000      	b.n	800e768 <tcp_split_unsent_seg+0x200>
    goto memerr;
 800e766:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 800e768:	4b09      	ldr	r3, [pc, #36]	; (800e790 <tcp_split_unsent_seg+0x228>)
 800e76a:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800e76e:	3301      	adds	r3, #1
 800e770:	b29a      	uxth	r2, r3
 800e772:	4b07      	ldr	r3, [pc, #28]	; (800e790 <tcp_split_unsent_seg+0x228>)
 800e774:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

  LWIP_ASSERT("seg == NULL", seg == NULL);
  if (p != NULL) {
 800e778:	69bb      	ldr	r3, [r7, #24]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d002      	beq.n	800e784 <tcp_split_unsent_seg+0x21c>
    pbuf_free(p);
 800e77e:	69b8      	ldr	r0, [r7, #24]
 800e780:	f7fb feb1 	bl	800a4e6 <pbuf_free>
  }

  return ERR_MEM;
 800e784:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3724      	adds	r7, #36	; 0x24
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd90      	pop	{r4, r7, pc}
 800e790:	200080c8 	.word	0x200080c8

0800e794 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e794:	b590      	push	{r4, r7, lr}
 800e796:	b085      	sub	sp, #20
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d02e      	beq.n	800e802 <tcp_send_fin+0x6e>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7a8:	60fb      	str	r3, [r7, #12]
 800e7aa:	e002      	b.n	800e7b2 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d1f8      	bne.n	800e7ac <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	691b      	ldr	r3, [r3, #16]
 800e7be:	899b      	ldrh	r3, [r3, #12]
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7fa fb1a 	bl	8008dfc <lwip_htons>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	b2db      	uxtb	r3, r3
 800e7cc:	f003 0307 	and.w	r3, r3, #7
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d116      	bne.n	800e802 <tcp_send_fin+0x6e>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	691b      	ldr	r3, [r3, #16]
 800e7d8:	899b      	ldrh	r3, [r3, #12]
 800e7da:	b29c      	uxth	r4, r3
 800e7dc:	2001      	movs	r0, #1
 800e7de:	f7fa fb0d 	bl	8008dfc <lwip_htons>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	691b      	ldr	r3, [r3, #16]
 800e7ea:	4322      	orrs	r2, r4
 800e7ec:	b292      	uxth	r2, r2
 800e7ee:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	8b5b      	ldrh	r3, [r3, #26]
 800e7f4:	f043 0320 	orr.w	r3, r3, #32
 800e7f8:	b29a      	uxth	r2, r3
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e7fe:	2300      	movs	r3, #0
 800e800:	e004      	b.n	800e80c <tcp_send_fin+0x78>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e802:	2101      	movs	r1, #1
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f000 f805 	bl	800e814 <tcp_enqueue_flags>
 800e80a:	4603      	mov	r3, r0
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3714      	adds	r7, #20
 800e810:	46bd      	mov	sp, r7
 800e812:	bd90      	pop	{r4, r7, pc}

0800e814 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b088      	sub	sp, #32
 800e818:	af02      	add	r7, sp, #8
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	460b      	mov	r3, r1
 800e81e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e820:	2300      	movs	r3, #0
 800e822:	74fb      	strb	r3, [r7, #19]
  u8_t optlen = 0;
 800e824:	2300      	movs	r3, #0
 800e826:	74bb      	strb	r3, [r7, #18]

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e828:	78fb      	ldrb	r3, [r7, #3]
 800e82a:	f003 0302 	and.w	r3, r3, #2
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d001      	beq.n	800e836 <tcp_enqueue_flags+0x22>
    optflags = TF_SEG_OPTS_MSS;
 800e832:	2301      	movs	r3, #1
 800e834:	74fb      	strb	r3, [r7, #19]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e836:	7cfb      	ldrb	r3, [r7, #19]
 800e838:	009b      	lsls	r3, r3, #2
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	f003 0304 	and.w	r3, r3, #4
 800e840:	74bb      	strb	r3, [r7, #18]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e842:	7cbb      	ldrb	r3, [r7, #18]
 800e844:	b29b      	uxth	r3, r3
 800e846:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e84a:	4619      	mov	r1, r3
 800e84c:	2036      	movs	r0, #54	; 0x36
 800e84e:	f7fb fc03 	bl	800a058 <pbuf_alloc>
 800e852:	60f8      	str	r0, [r7, #12]
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d111      	bne.n	800e87e <tcp_enqueue_flags+0x6a>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	8b5b      	ldrh	r3, [r3, #26]
 800e85e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e862:	b29a      	uxth	r2, r3
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800e868:	4b3d      	ldr	r3, [pc, #244]	; (800e960 <tcp_enqueue_flags+0x14c>)
 800e86a:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800e86e:	3301      	adds	r3, #1
 800e870:	b29a      	uxth	r2, r3
 800e872:	4b3b      	ldr	r3, [pc, #236]	; (800e960 <tcp_enqueue_flags+0x14c>)
 800e874:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    return ERR_MEM;
 800e878:	f04f 33ff 	mov.w	r3, #4294967295
 800e87c:	e06c      	b.n	800e958 <tcp_enqueue_flags+0x144>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e882:	78fa      	ldrb	r2, [r7, #3]
 800e884:	7cfb      	ldrb	r3, [r7, #19]
 800e886:	9300      	str	r3, [sp, #0]
 800e888:	460b      	mov	r3, r1
 800e88a:	68f9      	ldr	r1, [r7, #12]
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f7ff fa55 	bl	800dd3c <tcp_create_segment>
 800e892:	60b8      	str	r0, [r7, #8]
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d111      	bne.n	800e8be <tcp_enqueue_flags+0xaa>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	8b5b      	ldrh	r3, [r3, #26]
 800e89e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8a2:	b29a      	uxth	r2, r3
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800e8a8:	4b2d      	ldr	r3, [pc, #180]	; (800e960 <tcp_enqueue_flags+0x14c>)
 800e8aa:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800e8ae:	3301      	adds	r3, #1
 800e8b0:	b29a      	uxth	r2, r3
 800e8b2:	4b2b      	ldr	r3, [pc, #172]	; (800e960 <tcp_enqueue_flags+0x14c>)
 800e8b4:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    return ERR_MEM;
 800e8b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8bc:	e04c      	b.n	800e958 <tcp_enqueue_flags+0x144>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d103      	bne.n	800e8ce <tcp_enqueue_flags+0xba>
    pcb->unsent = seg;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	68ba      	ldr	r2, [r7, #8]
 800e8ca:	66da      	str	r2, [r3, #108]	; 0x6c
 800e8cc:	e00d      	b.n	800e8ea <tcp_enqueue_flags+0xd6>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8d2:	617b      	str	r3, [r7, #20]
 800e8d4:	e002      	b.n	800e8dc <tcp_enqueue_flags+0xc8>
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	617b      	str	r3, [r7, #20]
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d1f8      	bne.n	800e8d6 <tcp_enqueue_flags+0xc2>
    useg->next = seg;
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	68ba      	ldr	r2, [r7, #8]
 800e8e8:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e8f2:	78fb      	ldrb	r3, [r7, #3]
 800e8f4:	f003 0302 	and.w	r3, r3, #2
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d104      	bne.n	800e906 <tcp_enqueue_flags+0xf2>
 800e8fc:	78fb      	ldrb	r3, [r7, #3]
 800e8fe:	f003 0301 	and.w	r3, r3, #1
 800e902:	2b00      	cmp	r3, #0
 800e904:	d004      	beq.n	800e910 <tcp_enqueue_flags+0xfc>
    pcb->snd_lbb++;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e90a:	1c5a      	adds	r2, r3, #1
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e910:	78fb      	ldrb	r3, [r7, #3]
 800e912:	f003 0301 	and.w	r3, r3, #1
 800e916:	2b00      	cmp	r3, #0
 800e918:	d006      	beq.n	800e928 <tcp_enqueue_flags+0x114>
    tcp_set_flags(pcb, TF_FIN);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	8b5b      	ldrh	r3, [r3, #26]
 800e91e:	f043 0320 	orr.w	r3, r3, #32
 800e922:	b29a      	uxth	r2, r3
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	685b      	ldr	r3, [r3, #4]
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7fb fe2d 	bl	800a58c <pbuf_clen>
 800e932:	4603      	mov	r3, r0
 800e934:	461a      	mov	r2, r3
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e93c:	4413      	add	r3, r2
 800e93e:	b29a      	uxth	r2, r3
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d002      	beq.n	800e956 <tcp_enqueue_flags+0x142>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e954:	2b00      	cmp	r3, #0
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e956:	2300      	movs	r3, #0
}
 800e958:	4618      	mov	r0, r3
 800e95a:	3718      	adds	r7, #24
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}
 800e960:	200080c8 	.word	0x200080c8

0800e964 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e964:	b5b0      	push	{r4, r5, r7, lr}
 800e966:	b08a      	sub	sp, #40	; 0x28
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e96c:	4b8e      	ldr	r3, [pc, #568]	; (800eba8 <tcp_output+0x244>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	687a      	ldr	r2, [r7, #4]
 800e972:	429a      	cmp	r2, r3
 800e974:	d101      	bne.n	800e97a <tcp_output+0x16>
    return ERR_OK;
 800e976:	2300      	movs	r3, #0
 800e978:	e1b7      	b.n	800ecea <tcp_output+0x386>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e986:	4293      	cmp	r3, r2
 800e988:	bf28      	it	cs
 800e98a:	4613      	movcs	r3, r2
 800e98c:	b29b      	uxth	r3, r3
 800e98e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e994:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800e996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d10b      	bne.n	800e9b4 <tcp_output+0x50>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	8b5b      	ldrh	r3, [r3, #26]
 800e9a0:	f003 0302 	and.w	r3, r3, #2
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	f000 8193 	beq.w	800ecd0 <tcp_output+0x36c>
      return tcp_send_empty_ack(pcb);
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f000 fcd9 	bl	800f362 <tcp_send_empty_ack>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	e19a      	b.n	800ecea <tcp_output+0x386>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e9b4:	6879      	ldr	r1, [r7, #4]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	3304      	adds	r3, #4
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	f7ff f9a1 	bl	800dd04 <tcp_route>
 800e9c2:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d102      	bne.n	800e9d0 <tcp_output+0x6c>
    return ERR_RTE;
 800e9ca:	f06f 0303 	mvn.w	r3, #3
 800e9ce:	e18c      	b.n	800ecea <tcp_output+0x386>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d003      	beq.n	800e9de <tcp_output+0x7a>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d111      	bne.n	800ea02 <tcp_output+0x9e>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e9de:	697b      	ldr	r3, [r7, #20]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d002      	beq.n	800e9ea <tcp_output+0x86>
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	3304      	adds	r3, #4
 800e9e8:	e000      	b.n	800e9ec <tcp_output+0x88>
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d102      	bne.n	800e9fa <tcp_output+0x96>
      return ERR_RTE;
 800e9f4:	f06f 0303 	mvn.w	r3, #3
 800e9f8:	e177      	b.n	800ecea <tcp_output+0x386>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e9fa:	693b      	ldr	r3, [r7, #16]
 800e9fc:	681a      	ldr	r2, [r3, #0]
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ea02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea04:	691b      	ldr	r3, [r3, #16]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7fa fa0c 	bl	8008e26 <lwip_htonl>
 800ea0e:	4602      	mov	r2, r0
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea14:	1ad3      	subs	r3, r2, r3
 800ea16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea18:	8912      	ldrh	r2, [r2, #8]
 800ea1a:	4413      	add	r3, r2
 800ea1c:	69ba      	ldr	r2, [r7, #24]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d227      	bcs.n	800ea72 <tcp_output+0x10e>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ea28:	461a      	mov	r2, r3
 800ea2a:	69bb      	ldr	r3, [r7, #24]
 800ea2c:	4293      	cmp	r3, r2
 800ea2e:	d114      	bne.n	800ea5a <tcp_output+0xf6>
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d110      	bne.n	800ea5a <tcp_output+0xf6>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d10b      	bne.n	800ea5a <tcp_output+0xf6>
      pcb->persist_cnt = 0;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2200      	movs	r2, #0
 800ea46:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
      pcb->persist_probe = 0;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2200      	movs	r2, #0
 800ea56:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	8b5b      	ldrh	r3, [r3, #26]
 800ea5e:	f003 0302 	and.w	r3, r3, #2
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	f000 8136 	beq.w	800ecd4 <tcp_output+0x370>
      return tcp_send_empty_ack(pcb);
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f000 fc7a 	bl	800f362 <tcp_send_empty_ack>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	e13b      	b.n	800ecea <tcp_output+0x386>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2200      	movs	r2, #0
 800ea76:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea7e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ea80:	6a3b      	ldr	r3, [r7, #32]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	f000 8105 	beq.w	800ec92 <tcp_output+0x32e>
    for (; useg->next != NULL; useg = useg->next);
 800ea88:	e002      	b.n	800ea90 <tcp_output+0x12c>
 800ea8a:	6a3b      	ldr	r3, [r7, #32]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	623b      	str	r3, [r7, #32]
 800ea90:	6a3b      	ldr	r3, [r7, #32]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d1f8      	bne.n	800ea8a <tcp_output+0x126>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ea98:	e0fb      	b.n	800ec92 <tcp_output+0x32e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ea9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea9c:	691b      	ldr	r3, [r3, #16]
 800ea9e:	899b      	ldrh	r3, [r3, #12]
 800eaa0:	b29b      	uxth	r3, r3
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7fa f9aa 	bl	8008dfc <lwip_htons>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d01f      	beq.n	800eaf0 <tcp_output+0x18c>
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	8b5b      	ldrh	r3, [r3, #26]
 800eab4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d119      	bne.n	800eaf0 <tcp_output+0x18c>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d00b      	beq.n	800eadc <tcp_output+0x178>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d110      	bne.n	800eaf0 <tcp_output+0x18c>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ead2:	891a      	ldrh	r2, [r3, #8]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ead8:	429a      	cmp	r2, r3
 800eada:	d209      	bcs.n	800eaf0 <tcp_output+0x18c>
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d004      	beq.n	800eaf0 <tcp_output+0x18c>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eaec:	2b0f      	cmp	r3, #15
 800eaee:	d901      	bls.n	800eaf4 <tcp_output+0x190>
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	e000      	b.n	800eaf6 <tcp_output+0x192>
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d106      	bne.n	800eb08 <tcp_output+0x1a4>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	8b5b      	ldrh	r3, [r3, #26]
 800eafe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	f000 80da 	beq.w	800ecbc <tcp_output+0x358>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	7d1b      	ldrb	r3, [r3, #20]
 800eb0c:	2b02      	cmp	r3, #2
 800eb0e:	d00d      	beq.n	800eb2c <tcp_output+0x1c8>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800eb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb12:	691b      	ldr	r3, [r3, #16]
 800eb14:	899b      	ldrh	r3, [r3, #12]
 800eb16:	b29c      	uxth	r4, r3
 800eb18:	2010      	movs	r0, #16
 800eb1a:	f7fa f96f 	bl	8008dfc <lwip_htons>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	461a      	mov	r2, r3
 800eb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb24:	691b      	ldr	r3, [r3, #16]
 800eb26:	4322      	orrs	r2, r4
 800eb28:	b292      	uxth	r2, r2
 800eb2a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800eb2c:	697a      	ldr	r2, [r7, #20]
 800eb2e:	6879      	ldr	r1, [r7, #4]
 800eb30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb32:	f000 f8f1 	bl	800ed18 <tcp_output_segment>
 800eb36:	60f8      	str	r0, [r7, #12]
    if (err != ERR_OK) {
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d008      	beq.n	800eb50 <tcp_output+0x1ec>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	8b5b      	ldrh	r3, [r3, #26]
 800eb42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb46:	b29a      	uxth	r2, r3
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	835a      	strh	r2, [r3, #26]
      return err;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	e0cc      	b.n	800ecea <tcp_output+0x386>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 800eb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb52:	2200      	movs	r2, #0
 800eb54:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800eb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb58:	681a      	ldr	r2, [r3, #0]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	7d1b      	ldrb	r3, [r3, #20]
 800eb62:	2b02      	cmp	r3, #2
 800eb64:	d006      	beq.n	800eb74 <tcp_output+0x210>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	8b5b      	ldrh	r3, [r3, #26]
 800eb6a:	f023 0303 	bic.w	r3, r3, #3
 800eb6e:	b29a      	uxth	r2, r3
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800eb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb76:	691b      	ldr	r3, [r3, #16]
 800eb78:	685b      	ldr	r3, [r3, #4]
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7fa f953 	bl	8008e26 <lwip_htonl>
 800eb80:	4604      	mov	r4, r0
 800eb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb84:	891b      	ldrh	r3, [r3, #8]
 800eb86:	461d      	mov	r5, r3
 800eb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb8a:	691b      	ldr	r3, [r3, #16]
 800eb8c:	899b      	ldrh	r3, [r3, #12]
 800eb8e:	b29b      	uxth	r3, r3
 800eb90:	4618      	mov	r0, r3
 800eb92:	f7fa f933 	bl	8008dfc <lwip_htons>
 800eb96:	4603      	mov	r3, r0
 800eb98:	b2db      	uxtb	r3, r3
 800eb9a:	f003 0303 	and.w	r3, r3, #3
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d004      	beq.n	800ebac <tcp_output+0x248>
 800eba2:	2301      	movs	r3, #1
 800eba4:	e003      	b.n	800ebae <tcp_output+0x24a>
 800eba6:	bf00      	nop
 800eba8:	20008214 	.word	0x20008214
 800ebac:	2300      	movs	r3, #0
 800ebae:	442b      	add	r3, r5
 800ebb0:	4423      	add	r3, r4
 800ebb2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	1ad3      	subs	r3, r2, r3
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	da02      	bge.n	800ebc6 <tcp_output+0x262>
      pcb->snd_nxt = snd_nxt;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	68ba      	ldr	r2, [r7, #8]
 800ebc4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ebc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc8:	891b      	ldrh	r3, [r3, #8]
 800ebca:	461c      	mov	r4, r3
 800ebcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebce:	691b      	ldr	r3, [r3, #16]
 800ebd0:	899b      	ldrh	r3, [r3, #12]
 800ebd2:	b29b      	uxth	r3, r3
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f7fa f911 	bl	8008dfc <lwip_htons>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	b2db      	uxtb	r3, r3
 800ebde:	f003 0303 	and.w	r3, r3, #3
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d001      	beq.n	800ebea <tcp_output+0x286>
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	e000      	b.n	800ebec <tcp_output+0x288>
 800ebea:	2300      	movs	r3, #0
 800ebec:	4423      	add	r3, r4
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d049      	beq.n	800ec86 <tcp_output+0x322>
      seg->next = NULL;
 800ebf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d105      	bne.n	800ec0c <tcp_output+0x2a8>
        pcb->unacked = seg;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec04:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ec06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec08:	623b      	str	r3, [r7, #32]
 800ec0a:	e03f      	b.n	800ec8c <tcp_output+0x328>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ec0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0e:	691b      	ldr	r3, [r3, #16]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7fa f907 	bl	8008e26 <lwip_htonl>
 800ec18:	4604      	mov	r4, r0
 800ec1a:	6a3b      	ldr	r3, [r7, #32]
 800ec1c:	691b      	ldr	r3, [r3, #16]
 800ec1e:	685b      	ldr	r3, [r3, #4]
 800ec20:	4618      	mov	r0, r3
 800ec22:	f7fa f900 	bl	8008e26 <lwip_htonl>
 800ec26:	4603      	mov	r3, r0
 800ec28:	1ae3      	subs	r3, r4, r3
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	da24      	bge.n	800ec78 <tcp_output+0x314>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	3370      	adds	r3, #112	; 0x70
 800ec32:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ec34:	e002      	b.n	800ec3c <tcp_output+0x2d8>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ec36:	69fb      	ldr	r3, [r7, #28]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ec3c:	69fb      	ldr	r3, [r7, #28]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d011      	beq.n	800ec68 <tcp_output+0x304>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ec44:	69fb      	ldr	r3, [r7, #28]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	691b      	ldr	r3, [r3, #16]
 800ec4a:	685b      	ldr	r3, [r3, #4]
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f7fa f8ea 	bl	8008e26 <lwip_htonl>
 800ec52:	4604      	mov	r4, r0
 800ec54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec56:	691b      	ldr	r3, [r3, #16]
 800ec58:	685b      	ldr	r3, [r3, #4]
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f7fa f8e3 	bl	8008e26 <lwip_htonl>
 800ec60:	4603      	mov	r3, r0
 800ec62:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	dbe6      	blt.n	800ec36 <tcp_output+0x2d2>
          }
          seg->next = (*cur_seg);
 800ec68:	69fb      	ldr	r3, [r7, #28]
 800ec6a:	681a      	ldr	r2, [r3, #0]
 800ec6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec6e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ec70:	69fb      	ldr	r3, [r7, #28]
 800ec72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec74:	601a      	str	r2, [r3, #0]
 800ec76:	e009      	b.n	800ec8c <tcp_output+0x328>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ec78:	6a3b      	ldr	r3, [r7, #32]
 800ec7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec7c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ec7e:	6a3b      	ldr	r3, [r7, #32]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	623b      	str	r3, [r7, #32]
 800ec84:	e002      	b.n	800ec8c <tcp_output+0x328>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ec86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec88:	f7fc fee3 	bl	800ba52 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec90:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ec92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d012      	beq.n	800ecbe <tcp_output+0x35a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ec98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9a:	691b      	ldr	r3, [r3, #16]
 800ec9c:	685b      	ldr	r3, [r3, #4]
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7fa f8c1 	bl	8008e26 <lwip_htonl>
 800eca4:	4602      	mov	r2, r0
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecaa:	1ad3      	subs	r3, r2, r3
 800ecac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecae:	8912      	ldrh	r2, [r2, #8]
 800ecb0:	4413      	add	r3, r2
  while (seg != NULL &&
 800ecb2:	69ba      	ldr	r2, [r7, #24]
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	f4bf aef0 	bcs.w	800ea9a <tcp_output+0x136>
 800ecba:	e000      	b.n	800ecbe <tcp_output+0x35a>
      break;
 800ecbc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d108      	bne.n	800ecd8 <tcp_output+0x374>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800ecce:	e004      	b.n	800ecda <tcp_output+0x376>
    goto output_done;
 800ecd0:	bf00      	nop
 800ecd2:	e002      	b.n	800ecda <tcp_output+0x376>
    goto output_done;
 800ecd4:	bf00      	nop
 800ecd6:	e000      	b.n	800ecda <tcp_output+0x376>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800ecd8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	8b5b      	ldrh	r3, [r3, #26]
 800ecde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ece2:	b29a      	uxth	r2, r3
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800ece8:	2300      	movs	r3, #0
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3728      	adds	r7, #40	; 0x28
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bdb0      	pop	{r4, r5, r7, pc}
 800ecf2:	bf00      	nop

0800ecf4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b083      	sub	sp, #12
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	7b9b      	ldrb	r3, [r3, #14]
 800ed02:	2b01      	cmp	r3, #1
 800ed04:	d001      	beq.n	800ed0a <tcp_output_segment_busy+0x16>
    /* other reference found */
    return 1;
 800ed06:	2301      	movs	r3, #1
 800ed08:	e000      	b.n	800ed0c <tcp_output_segment_busy+0x18>
  }
  /* no other references found */
  return 0;
 800ed0a:	2300      	movs	r3, #0
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	370c      	adds	r7, #12
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr

0800ed18 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ed18:	b5b0      	push	{r4, r5, r7, lr}
 800ed1a:	b08c      	sub	sp, #48	; 0x30
 800ed1c:	af04      	add	r7, sp, #16
 800ed1e:	60f8      	str	r0, [r7, #12]
 800ed20:	60b9      	str	r1, [r7, #8]
 800ed22:	607a      	str	r2, [r7, #4]

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);

  if (tcp_output_segment_busy(seg)) {
 800ed24:	68f8      	ldr	r0, [r7, #12]
 800ed26:	f7ff ffe5 	bl	800ecf4 <tcp_output_segment_busy>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d001      	beq.n	800ed34 <tcp_output_segment+0x1c>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ed30:	2300      	movs	r3, #0
 800ed32:	e0a3      	b.n	800ee7c <tcp_output_segment+0x164>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	691c      	ldr	r4, [r3, #16]
 800ed3c:	4610      	mov	r0, r2
 800ed3e:	f7fa f872 	bl	8008e26 <lwip_htonl>
 800ed42:	4603      	mov	r3, r0
 800ed44:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	691c      	ldr	r4, [r3, #16]
 800ed4e:	4610      	mov	r0, r2
 800ed50:	f7fa f854 	bl	8008dfc <lwip_htons>
 800ed54:	4603      	mov	r3, r0
 800ed56:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed5c:	68ba      	ldr	r2, [r7, #8]
 800ed5e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ed60:	441a      	add	r2, r3
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	691b      	ldr	r3, [r3, #16]
 800ed6a:	3314      	adds	r3, #20
 800ed6c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	7b1b      	ldrb	r3, [r3, #12]
 800ed72:	f003 0301 	and.w	r3, r3, #1
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d015      	beq.n	800eda6 <tcp_output_segment+0x8e>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	3304      	adds	r3, #4
 800ed7e:	461a      	mov	r2, r3
 800ed80:	6879      	ldr	r1, [r7, #4]
 800ed82:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800ed86:	f7fd f94b 	bl	800c020 <tcp_eff_send_mss_netif>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ed8e:	8b7b      	ldrh	r3, [r7, #26]
 800ed90:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7fa f846 	bl	8008e26 <lwip_htonl>
 800ed9a:	4602      	mov	r2, r0
 800ed9c:	69fb      	ldr	r3, [r7, #28]
 800ed9e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800eda0:	69fb      	ldr	r3, [r7, #28]
 800eda2:	3304      	adds	r3, #4
 800eda4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800edac:	2b00      	cmp	r3, #0
 800edae:	da02      	bge.n	800edb6 <tcp_output_segment+0x9e>
    pcb->rtime = 0;
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	2200      	movs	r2, #0
 800edb4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d10c      	bne.n	800edd8 <tcp_output_segment+0xc0>
    pcb->rttest = tcp_ticks;
 800edbe:	4b31      	ldr	r3, [pc, #196]	; (800ee84 <tcp_output_segment+0x16c>)
 800edc0:	681a      	ldr	r2, [r3, #0]
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	691b      	ldr	r3, [r3, #16]
 800edca:	685b      	ldr	r3, [r3, #4]
 800edcc:	4618      	mov	r0, r3
 800edce:	f7fa f82a 	bl	8008e26 <lwip_htonl>
 800edd2:	4602      	mov	r2, r0
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	691a      	ldr	r2, [r3, #16]
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	685b      	ldr	r3, [r3, #4]
 800ede0:	685b      	ldr	r3, [r3, #4]
 800ede2:	1ad3      	subs	r3, r2, r3
 800ede4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	685b      	ldr	r3, [r3, #4]
 800edea:	8959      	ldrh	r1, [r3, #10]
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	8b3a      	ldrh	r2, [r7, #24]
 800edf2:	1a8a      	subs	r2, r1, r2
 800edf4:	b292      	uxth	r2, r2
 800edf6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	685b      	ldr	r3, [r3, #4]
 800edfc:	8919      	ldrh	r1, [r3, #8]
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	8b3a      	ldrh	r2, [r7, #24]
 800ee04:	1a8a      	subs	r2, r1, r2
 800ee06:	b292      	uxth	r2, r2
 800ee08:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	68fa      	ldr	r2, [r7, #12]
 800ee10:	6912      	ldr	r2, [r2, #16]
 800ee12:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	691b      	ldr	r3, [r3, #16]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	741a      	strb	r2, [r3, #16]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	745a      	strb	r2, [r3, #17]
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800ee28:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800ee2a:	68bd      	ldr	r5, [r7, #8]
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800ee30:	68fa      	ldr	r2, [r7, #12]
 800ee32:	6914      	ldr	r4, [r2, #16]
 800ee34:	9300      	str	r3, [sp, #0]
 800ee36:	462b      	mov	r3, r5
 800ee38:	460a      	mov	r2, r1
 800ee3a:	2106      	movs	r1, #6
 800ee3c:	f7fa f910 	bl	8009060 <ip_chksum_pseudo>
 800ee40:	4603      	mov	r3, r0
 800ee42:	8223      	strh	r3, [r4, #16]
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 800ee44:	4b10      	ldr	r3, [pc, #64]	; (800ee88 <tcp_output_segment+0x170>)
 800ee46:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	b29a      	uxth	r2, r3
 800ee4e:	4b0e      	ldr	r3, [pc, #56]	; (800ee88 <tcp_output_segment+0x170>)
 800ee50:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	6858      	ldr	r0, [r3, #4]
 800ee58:	68b9      	ldr	r1, [r7, #8]
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	1d1c      	adds	r4, r3, #4
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	7add      	ldrb	r5, [r3, #11]
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	7a9b      	ldrb	r3, [r3, #10]
 800ee66:	687a      	ldr	r2, [r7, #4]
 800ee68:	9202      	str	r2, [sp, #8]
 800ee6a:	2206      	movs	r2, #6
 800ee6c:	9201      	str	r2, [sp, #4]
 800ee6e:	9300      	str	r3, [sp, #0]
 800ee70:	462b      	mov	r3, r5
 800ee72:	4622      	mov	r2, r4
 800ee74:	f002 fc68 	bl	8011748 <ip4_output_if>
 800ee78:	6178      	str	r0, [r7, #20]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ee7a:	697b      	ldr	r3, [r7, #20]
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3720      	adds	r7, #32
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bdb0      	pop	{r4, r5, r7, pc}
 800ee84:	200081c4 	.word	0x200081c4
 800ee88:	200080c8 	.word	0x200080c8

0800ee8c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ee8c:	b5b0      	push	{r4, r5, r7, lr}
 800ee8e:	b084      	sub	sp, #16
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);

  if (pcb->unacked == NULL) {
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d102      	bne.n	800eea2 <tcp_rexmit_rto_prepare+0x16>
    return ERR_VAL;
 800ee9c:	f06f 0305 	mvn.w	r3, #5
 800eea0:	e059      	b.n	800ef56 <tcp_rexmit_rto_prepare+0xca>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eea6:	60fb      	str	r3, [r7, #12]
 800eea8:	e00b      	b.n	800eec2 <tcp_rexmit_rto_prepare+0x36>
    if (tcp_output_segment_busy(seg)) {
 800eeaa:	68f8      	ldr	r0, [r7, #12]
 800eeac:	f7ff ff22 	bl	800ecf4 <tcp_output_segment_busy>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d002      	beq.n	800eebc <tcp_rexmit_rto_prepare+0x30>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800eeb6:	f06f 0305 	mvn.w	r3, #5
 800eeba:	e04c      	b.n	800ef56 <tcp_rexmit_rto_prepare+0xca>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	60fb      	str	r3, [r7, #12]
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d1ef      	bne.n	800eeaa <tcp_rexmit_rto_prepare+0x1e>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800eeca:	68f8      	ldr	r0, [r7, #12]
 800eecc:	f7ff ff12 	bl	800ecf4 <tcp_output_segment_busy>
 800eed0:	4603      	mov	r3, r0
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d002      	beq.n	800eedc <tcp_rexmit_rto_prepare+0x50>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800eed6:	f06f 0305 	mvn.w	r3, #5
 800eeda:	e03c      	b.n	800ef56 <tcp_rexmit_rto_prepare+0xca>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d104      	bne.n	800eef6 <tcp_rexmit_rto_prepare+0x6a>
    pcb->unsent_oversize = seg->oversize_left;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	895a      	ldrh	r2, [r3, #10]
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2200      	movs	r2, #0
 800ef02:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	8b5b      	ldrh	r3, [r3, #26]
 800ef08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ef0c:	b29a      	uxth	r2, r3
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	691b      	ldr	r3, [r3, #16]
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7f9 ff84 	bl	8008e26 <lwip_htonl>
 800ef1e:	4604      	mov	r4, r0
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	891b      	ldrh	r3, [r3, #8]
 800ef24:	461d      	mov	r5, r3
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	691b      	ldr	r3, [r3, #16]
 800ef2a:	899b      	ldrh	r3, [r3, #12]
 800ef2c:	b29b      	uxth	r3, r3
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7f9 ff64 	bl	8008dfc <lwip_htons>
 800ef34:	4603      	mov	r3, r0
 800ef36:	b2db      	uxtb	r3, r3
 800ef38:	f003 0303 	and.w	r3, r3, #3
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d001      	beq.n	800ef44 <tcp_rexmit_rto_prepare+0xb8>
 800ef40:	2301      	movs	r3, #1
 800ef42:	e000      	b.n	800ef46 <tcp_rexmit_rto_prepare+0xba>
 800ef44:	2300      	movs	r3, #0
 800ef46:	442b      	add	r3, r5
 800ef48:	18e2      	adds	r2, r4, r3
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2200      	movs	r2, #0
 800ef52:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800ef54:	2300      	movs	r3, #0
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3710      	adds	r7, #16
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bdb0      	pop	{r4, r5, r7, pc}

0800ef5e <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ef5e:	b580      	push	{r7, lr}
 800ef60:	b082      	sub	sp, #8
 800ef62:	af00      	add	r7, sp, #0
 800ef64:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef6c:	2bff      	cmp	r3, #255	; 0xff
 800ef6e:	d007      	beq.n	800ef80 <tcp_rexmit_rto_commit+0x22>
    ++pcb->nrtx;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef76:	3301      	adds	r3, #1
 800ef78:	b2da      	uxtb	r2, r3
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f7ff fcef 	bl	800e964 <tcp_output>
}
 800ef86:	bf00      	nop
 800ef88:	3708      	adds	r7, #8
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}

0800ef8e <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ef8e:	b580      	push	{r7, lr}
 800ef90:	b082      	sub	sp, #8
 800ef92:	af00      	add	r7, sp, #0
 800ef94:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ef96:	6878      	ldr	r0, [r7, #4]
 800ef98:	f7ff ff78 	bl	800ee8c <tcp_rexmit_rto_prepare>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d102      	bne.n	800efa8 <tcp_rexmit_rto+0x1a>
    tcp_rexmit_rto_commit(pcb);
 800efa2:	6878      	ldr	r0, [r7, #4]
 800efa4:	f7ff ffdb 	bl	800ef5e <tcp_rexmit_rto_commit>
  }
}
 800efa8:	bf00      	nop
 800efaa:	3708      	adds	r7, #8
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800efb0:	b590      	push	{r4, r7, lr}
 800efb2:	b085      	sub	sp, #20
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);

  if (pcb->unacked == NULL) {
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d102      	bne.n	800efc6 <tcp_rexmit+0x16>
    return ERR_VAL;
 800efc0:	f06f 0305 	mvn.w	r3, #5
 800efc4:	e04c      	b.n	800f060 <tcp_rexmit+0xb0>
  }

  seg = pcb->unacked;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efca:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800efcc:	68b8      	ldr	r0, [r7, #8]
 800efce:	f7ff fe91 	bl	800ecf4 <tcp_output_segment_busy>
 800efd2:	4603      	mov	r3, r0
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d002      	beq.n	800efde <tcp_rexmit+0x2e>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800efd8:	f06f 0305 	mvn.w	r3, #5
 800efdc:	e040      	b.n	800f060 <tcp_rexmit+0xb0>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	681a      	ldr	r2, [r3, #0]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	336c      	adds	r3, #108	; 0x6c
 800efea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800efec:	e002      	b.n	800eff4 <tcp_rexmit+0x44>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d011      	beq.n	800f020 <tcp_rexmit+0x70>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	691b      	ldr	r3, [r3, #16]
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	4618      	mov	r0, r3
 800f006:	f7f9 ff0e 	bl	8008e26 <lwip_htonl>
 800f00a:	4604      	mov	r4, r0
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	691b      	ldr	r3, [r3, #16]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	4618      	mov	r0, r3
 800f014:	f7f9 ff07 	bl	8008e26 <lwip_htonl>
 800f018:	4603      	mov	r3, r0
 800f01a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	dbe6      	blt.n	800efee <tcp_rexmit+0x3e>
  }
  seg->next = *cur_seg;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681a      	ldr	r2, [r3, #0]
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	68ba      	ldr	r2, [r7, #8]
 800f02c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d103      	bne.n	800f03e <tcp_rexmit+0x8e>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2200      	movs	r2, #0
 800f03a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f044:	2bff      	cmp	r3, #255	; 0xff
 800f046:	d007      	beq.n	800f058 <tcp_rexmit+0xa8>
    ++pcb->nrtx;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f04e:	3301      	adds	r3, #1
 800f050:	b2da      	uxtb	r2, r3
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2200      	movs	r2, #0
 800f05c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f05e:	2300      	movs	r3, #0
}
 800f060:	4618      	mov	r0, r3
 800f062:	3714      	adds	r7, #20
 800f064:	46bd      	mov	sp, r7
 800f066:	bd90      	pop	{r4, r7, pc}

0800f068 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b082      	sub	sp, #8
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f074:	2b00      	cmp	r3, #0
 800f076:	d044      	beq.n	800f102 <tcp_rexmit_fast+0x9a>
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	8b5b      	ldrh	r3, [r3, #26]
 800f07c:	f003 0304 	and.w	r3, r3, #4
 800f080:	2b00      	cmp	r3, #0
 800f082:	d13e      	bne.n	800f102 <tcp_rexmit_fast+0x9a>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f7ff ff93 	bl	800efb0 <tcp_rexmit>
 800f08a:	4603      	mov	r3, r0
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d138      	bne.n	800f102 <tcp_rexmit_fast+0x9a>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f09c:	4293      	cmp	r3, r2
 800f09e:	bf28      	it	cs
 800f0a0:	4613      	movcs	r3, r2
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	0fda      	lsrs	r2, r3, #31
 800f0a6:	4413      	add	r3, r2
 800f0a8:	105b      	asrs	r3, r3, #1
 800f0aa:	b29a      	uxth	r2, r3
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f0b8:	461a      	mov	r2, r3
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0be:	005b      	lsls	r3, r3, #1
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d206      	bcs.n	800f0d2 <tcp_rexmit_fast+0x6a>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0c8:	005b      	lsls	r3, r3, #1
 800f0ca:	b29a      	uxth	r2, r3
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0dc:	4619      	mov	r1, r3
 800f0de:	0049      	lsls	r1, r1, #1
 800f0e0:	440b      	add	r3, r1
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	4413      	add	r3, r2
 800f0e6:	b29a      	uxth	r2, r3
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	8b5b      	ldrh	r3, [r3, #26]
 800f0f2:	f043 0304 	orr.w	r3, r3, #4
 800f0f6:	b29a      	uxth	r2, r3
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2200      	movs	r2, #0
 800f100:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f102:	bf00      	nop
 800f104:	3708      	adds	r7, #8
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}

0800f10a <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f10a:	b580      	push	{r7, lr}
 800f10c:	b086      	sub	sp, #24
 800f10e:	af00      	add	r7, sp, #0
 800f110:	60f8      	str	r0, [r7, #12]
 800f112:	607b      	str	r3, [r7, #4]
 800f114:	460b      	mov	r3, r1
 800f116:	817b      	strh	r3, [r7, #10]
 800f118:	4613      	mov	r3, r2
 800f11a:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f11c:	897a      	ldrh	r2, [r7, #10]
 800f11e:	893b      	ldrh	r3, [r7, #8]
 800f120:	4413      	add	r3, r2
 800f122:	b29b      	uxth	r3, r3
 800f124:	3314      	adds	r3, #20
 800f126:	b29b      	uxth	r3, r3
 800f128:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f12c:	4619      	mov	r1, r3
 800f12e:	2022      	movs	r0, #34	; 0x22
 800f130:	f7fa ff92 	bl	800a058 <pbuf_alloc>
 800f134:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f136:	697b      	ldr	r3, [r7, #20]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d040      	beq.n	800f1be <tcp_output_alloc_header_common+0xb4>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	685b      	ldr	r3, [r3, #4]
 800f140:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f142:	8c3b      	ldrh	r3, [r7, #32]
 800f144:	4618      	mov	r0, r3
 800f146:	f7f9 fe59 	bl	8008dfc <lwip_htons>
 800f14a:	4603      	mov	r3, r0
 800f14c:	461a      	mov	r2, r3
 800f14e:	693b      	ldr	r3, [r7, #16]
 800f150:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f152:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f154:	4618      	mov	r0, r3
 800f156:	f7f9 fe51 	bl	8008dfc <lwip_htons>
 800f15a:	4603      	mov	r3, r0
 800f15c:	461a      	mov	r2, r3
 800f15e:	693b      	ldr	r3, [r7, #16]
 800f160:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	687a      	ldr	r2, [r7, #4]
 800f166:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f168:	68f8      	ldr	r0, [r7, #12]
 800f16a:	f7f9 fe5c 	bl	8008e26 <lwip_htonl>
 800f16e:	4602      	mov	r2, r0
 800f170:	693b      	ldr	r3, [r7, #16]
 800f172:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f174:	897b      	ldrh	r3, [r7, #10]
 800f176:	089b      	lsrs	r3, r3, #2
 800f178:	b29b      	uxth	r3, r3
 800f17a:	3305      	adds	r3, #5
 800f17c:	b29b      	uxth	r3, r3
 800f17e:	031b      	lsls	r3, r3, #12
 800f180:	b29a      	uxth	r2, r3
 800f182:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f186:	b29b      	uxth	r3, r3
 800f188:	4313      	orrs	r3, r2
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	4618      	mov	r0, r3
 800f18e:	f7f9 fe35 	bl	8008dfc <lwip_htons>
 800f192:	4603      	mov	r3, r0
 800f194:	461a      	mov	r2, r3
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f19a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f19c:	4618      	mov	r0, r3
 800f19e:	f7f9 fe2d 	bl	8008dfc <lwip_htons>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	461a      	mov	r2, r3
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	741a      	strb	r2, [r3, #16]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	749a      	strb	r2, [r3, #18]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f1be:	697b      	ldr	r3, [r7, #20]
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3718      	adds	r7, #24
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f1c8:	b5b0      	push	{r4, r5, r7, lr}
 800f1ca:	b08a      	sub	sp, #40	; 0x28
 800f1cc:	af04      	add	r7, sp, #16
 800f1ce:	60f8      	str	r0, [r7, #12]
 800f1d0:	607b      	str	r3, [r7, #4]
 800f1d2:	460b      	mov	r3, r1
 800f1d4:	817b      	strh	r3, [r7, #10]
 800f1d6:	4613      	mov	r3, r2
 800f1d8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	8adb      	ldrh	r3, [r3, #22]
 800f1e2:	68fa      	ldr	r2, [r7, #12]
 800f1e4:	8b12      	ldrh	r2, [r2, #24]
 800f1e6:	68f9      	ldr	r1, [r7, #12]
 800f1e8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800f1ea:	893d      	ldrh	r5, [r7, #8]
 800f1ec:	897c      	ldrh	r4, [r7, #10]
 800f1ee:	9103      	str	r1, [sp, #12]
 800f1f0:	2110      	movs	r1, #16
 800f1f2:	9102      	str	r1, [sp, #8]
 800f1f4:	9201      	str	r2, [sp, #4]
 800f1f6:	9300      	str	r3, [sp, #0]
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	462a      	mov	r2, r5
 800f1fc:	4621      	mov	r1, r4
 800f1fe:	f7ff ff84 	bl	800f10a <tcp_output_alloc_header_common>
 800f202:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f204:	697b      	ldr	r3, [r7, #20]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d006      	beq.n	800f218 <tcp_output_alloc_header+0x50>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f20e:	68fa      	ldr	r2, [r7, #12]
 800f210:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f212:	441a      	add	r2, r3
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800f218:	697b      	ldr	r3, [r7, #20]
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3718      	adds	r7, #24
 800f21e:	46bd      	mov	sp, r7
 800f220:	bdb0      	pop	{r4, r5, r7, pc}

0800f222 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f222:	b480      	push	{r7}
 800f224:	b089      	sub	sp, #36	; 0x24
 800f226:	af00      	add	r7, sp, #0
 800f228:	60f8      	str	r0, [r7, #12]
 800f22a:	60b9      	str	r1, [r7, #8]
 800f22c:	4611      	mov	r1, r2
 800f22e:	461a      	mov	r2, r3
 800f230:	460b      	mov	r3, r1
 800f232:	71fb      	strb	r3, [r7, #7]
 800f234:	4613      	mov	r3, r2
 800f236:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f238:	2300      	movs	r3, #0
 800f23a:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	685b      	ldr	r3, [r3, #4]
 800f240:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f242:	69bb      	ldr	r3, [r7, #24]
 800f244:	3314      	adds	r3, #20
 800f246:	617b      	str	r3, [r7, #20]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f248:	bf00      	nop
 800f24a:	3724      	adds	r7, #36	; 0x24
 800f24c:	46bd      	mov	sp, r7
 800f24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f252:	4770      	bx	lr

0800f254 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b08c      	sub	sp, #48	; 0x30
 800f258:	af04      	add	r7, sp, #16
 800f25a:	60f8      	str	r0, [r7, #12]
 800f25c:	60b9      	str	r1, [r7, #8]
 800f25e:	607a      	str	r2, [r7, #4]
 800f260:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);

  netif = tcp_route(pcb, src, dst);
 800f262:	683a      	ldr	r2, [r7, #0]
 800f264:	6879      	ldr	r1, [r7, #4]
 800f266:	68f8      	ldr	r0, [r7, #12]
 800f268:	f7fe fd4c 	bl	800dd04 <tcp_route>
 800f26c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d103      	bne.n	800f27c <tcp_output_control_segment+0x28>
    err = ERR_RTE;
 800f274:	f06f 0303 	mvn.w	r3, #3
 800f278:	61fb      	str	r3, [r7, #28]
 800f27a:	e033      	b.n	800f2e4 <tcp_output_control_segment+0x90>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	685b      	ldr	r3, [r3, #4]
 800f280:	613b      	str	r3, [r7, #16]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	891a      	ldrh	r2, [r3, #8]
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	9300      	str	r3, [sp, #0]
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2106      	movs	r1, #6
 800f28e:	68b8      	ldr	r0, [r7, #8]
 800f290:	f7f9 fee6 	bl	8009060 <ip_chksum_pseudo>
 800f294:	4603      	mov	r3, r0
 800f296:	461a      	mov	r2, r3
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d006      	beq.n	800f2b0 <tcp_output_control_segment+0x5c>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	7adb      	ldrb	r3, [r3, #11]
 800f2a6:	76fb      	strb	r3, [r7, #27]
      tos = pcb->tos;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	7a9b      	ldrb	r3, [r3, #10]
 800f2ac:	76bb      	strb	r3, [r7, #26]
 800f2ae:	e003      	b.n	800f2b8 <tcp_output_control_segment+0x64>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f2b0:	23ff      	movs	r3, #255	; 0xff
 800f2b2:	76fb      	strb	r3, [r7, #27]
      tos = 0;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	76bb      	strb	r3, [r7, #26]
    }
    TCP_STATS_INC(tcp.xmit);
 800f2b8:	4b0e      	ldr	r3, [pc, #56]	; (800f2f4 <tcp_output_control_segment+0xa0>)
 800f2ba:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800f2be:	3301      	adds	r3, #1
 800f2c0:	b29a      	uxth	r2, r3
 800f2c2:	4b0c      	ldr	r3, [pc, #48]	; (800f2f4 <tcp_output_control_segment+0xa0>)
 800f2c4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f2c8:	7efa      	ldrb	r2, [r7, #27]
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	9302      	str	r3, [sp, #8]
 800f2ce:	2306      	movs	r3, #6
 800f2d0:	9301      	str	r3, [sp, #4]
 800f2d2:	7ebb      	ldrb	r3, [r7, #26]
 800f2d4:	9300      	str	r3, [sp, #0]
 800f2d6:	4613      	mov	r3, r2
 800f2d8:	683a      	ldr	r2, [r7, #0]
 800f2da:	6879      	ldr	r1, [r7, #4]
 800f2dc:	68b8      	ldr	r0, [r7, #8]
 800f2de:	f002 fa33 	bl	8011748 <ip4_output_if>
 800f2e2:	61f8      	str	r0, [r7, #28]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f2e4:	68b8      	ldr	r0, [r7, #8]
 800f2e6:	f7fb f8fe 	bl	800a4e6 <pbuf_free>
  return err;
 800f2ea:	69fb      	ldr	r3, [r7, #28]
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3720      	adds	r7, #32
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}
 800f2f4:	200080c8 	.word	0x200080c8

0800f2f8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f2f8:	b590      	push	{r4, r7, lr}
 800f2fa:	b08b      	sub	sp, #44	; 0x2c
 800f2fc:	af04      	add	r7, sp, #16
 800f2fe:	60f8      	str	r0, [r7, #12]
 800f300:	60b9      	str	r1, [r7, #8]
 800f302:	607a      	str	r2, [r7, #4]
 800f304:	603b      	str	r3, [r7, #0]
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f306:	2300      	movs	r3, #0
 800f308:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f30a:	f248 431c 	movw	r3, #33820	; 0x841c
 800f30e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f310:	7dfb      	ldrb	r3, [r7, #23]
 800f312:	b29c      	uxth	r4, r3
 800f314:	68b8      	ldr	r0, [r7, #8]
 800f316:	f7f9 fd86 	bl	8008e26 <lwip_htonl>
 800f31a:	4602      	mov	r2, r0
 800f31c:	8abb      	ldrh	r3, [r7, #20]
 800f31e:	9303      	str	r3, [sp, #12]
 800f320:	2314      	movs	r3, #20
 800f322:	9302      	str	r3, [sp, #8]
 800f324:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f326:	9301      	str	r3, [sp, #4]
 800f328:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f32a:	9300      	str	r3, [sp, #0]
 800f32c:	4613      	mov	r3, r2
 800f32e:	2200      	movs	r2, #0
 800f330:	4621      	mov	r1, r4
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f7ff fee9 	bl	800f10a <tcp_output_alloc_header_common>
 800f338:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d00c      	beq.n	800f35a <tcp_rst+0x62>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800f340:	2300      	movs	r3, #0
 800f342:	2200      	movs	r2, #0
 800f344:	6939      	ldr	r1, [r7, #16]
 800f346:	68f8      	ldr	r0, [r7, #12]
 800f348:	f7ff ff6b 	bl	800f222 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34e:	683a      	ldr	r2, [r7, #0]
 800f350:	6939      	ldr	r1, [r7, #16]
 800f352:	68f8      	ldr	r0, [r7, #12]
 800f354:	f7ff ff7e 	bl	800f254 <tcp_output_control_segment>
 800f358:	e000      	b.n	800f35c <tcp_rst+0x64>
    return;
 800f35a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f35c:	371c      	adds	r7, #28
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd90      	pop	{r4, r7, pc}

0800f362 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f362:	b590      	push	{r4, r7, lr}
 800f364:	b087      	sub	sp, #28
 800f366:	af00      	add	r7, sp, #0
 800f368:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f36a:	2300      	movs	r3, #0
 800f36c:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f36e:	2300      	movs	r3, #0
 800f370:	75bb      	strb	r3, [r7, #22]
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f372:	7dfb      	ldrb	r3, [r7, #23]
 800f374:	009b      	lsls	r3, r3, #2
 800f376:	b2db      	uxtb	r3, r3
 800f378:	f003 0304 	and.w	r3, r3, #4
 800f37c:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f37e:	7d7b      	ldrb	r3, [r7, #21]
 800f380:	b29c      	uxth	r4, r3
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f386:	4618      	mov	r0, r3
 800f388:	f7f9 fd4d 	bl	8008e26 <lwip_htonl>
 800f38c:	4603      	mov	r3, r0
 800f38e:	2200      	movs	r2, #0
 800f390:	4621      	mov	r1, r4
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f7ff ff18 	bl	800f1c8 <tcp_output_alloc_header>
 800f398:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f39a:	693b      	ldr	r3, [r7, #16]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d109      	bne.n	800f3b4 <tcp_send_empty_ack+0x52>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	8b5b      	ldrh	r3, [r3, #26]
 800f3a4:	f043 0303 	orr.w	r3, r3, #3
 800f3a8:	b29a      	uxth	r2, r3
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f3ae:	f06f 0301 	mvn.w	r3, #1
 800f3b2:	e020      	b.n	800f3f6 <tcp_send_empty_ack+0x94>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f3b4:	7dbb      	ldrb	r3, [r7, #22]
 800f3b6:	7dfa      	ldrb	r2, [r7, #23]
 800f3b8:	6939      	ldr	r1, [r7, #16]
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f7ff ff31 	bl	800f222 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f3c0:	687a      	ldr	r2, [r7, #4]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	3304      	adds	r3, #4
 800f3c6:	6939      	ldr	r1, [r7, #16]
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f7ff ff43 	bl	800f254 <tcp_output_control_segment>
 800f3ce:	60f8      	str	r0, [r7, #12]
  if (err != ERR_OK) {
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d007      	beq.n	800f3e6 <tcp_send_empty_ack+0x84>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	8b5b      	ldrh	r3, [r3, #26]
 800f3da:	f043 0303 	orr.w	r3, r3, #3
 800f3de:	b29a      	uxth	r2, r3
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	835a      	strh	r2, [r3, #26]
 800f3e4:	e006      	b.n	800f3f4 <tcp_send_empty_ack+0x92>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	8b5b      	ldrh	r3, [r3, #26]
 800f3ea:	f023 0303 	bic.w	r3, r3, #3
 800f3ee:	b29a      	uxth	r2, r3
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	371c      	adds	r7, #28
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd90      	pop	{r4, r7, pc}

0800f3fe <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f3fe:	b590      	push	{r4, r7, lr}
 800f400:	b087      	sub	sp, #28
 800f402:	af00      	add	r7, sp, #0
 800f404:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f406:	2300      	movs	r3, #0
 800f408:	73fb      	strb	r3, [r7, #15]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f40a:	7bfb      	ldrb	r3, [r7, #15]
 800f40c:	b29c      	uxth	r4, r3
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f412:	3b01      	subs	r3, #1
 800f414:	4618      	mov	r0, r3
 800f416:	f7f9 fd06 	bl	8008e26 <lwip_htonl>
 800f41a:	4603      	mov	r3, r0
 800f41c:	2200      	movs	r2, #0
 800f41e:	4621      	mov	r1, r4
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f7ff fed1 	bl	800f1c8 <tcp_output_alloc_header>
 800f426:	6178      	str	r0, [r7, #20]
  if (p == NULL) {
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d102      	bne.n	800f434 <tcp_keepalive+0x36>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f42e:	f04f 33ff 	mov.w	r3, #4294967295
 800f432:	e00e      	b.n	800f452 <tcp_keepalive+0x54>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800f434:	2300      	movs	r3, #0
 800f436:	2200      	movs	r2, #0
 800f438:	6979      	ldr	r1, [r7, #20]
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f7ff fef1 	bl	800f222 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f440:	687a      	ldr	r2, [r7, #4]
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	3304      	adds	r3, #4
 800f446:	6979      	ldr	r1, [r7, #20]
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f7ff ff03 	bl	800f254 <tcp_output_control_segment>
 800f44e:	6138      	str	r0, [r7, #16]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f450:	693b      	ldr	r3, [r7, #16]
}
 800f452:	4618      	mov	r0, r3
 800f454:	371c      	adds	r7, #28
 800f456:	46bd      	mov	sp, r7
 800f458:	bd90      	pop	{r4, r7, pc}

0800f45a <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f45a:	b590      	push	{r4, r7, lr}
 800f45c:	b08b      	sub	sp, #44	; 0x2c
 800f45e:	af00      	add	r7, sp, #0
 800f460:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f462:	2300      	movs	r3, #0
 800f464:	74fb      	strb	r3, [r7, #19]
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f46a:	627b      	str	r3, [r7, #36]	; 0x24
  if (seg == NULL) {
 800f46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d101      	bne.n	800f476 <tcp_zero_window_probe+0x1c>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f472:	2300      	movs	r3, #0
 800f474:	e085      	b.n	800f582 <tcp_zero_window_probe+0x128>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800f47c:	2bff      	cmp	r3, #255	; 0xff
 800f47e:	d007      	beq.n	800f490 <tcp_zero_window_probe+0x36>
    ++pcb->persist_probe;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800f486:	3301      	adds	r3, #1
 800f488:	b2da      	uxtb	r2, r3
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f492:	691b      	ldr	r3, [r3, #16]
 800f494:	899b      	ldrh	r3, [r3, #12]
 800f496:	b29b      	uxth	r3, r3
 800f498:	4618      	mov	r0, r3
 800f49a:	f7f9 fcaf 	bl	8008dfc <lwip_htons>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	b2db      	uxtb	r3, r3
 800f4a2:	f003 0301 	and.w	r3, r3, #1
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d005      	beq.n	800f4b6 <tcp_zero_window_probe+0x5c>
 800f4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ac:	891b      	ldrh	r3, [r3, #8]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d101      	bne.n	800f4b6 <tcp_zero_window_probe+0x5c>
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	e000      	b.n	800f4b8 <tcp_zero_window_probe+0x5e>
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f4bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	bf0c      	ite	eq
 800f4c4:	2301      	moveq	r3, #1
 800f4c6:	2300      	movne	r3, #0
 800f4c8:	b2db      	uxtb	r3, r3
 800f4ca:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f4cc:	7cfb      	ldrb	r3, [r7, #19]
 800f4ce:	b299      	uxth	r1, r3
 800f4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d2:	691b      	ldr	r3, [r3, #16]
 800f4d4:	685b      	ldr	r3, [r3, #4]
 800f4d6:	8c3a      	ldrh	r2, [r7, #32]
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f7ff fe75 	bl	800f1c8 <tcp_output_alloc_header>
 800f4de:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800f4e0:	69fb      	ldr	r3, [r7, #28]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d102      	bne.n	800f4ec <tcp_zero_window_probe+0x92>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f4ea:	e04a      	b.n	800f582 <tcp_zero_window_probe+0x128>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f4ec:	69fb      	ldr	r3, [r7, #28]
 800f4ee:	685b      	ldr	r3, [r3, #4]
 800f4f0:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 800f4f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d011      	beq.n	800f51e <tcp_zero_window_probe+0xc4>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f4fa:	69bb      	ldr	r3, [r7, #24]
 800f4fc:	899b      	ldrh	r3, [r3, #12]
 800f4fe:	b29b      	uxth	r3, r3
 800f500:	b21b      	sxth	r3, r3
 800f502:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f506:	b21c      	sxth	r4, r3
 800f508:	2011      	movs	r0, #17
 800f50a:	f7f9 fc77 	bl	8008dfc <lwip_htons>
 800f50e:	4603      	mov	r3, r0
 800f510:	b21b      	sxth	r3, r3
 800f512:	4323      	orrs	r3, r4
 800f514:	b21b      	sxth	r3, r3
 800f516:	b29a      	uxth	r2, r3
 800f518:	69bb      	ldr	r3, [r7, #24]
 800f51a:	819a      	strh	r2, [r3, #12]
 800f51c:	e010      	b.n	800f540 <tcp_zero_window_probe+0xe6>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f51e:	69fb      	ldr	r3, [r7, #28]
 800f520:	685b      	ldr	r3, [r3, #4]
 800f522:	3314      	adds	r3, #20
 800f524:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f528:	6858      	ldr	r0, [r3, #4]
 800f52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52c:	685b      	ldr	r3, [r3, #4]
 800f52e:	891a      	ldrh	r2, [r3, #8]
 800f530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f532:	891b      	ldrh	r3, [r3, #8]
 800f534:	1ad3      	subs	r3, r2, r3
 800f536:	b29b      	uxth	r3, r3
 800f538:	2201      	movs	r2, #1
 800f53a:	6979      	ldr	r1, [r7, #20]
 800f53c:	f7fb f96e 	bl	800a81c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f542:	691b      	ldr	r3, [r3, #16]
 800f544:	685b      	ldr	r3, [r3, #4]
 800f546:	4618      	mov	r0, r3
 800f548:	f7f9 fc6d 	bl	8008e26 <lwip_htonl>
 800f54c:	4603      	mov	r3, r0
 800f54e:	3301      	adds	r3, #1
 800f550:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	1ad3      	subs	r3, r2, r3
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	da02      	bge.n	800f564 <tcp_zero_window_probe+0x10a>
    pcb->snd_nxt = snd_nxt;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	68fa      	ldr	r2, [r7, #12]
 800f562:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800f564:	2300      	movs	r3, #0
 800f566:	2200      	movs	r2, #0
 800f568:	69f9      	ldr	r1, [r7, #28]
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f7ff fe59 	bl	800f222 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f570:	687a      	ldr	r2, [r7, #4]
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	3304      	adds	r3, #4
 800f576:	69f9      	ldr	r1, [r7, #28]
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f7ff fe6b 	bl	800f254 <tcp_output_control_segment>
 800f57e:	60b8      	str	r0, [r7, #8]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f580:	68bb      	ldr	r3, [r7, #8]
}
 800f582:	4618      	mov	r0, r3
 800f584:	372c      	adds	r7, #44	; 0x2c
 800f586:	46bd      	mov	sp, r7
 800f588:	bd90      	pop	{r4, r7, pc}
	...

0800f58c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b082      	sub	sp, #8
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f594:	f7fb fa5a 	bl	800aa4c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f598:	4b0a      	ldr	r3, [pc, #40]	; (800f5c4 <tcpip_tcp_timer+0x38>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d103      	bne.n	800f5a8 <tcpip_tcp_timer+0x1c>
 800f5a0:	4b09      	ldr	r3, [pc, #36]	; (800f5c8 <tcpip_tcp_timer+0x3c>)
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d005      	beq.n	800f5b4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	4908      	ldr	r1, [pc, #32]	; (800f5cc <tcpip_tcp_timer+0x40>)
 800f5ac:	200a      	movs	r0, #10
 800f5ae:	f000 f8e3 	bl	800f778 <sys_timeout>
 800f5b2:	e003      	b.n	800f5bc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f5b4:	4b06      	ldr	r3, [pc, #24]	; (800f5d0 <tcpip_tcp_timer+0x44>)
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	601a      	str	r2, [r3, #0]
  }
}
 800f5ba:	bf00      	nop
 800f5bc:	bf00      	nop
 800f5be:	3708      	adds	r7, #8
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}
 800f5c4:	200081d0 	.word	0x200081d0
 800f5c8:	200081d4 	.word	0x200081d4
 800f5cc:	0800f58d 	.word	0x0800f58d
 800f5d0:	20008220 	.word	0x20008220

0800f5d4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f5d8:	4b0a      	ldr	r3, [pc, #40]	; (800f604 <tcp_timer_needed+0x30>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d10f      	bne.n	800f600 <tcp_timer_needed+0x2c>
 800f5e0:	4b09      	ldr	r3, [pc, #36]	; (800f608 <tcp_timer_needed+0x34>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d103      	bne.n	800f5f0 <tcp_timer_needed+0x1c>
 800f5e8:	4b08      	ldr	r3, [pc, #32]	; (800f60c <tcp_timer_needed+0x38>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d007      	beq.n	800f600 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f5f0:	4b04      	ldr	r3, [pc, #16]	; (800f604 <tcp_timer_needed+0x30>)
 800f5f2:	2201      	movs	r2, #1
 800f5f4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	4905      	ldr	r1, [pc, #20]	; (800f610 <tcp_timer_needed+0x3c>)
 800f5fa:	200a      	movs	r0, #10
 800f5fc:	f000 f8bc 	bl	800f778 <sys_timeout>
  }
}
 800f600:	bf00      	nop
 800f602:	bd80      	pop	{r7, pc}
 800f604:	20008220 	.word	0x20008220
 800f608:	200081d0 	.word	0x200081d0
 800f60c:	200081d4 	.word	0x200081d4
 800f610:	0800f58d 	.word	0x0800f58d

0800f614 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b086      	sub	sp, #24
 800f618:	af00      	add	r7, sp, #0
 800f61a:	60f8      	str	r0, [r7, #12]
 800f61c:	60b9      	str	r1, [r7, #8]
 800f61e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f620:	2007      	movs	r0, #7
 800f622:	f7fa f96f 	bl	8009904 <memp_malloc>
 800f626:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f628:	693b      	ldr	r3, [r7, #16]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d04a      	beq.n	800f6c4 <sys_timeout_abs+0xb0>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	2200      	movs	r2, #0
 800f632:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	68ba      	ldr	r2, [r7, #8]
 800f638:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f63a:	693b      	ldr	r3, [r7, #16]
 800f63c:	687a      	ldr	r2, [r7, #4]
 800f63e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	68fa      	ldr	r2, [r7, #12]
 800f644:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f646:	4b21      	ldr	r3, [pc, #132]	; (800f6cc <sys_timeout_abs+0xb8>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d103      	bne.n	800f656 <sys_timeout_abs+0x42>
    next_timeout = timeout;
 800f64e:	4a1f      	ldr	r2, [pc, #124]	; (800f6cc <sys_timeout_abs+0xb8>)
 800f650:	693b      	ldr	r3, [r7, #16]
 800f652:	6013      	str	r3, [r2, #0]
    return;
 800f654:	e037      	b.n	800f6c6 <sys_timeout_abs+0xb2>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f656:	693b      	ldr	r3, [r7, #16]
 800f658:	685a      	ldr	r2, [r3, #4]
 800f65a:	4b1c      	ldr	r3, [pc, #112]	; (800f6cc <sys_timeout_abs+0xb8>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	685b      	ldr	r3, [r3, #4]
 800f660:	1ad3      	subs	r3, r2, r3
 800f662:	0fdb      	lsrs	r3, r3, #31
 800f664:	f003 0301 	and.w	r3, r3, #1
 800f668:	b2db      	uxtb	r3, r3
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d007      	beq.n	800f67e <sys_timeout_abs+0x6a>
    timeout->next = next_timeout;
 800f66e:	4b17      	ldr	r3, [pc, #92]	; (800f6cc <sys_timeout_abs+0xb8>)
 800f670:	681a      	ldr	r2, [r3, #0]
 800f672:	693b      	ldr	r3, [r7, #16]
 800f674:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f676:	4a15      	ldr	r2, [pc, #84]	; (800f6cc <sys_timeout_abs+0xb8>)
 800f678:	693b      	ldr	r3, [r7, #16]
 800f67a:	6013      	str	r3, [r2, #0]
 800f67c:	e023      	b.n	800f6c6 <sys_timeout_abs+0xb2>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f67e:	4b13      	ldr	r3, [pc, #76]	; (800f6cc <sys_timeout_abs+0xb8>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	617b      	str	r3, [r7, #20]
 800f684:	e01a      	b.n	800f6bc <sys_timeout_abs+0xa8>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d00b      	beq.n	800f6a6 <sys_timeout_abs+0x92>
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	685a      	ldr	r2, [r3, #4]
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	685b      	ldr	r3, [r3, #4]
 800f698:	1ad3      	subs	r3, r2, r3
 800f69a:	0fdb      	lsrs	r3, r3, #31
 800f69c:	f003 0301 	and.w	r3, r3, #1
 800f6a0:	b2db      	uxtb	r3, r3
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d007      	beq.n	800f6b6 <sys_timeout_abs+0xa2>
        timeout->next = t->next;
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	681a      	ldr	r2, [r3, #0]
 800f6aa:	693b      	ldr	r3, [r7, #16]
 800f6ac:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	693a      	ldr	r2, [r7, #16]
 800f6b2:	601a      	str	r2, [r3, #0]
        break;
 800f6b4:	e007      	b.n	800f6c6 <sys_timeout_abs+0xb2>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	617b      	str	r3, [r7, #20]
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d1e1      	bne.n	800f686 <sys_timeout_abs+0x72>
 800f6c2:	e000      	b.n	800f6c6 <sys_timeout_abs+0xb2>
    return;
 800f6c4:	bf00      	nop
      }
    }
  }
}
 800f6c6:	3718      	adds	r7, #24
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}
 800f6cc:	20008218 	.word	0x20008218

0800f6d0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b086      	sub	sp, #24
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	4798      	blx	r3

  now = sys_now();
 800f6e2:	f7f1 f845 	bl	8000770 <sys_now>
 800f6e6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	681a      	ldr	r2, [r3, #0]
 800f6ec:	4b0f      	ldr	r3, [pc, #60]	; (800f72c <lwip_cyclic_timer+0x5c>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	4413      	add	r3, r2
 800f6f2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f6f4:	68fa      	ldr	r2, [r7, #12]
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	1ad3      	subs	r3, r2, r3
 800f6fa:	0fdb      	lsrs	r3, r3, #31
 800f6fc:	f003 0301 	and.w	r3, r3, #1
 800f700:	b2db      	uxtb	r3, r3
 800f702:	2b00      	cmp	r3, #0
 800f704:	d009      	beq.n	800f71a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	681a      	ldr	r2, [r3, #0]
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	4413      	add	r3, r2
 800f70e:	687a      	ldr	r2, [r7, #4]
 800f710:	4907      	ldr	r1, [pc, #28]	; (800f730 <lwip_cyclic_timer+0x60>)
 800f712:	4618      	mov	r0, r3
 800f714:	f7ff ff7e 	bl	800f614 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f718:	e004      	b.n	800f724 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f71a:	687a      	ldr	r2, [r7, #4]
 800f71c:	4904      	ldr	r1, [pc, #16]	; (800f730 <lwip_cyclic_timer+0x60>)
 800f71e:	68f8      	ldr	r0, [r7, #12]
 800f720:	f7ff ff78 	bl	800f614 <sys_timeout_abs>
}
 800f724:	bf00      	nop
 800f726:	3718      	adds	r7, #24
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}
 800f72c:	2000821c 	.word	0x2000821c
 800f730:	0800f6d1 	.word	0x0800f6d1

0800f734 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b082      	sub	sp, #8
 800f738:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f73a:	2301      	movs	r3, #1
 800f73c:	607b      	str	r3, [r7, #4]
 800f73e:	e00e      	b.n	800f75e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f740:	4a0b      	ldr	r2, [pc, #44]	; (800f770 <sys_timeouts_init+0x3c>)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	00db      	lsls	r3, r3, #3
 800f74c:	4a08      	ldr	r2, [pc, #32]	; (800f770 <sys_timeouts_init+0x3c>)
 800f74e:	4413      	add	r3, r2
 800f750:	461a      	mov	r2, r3
 800f752:	4908      	ldr	r1, [pc, #32]	; (800f774 <sys_timeouts_init+0x40>)
 800f754:	f000 f810 	bl	800f778 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	3301      	adds	r3, #1
 800f75c:	607b      	str	r3, [r7, #4]
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2b03      	cmp	r3, #3
 800f762:	d9ed      	bls.n	800f740 <sys_timeouts_init+0xc>
  }
}
 800f764:	bf00      	nop
 800f766:	bf00      	nop
 800f768:	3708      	adds	r7, #8
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
 800f76e:	bf00      	nop
 800f770:	08016c80 	.word	0x08016c80
 800f774:	0800f6d1 	.word	0x0800f6d1

0800f778 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b086      	sub	sp, #24
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	60f8      	str	r0, [r7, #12]
 800f780:	60b9      	str	r1, [r7, #8]
 800f782:	607a      	str	r2, [r7, #4]

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f784:	f7f0 fff4 	bl	8000770 <sys_now>
 800f788:	4602      	mov	r2, r0
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	4413      	add	r3, r2
 800f78e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f790:	687a      	ldr	r2, [r7, #4]
 800f792:	68b9      	ldr	r1, [r7, #8]
 800f794:	6978      	ldr	r0, [r7, #20]
 800f796:	f7ff ff3d 	bl	800f614 <sys_timeout_abs>
#endif
}
 800f79a:	bf00      	nop
 800f79c:	3718      	adds	r7, #24
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}
	...

0800f7a4 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800f7ae:	4b19      	ldr	r3, [pc, #100]	; (800f814 <sys_untimeout+0x70>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d029      	beq.n	800f80a <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800f7b6:	4b17      	ldr	r3, [pc, #92]	; (800f814 <sys_untimeout+0x70>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	60bb      	str	r3, [r7, #8]
 800f7bc:	2300      	movs	r3, #0
 800f7be:	60fb      	str	r3, [r7, #12]
 800f7c0:	e01f      	b.n	800f802 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	689b      	ldr	r3, [r3, #8]
 800f7c6:	687a      	ldr	r2, [r7, #4]
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d115      	bne.n	800f7f8 <sys_untimeout+0x54>
 800f7cc:	68bb      	ldr	r3, [r7, #8]
 800f7ce:	68db      	ldr	r3, [r3, #12]
 800f7d0:	683a      	ldr	r2, [r7, #0]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d110      	bne.n	800f7f8 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d104      	bne.n	800f7e6 <sys_untimeout+0x42>
        next_timeout = t->next;
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	4a0c      	ldr	r2, [pc, #48]	; (800f814 <sys_untimeout+0x70>)
 800f7e2:	6013      	str	r3, [r2, #0]
 800f7e4:	e003      	b.n	800f7ee <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	681a      	ldr	r2, [r3, #0]
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 800f7ee:	68b9      	ldr	r1, [r7, #8]
 800f7f0:	2007      	movs	r0, #7
 800f7f2:	f7fa f8c1 	bl	8009978 <memp_free>
      return;
 800f7f6:	e009      	b.n	800f80c <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	60fb      	str	r3, [r7, #12]
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	60bb      	str	r3, [r7, #8]
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d1dc      	bne.n	800f7c2 <sys_untimeout+0x1e>
    }
  }
  return;
 800f808:	e000      	b.n	800f80c <sys_untimeout+0x68>
    return;
 800f80a:	bf00      	nop
}
 800f80c:	3710      	adds	r7, #16
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}
 800f812:	bf00      	nop
 800f814:	20008218 	.word	0x20008218

0800f818 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b084      	sub	sp, #16
 800f81c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f81e:	f7f0 ffa7 	bl	8000770 <sys_now>
 800f822:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800f824:	4b17      	ldr	r3, [pc, #92]	; (800f884 <sys_check_timeouts+0x6c>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d022      	beq.n	800f876 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	685b      	ldr	r3, [r3, #4]
 800f834:	68fa      	ldr	r2, [r7, #12]
 800f836:	1ad3      	subs	r3, r2, r3
 800f838:	0fdb      	lsrs	r3, r3, #31
 800f83a:	f003 0301 	and.w	r3, r3, #1
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	2b00      	cmp	r3, #0
 800f842:	d11a      	bne.n	800f87a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	4a0e      	ldr	r2, [pc, #56]	; (800f884 <sys_check_timeouts+0x6c>)
 800f84a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	689b      	ldr	r3, [r3, #8]
 800f850:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f852:	68bb      	ldr	r3, [r7, #8]
 800f854:	68db      	ldr	r3, [r3, #12]
 800f856:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	685b      	ldr	r3, [r3, #4]
 800f85c:	4a0a      	ldr	r2, [pc, #40]	; (800f888 <sys_check_timeouts+0x70>)
 800f85e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f860:	68b9      	ldr	r1, [r7, #8]
 800f862:	2007      	movs	r0, #7
 800f864:	f7fa f888 	bl	8009978 <memp_free>
    if (handler != NULL) {
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d0da      	beq.n	800f824 <sys_check_timeouts+0xc>
      handler(arg);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	6838      	ldr	r0, [r7, #0]
 800f872:	4798      	blx	r3
  do {
 800f874:	e7d6      	b.n	800f824 <sys_check_timeouts+0xc>
      return;
 800f876:	bf00      	nop
 800f878:	e000      	b.n	800f87c <sys_check_timeouts+0x64>
      return;
 800f87a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f87c:	3710      	adds	r7, #16
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	20008218 	.word	0x20008218
 800f888:	2000821c 	.word	0x2000821c

0800f88c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f88c:	b480      	push	{r7}
 800f88e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RAND */
}
 800f890:	bf00      	nop
 800f892:	46bd      	mov	sp, r7
 800f894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f898:	4770      	bx	lr
	...

0800f89c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f89c:	b480      	push	{r7}
 800f89e:	b085      	sub	sp, #20
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	60f8      	str	r0, [r7, #12]
 800f8a4:	60b9      	str	r1, [r7, #8]
 800f8a6:	4613      	mov	r3, r2
 800f8a8:	71fb      	strb	r3, [r7, #7]

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	7a1b      	ldrb	r3, [r3, #8]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d00b      	beq.n	800f8ca <udp_input_local_match+0x2e>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	7a1a      	ldrb	r2, [r3, #8]
 800f8b6:	4b1e      	ldr	r3, [pc, #120]	; (800f930 <udp_input_local_match+0x94>)
 800f8b8:	685b      	ldr	r3, [r3, #4]
 800f8ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f8be:	3301      	adds	r3, #1
 800f8c0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d001      	beq.n	800f8ca <udp_input_local_match+0x2e>
    return 0;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	e02b      	b.n	800f922 <udp_input_local_match+0x86>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f8ca:	79fb      	ldrb	r3, [r7, #7]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d018      	beq.n	800f902 <udp_input_local_match+0x66>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d013      	beq.n	800f8fe <udp_input_local_match+0x62>
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d00f      	beq.n	800f8fe <udp_input_local_match+0x62>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f8de:	4b14      	ldr	r3, [pc, #80]	; (800f930 <udp_input_local_match+0x94>)
 800f8e0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8e6:	d00a      	beq.n	800f8fe <udp_input_local_match+0x62>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	681a      	ldr	r2, [r3, #0]
 800f8ec:	4b10      	ldr	r3, [pc, #64]	; (800f930 <udp_input_local_match+0x94>)
 800f8ee:	695b      	ldr	r3, [r3, #20]
 800f8f0:	405a      	eors	r2, r3
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	3308      	adds	r3, #8
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d110      	bne.n	800f920 <udp_input_local_match+0x84>
          return 1;
 800f8fe:	2301      	movs	r3, #1
 800f900:	e00f      	b.n	800f922 <udp_input_local_match+0x86>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d009      	beq.n	800f91c <udp_input_local_match+0x80>
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d005      	beq.n	800f91c <udp_input_local_match+0x80>
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	681a      	ldr	r2, [r3, #0]
 800f914:	4b06      	ldr	r3, [pc, #24]	; (800f930 <udp_input_local_match+0x94>)
 800f916:	695b      	ldr	r3, [r3, #20]
 800f918:	429a      	cmp	r2, r3
 800f91a:	d101      	bne.n	800f920 <udp_input_local_match+0x84>
        return 1;
 800f91c:	2301      	movs	r3, #1
 800f91e:	e000      	b.n	800f922 <udp_input_local_match+0x86>
      }
  }

  return 0;
 800f920:	2300      	movs	r3, #0
}
 800f922:	4618      	mov	r0, r3
 800f924:	3714      	adds	r7, #20
 800f926:	46bd      	mov	sp, r7
 800f928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92c:	4770      	bx	lr
 800f92e:	bf00      	nop
 800f930:	20000ee4 	.word	0x20000ee4

0800f934 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f934:	b590      	push	{r4, r7, lr}
 800f936:	b08b      	sub	sp, #44	; 0x2c
 800f938:	af02      	add	r7, sp, #8
 800f93a:	6078      	str	r0, [r7, #4]
 800f93c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f93e:	2300      	movs	r3, #0
 800f940:	75fb      	strb	r3, [r7, #23]
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);

  PERF_START;

  UDP_STATS_INC(udp.recv);
 800f942:	4b8d      	ldr	r3, [pc, #564]	; (800fb78 <udp_input+0x244>)
 800f944:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800f948:	3301      	adds	r3, #1
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	4b8a      	ldr	r3, [pc, #552]	; (800fb78 <udp_input+0x244>)
 800f94e:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	895b      	ldrh	r3, [r3, #10]
 800f956:	2b07      	cmp	r3, #7
 800f958:	d813      	bhi.n	800f982 <udp_input+0x4e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 800f95a:	4b87      	ldr	r3, [pc, #540]	; (800fb78 <udp_input+0x244>)
 800f95c:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f960:	3301      	adds	r3, #1
 800f962:	b29a      	uxth	r2, r3
 800f964:	4b84      	ldr	r3, [pc, #528]	; (800fb78 <udp_input+0x244>)
 800f966:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
    UDP_STATS_INC(udp.drop);
 800f96a:	4b83      	ldr	r3, [pc, #524]	; (800fb78 <udp_input+0x244>)
 800f96c:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 800f970:	3301      	adds	r3, #1
 800f972:	b29a      	uxth	r2, r3
 800f974:	4b80      	ldr	r3, [pc, #512]	; (800fb78 <udp_input+0x244>)
 800f976:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f7fa fdb3 	bl	800a4e6 <pbuf_free>
    goto end;
 800f980:	e0f6      	b.n	800fb70 <udp_input+0x23c>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	685b      	ldr	r3, [r3, #4]
 800f986:	60bb      	str	r3, [r7, #8]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f988:	4b7c      	ldr	r3, [pc, #496]	; (800fb7c <udp_input+0x248>)
 800f98a:	695b      	ldr	r3, [r3, #20]
 800f98c:	4a7b      	ldr	r2, [pc, #492]	; (800fb7c <udp_input+0x248>)
 800f98e:	6812      	ldr	r2, [r2, #0]
 800f990:	4611      	mov	r1, r2
 800f992:	4618      	mov	r0, r3
 800f994:	f002 f89a 	bl	8011acc <ip4_addr_isbroadcast_u32>
 800f998:	4603      	mov	r3, r0
 800f99a:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	881b      	ldrh	r3, [r3, #0]
 800f9a0:	b29b      	uxth	r3, r3
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f7f9 fa2a 	bl	8008dfc <lwip_htons>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	82bb      	strh	r3, [r7, #20]
  dest = lwip_ntohs(udphdr->dest);
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	885b      	ldrh	r3, [r3, #2]
 800f9b0:	b29b      	uxth	r3, r3
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f7f9 fa22 	bl	8008dfc <lwip_htons>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	827b      	strh	r3, [r7, #18]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	61bb      	str	r3, [r7, #24]
  prev = NULL;
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	61fb      	str	r3, [r7, #28]
  uncon_pcb = NULL;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	60fb      	str	r3, [r7, #12]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9c8:	4b6d      	ldr	r3, [pc, #436]	; (800fb80 <udp_input+0x24c>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	61bb      	str	r3, [r7, #24]
 800f9ce:	e05d      	b.n	800fa8c <udp_input+0x158>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f9d0:	69bb      	ldr	r3, [r7, #24]
 800f9d2:	8a5b      	ldrh	r3, [r3, #18]
 800f9d4:	8a7a      	ldrh	r2, [r7, #18]
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	d153      	bne.n	800fa82 <udp_input+0x14e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f9da:	7dbb      	ldrb	r3, [r7, #22]
 800f9dc:	461a      	mov	r2, r3
 800f9de:	6839      	ldr	r1, [r7, #0]
 800f9e0:	69b8      	ldr	r0, [r7, #24]
 800f9e2:	f7ff ff5b 	bl	800f89c <udp_input_local_match>
 800f9e6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d04a      	beq.n	800fa82 <udp_input+0x14e>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f9ec:	69bb      	ldr	r3, [r7, #24]
 800f9ee:	7c1b      	ldrb	r3, [r3, #16]
 800f9f0:	f003 0304 	and.w	r3, r3, #4
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d11d      	bne.n	800fa34 <udp_input+0x100>
        if (uncon_pcb == NULL) {
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d102      	bne.n	800fa04 <udp_input+0xd0>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f9fe:	69bb      	ldr	r3, [r7, #24]
 800fa00:	60fb      	str	r3, [r7, #12]
 800fa02:	e017      	b.n	800fa34 <udp_input+0x100>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800fa04:	7dbb      	ldrb	r3, [r7, #22]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d014      	beq.n	800fa34 <udp_input+0x100>
 800fa0a:	4b5c      	ldr	r3, [pc, #368]	; (800fb7c <udp_input+0x248>)
 800fa0c:	695b      	ldr	r3, [r3, #20]
 800fa0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa12:	d10f      	bne.n	800fa34 <udp_input+0x100>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	3304      	adds	r3, #4
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d008      	beq.n	800fa34 <udp_input+0x100>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800fa22:	69bb      	ldr	r3, [r7, #24]
 800fa24:	681a      	ldr	r2, [r3, #0]
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	3304      	adds	r3, #4
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d101      	bne.n	800fa34 <udp_input+0x100>
              /* better match */
              uncon_pcb = pcb;
 800fa30:	69bb      	ldr	r3, [r7, #24]
 800fa32:	60fb      	str	r3, [r7, #12]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800fa34:	69bb      	ldr	r3, [r7, #24]
 800fa36:	8a9b      	ldrh	r3, [r3, #20]
 800fa38:	8aba      	ldrh	r2, [r7, #20]
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d121      	bne.n	800fa82 <udp_input+0x14e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fa3e:	69bb      	ldr	r3, [r7, #24]
 800fa40:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d005      	beq.n	800fa52 <udp_input+0x11e>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800fa46:	69bb      	ldr	r3, [r7, #24]
 800fa48:	685a      	ldr	r2, [r3, #4]
 800fa4a:	4b4c      	ldr	r3, [pc, #304]	; (800fb7c <udp_input+0x248>)
 800fa4c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	d117      	bne.n	800fa82 <udp_input+0x14e>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800fa52:	69fb      	ldr	r3, [r7, #28]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d00b      	beq.n	800fa70 <udp_input+0x13c>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800fa58:	69bb      	ldr	r3, [r7, #24]
 800fa5a:	68da      	ldr	r2, [r3, #12]
 800fa5c:	69fb      	ldr	r3, [r7, #28]
 800fa5e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800fa60:	4b47      	ldr	r3, [pc, #284]	; (800fb80 <udp_input+0x24c>)
 800fa62:	681a      	ldr	r2, [r3, #0]
 800fa64:	69bb      	ldr	r3, [r7, #24]
 800fa66:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800fa68:	4a45      	ldr	r2, [pc, #276]	; (800fb80 <udp_input+0x24c>)
 800fa6a:	69bb      	ldr	r3, [r7, #24]
 800fa6c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800fa6e:	e010      	b.n	800fa92 <udp_input+0x15e>
          UDP_STATS_INC(udp.cachehit);
 800fa70:	4b41      	ldr	r3, [pc, #260]	; (800fb78 <udp_input+0x244>)
 800fa72:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800fa76:	3301      	adds	r3, #1
 800fa78:	b29a      	uxth	r2, r3
 800fa7a:	4b3f      	ldr	r3, [pc, #252]	; (800fb78 <udp_input+0x244>)
 800fa7c:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
        break;
 800fa80:	e007      	b.n	800fa92 <udp_input+0x15e>
      }
    }

    prev = pcb;
 800fa82:	69bb      	ldr	r3, [r7, #24]
 800fa84:	61fb      	str	r3, [r7, #28]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa86:	69bb      	ldr	r3, [r7, #24]
 800fa88:	68db      	ldr	r3, [r3, #12]
 800fa8a:	61bb      	str	r3, [r7, #24]
 800fa8c:	69bb      	ldr	r3, [r7, #24]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d19e      	bne.n	800f9d0 <udp_input+0x9c>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800fa92:	69bb      	ldr	r3, [r7, #24]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d101      	bne.n	800fa9c <udp_input+0x168>
    pcb = uncon_pcb;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	61bb      	str	r3, [r7, #24]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800fa9c:	69bb      	ldr	r3, [r7, #24]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d002      	beq.n	800faa8 <udp_input+0x174>
    for_us = 1;
 800faa2:	2301      	movs	r3, #1
 800faa4:	75fb      	strb	r3, [r7, #23]
 800faa6:	e00a      	b.n	800fabe <udp_input+0x18a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	3304      	adds	r3, #4
 800faac:	681a      	ldr	r2, [r3, #0]
 800faae:	4b33      	ldr	r3, [pc, #204]	; (800fb7c <udp_input+0x248>)
 800fab0:	695b      	ldr	r3, [r3, #20]
 800fab2:	429a      	cmp	r2, r3
 800fab4:	bf0c      	ite	eq
 800fab6:	2301      	moveq	r3, #1
 800fab8:	2300      	movne	r3, #0
 800faba:	b2db      	uxtb	r3, r3
 800fabc:	75fb      	strb	r3, [r7, #23]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800fabe:	7dfb      	ldrb	r3, [r7, #23]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d052      	beq.n	800fb6a <udp_input+0x236>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800fac4:	2108      	movs	r1, #8
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f7fa fc9c 	bl	800a404 <pbuf_remove_header>
 800facc:	4603      	mov	r3, r0
 800face:	2b00      	cmp	r3, #0
 800fad0:	d00b      	beq.n	800faea <udp_input+0x1b6>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
 800fad2:	4b29      	ldr	r3, [pc, #164]	; (800fb78 <udp_input+0x244>)
 800fad4:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 800fad8:	3301      	adds	r3, #1
 800fada:	b29a      	uxth	r2, r3
 800fadc:	4b26      	ldr	r3, [pc, #152]	; (800fb78 <udp_input+0x244>)
 800fade:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f7fa fcff 	bl	800a4e6 <pbuf_free>
      goto end;
 800fae8:	e042      	b.n	800fb70 <udp_input+0x23c>
    }

    if (pcb != NULL) {
 800faea:	69bb      	ldr	r3, [r7, #24]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d012      	beq.n	800fb16 <udp_input+0x1e2>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800faf0:	69bb      	ldr	r3, [r7, #24]
 800faf2:	6a1b      	ldr	r3, [r3, #32]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d00a      	beq.n	800fb0e <udp_input+0x1da>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800faf8:	69bb      	ldr	r3, [r7, #24]
 800fafa:	6a1c      	ldr	r4, [r3, #32]
 800fafc:	69bb      	ldr	r3, [r7, #24]
 800fafe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fb00:	8abb      	ldrh	r3, [r7, #20]
 800fb02:	9300      	str	r3, [sp, #0]
 800fb04:	4b1f      	ldr	r3, [pc, #124]	; (800fb84 <udp_input+0x250>)
 800fb06:	687a      	ldr	r2, [r7, #4]
 800fb08:	69b9      	ldr	r1, [r7, #24]
 800fb0a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800fb0c:	e031      	b.n	800fb72 <udp_input+0x23e>
        pbuf_free(p);
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f7fa fce9 	bl	800a4e6 <pbuf_free>
        goto end;
 800fb14:	e02c      	b.n	800fb70 <udp_input+0x23c>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800fb16:	7dbb      	ldrb	r3, [r7, #22]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d112      	bne.n	800fb42 <udp_input+0x20e>
 800fb1c:	4b17      	ldr	r3, [pc, #92]	; (800fb7c <udp_input+0x248>)
 800fb1e:	695b      	ldr	r3, [r3, #20]
 800fb20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb24:	2be0      	cmp	r3, #224	; 0xe0
 800fb26:	d00c      	beq.n	800fb42 <udp_input+0x20e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800fb28:	4b14      	ldr	r3, [pc, #80]	; (800fb7c <udp_input+0x248>)
 800fb2a:	899b      	ldrh	r3, [r3, #12]
 800fb2c:	3308      	adds	r3, #8
 800fb2e:	b29b      	uxth	r3, r3
 800fb30:	b21b      	sxth	r3, r3
 800fb32:	4619      	mov	r1, r3
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f7fa fcc4 	bl	800a4c2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800fb3a:	2103      	movs	r1, #3
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f001 f81d 	bl	8010b7c <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 800fb42:	4b0d      	ldr	r3, [pc, #52]	; (800fb78 <udp_input+0x244>)
 800fb44:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800fb48:	3301      	adds	r3, #1
 800fb4a:	b29a      	uxth	r2, r3
 800fb4c:	4b0a      	ldr	r3, [pc, #40]	; (800fb78 <udp_input+0x244>)
 800fb4e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
      UDP_STATS_INC(udp.drop);
 800fb52:	4b09      	ldr	r3, [pc, #36]	; (800fb78 <udp_input+0x244>)
 800fb54:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 800fb58:	3301      	adds	r3, #1
 800fb5a:	b29a      	uxth	r2, r3
 800fb5c:	4b06      	ldr	r3, [pc, #24]	; (800fb78 <udp_input+0x244>)
 800fb5e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      pbuf_free(p);
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f7fa fcbf 	bl	800a4e6 <pbuf_free>
  return;
 800fb68:	e003      	b.n	800fb72 <udp_input+0x23e>
    pbuf_free(p);
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f7fa fcbb 	bl	800a4e6 <pbuf_free>
  return;
 800fb70:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800fb72:	3724      	adds	r7, #36	; 0x24
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd90      	pop	{r4, r7, pc}
 800fb78:	200080c8 	.word	0x200080c8
 800fb7c:	20000ee4 	.word	0x20000ee4
 800fb80:	20008224 	.word	0x20008224
 800fb84:	20000ef4 	.word	0x20000ef4

0800fb88 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b085      	sub	sp, #20
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
 800fb90:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d01e      	beq.n	800fbd6 <udp_netif_ip_addr_changed+0x4e>
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d01a      	beq.n	800fbd6 <udp_netif_ip_addr_changed+0x4e>
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d017      	beq.n	800fbd6 <udp_netif_ip_addr_changed+0x4e>
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d013      	beq.n	800fbd6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fbae:	4b0d      	ldr	r3, [pc, #52]	; (800fbe4 <udp_netif_ip_addr_changed+0x5c>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	60fb      	str	r3, [r7, #12]
 800fbb4:	e00c      	b.n	800fbd0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	681a      	ldr	r2, [r3, #0]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d103      	bne.n	800fbca <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	681a      	ldr	r2, [r3, #0]
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	68db      	ldr	r3, [r3, #12]
 800fbce:	60fb      	str	r3, [r7, #12]
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d1ef      	bne.n	800fbb6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800fbd6:	bf00      	nop
 800fbd8:	3714      	adds	r7, #20
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe0:	4770      	bx	lr
 800fbe2:	bf00      	nop
 800fbe4:	20008224 	.word	0x20008224

0800fbe8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b082      	sub	sp, #8
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800fbf0:	492b      	ldr	r1, [pc, #172]	; (800fca0 <etharp_free_entry+0xb8>)
 800fbf2:	687a      	ldr	r2, [r7, #4]
 800fbf4:	4613      	mov	r3, r2
 800fbf6:	005b      	lsls	r3, r3, #1
 800fbf8:	4413      	add	r3, r2
 800fbfa:	00db      	lsls	r3, r3, #3
 800fbfc:	440b      	add	r3, r1
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d013      	beq.n	800fc2c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800fc04:	4926      	ldr	r1, [pc, #152]	; (800fca0 <etharp_free_entry+0xb8>)
 800fc06:	687a      	ldr	r2, [r7, #4]
 800fc08:	4613      	mov	r3, r2
 800fc0a:	005b      	lsls	r3, r3, #1
 800fc0c:	4413      	add	r3, r2
 800fc0e:	00db      	lsls	r3, r3, #3
 800fc10:	440b      	add	r3, r1
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7fa fc66 	bl	800a4e6 <pbuf_free>
    arp_table[i].q = NULL;
 800fc1a:	4921      	ldr	r1, [pc, #132]	; (800fca0 <etharp_free_entry+0xb8>)
 800fc1c:	687a      	ldr	r2, [r7, #4]
 800fc1e:	4613      	mov	r3, r2
 800fc20:	005b      	lsls	r3, r3, #1
 800fc22:	4413      	add	r3, r2
 800fc24:	00db      	lsls	r3, r3, #3
 800fc26:	440b      	add	r3, r1
 800fc28:	2200      	movs	r2, #0
 800fc2a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800fc2c:	491c      	ldr	r1, [pc, #112]	; (800fca0 <etharp_free_entry+0xb8>)
 800fc2e:	687a      	ldr	r2, [r7, #4]
 800fc30:	4613      	mov	r3, r2
 800fc32:	005b      	lsls	r3, r3, #1
 800fc34:	4413      	add	r3, r2
 800fc36:	00db      	lsls	r3, r3, #3
 800fc38:	440b      	add	r3, r1
 800fc3a:	3314      	adds	r3, #20
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 800fc40:	4917      	ldr	r1, [pc, #92]	; (800fca0 <etharp_free_entry+0xb8>)
 800fc42:	687a      	ldr	r2, [r7, #4]
 800fc44:	4613      	mov	r3, r2
 800fc46:	005b      	lsls	r3, r3, #1
 800fc48:	4413      	add	r3, r2
 800fc4a:	00db      	lsls	r3, r3, #3
 800fc4c:	440b      	add	r3, r1
 800fc4e:	3312      	adds	r3, #18
 800fc50:	2200      	movs	r2, #0
 800fc52:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 800fc54:	4912      	ldr	r1, [pc, #72]	; (800fca0 <etharp_free_entry+0xb8>)
 800fc56:	687a      	ldr	r2, [r7, #4]
 800fc58:	4613      	mov	r3, r2
 800fc5a:	005b      	lsls	r3, r3, #1
 800fc5c:	4413      	add	r3, r2
 800fc5e:	00db      	lsls	r3, r3, #3
 800fc60:	440b      	add	r3, r1
 800fc62:	3308      	adds	r3, #8
 800fc64:	2200      	movs	r2, #0
 800fc66:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 800fc68:	490d      	ldr	r1, [pc, #52]	; (800fca0 <etharp_free_entry+0xb8>)
 800fc6a:	687a      	ldr	r2, [r7, #4]
 800fc6c:	4613      	mov	r3, r2
 800fc6e:	005b      	lsls	r3, r3, #1
 800fc70:	4413      	add	r3, r2
 800fc72:	00db      	lsls	r3, r3, #3
 800fc74:	440b      	add	r3, r1
 800fc76:	3304      	adds	r3, #4
 800fc78:	2200      	movs	r2, #0
 800fc7a:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 800fc7c:	4908      	ldr	r1, [pc, #32]	; (800fca0 <etharp_free_entry+0xb8>)
 800fc7e:	687a      	ldr	r2, [r7, #4]
 800fc80:	4613      	mov	r3, r2
 800fc82:	005b      	lsls	r3, r3, #1
 800fc84:	4413      	add	r3, r2
 800fc86:	00db      	lsls	r3, r3, #3
 800fc88:	440b      	add	r3, r1
 800fc8a:	3308      	adds	r3, #8
 800fc8c:	4a05      	ldr	r2, [pc, #20]	; (800fca4 <etharp_free_entry+0xbc>)
 800fc8e:	3304      	adds	r3, #4
 800fc90:	6810      	ldr	r0, [r2, #0]
 800fc92:	6018      	str	r0, [r3, #0]
 800fc94:	8892      	ldrh	r2, [r2, #4]
 800fc96:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 800fc98:	bf00      	nop
 800fc9a:	3708      	adds	r7, #8
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}
 800fca0:	20008228 	.word	0x20008228
 800fca4:	08016cac 	.word	0x08016cac

0800fca8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b082      	sub	sp, #8
 800fcac:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fcae:	2300      	movs	r3, #0
 800fcb0:	607b      	str	r3, [r7, #4]
 800fcb2:	e096      	b.n	800fde2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800fcb4:	494f      	ldr	r1, [pc, #316]	; (800fdf4 <etharp_tmr+0x14c>)
 800fcb6:	687a      	ldr	r2, [r7, #4]
 800fcb8:	4613      	mov	r3, r2
 800fcba:	005b      	lsls	r3, r3, #1
 800fcbc:	4413      	add	r3, r2
 800fcbe:	00db      	lsls	r3, r3, #3
 800fcc0:	440b      	add	r3, r1
 800fcc2:	3314      	adds	r3, #20
 800fcc4:	781b      	ldrb	r3, [r3, #0]
 800fcc6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800fcc8:	78fb      	ldrb	r3, [r7, #3]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	f000 8086 	beq.w	800fddc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800fcd0:	4948      	ldr	r1, [pc, #288]	; (800fdf4 <etharp_tmr+0x14c>)
 800fcd2:	687a      	ldr	r2, [r7, #4]
 800fcd4:	4613      	mov	r3, r2
 800fcd6:	005b      	lsls	r3, r3, #1
 800fcd8:	4413      	add	r3, r2
 800fcda:	00db      	lsls	r3, r3, #3
 800fcdc:	440b      	add	r3, r1
 800fcde:	3312      	adds	r3, #18
 800fce0:	881b      	ldrh	r3, [r3, #0]
 800fce2:	3301      	adds	r3, #1
 800fce4:	b298      	uxth	r0, r3
 800fce6:	4943      	ldr	r1, [pc, #268]	; (800fdf4 <etharp_tmr+0x14c>)
 800fce8:	687a      	ldr	r2, [r7, #4]
 800fcea:	4613      	mov	r3, r2
 800fcec:	005b      	lsls	r3, r3, #1
 800fcee:	4413      	add	r3, r2
 800fcf0:	00db      	lsls	r3, r3, #3
 800fcf2:	440b      	add	r3, r1
 800fcf4:	3312      	adds	r3, #18
 800fcf6:	4602      	mov	r2, r0
 800fcf8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fcfa:	493e      	ldr	r1, [pc, #248]	; (800fdf4 <etharp_tmr+0x14c>)
 800fcfc:	687a      	ldr	r2, [r7, #4]
 800fcfe:	4613      	mov	r3, r2
 800fd00:	005b      	lsls	r3, r3, #1
 800fd02:	4413      	add	r3, r2
 800fd04:	00db      	lsls	r3, r3, #3
 800fd06:	440b      	add	r3, r1
 800fd08:	3312      	adds	r3, #18
 800fd0a:	881b      	ldrh	r3, [r3, #0]
 800fd0c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800fd10:	d215      	bcs.n	800fd3e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fd12:	4938      	ldr	r1, [pc, #224]	; (800fdf4 <etharp_tmr+0x14c>)
 800fd14:	687a      	ldr	r2, [r7, #4]
 800fd16:	4613      	mov	r3, r2
 800fd18:	005b      	lsls	r3, r3, #1
 800fd1a:	4413      	add	r3, r2
 800fd1c:	00db      	lsls	r3, r3, #3
 800fd1e:	440b      	add	r3, r1
 800fd20:	3314      	adds	r3, #20
 800fd22:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fd24:	2b01      	cmp	r3, #1
 800fd26:	d10e      	bne.n	800fd46 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800fd28:	4932      	ldr	r1, [pc, #200]	; (800fdf4 <etharp_tmr+0x14c>)
 800fd2a:	687a      	ldr	r2, [r7, #4]
 800fd2c:	4613      	mov	r3, r2
 800fd2e:	005b      	lsls	r3, r3, #1
 800fd30:	4413      	add	r3, r2
 800fd32:	00db      	lsls	r3, r3, #3
 800fd34:	440b      	add	r3, r1
 800fd36:	3312      	adds	r3, #18
 800fd38:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fd3a:	2b04      	cmp	r3, #4
 800fd3c:	d903      	bls.n	800fd46 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f7ff ff52 	bl	800fbe8 <etharp_free_entry>
 800fd44:	e04a      	b.n	800fddc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800fd46:	492b      	ldr	r1, [pc, #172]	; (800fdf4 <etharp_tmr+0x14c>)
 800fd48:	687a      	ldr	r2, [r7, #4]
 800fd4a:	4613      	mov	r3, r2
 800fd4c:	005b      	lsls	r3, r3, #1
 800fd4e:	4413      	add	r3, r2
 800fd50:	00db      	lsls	r3, r3, #3
 800fd52:	440b      	add	r3, r1
 800fd54:	3314      	adds	r3, #20
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	2b03      	cmp	r3, #3
 800fd5a:	d10a      	bne.n	800fd72 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800fd5c:	4925      	ldr	r1, [pc, #148]	; (800fdf4 <etharp_tmr+0x14c>)
 800fd5e:	687a      	ldr	r2, [r7, #4]
 800fd60:	4613      	mov	r3, r2
 800fd62:	005b      	lsls	r3, r3, #1
 800fd64:	4413      	add	r3, r2
 800fd66:	00db      	lsls	r3, r3, #3
 800fd68:	440b      	add	r3, r1
 800fd6a:	3314      	adds	r3, #20
 800fd6c:	2204      	movs	r2, #4
 800fd6e:	701a      	strb	r2, [r3, #0]
 800fd70:	e034      	b.n	800fddc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800fd72:	4920      	ldr	r1, [pc, #128]	; (800fdf4 <etharp_tmr+0x14c>)
 800fd74:	687a      	ldr	r2, [r7, #4]
 800fd76:	4613      	mov	r3, r2
 800fd78:	005b      	lsls	r3, r3, #1
 800fd7a:	4413      	add	r3, r2
 800fd7c:	00db      	lsls	r3, r3, #3
 800fd7e:	440b      	add	r3, r1
 800fd80:	3314      	adds	r3, #20
 800fd82:	781b      	ldrb	r3, [r3, #0]
 800fd84:	2b04      	cmp	r3, #4
 800fd86:	d10a      	bne.n	800fd9e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800fd88:	491a      	ldr	r1, [pc, #104]	; (800fdf4 <etharp_tmr+0x14c>)
 800fd8a:	687a      	ldr	r2, [r7, #4]
 800fd8c:	4613      	mov	r3, r2
 800fd8e:	005b      	lsls	r3, r3, #1
 800fd90:	4413      	add	r3, r2
 800fd92:	00db      	lsls	r3, r3, #3
 800fd94:	440b      	add	r3, r1
 800fd96:	3314      	adds	r3, #20
 800fd98:	2202      	movs	r2, #2
 800fd9a:	701a      	strb	r2, [r3, #0]
 800fd9c:	e01e      	b.n	800fddc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fd9e:	4915      	ldr	r1, [pc, #84]	; (800fdf4 <etharp_tmr+0x14c>)
 800fda0:	687a      	ldr	r2, [r7, #4]
 800fda2:	4613      	mov	r3, r2
 800fda4:	005b      	lsls	r3, r3, #1
 800fda6:	4413      	add	r3, r2
 800fda8:	00db      	lsls	r3, r3, #3
 800fdaa:	440b      	add	r3, r1
 800fdac:	3314      	adds	r3, #20
 800fdae:	781b      	ldrb	r3, [r3, #0]
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	d113      	bne.n	800fddc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800fdb4:	490f      	ldr	r1, [pc, #60]	; (800fdf4 <etharp_tmr+0x14c>)
 800fdb6:	687a      	ldr	r2, [r7, #4]
 800fdb8:	4613      	mov	r3, r2
 800fdba:	005b      	lsls	r3, r3, #1
 800fdbc:	4413      	add	r3, r2
 800fdbe:	00db      	lsls	r3, r3, #3
 800fdc0:	440b      	add	r3, r1
 800fdc2:	3308      	adds	r3, #8
 800fdc4:	6818      	ldr	r0, [r3, #0]
 800fdc6:	687a      	ldr	r2, [r7, #4]
 800fdc8:	4613      	mov	r3, r2
 800fdca:	005b      	lsls	r3, r3, #1
 800fdcc:	4413      	add	r3, r2
 800fdce:	00db      	lsls	r3, r3, #3
 800fdd0:	4a08      	ldr	r2, [pc, #32]	; (800fdf4 <etharp_tmr+0x14c>)
 800fdd2:	4413      	add	r3, r2
 800fdd4:	3304      	adds	r3, #4
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	f000 fd7a 	bl	80108d0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	3301      	adds	r3, #1
 800fde0:	607b      	str	r3, [r7, #4]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2b09      	cmp	r3, #9
 800fde6:	f77f af65 	ble.w	800fcb4 <etharp_tmr+0xc>
      }
    }
  }
}
 800fdea:	bf00      	nop
 800fdec:	bf00      	nop
 800fdee:	3708      	adds	r7, #8
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}
 800fdf4:	20008228 	.word	0x20008228

0800fdf8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b08a      	sub	sp, #40	; 0x28
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	60f8      	str	r0, [r7, #12]
 800fe00:	460b      	mov	r3, r1
 800fe02:	607a      	str	r2, [r7, #4]
 800fe04:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800fe06:	230a      	movs	r3, #10
 800fe08:	843b      	strh	r3, [r7, #32]
 800fe0a:	230a      	movs	r3, #10
 800fe0c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t empty = ARP_TABLE_SIZE;
 800fe0e:	230a      	movs	r3, #10
 800fe10:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t i = 0;
 800fe12:	2300      	movs	r3, #0
 800fe14:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800fe16:	230a      	movs	r3, #10
 800fe18:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	83bb      	strh	r3, [r7, #28]
 800fe1e:	2300      	movs	r3, #0
 800fe20:	837b      	strh	r3, [r7, #26]
 800fe22:	2300      	movs	r3, #0
 800fe24:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fe26:	2300      	movs	r3, #0
 800fe28:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fe2a:	e0a1      	b.n	800ff70 <etharp_find_entry+0x178>
    u8_t state = arp_table[i].state;
 800fe2c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800fe30:	4982      	ldr	r1, [pc, #520]	; (801003c <etharp_find_entry+0x244>)
 800fe32:	4613      	mov	r3, r2
 800fe34:	005b      	lsls	r3, r3, #1
 800fe36:	4413      	add	r3, r2
 800fe38:	00db      	lsls	r3, r3, #3
 800fe3a:	440b      	add	r3, r1
 800fe3c:	3314      	adds	r3, #20
 800fe3e:	781b      	ldrb	r3, [r3, #0]
 800fe40:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800fe42:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fe46:	2b0a      	cmp	r3, #10
 800fe48:	d105      	bne.n	800fe56 <etharp_find_entry+0x5e>
 800fe4a:	7dfb      	ldrb	r3, [r7, #23]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d102      	bne.n	800fe56 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800fe50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fe52:	84bb      	strh	r3, [r7, #36]	; 0x24
 800fe54:	e088      	b.n	800ff68 <etharp_find_entry+0x170>
    } else if (state != ETHARP_STATE_EMPTY) {
 800fe56:	7dfb      	ldrb	r3, [r7, #23]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	f000 8085 	beq.w	800ff68 <etharp_find_entry+0x170>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d020      	beq.n	800fea6 <etharp_find_entry+0xae>
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	6819      	ldr	r1, [r3, #0]
 800fe68:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800fe6c:	4873      	ldr	r0, [pc, #460]	; (801003c <etharp_find_entry+0x244>)
 800fe6e:	4613      	mov	r3, r2
 800fe70:	005b      	lsls	r3, r3, #1
 800fe72:	4413      	add	r3, r2
 800fe74:	00db      	lsls	r3, r3, #3
 800fe76:	4403      	add	r3, r0
 800fe78:	3304      	adds	r3, #4
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	4299      	cmp	r1, r3
 800fe7e:	d112      	bne.n	800fea6 <etharp_find_entry+0xae>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d00c      	beq.n	800fea0 <etharp_find_entry+0xa8>
 800fe86:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800fe8a:	496c      	ldr	r1, [pc, #432]	; (801003c <etharp_find_entry+0x244>)
 800fe8c:	4613      	mov	r3, r2
 800fe8e:	005b      	lsls	r3, r3, #1
 800fe90:	4413      	add	r3, r2
 800fe92:	00db      	lsls	r3, r3, #3
 800fe94:	440b      	add	r3, r1
 800fe96:	3308      	adds	r3, #8
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	687a      	ldr	r2, [r7, #4]
 800fe9c:	429a      	cmp	r2, r3
 800fe9e:	d102      	bne.n	800fea6 <etharp_find_entry+0xae>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800fea0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fea4:	e0c5      	b.n	8010032 <etharp_find_entry+0x23a>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800fea6:	7dfb      	ldrb	r3, [r7, #23]
 800fea8:	2b01      	cmp	r3, #1
 800feaa:	d140      	bne.n	800ff2e <etharp_find_entry+0x136>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800feac:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800feb0:	4962      	ldr	r1, [pc, #392]	; (801003c <etharp_find_entry+0x244>)
 800feb2:	4613      	mov	r3, r2
 800feb4:	005b      	lsls	r3, r3, #1
 800feb6:	4413      	add	r3, r2
 800feb8:	00db      	lsls	r3, r3, #3
 800feba:	440b      	add	r3, r1
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d01a      	beq.n	800fef8 <etharp_find_entry+0x100>
          if (arp_table[i].ctime >= age_queue) {
 800fec2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800fec6:	495d      	ldr	r1, [pc, #372]	; (801003c <etharp_find_entry+0x244>)
 800fec8:	4613      	mov	r3, r2
 800feca:	005b      	lsls	r3, r3, #1
 800fecc:	4413      	add	r3, r2
 800fece:	00db      	lsls	r3, r3, #3
 800fed0:	440b      	add	r3, r1
 800fed2:	3312      	adds	r3, #18
 800fed4:	881b      	ldrh	r3, [r3, #0]
 800fed6:	8bba      	ldrh	r2, [r7, #28]
 800fed8:	429a      	cmp	r2, r3
 800feda:	d845      	bhi.n	800ff68 <etharp_find_entry+0x170>
            old_queue = i;
 800fedc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fede:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800fee0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800fee4:	4955      	ldr	r1, [pc, #340]	; (801003c <etharp_find_entry+0x244>)
 800fee6:	4613      	mov	r3, r2
 800fee8:	005b      	lsls	r3, r3, #1
 800feea:	4413      	add	r3, r2
 800feec:	00db      	lsls	r3, r3, #3
 800feee:	440b      	add	r3, r1
 800fef0:	3312      	adds	r3, #18
 800fef2:	881b      	ldrh	r3, [r3, #0]
 800fef4:	83bb      	strh	r3, [r7, #28]
 800fef6:	e037      	b.n	800ff68 <etharp_find_entry+0x170>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800fef8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800fefc:	494f      	ldr	r1, [pc, #316]	; (801003c <etharp_find_entry+0x244>)
 800fefe:	4613      	mov	r3, r2
 800ff00:	005b      	lsls	r3, r3, #1
 800ff02:	4413      	add	r3, r2
 800ff04:	00db      	lsls	r3, r3, #3
 800ff06:	440b      	add	r3, r1
 800ff08:	3312      	adds	r3, #18
 800ff0a:	881b      	ldrh	r3, [r3, #0]
 800ff0c:	8b7a      	ldrh	r2, [r7, #26]
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	d82a      	bhi.n	800ff68 <etharp_find_entry+0x170>
            old_pending = i;
 800ff12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ff14:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 800ff16:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800ff1a:	4948      	ldr	r1, [pc, #288]	; (801003c <etharp_find_entry+0x244>)
 800ff1c:	4613      	mov	r3, r2
 800ff1e:	005b      	lsls	r3, r3, #1
 800ff20:	4413      	add	r3, r2
 800ff22:	00db      	lsls	r3, r3, #3
 800ff24:	440b      	add	r3, r1
 800ff26:	3312      	adds	r3, #18
 800ff28:	881b      	ldrh	r3, [r3, #0]
 800ff2a:	837b      	strh	r3, [r7, #26]
 800ff2c:	e01c      	b.n	800ff68 <etharp_find_entry+0x170>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ff2e:	7dfb      	ldrb	r3, [r7, #23]
 800ff30:	2b01      	cmp	r3, #1
 800ff32:	d919      	bls.n	800ff68 <etharp_find_entry+0x170>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ff34:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800ff38:	4940      	ldr	r1, [pc, #256]	; (801003c <etharp_find_entry+0x244>)
 800ff3a:	4613      	mov	r3, r2
 800ff3c:	005b      	lsls	r3, r3, #1
 800ff3e:	4413      	add	r3, r2
 800ff40:	00db      	lsls	r3, r3, #3
 800ff42:	440b      	add	r3, r1
 800ff44:	3312      	adds	r3, #18
 800ff46:	881b      	ldrh	r3, [r3, #0]
 800ff48:	8b3a      	ldrh	r2, [r7, #24]
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d80c      	bhi.n	800ff68 <etharp_find_entry+0x170>
            old_stable = i;
 800ff4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ff50:	847b      	strh	r3, [r7, #34]	; 0x22
            age_stable = arp_table[i].ctime;
 800ff52:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800ff56:	4939      	ldr	r1, [pc, #228]	; (801003c <etharp_find_entry+0x244>)
 800ff58:	4613      	mov	r3, r2
 800ff5a:	005b      	lsls	r3, r3, #1
 800ff5c:	4413      	add	r3, r2
 800ff5e:	00db      	lsls	r3, r3, #3
 800ff60:	440b      	add	r3, r1
 800ff62:	3312      	adds	r3, #18
 800ff64:	881b      	ldrh	r3, [r3, #0]
 800ff66:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ff68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ff6a:	3301      	adds	r3, #1
 800ff6c:	b29b      	uxth	r3, r3
 800ff6e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ff70:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ff74:	2b09      	cmp	r3, #9
 800ff76:	f77f af59 	ble.w	800fe2c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ff7a:	7afb      	ldrb	r3, [r7, #11]
 800ff7c:	f003 0302 	and.w	r3, r3, #2
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d108      	bne.n	800ff96 <etharp_find_entry+0x19e>
 800ff84:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ff88:	2b0a      	cmp	r3, #10
 800ff8a:	d107      	bne.n	800ff9c <etharp_find_entry+0x1a4>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ff8c:	7afb      	ldrb	r3, [r7, #11]
 800ff8e:	f003 0301 	and.w	r3, r3, #1
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d102      	bne.n	800ff9c <etharp_find_entry+0x1a4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ff96:	f04f 33ff 	mov.w	r3, #4294967295
 800ff9a:	e04a      	b.n	8010032 <etharp_find_entry+0x23a>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ff9c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ffa0:	2b09      	cmp	r3, #9
 800ffa2:	dc02      	bgt.n	800ffaa <etharp_find_entry+0x1b2>
    i = empty;
 800ffa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ffa6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ffa8:	e01c      	b.n	800ffe4 <etharp_find_entry+0x1ec>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ffaa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ffae:	2b09      	cmp	r3, #9
 800ffb0:	dc02      	bgt.n	800ffb8 <etharp_find_entry+0x1c0>
      /* recycle oldest stable*/
      i = old_stable;
 800ffb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ffb4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ffb6:	e010      	b.n	800ffda <etharp_find_entry+0x1e2>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ffb8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ffbc:	2b09      	cmp	r3, #9
 800ffbe:	dc02      	bgt.n	800ffc6 <etharp_find_entry+0x1ce>
      /* recycle oldest pending */
      i = old_pending;
 800ffc0:	8c3b      	ldrh	r3, [r7, #32]
 800ffc2:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ffc4:	e009      	b.n	800ffda <etharp_find_entry+0x1e2>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ffc6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ffca:	2b09      	cmp	r3, #9
 800ffcc:	dc02      	bgt.n	800ffd4 <etharp_find_entry+0x1dc>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ffce:	8bfb      	ldrh	r3, [r7, #30]
 800ffd0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ffd2:	e002      	b.n	800ffda <etharp_find_entry+0x1e2>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ffd4:	f04f 33ff 	mov.w	r3, #4294967295
 800ffd8:	e02b      	b.n	8010032 <etharp_find_entry+0x23a>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 800ffda:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7ff fe02 	bl	800fbe8 <etharp_free_entry>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d00b      	beq.n	8010002 <etharp_find_entry+0x20a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ffea:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	6819      	ldr	r1, [r3, #0]
 800fff2:	4812      	ldr	r0, [pc, #72]	; (801003c <etharp_find_entry+0x244>)
 800fff4:	4613      	mov	r3, r2
 800fff6:	005b      	lsls	r3, r3, #1
 800fff8:	4413      	add	r3, r2
 800fffa:	00db      	lsls	r3, r3, #3
 800fffc:	4403      	add	r3, r0
 800fffe:	3304      	adds	r3, #4
 8010000:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010002:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8010006:	490d      	ldr	r1, [pc, #52]	; (801003c <etharp_find_entry+0x244>)
 8010008:	4613      	mov	r3, r2
 801000a:	005b      	lsls	r3, r3, #1
 801000c:	4413      	add	r3, r2
 801000e:	00db      	lsls	r3, r3, #3
 8010010:	440b      	add	r3, r1
 8010012:	3312      	adds	r3, #18
 8010014:	2200      	movs	r2, #0
 8010016:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010018:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801001c:	4907      	ldr	r1, [pc, #28]	; (801003c <etharp_find_entry+0x244>)
 801001e:	4613      	mov	r3, r2
 8010020:	005b      	lsls	r3, r3, #1
 8010022:	4413      	add	r3, r2
 8010024:	00db      	lsls	r3, r3, #3
 8010026:	440b      	add	r3, r1
 8010028:	3308      	adds	r3, #8
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801002e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 8010032:	4618      	mov	r0, r3
 8010034:	3728      	adds	r7, #40	; 0x28
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}
 801003a:	bf00      	nop
 801003c:	20008228 	.word	0x20008228

08010040 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b088      	sub	sp, #32
 8010044:	af02      	add	r7, sp, #8
 8010046:	60f8      	str	r0, [r7, #12]
 8010048:	60b9      	str	r1, [r7, #8]
 801004a:	607a      	str	r2, [r7, #4]
 801004c:	70fb      	strb	r3, [r7, #3]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d012      	beq.n	801007a <etharp_update_arp_entry+0x3a>
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d00e      	beq.n	801007a <etharp_update_arp_entry+0x3a>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	68f9      	ldr	r1, [r7, #12]
 8010062:	4618      	mov	r0, r3
 8010064:	f001 fd32 	bl	8011acc <ip4_addr_isbroadcast_u32>
 8010068:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801006a:	2b00      	cmp	r3, #0
 801006c:	d105      	bne.n	801007a <etharp_update_arp_entry+0x3a>
      ip4_addr_ismulticast(ipaddr)) {
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010076:	2be0      	cmp	r3, #224	; 0xe0
 8010078:	d102      	bne.n	8010080 <etharp_update_arp_entry+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801007a:	f06f 030f 	mvn.w	r3, #15
 801007e:	e06c      	b.n	801015a <etharp_update_arp_entry+0x11a>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010080:	78fb      	ldrb	r3, [r7, #3]
 8010082:	68fa      	ldr	r2, [r7, #12]
 8010084:	4619      	mov	r1, r3
 8010086:	68b8      	ldr	r0, [r7, #8]
 8010088:	f7ff feb6 	bl	800fdf8 <etharp_find_entry>
 801008c:	4603      	mov	r3, r0
 801008e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010090:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010094:	2b00      	cmp	r3, #0
 8010096:	da02      	bge.n	801009e <etharp_update_arp_entry+0x5e>
    return (err_t)i;
 8010098:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801009c:	e05d      	b.n	801015a <etharp_update_arp_entry+0x11a>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801009e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80100a2:	4930      	ldr	r1, [pc, #192]	; (8010164 <etharp_update_arp_entry+0x124>)
 80100a4:	4613      	mov	r3, r2
 80100a6:	005b      	lsls	r3, r3, #1
 80100a8:	4413      	add	r3, r2
 80100aa:	00db      	lsls	r3, r3, #3
 80100ac:	440b      	add	r3, r1
 80100ae:	3314      	adds	r3, #20
 80100b0:	2202      	movs	r2, #2
 80100b2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80100b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80100b8:	492a      	ldr	r1, [pc, #168]	; (8010164 <etharp_update_arp_entry+0x124>)
 80100ba:	4613      	mov	r3, r2
 80100bc:	005b      	lsls	r3, r3, #1
 80100be:	4413      	add	r3, r2
 80100c0:	00db      	lsls	r3, r3, #3
 80100c2:	440b      	add	r3, r1
 80100c4:	3308      	adds	r3, #8
 80100c6:	68fa      	ldr	r2, [r7, #12]
 80100c8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80100ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80100ce:	4613      	mov	r3, r2
 80100d0:	005b      	lsls	r3, r3, #1
 80100d2:	4413      	add	r3, r2
 80100d4:	00db      	lsls	r3, r3, #3
 80100d6:	3308      	adds	r3, #8
 80100d8:	4a22      	ldr	r2, [pc, #136]	; (8010164 <etharp_update_arp_entry+0x124>)
 80100da:	4413      	add	r3, r2
 80100dc:	3304      	adds	r3, #4
 80100de:	2206      	movs	r2, #6
 80100e0:	6879      	ldr	r1, [r7, #4]
 80100e2:	4618      	mov	r0, r3
 80100e4:	f003 fa2c 	bl	8013540 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80100e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80100ec:	491d      	ldr	r1, [pc, #116]	; (8010164 <etharp_update_arp_entry+0x124>)
 80100ee:	4613      	mov	r3, r2
 80100f0:	005b      	lsls	r3, r3, #1
 80100f2:	4413      	add	r3, r2
 80100f4:	00db      	lsls	r3, r3, #3
 80100f6:	440b      	add	r3, r1
 80100f8:	3312      	adds	r3, #18
 80100fa:	2200      	movs	r2, #0
 80100fc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80100fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010102:	4918      	ldr	r1, [pc, #96]	; (8010164 <etharp_update_arp_entry+0x124>)
 8010104:	4613      	mov	r3, r2
 8010106:	005b      	lsls	r3, r3, #1
 8010108:	4413      	add	r3, r2
 801010a:	00db      	lsls	r3, r3, #3
 801010c:	440b      	add	r3, r1
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d021      	beq.n	8010158 <etharp_update_arp_entry+0x118>
    struct pbuf *p = arp_table[i].q;
 8010114:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010118:	4912      	ldr	r1, [pc, #72]	; (8010164 <etharp_update_arp_entry+0x124>)
 801011a:	4613      	mov	r3, r2
 801011c:	005b      	lsls	r3, r3, #1
 801011e:	4413      	add	r3, r2
 8010120:	00db      	lsls	r3, r3, #3
 8010122:	440b      	add	r3, r1
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010128:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801012c:	490d      	ldr	r1, [pc, #52]	; (8010164 <etharp_update_arp_entry+0x124>)
 801012e:	4613      	mov	r3, r2
 8010130:	005b      	lsls	r3, r3, #1
 8010132:	4413      	add	r3, r2
 8010134:	00db      	lsls	r3, r3, #3
 8010136:	440b      	add	r3, r1
 8010138:	2200      	movs	r2, #0
 801013a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010142:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010146:	9300      	str	r3, [sp, #0]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	6939      	ldr	r1, [r7, #16]
 801014c:	68f8      	ldr	r0, [r7, #12]
 801014e:	f002 fba3 	bl	8012898 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010152:	6938      	ldr	r0, [r7, #16]
 8010154:	f7fa f9c7 	bl	800a4e6 <pbuf_free>
  }
  return ERR_OK;
 8010158:	2300      	movs	r3, #0
}
 801015a:	4618      	mov	r0, r3
 801015c:	3718      	adds	r7, #24
 801015e:	46bd      	mov	sp, r7
 8010160:	bd80      	pop	{r7, pc}
 8010162:	bf00      	nop
 8010164:	20008228 	.word	0x20008228

08010168 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010168:	b5b0      	push	{r4, r5, r7, lr}
 801016a:	b08a      	sub	sp, #40	; 0x28
 801016c:	af04      	add	r7, sp, #16
 801016e:	6078      	str	r0, [r7, #4]
 8010170:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d103      	bne.n	8010180 <etharp_input+0x18>
 8010178:	4847      	ldr	r0, [pc, #284]	; (8010298 <etharp_input+0x130>)
 801017a:	f7f0 f88a 	bl	8000292 <Console_DEBUG>
 801017e:	e088      	b.n	8010292 <etharp_input+0x12a>

  hdr = (struct etharp_hdr *)p->payload;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	685b      	ldr	r3, [r3, #4]
 8010184:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010186:	697b      	ldr	r3, [r7, #20]
 8010188:	881b      	ldrh	r3, [r3, #0]
 801018a:	b29b      	uxth	r3, r3
 801018c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010190:	d10c      	bne.n	80101ac <etharp_input+0x44>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010196:	2b06      	cmp	r3, #6
 8010198:	d108      	bne.n	80101ac <etharp_input+0x44>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801019a:	697b      	ldr	r3, [r7, #20]
 801019c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801019e:	2b04      	cmp	r3, #4
 80101a0:	d104      	bne.n	80101ac <etharp_input+0x44>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	885b      	ldrh	r3, [r3, #2]
 80101a6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80101a8:	2b08      	cmp	r3, #8
 80101aa:	d00f      	beq.n	80101cc <etharp_input+0x64>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 80101ac:	4b3b      	ldr	r3, [pc, #236]	; (801029c <etharp_input+0x134>)
 80101ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80101b0:	3301      	adds	r3, #1
 80101b2:	b29a      	uxth	r2, r3
 80101b4:	4b39      	ldr	r3, [pc, #228]	; (801029c <etharp_input+0x134>)
 80101b6:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 80101b8:	4b38      	ldr	r3, [pc, #224]	; (801029c <etharp_input+0x134>)
 80101ba:	8bdb      	ldrh	r3, [r3, #30]
 80101bc:	3301      	adds	r3, #1
 80101be:	b29a      	uxth	r2, r3
 80101c0:	4b36      	ldr	r3, [pc, #216]	; (801029c <etharp_input+0x134>)
 80101c2:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f7fa f98e 	bl	800a4e6 <pbuf_free>
    return;
 80101ca:	e062      	b.n	8010292 <etharp_input+0x12a>
  }
  ETHARP_STATS_INC(etharp.recv);
 80101cc:	4b33      	ldr	r3, [pc, #204]	; (801029c <etharp_input+0x134>)
 80101ce:	8b5b      	ldrh	r3, [r3, #26]
 80101d0:	3301      	adds	r3, #1
 80101d2:	b29a      	uxth	r2, r3
 80101d4:	4b31      	ldr	r3, [pc, #196]	; (801029c <etharp_input+0x134>)
 80101d6:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80101d8:	697b      	ldr	r3, [r7, #20]
 80101da:	330e      	adds	r3, #14
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80101e0:	697b      	ldr	r3, [r7, #20]
 80101e2:	3318      	adds	r3, #24
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	3304      	adds	r3, #4
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d102      	bne.n	80101f8 <etharp_input+0x90>
    for_us = 0;
 80101f2:	2300      	movs	r3, #0
 80101f4:	74fb      	strb	r3, [r7, #19]
 80101f6:	e009      	b.n	801020c <etharp_input+0xa4>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80101f8:	68ba      	ldr	r2, [r7, #8]
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	3304      	adds	r3, #4
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	429a      	cmp	r2, r3
 8010202:	bf0c      	ite	eq
 8010204:	2301      	moveq	r3, #1
 8010206:	2300      	movne	r3, #0
 8010208:	b2db      	uxtb	r3, r3
 801020a:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	f103 0208 	add.w	r2, r3, #8
 8010212:	7cfb      	ldrb	r3, [r7, #19]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d001      	beq.n	801021c <etharp_input+0xb4>
 8010218:	2301      	movs	r3, #1
 801021a:	e000      	b.n	801021e <etharp_input+0xb6>
 801021c:	2302      	movs	r3, #2
 801021e:	f107 010c 	add.w	r1, r7, #12
 8010222:	6838      	ldr	r0, [r7, #0]
 8010224:	f7ff ff0c 	bl	8010040 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010228:	697b      	ldr	r3, [r7, #20]
 801022a:	88db      	ldrh	r3, [r3, #6]
 801022c:	b29b      	uxth	r3, r3
 801022e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010232:	d003      	beq.n	801023c <etharp_input+0xd4>
 8010234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010238:	d025      	beq.n	8010286 <etharp_input+0x11e>
 801023a:	e01d      	b.n	8010278 <etharp_input+0x110>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 801023c:	7cfb      	ldrb	r3, [r7, #19]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d023      	beq.n	801028a <etharp_input+0x122>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010248:	697b      	ldr	r3, [r7, #20]
 801024a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010258:	697a      	ldr	r2, [r7, #20]
 801025a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801025c:	2102      	movs	r1, #2
 801025e:	9103      	str	r1, [sp, #12]
 8010260:	f107 010c 	add.w	r1, r7, #12
 8010264:	9102      	str	r1, [sp, #8]
 8010266:	9201      	str	r2, [sp, #4]
 8010268:	9300      	str	r3, [sp, #0]
 801026a:	462b      	mov	r3, r5
 801026c:	4622      	mov	r2, r4
 801026e:	4601      	mov	r1, r0
 8010270:	6838      	ldr	r0, [r7, #0]
 8010272:	f000 fa9d 	bl	80107b0 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 8010276:	e008      	b.n	801028a <etharp_input+0x122>
      dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 8010278:	4b08      	ldr	r3, [pc, #32]	; (801029c <etharp_input+0x134>)
 801027a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801027c:	3301      	adds	r3, #1
 801027e:	b29a      	uxth	r2, r3
 8010280:	4b06      	ldr	r3, [pc, #24]	; (801029c <etharp_input+0x134>)
 8010282:	859a      	strh	r2, [r3, #44]	; 0x2c
      break;
 8010284:	e002      	b.n	801028c <etharp_input+0x124>
      break;
 8010286:	bf00      	nop
 8010288:	e000      	b.n	801028c <etharp_input+0x124>
      break;
 801028a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f7fa f92a 	bl	800a4e6 <pbuf_free>
}
 8010292:	3718      	adds	r7, #24
 8010294:	46bd      	mov	sp, r7
 8010296:	bdb0      	pop	{r4, r5, r7, pc}
 8010298:	08016848 	.word	0x08016848
 801029c:	200080c8 	.word	0x200080c8

080102a0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b086      	sub	sp, #24
 80102a4:	af02      	add	r7, sp, #8
 80102a6:	60f8      	str	r0, [r7, #12]
 80102a8:	60b9      	str	r1, [r7, #8]
 80102aa:	4613      	mov	r3, r2
 80102ac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80102ae:	79fa      	ldrb	r2, [r7, #7]
 80102b0:	493b      	ldr	r1, [pc, #236]	; (80103a0 <etharp_output_to_arp_index+0x100>)
 80102b2:	4613      	mov	r3, r2
 80102b4:	005b      	lsls	r3, r3, #1
 80102b6:	4413      	add	r3, r2
 80102b8:	00db      	lsls	r3, r3, #3
 80102ba:	440b      	add	r3, r1
 80102bc:	3314      	adds	r3, #20
 80102be:	781b      	ldrb	r3, [r3, #0]
 80102c0:	2b02      	cmp	r3, #2
 80102c2:	d153      	bne.n	801036c <etharp_output_to_arp_index+0xcc>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80102c4:	79fa      	ldrb	r2, [r7, #7]
 80102c6:	4936      	ldr	r1, [pc, #216]	; (80103a0 <etharp_output_to_arp_index+0x100>)
 80102c8:	4613      	mov	r3, r2
 80102ca:	005b      	lsls	r3, r3, #1
 80102cc:	4413      	add	r3, r2
 80102ce:	00db      	lsls	r3, r3, #3
 80102d0:	440b      	add	r3, r1
 80102d2:	3312      	adds	r3, #18
 80102d4:	881b      	ldrh	r3, [r3, #0]
 80102d6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80102da:	d919      	bls.n	8010310 <etharp_output_to_arp_index+0x70>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80102dc:	79fa      	ldrb	r2, [r7, #7]
 80102de:	4613      	mov	r3, r2
 80102e0:	005b      	lsls	r3, r3, #1
 80102e2:	4413      	add	r3, r2
 80102e4:	00db      	lsls	r3, r3, #3
 80102e6:	4a2e      	ldr	r2, [pc, #184]	; (80103a0 <etharp_output_to_arp_index+0x100>)
 80102e8:	4413      	add	r3, r2
 80102ea:	3304      	adds	r3, #4
 80102ec:	4619      	mov	r1, r3
 80102ee:	68f8      	ldr	r0, [r7, #12]
 80102f0:	f000 faee 	bl	80108d0 <etharp_request>
 80102f4:	4603      	mov	r3, r0
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d138      	bne.n	801036c <etharp_output_to_arp_index+0xcc>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80102fa:	79fa      	ldrb	r2, [r7, #7]
 80102fc:	4928      	ldr	r1, [pc, #160]	; (80103a0 <etharp_output_to_arp_index+0x100>)
 80102fe:	4613      	mov	r3, r2
 8010300:	005b      	lsls	r3, r3, #1
 8010302:	4413      	add	r3, r2
 8010304:	00db      	lsls	r3, r3, #3
 8010306:	440b      	add	r3, r1
 8010308:	3314      	adds	r3, #20
 801030a:	2203      	movs	r2, #3
 801030c:	701a      	strb	r2, [r3, #0]
 801030e:	e02d      	b.n	801036c <etharp_output_to_arp_index+0xcc>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010310:	79fa      	ldrb	r2, [r7, #7]
 8010312:	4923      	ldr	r1, [pc, #140]	; (80103a0 <etharp_output_to_arp_index+0x100>)
 8010314:	4613      	mov	r3, r2
 8010316:	005b      	lsls	r3, r3, #1
 8010318:	4413      	add	r3, r2
 801031a:	00db      	lsls	r3, r3, #3
 801031c:	440b      	add	r3, r1
 801031e:	3312      	adds	r3, #18
 8010320:	881b      	ldrh	r3, [r3, #0]
 8010322:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010326:	d321      	bcc.n	801036c <etharp_output_to_arp_index+0xcc>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010328:	79fa      	ldrb	r2, [r7, #7]
 801032a:	4613      	mov	r3, r2
 801032c:	005b      	lsls	r3, r3, #1
 801032e:	4413      	add	r3, r2
 8010330:	00db      	lsls	r3, r3, #3
 8010332:	4a1b      	ldr	r2, [pc, #108]	; (80103a0 <etharp_output_to_arp_index+0x100>)
 8010334:	4413      	add	r3, r2
 8010336:	1d19      	adds	r1, r3, #4
 8010338:	79fa      	ldrb	r2, [r7, #7]
 801033a:	4613      	mov	r3, r2
 801033c:	005b      	lsls	r3, r3, #1
 801033e:	4413      	add	r3, r2
 8010340:	00db      	lsls	r3, r3, #3
 8010342:	3308      	adds	r3, #8
 8010344:	4a16      	ldr	r2, [pc, #88]	; (80103a0 <etharp_output_to_arp_index+0x100>)
 8010346:	4413      	add	r3, r2
 8010348:	3304      	adds	r3, #4
 801034a:	461a      	mov	r2, r3
 801034c:	68f8      	ldr	r0, [r7, #12]
 801034e:	f000 fa9d 	bl	801088c <etharp_request_dst>
 8010352:	4603      	mov	r3, r0
 8010354:	2b00      	cmp	r3, #0
 8010356:	d109      	bne.n	801036c <etharp_output_to_arp_index+0xcc>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010358:	79fa      	ldrb	r2, [r7, #7]
 801035a:	4911      	ldr	r1, [pc, #68]	; (80103a0 <etharp_output_to_arp_index+0x100>)
 801035c:	4613      	mov	r3, r2
 801035e:	005b      	lsls	r3, r3, #1
 8010360:	4413      	add	r3, r2
 8010362:	00db      	lsls	r3, r3, #3
 8010364:	440b      	add	r3, r1
 8010366:	3314      	adds	r3, #20
 8010368:	2203      	movs	r2, #3
 801036a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8010372:	79fa      	ldrb	r2, [r7, #7]
 8010374:	4613      	mov	r3, r2
 8010376:	005b      	lsls	r3, r3, #1
 8010378:	4413      	add	r3, r2
 801037a:	00db      	lsls	r3, r3, #3
 801037c:	3308      	adds	r3, #8
 801037e:	4a08      	ldr	r2, [pc, #32]	; (80103a0 <etharp_output_to_arp_index+0x100>)
 8010380:	4413      	add	r3, r2
 8010382:	3304      	adds	r3, #4
 8010384:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010388:	9200      	str	r2, [sp, #0]
 801038a:	460a      	mov	r2, r1
 801038c:	68b9      	ldr	r1, [r7, #8]
 801038e:	68f8      	ldr	r0, [r7, #12]
 8010390:	f002 fa82 	bl	8012898 <ethernet_output>
 8010394:	4603      	mov	r3, r0
}
 8010396:	4618      	mov	r0, r3
 8010398:	3710      	adds	r7, #16
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}
 801039e:	bf00      	nop
 80103a0:	20008228 	.word	0x20008228

080103a4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b08a      	sub	sp, #40	; 0x28
 80103a8:	af02      	add	r7, sp, #8
 80103aa:	60f8      	str	r0, [r7, #12]
 80103ac:	60b9      	str	r1, [r7, #8]
 80103ae:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	61bb      	str	r3, [r7, #24]

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	68f9      	ldr	r1, [r7, #12]
 80103ba:	4618      	mov	r0, r3
 80103bc:	f001 fb86 	bl	8011acc <ip4_addr_isbroadcast_u32>
 80103c0:	4603      	mov	r3, r0
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d002      	beq.n	80103cc <etharp_output+0x28>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80103c6:	4b64      	ldr	r3, [pc, #400]	; (8010558 <etharp_output+0x1b4>)
 80103c8:	61fb      	str	r3, [r7, #28]
 80103ca:	e0b5      	b.n	8010538 <etharp_output+0x194>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80103d4:	2be0      	cmp	r3, #224	; 0xe0
 80103d6:	d118      	bne.n	801040a <etharp_output+0x66>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80103d8:	2301      	movs	r3, #1
 80103da:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80103dc:	2300      	movs	r3, #0
 80103de:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80103e0:	235e      	movs	r3, #94	; 0x5e
 80103e2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	3301      	adds	r3, #1
 80103e8:	781b      	ldrb	r3, [r3, #0]
 80103ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103ee:	b2db      	uxtb	r3, r3
 80103f0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	3302      	adds	r3, #2
 80103f6:	781b      	ldrb	r3, [r3, #0]
 80103f8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	3303      	adds	r3, #3
 80103fe:	781b      	ldrb	r3, [r3, #0]
 8010400:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010402:	f107 0310 	add.w	r3, r7, #16
 8010406:	61fb      	str	r3, [r7, #28]
 8010408:	e096      	b.n	8010538 <etharp_output+0x194>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	681a      	ldr	r2, [r3, #0]
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	3304      	adds	r3, #4
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	405a      	eors	r2, r3
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	3308      	adds	r3, #8
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	4013      	ands	r3, r2
 801041e:	2b00      	cmp	r3, #0
 8010420:	d012      	beq.n	8010448 <etharp_output+0xa4>
        !ip4_addr_islinklocal(ipaddr)) {
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010428:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801042c:	4293      	cmp	r3, r2
 801042e:	d00b      	beq.n	8010448 <etharp_output+0xa4>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	330c      	adds	r3, #12
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d003      	beq.n	8010442 <etharp_output+0x9e>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	330c      	adds	r3, #12
 801043e:	61bb      	str	r3, [r7, #24]
 8010440:	e002      	b.n	8010448 <etharp_output+0xa4>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010442:	f06f 0303 	mvn.w	r3, #3
 8010446:	e083      	b.n	8010550 <etharp_output+0x1ac>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010448:	4b44      	ldr	r3, [pc, #272]	; (801055c <etharp_output+0x1b8>)
 801044a:	781b      	ldrb	r3, [r3, #0]
 801044c:	4619      	mov	r1, r3
 801044e:	4a44      	ldr	r2, [pc, #272]	; (8010560 <etharp_output+0x1bc>)
 8010450:	460b      	mov	r3, r1
 8010452:	005b      	lsls	r3, r3, #1
 8010454:	440b      	add	r3, r1
 8010456:	00db      	lsls	r3, r3, #3
 8010458:	4413      	add	r3, r2
 801045a:	3314      	adds	r3, #20
 801045c:	781b      	ldrb	r3, [r3, #0]
 801045e:	2b01      	cmp	r3, #1
 8010460:	d92b      	bls.n	80104ba <etharp_output+0x116>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010462:	4b3e      	ldr	r3, [pc, #248]	; (801055c <etharp_output+0x1b8>)
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	4619      	mov	r1, r3
 8010468:	4a3d      	ldr	r2, [pc, #244]	; (8010560 <etharp_output+0x1bc>)
 801046a:	460b      	mov	r3, r1
 801046c:	005b      	lsls	r3, r3, #1
 801046e:	440b      	add	r3, r1
 8010470:	00db      	lsls	r3, r3, #3
 8010472:	4413      	add	r3, r2
 8010474:	3308      	adds	r3, #8
 8010476:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010478:	68fa      	ldr	r2, [r7, #12]
 801047a:	429a      	cmp	r2, r3
 801047c:	d11d      	bne.n	80104ba <etharp_output+0x116>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801047e:	69bb      	ldr	r3, [r7, #24]
 8010480:	681a      	ldr	r2, [r3, #0]
 8010482:	4b36      	ldr	r3, [pc, #216]	; (801055c <etharp_output+0x1b8>)
 8010484:	781b      	ldrb	r3, [r3, #0]
 8010486:	4618      	mov	r0, r3
 8010488:	4935      	ldr	r1, [pc, #212]	; (8010560 <etharp_output+0x1bc>)
 801048a:	4603      	mov	r3, r0
 801048c:	005b      	lsls	r3, r3, #1
 801048e:	4403      	add	r3, r0
 8010490:	00db      	lsls	r3, r3, #3
 8010492:	440b      	add	r3, r1
 8010494:	3304      	adds	r3, #4
 8010496:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010498:	429a      	cmp	r2, r3
 801049a:	d10e      	bne.n	80104ba <etharp_output+0x116>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 801049c:	4b31      	ldr	r3, [pc, #196]	; (8010564 <etharp_output+0x1c0>)
 801049e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80104a0:	3301      	adds	r3, #1
 80104a2:	b29a      	uxth	r2, r3
 80104a4:	4b2f      	ldr	r3, [pc, #188]	; (8010564 <etharp_output+0x1c0>)
 80104a6:	85da      	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80104a8:	4b2c      	ldr	r3, [pc, #176]	; (801055c <etharp_output+0x1b8>)
 80104aa:	781b      	ldrb	r3, [r3, #0]
 80104ac:	461a      	mov	r2, r3
 80104ae:	68b9      	ldr	r1, [r7, #8]
 80104b0:	68f8      	ldr	r0, [r7, #12]
 80104b2:	f7ff fef5 	bl	80102a0 <etharp_output_to_arp_index>
 80104b6:	4603      	mov	r3, r0
 80104b8:	e04a      	b.n	8010550 <etharp_output+0x1ac>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80104ba:	2300      	movs	r3, #0
 80104bc:	75fb      	strb	r3, [r7, #23]
 80104be:	e031      	b.n	8010524 <etharp_output+0x180>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80104c0:	7dfa      	ldrb	r2, [r7, #23]
 80104c2:	4927      	ldr	r1, [pc, #156]	; (8010560 <etharp_output+0x1bc>)
 80104c4:	4613      	mov	r3, r2
 80104c6:	005b      	lsls	r3, r3, #1
 80104c8:	4413      	add	r3, r2
 80104ca:	00db      	lsls	r3, r3, #3
 80104cc:	440b      	add	r3, r1
 80104ce:	3314      	adds	r3, #20
 80104d0:	781b      	ldrb	r3, [r3, #0]
 80104d2:	2b01      	cmp	r3, #1
 80104d4:	d923      	bls.n	801051e <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80104d6:	7dfa      	ldrb	r2, [r7, #23]
 80104d8:	4921      	ldr	r1, [pc, #132]	; (8010560 <etharp_output+0x1bc>)
 80104da:	4613      	mov	r3, r2
 80104dc:	005b      	lsls	r3, r3, #1
 80104de:	4413      	add	r3, r2
 80104e0:	00db      	lsls	r3, r3, #3
 80104e2:	440b      	add	r3, r1
 80104e4:	3308      	adds	r3, #8
 80104e6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80104e8:	68fa      	ldr	r2, [r7, #12]
 80104ea:	429a      	cmp	r2, r3
 80104ec:	d117      	bne.n	801051e <etharp_output+0x17a>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80104ee:	69bb      	ldr	r3, [r7, #24]
 80104f0:	6819      	ldr	r1, [r3, #0]
 80104f2:	7dfa      	ldrb	r2, [r7, #23]
 80104f4:	481a      	ldr	r0, [pc, #104]	; (8010560 <etharp_output+0x1bc>)
 80104f6:	4613      	mov	r3, r2
 80104f8:	005b      	lsls	r3, r3, #1
 80104fa:	4413      	add	r3, r2
 80104fc:	00db      	lsls	r3, r3, #3
 80104fe:	4403      	add	r3, r0
 8010500:	3304      	adds	r3, #4
 8010502:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010504:	4299      	cmp	r1, r3
 8010506:	d10a      	bne.n	801051e <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010508:	4a14      	ldr	r2, [pc, #80]	; (801055c <etharp_output+0x1b8>)
 801050a:	7dfb      	ldrb	r3, [r7, #23]
 801050c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801050e:	7dfb      	ldrb	r3, [r7, #23]
 8010510:	461a      	mov	r2, r3
 8010512:	68b9      	ldr	r1, [r7, #8]
 8010514:	68f8      	ldr	r0, [r7, #12]
 8010516:	f7ff fec3 	bl	80102a0 <etharp_output_to_arp_index>
 801051a:	4603      	mov	r3, r0
 801051c:	e018      	b.n	8010550 <etharp_output+0x1ac>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801051e:	7dfb      	ldrb	r3, [r7, #23]
 8010520:	3301      	adds	r3, #1
 8010522:	75fb      	strb	r3, [r7, #23]
 8010524:	7dfb      	ldrb	r3, [r7, #23]
 8010526:	2b09      	cmp	r3, #9
 8010528:	d9ca      	bls.n	80104c0 <etharp_output+0x11c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801052a:	68ba      	ldr	r2, [r7, #8]
 801052c:	69b9      	ldr	r1, [r7, #24]
 801052e:	68f8      	ldr	r0, [r7, #12]
 8010530:	f000 f81a 	bl	8010568 <etharp_query>
 8010534:	4603      	mov	r3, r0
 8010536:	e00b      	b.n	8010550 <etharp_output+0x1ac>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801053e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010542:	9300      	str	r3, [sp, #0]
 8010544:	69fb      	ldr	r3, [r7, #28]
 8010546:	68b9      	ldr	r1, [r7, #8]
 8010548:	68f8      	ldr	r0, [r7, #12]
 801054a:	f002 f9a5 	bl	8012898 <ethernet_output>
 801054e:	4603      	mov	r3, r0
}
 8010550:	4618      	mov	r0, r3
 8010552:	3720      	adds	r7, #32
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}
 8010558:	08016ca4 	.word	0x08016ca4
 801055c:	20008318 	.word	0x20008318
 8010560:	20008228 	.word	0x20008228
 8010564:	200080c8 	.word	0x200080c8

08010568 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b08c      	sub	sp, #48	; 0x30
 801056c:	af02      	add	r7, sp, #8
 801056e:	60f8      	str	r0, [r7, #12]
 8010570:	60b9      	str	r1, [r7, #8]
 8010572:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	3326      	adds	r3, #38	; 0x26
 8010578:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801057a:	f04f 33ff 	mov.w	r3, #4294967295
 801057e:	623b      	str	r3, [r7, #32]
  int is_new_entry = 0;
 8010580:	2300      	movs	r3, #0
 8010582:	627b      	str	r3, [r7, #36]	; 0x24
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	68f9      	ldr	r1, [r7, #12]
 801058a:	4618      	mov	r0, r3
 801058c:	f001 fa9e 	bl	8011acc <ip4_addr_isbroadcast_u32>
 8010590:	4603      	mov	r3, r0
 8010592:	2b00      	cmp	r3, #0
 8010594:	d10c      	bne.n	80105b0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801059e:	2be0      	cmp	r3, #224	; 0xe0
 80105a0:	d006      	beq.n	80105b0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d003      	beq.n	80105b0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d102      	bne.n	80105b6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80105b0:	f06f 030f 	mvn.w	r3, #15
 80105b4:	e0f1      	b.n	801079a <etharp_query+0x232>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80105b6:	68fa      	ldr	r2, [r7, #12]
 80105b8:	2101      	movs	r1, #1
 80105ba:	68b8      	ldr	r0, [r7, #8]
 80105bc:	f7ff fc1c 	bl	800fdf8 <etharp_find_entry>
 80105c0:	4603      	mov	r3, r0
 80105c2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80105c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	da0b      	bge.n	80105e4 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d005      	beq.n	80105de <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 80105d2:	4b74      	ldr	r3, [pc, #464]	; (80107a4 <etharp_query+0x23c>)
 80105d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80105d6:	3301      	adds	r3, #1
 80105d8:	b29a      	uxth	r2, r3
 80105da:	4b72      	ldr	r3, [pc, #456]	; (80107a4 <etharp_query+0x23c>)
 80105dc:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i_err;
 80105de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80105e2:	e0da      	b.n	801079a <etharp_query+0x232>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
  i = (netif_addr_idx_t)i_err;
 80105e4:	8a7b      	ldrh	r3, [r7, #18]
 80105e6:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80105e8:	7c7a      	ldrb	r2, [r7, #17]
 80105ea:	496f      	ldr	r1, [pc, #444]	; (80107a8 <etharp_query+0x240>)
 80105ec:	4613      	mov	r3, r2
 80105ee:	005b      	lsls	r3, r3, #1
 80105f0:	4413      	add	r3, r2
 80105f2:	00db      	lsls	r3, r3, #3
 80105f4:	440b      	add	r3, r1
 80105f6:	3314      	adds	r3, #20
 80105f8:	781b      	ldrb	r3, [r3, #0]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d115      	bne.n	801062a <etharp_query+0xc2>
    is_new_entry = 1;
 80105fe:	2301      	movs	r3, #1
 8010600:	627b      	str	r3, [r7, #36]	; 0x24
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010602:	7c7a      	ldrb	r2, [r7, #17]
 8010604:	4968      	ldr	r1, [pc, #416]	; (80107a8 <etharp_query+0x240>)
 8010606:	4613      	mov	r3, r2
 8010608:	005b      	lsls	r3, r3, #1
 801060a:	4413      	add	r3, r2
 801060c:	00db      	lsls	r3, r3, #3
 801060e:	440b      	add	r3, r1
 8010610:	3314      	adds	r3, #20
 8010612:	2201      	movs	r2, #1
 8010614:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010616:	7c7a      	ldrb	r2, [r7, #17]
 8010618:	4963      	ldr	r1, [pc, #396]	; (80107a8 <etharp_query+0x240>)
 801061a:	4613      	mov	r3, r2
 801061c:	005b      	lsls	r3, r3, #1
 801061e:	4413      	add	r3, r2
 8010620:	00db      	lsls	r3, r3, #3
 8010622:	440b      	add	r3, r1
 8010624:	3308      	adds	r3, #8
 8010626:	68fa      	ldr	r2, [r7, #12]
 8010628:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801062a:	7c7a      	ldrb	r2, [r7, #17]
 801062c:	495e      	ldr	r1, [pc, #376]	; (80107a8 <etharp_query+0x240>)
 801062e:	4613      	mov	r3, r2
 8010630:	005b      	lsls	r3, r3, #1
 8010632:	4413      	add	r3, r2
 8010634:	00db      	lsls	r3, r3, #3
 8010636:	440b      	add	r3, r1
 8010638:	3314      	adds	r3, #20
 801063a:	781b      	ldrb	r3, [r3, #0]
 801063c:	2b01      	cmp	r3, #1
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801063e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010640:	2b00      	cmp	r3, #0
 8010642:	d102      	bne.n	801064a <etharp_query+0xe2>
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d124      	bne.n	8010694 <etharp_query+0x12c>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801064a:	68b9      	ldr	r1, [r7, #8]
 801064c:	68f8      	ldr	r0, [r7, #12]
 801064e:	f000 f93f 	bl	80108d0 <etharp_request>
 8010652:	6238      	str	r0, [r7, #32]
    if (result != ERR_OK) {
 8010654:	6a3b      	ldr	r3, [r7, #32]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d117      	bne.n	801068a <etharp_query+0x122>
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    } else {
      /* ARP request successfully sent */
      if ((arp_table[i].state == ETHARP_STATE_PENDING) && !is_new_entry) {
 801065a:	7c7a      	ldrb	r2, [r7, #17]
 801065c:	4952      	ldr	r1, [pc, #328]	; (80107a8 <etharp_query+0x240>)
 801065e:	4613      	mov	r3, r2
 8010660:	005b      	lsls	r3, r3, #1
 8010662:	4413      	add	r3, r2
 8010664:	00db      	lsls	r3, r3, #3
 8010666:	440b      	add	r3, r1
 8010668:	3314      	adds	r3, #20
 801066a:	781b      	ldrb	r3, [r3, #0]
 801066c:	2b01      	cmp	r3, #1
 801066e:	d10c      	bne.n	801068a <etharp_query+0x122>
 8010670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010672:	2b00      	cmp	r3, #0
 8010674:	d109      	bne.n	801068a <etharp_query+0x122>
        /* A new ARP request has been sent for a pending entry. Reset the ctime to
           not let it expire too fast. */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: reset ctime for entry %"S16_F"\n", (s16_t)i));
        arp_table[i].ctime = 0;
 8010676:	7c7a      	ldrb	r2, [r7, #17]
 8010678:	494b      	ldr	r1, [pc, #300]	; (80107a8 <etharp_query+0x240>)
 801067a:	4613      	mov	r3, r2
 801067c:	005b      	lsls	r3, r3, #1
 801067e:	4413      	add	r3, r2
 8010680:	00db      	lsls	r3, r3, #3
 8010682:	440b      	add	r3, r1
 8010684:	3312      	adds	r3, #18
 8010686:	2200      	movs	r2, #0
 8010688:	801a      	strh	r2, [r3, #0]
      }
    }
    if (q == NULL) {
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d101      	bne.n	8010694 <etharp_query+0x12c>
      return result;
 8010690:	6a3b      	ldr	r3, [r7, #32]
 8010692:	e082      	b.n	801079a <etharp_query+0x232>
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010694:	7c7a      	ldrb	r2, [r7, #17]
 8010696:	4944      	ldr	r1, [pc, #272]	; (80107a8 <etharp_query+0x240>)
 8010698:	4613      	mov	r3, r2
 801069a:	005b      	lsls	r3, r3, #1
 801069c:	4413      	add	r3, r2
 801069e:	00db      	lsls	r3, r3, #3
 80106a0:	440b      	add	r3, r1
 80106a2:	3314      	adds	r3, #20
 80106a4:	781b      	ldrb	r3, [r3, #0]
 80106a6:	2b01      	cmp	r3, #1
 80106a8:	d915      	bls.n	80106d6 <etharp_query+0x16e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80106aa:	4a40      	ldr	r2, [pc, #256]	; (80107ac <etharp_query+0x244>)
 80106ac:	7c7b      	ldrb	r3, [r7, #17]
 80106ae:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80106b0:	7c7a      	ldrb	r2, [r7, #17]
 80106b2:	4613      	mov	r3, r2
 80106b4:	005b      	lsls	r3, r3, #1
 80106b6:	4413      	add	r3, r2
 80106b8:	00db      	lsls	r3, r3, #3
 80106ba:	3308      	adds	r3, #8
 80106bc:	4a3a      	ldr	r2, [pc, #232]	; (80107a8 <etharp_query+0x240>)
 80106be:	4413      	add	r3, r2
 80106c0:	3304      	adds	r3, #4
 80106c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80106c6:	9200      	str	r2, [sp, #0]
 80106c8:	697a      	ldr	r2, [r7, #20]
 80106ca:	6879      	ldr	r1, [r7, #4]
 80106cc:	68f8      	ldr	r0, [r7, #12]
 80106ce:	f002 f8e3 	bl	8012898 <ethernet_output>
 80106d2:	6238      	str	r0, [r7, #32]
 80106d4:	e060      	b.n	8010798 <etharp_query+0x230>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80106d6:	7c7a      	ldrb	r2, [r7, #17]
 80106d8:	4933      	ldr	r1, [pc, #204]	; (80107a8 <etharp_query+0x240>)
 80106da:	4613      	mov	r3, r2
 80106dc:	005b      	lsls	r3, r3, #1
 80106de:	4413      	add	r3, r2
 80106e0:	00db      	lsls	r3, r3, #3
 80106e2:	440b      	add	r3, r1
 80106e4:	3314      	adds	r3, #20
 80106e6:	781b      	ldrb	r3, [r3, #0]
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d155      	bne.n	8010798 <etharp_query+0x230>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80106ec:	2300      	movs	r3, #0
 80106ee:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80106f4:	e010      	b.n	8010718 <etharp_query+0x1b0>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80106f6:	69fb      	ldr	r3, [r7, #28]
 80106f8:	895a      	ldrh	r2, [r3, #10]
 80106fa:	69fb      	ldr	r3, [r7, #28]
 80106fc:	891b      	ldrh	r3, [r3, #8]
 80106fe:	429a      	cmp	r2, r3
      if (PBUF_NEEDS_COPY(p)) {
 8010700:	69fb      	ldr	r3, [r7, #28]
 8010702:	7b1b      	ldrb	r3, [r3, #12]
 8010704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010708:	2b00      	cmp	r3, #0
 801070a:	d002      	beq.n	8010712 <etharp_query+0x1aa>
        copy_needed = 1;
 801070c:	2301      	movs	r3, #1
 801070e:	61bb      	str	r3, [r7, #24]
        break;
 8010710:	e005      	b.n	801071e <etharp_query+0x1b6>
      }
      p = p->next;
 8010712:	69fb      	ldr	r3, [r7, #28]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010718:	69fb      	ldr	r3, [r7, #28]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d1eb      	bne.n	80106f6 <etharp_query+0x18e>
    }
    if (copy_needed) {
 801071e:	69bb      	ldr	r3, [r7, #24]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d007      	beq.n	8010734 <etharp_query+0x1cc>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010724:	687a      	ldr	r2, [r7, #4]
 8010726:	f44f 7120 	mov.w	r1, #640	; 0x280
 801072a:	200e      	movs	r0, #14
 801072c:	f7fa f905 	bl	800a93a <pbuf_clone>
 8010730:	61f8      	str	r0, [r7, #28]
 8010732:	e004      	b.n	801073e <etharp_query+0x1d6>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010738:	69f8      	ldr	r0, [r7, #28]
 801073a:	f7f9 ff3e 	bl	800a5ba <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801073e:	69fb      	ldr	r3, [r7, #28]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d020      	beq.n	8010786 <etharp_query+0x21e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010744:	7c7a      	ldrb	r2, [r7, #17]
 8010746:	4918      	ldr	r1, [pc, #96]	; (80107a8 <etharp_query+0x240>)
 8010748:	4613      	mov	r3, r2
 801074a:	005b      	lsls	r3, r3, #1
 801074c:	4413      	add	r3, r2
 801074e:	00db      	lsls	r3, r3, #3
 8010750:	440b      	add	r3, r1
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d00a      	beq.n	801076e <etharp_query+0x206>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010758:	7c7a      	ldrb	r2, [r7, #17]
 801075a:	4913      	ldr	r1, [pc, #76]	; (80107a8 <etharp_query+0x240>)
 801075c:	4613      	mov	r3, r2
 801075e:	005b      	lsls	r3, r3, #1
 8010760:	4413      	add	r3, r2
 8010762:	00db      	lsls	r3, r3, #3
 8010764:	440b      	add	r3, r1
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	4618      	mov	r0, r3
 801076a:	f7f9 febc 	bl	800a4e6 <pbuf_free>
      }
      arp_table[i].q = p;
 801076e:	7c7a      	ldrb	r2, [r7, #17]
 8010770:	490d      	ldr	r1, [pc, #52]	; (80107a8 <etharp_query+0x240>)
 8010772:	4613      	mov	r3, r2
 8010774:	005b      	lsls	r3, r3, #1
 8010776:	4413      	add	r3, r2
 8010778:	00db      	lsls	r3, r3, #3
 801077a:	440b      	add	r3, r1
 801077c:	69fa      	ldr	r2, [r7, #28]
 801077e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010780:	2300      	movs	r3, #0
 8010782:	623b      	str	r3, [r7, #32]
 8010784:	e008      	b.n	8010798 <etharp_query+0x230>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 8010786:	4b07      	ldr	r3, [pc, #28]	; (80107a4 <etharp_query+0x23c>)
 8010788:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801078a:	3301      	adds	r3, #1
 801078c:	b29a      	uxth	r2, r3
 801078e:	4b05      	ldr	r3, [pc, #20]	; (80107a4 <etharp_query+0x23c>)
 8010790:	849a      	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010792:	f04f 33ff 	mov.w	r3, #4294967295
 8010796:	623b      	str	r3, [r7, #32]
    }
  }
  return result;
 8010798:	6a3b      	ldr	r3, [r7, #32]
}
 801079a:	4618      	mov	r0, r3
 801079c:	3728      	adds	r7, #40	; 0x28
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
 80107a2:	bf00      	nop
 80107a4:	200080c8 	.word	0x200080c8
 80107a8:	20008228 	.word	0x20008228
 80107ac:	20008318 	.word	0x20008318

080107b0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b08a      	sub	sp, #40	; 0x28
 80107b4:	af02      	add	r7, sp, #8
 80107b6:	60f8      	str	r0, [r7, #12]
 80107b8:	60b9      	str	r1, [r7, #8]
 80107ba:	607a      	str	r2, [r7, #4]
 80107bc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80107be:	2300      	movs	r3, #0
 80107c0:	61fb      	str	r3, [r7, #28]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80107c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80107c6:	211c      	movs	r1, #28
 80107c8:	200e      	movs	r0, #14
 80107ca:	f7f9 fc45 	bl	800a058 <pbuf_alloc>
 80107ce:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80107d0:	69bb      	ldr	r3, [r7, #24]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d108      	bne.n	80107e8 <etharp_raw+0x38>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 80107d6:	4b2c      	ldr	r3, [pc, #176]	; (8010888 <etharp_raw+0xd8>)
 80107d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80107da:	3301      	adds	r3, #1
 80107dc:	b29a      	uxth	r2, r3
 80107de:	4b2a      	ldr	r3, [pc, #168]	; (8010888 <etharp_raw+0xd8>)
 80107e0:	849a      	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
 80107e2:	f04f 33ff 	mov.w	r3, #4294967295
 80107e6:	e04b      	b.n	8010880 <etharp_raw+0xd0>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80107e8:	69bb      	ldr	r3, [r7, #24]
 80107ea:	685b      	ldr	r3, [r3, #4]
 80107ec:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80107ee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80107f0:	4618      	mov	r0, r3
 80107f2:	f7f8 fb03 	bl	8008dfc <lwip_htons>
 80107f6:	4603      	mov	r3, r0
 80107f8:	461a      	mov	r2, r3
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80107fe:	697b      	ldr	r3, [r7, #20]
 8010800:	3308      	adds	r3, #8
 8010802:	2206      	movs	r2, #6
 8010804:	6839      	ldr	r1, [r7, #0]
 8010806:	4618      	mov	r0, r3
 8010808:	f002 fe9a 	bl	8013540 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	3312      	adds	r3, #18
 8010810:	2206      	movs	r2, #6
 8010812:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010814:	4618      	mov	r0, r3
 8010816:	f002 fe93 	bl	8013540 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801081a:	697b      	ldr	r3, [r7, #20]
 801081c:	330e      	adds	r3, #14
 801081e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010820:	6812      	ldr	r2, [r2, #0]
 8010822:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	3318      	adds	r3, #24
 8010828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801082a:	6812      	ldr	r2, [r2, #0]
 801082c:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	2200      	movs	r2, #0
 8010832:	701a      	strb	r2, [r3, #0]
 8010834:	2200      	movs	r2, #0
 8010836:	f042 0201 	orr.w	r2, r2, #1
 801083a:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	2200      	movs	r2, #0
 8010840:	f042 0208 	orr.w	r2, r2, #8
 8010844:	709a      	strb	r2, [r3, #2]
 8010846:	2200      	movs	r2, #0
 8010848:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	2206      	movs	r2, #6
 801084e:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010850:	697b      	ldr	r3, [r7, #20]
 8010852:	2204      	movs	r2, #4
 8010854:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010856:	f640 0306 	movw	r3, #2054	; 0x806
 801085a:	9300      	str	r3, [sp, #0]
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	68ba      	ldr	r2, [r7, #8]
 8010860:	69b9      	ldr	r1, [r7, #24]
 8010862:	68f8      	ldr	r0, [r7, #12]
 8010864:	f002 f818 	bl	8012898 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 8010868:	4b07      	ldr	r3, [pc, #28]	; (8010888 <etharp_raw+0xd8>)
 801086a:	8b1b      	ldrh	r3, [r3, #24]
 801086c:	3301      	adds	r3, #1
 801086e:	b29a      	uxth	r2, r3
 8010870:	4b05      	ldr	r3, [pc, #20]	; (8010888 <etharp_raw+0xd8>)
 8010872:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 8010874:	69b8      	ldr	r0, [r7, #24]
 8010876:	f7f9 fe36 	bl	800a4e6 <pbuf_free>
  p = NULL;
 801087a:	2300      	movs	r3, #0
 801087c:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801087e:	69fb      	ldr	r3, [r7, #28]
}
 8010880:	4618      	mov	r0, r3
 8010882:	3720      	adds	r7, #32
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}
 8010888:	200080c8 	.word	0x200080c8

0801088c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b088      	sub	sp, #32
 8010890:	af04      	add	r7, sp, #16
 8010892:	60f8      	str	r0, [r7, #12]
 8010894:	60b9      	str	r1, [r7, #8]
 8010896:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80108a8:	2201      	movs	r2, #1
 80108aa:	9203      	str	r2, [sp, #12]
 80108ac:	68ba      	ldr	r2, [r7, #8]
 80108ae:	9202      	str	r2, [sp, #8]
 80108b0:	4a06      	ldr	r2, [pc, #24]	; (80108cc <etharp_request_dst+0x40>)
 80108b2:	9201      	str	r2, [sp, #4]
 80108b4:	9300      	str	r3, [sp, #0]
 80108b6:	4603      	mov	r3, r0
 80108b8:	687a      	ldr	r2, [r7, #4]
 80108ba:	68f8      	ldr	r0, [r7, #12]
 80108bc:	f7ff ff78 	bl	80107b0 <etharp_raw>
 80108c0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80108c2:	4618      	mov	r0, r3
 80108c4:	3710      	adds	r7, #16
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}
 80108ca:	bf00      	nop
 80108cc:	08016cac 	.word	0x08016cac

080108d0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b082      	sub	sp, #8
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
 80108d8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80108da:	4a05      	ldr	r2, [pc, #20]	; (80108f0 <etharp_request+0x20>)
 80108dc:	6839      	ldr	r1, [r7, #0]
 80108de:	6878      	ldr	r0, [r7, #4]
 80108e0:	f7ff ffd4 	bl	801088c <etharp_request_dst>
 80108e4:	4603      	mov	r3, r0
}
 80108e6:	4618      	mov	r0, r3
 80108e8:	3708      	adds	r7, #8
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd80      	pop	{r7, pc}
 80108ee:	bf00      	nop
 80108f0:	08016ca4 	.word	0x08016ca4

080108f4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b08e      	sub	sp, #56	; 0x38
 80108f8:	af04      	add	r7, sp, #16
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 80108fe:	4b9c      	ldr	r3, [pc, #624]	; (8010b70 <icmp_input+0x27c>)
 8010900:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010904:	3301      	adds	r3, #1
 8010906:	b29a      	uxth	r2, r3
 8010908:	4b99      	ldr	r3, [pc, #612]	; (8010b70 <icmp_input+0x27c>)
 801090a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801090e:	4b99      	ldr	r3, [pc, #612]	; (8010b74 <icmp_input+0x280>)
 8010910:	689b      	ldr	r3, [r3, #8]
 8010912:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8010914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010916:	781b      	ldrb	r3, [r3, #0]
 8010918:	f003 030f 	and.w	r3, r3, #15
 801091c:	b2db      	uxtb	r3, r3
 801091e:	009b      	lsls	r3, r3, #2
 8010920:	b2db      	uxtb	r3, r3
 8010922:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8010924:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010926:	2b13      	cmp	r3, #19
 8010928:	f240 80f8 	bls.w	8010b1c <icmp_input+0x228>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	895b      	ldrh	r3, [r3, #10]
 8010930:	2b03      	cmp	r3, #3
 8010932:	f240 80f5 	bls.w	8010b20 <icmp_input+0x22c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	685b      	ldr	r3, [r3, #4]
 801093a:	781b      	ldrb	r3, [r3, #0]
 801093c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	685b      	ldr	r3, [r3, #4]
 8010944:	785b      	ldrb	r3, [r3, #1]
 8010946:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801094a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801094e:	2b00      	cmp	r3, #0
 8010950:	f000 80dd 	beq.w	8010b0e <icmp_input+0x21a>
 8010954:	2b08      	cmp	r3, #8
 8010956:	f040 80c9 	bne.w	8010aec <icmp_input+0x1f8>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801095a:	4b87      	ldr	r3, [pc, #540]	; (8010b78 <icmp_input+0x284>)
 801095c:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801095e:	4b85      	ldr	r3, [pc, #532]	; (8010b74 <icmp_input+0x280>)
 8010960:	695b      	ldr	r3, [r3, #20]
 8010962:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010966:	2be0      	cmp	r3, #224	; 0xe0
 8010968:	f000 80e9 	beq.w	8010b3e <icmp_input+0x24a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801096c:	4b81      	ldr	r3, [pc, #516]	; (8010b74 <icmp_input+0x280>)
 801096e:	695b      	ldr	r3, [r3, #20]
 8010970:	4a80      	ldr	r2, [pc, #512]	; (8010b74 <icmp_input+0x280>)
 8010972:	6812      	ldr	r2, [r2, #0]
 8010974:	4611      	mov	r1, r2
 8010976:	4618      	mov	r0, r3
 8010978:	f001 f8a8 	bl	8011acc <ip4_addr_isbroadcast_u32>
 801097c:	4603      	mov	r3, r0
 801097e:	2b00      	cmp	r3, #0
 8010980:	f040 80df 	bne.w	8010b42 <icmp_input+0x24e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	891b      	ldrh	r3, [r3, #8]
 8010988:	2b07      	cmp	r3, #7
 801098a:	f240 80cb 	bls.w	8010b24 <icmp_input+0x230>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801098e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010990:	330e      	adds	r3, #14
 8010992:	4619      	mov	r1, r3
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	f7f9 fd25 	bl	800a3e4 <pbuf_add_header>
 801099a:	4603      	mov	r3, r0
 801099c:	2b00      	cmp	r3, #0
 801099e:	d045      	beq.n	8010a2c <icmp_input+0x138>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	891a      	ldrh	r2, [r3, #8]
 80109a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80109a6:	4413      	add	r3, r2
 80109a8:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	891b      	ldrh	r3, [r3, #8]
 80109ae:	8b7a      	ldrh	r2, [r7, #26]
 80109b0:	429a      	cmp	r2, r3
 80109b2:	f0c0 80c8 	bcc.w	8010b46 <icmp_input+0x252>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80109b6:	8b7b      	ldrh	r3, [r7, #26]
 80109b8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80109bc:	4619      	mov	r1, r3
 80109be:	200e      	movs	r0, #14
 80109c0:	f7f9 fb4a 	bl	800a058 <pbuf_alloc>
 80109c4:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80109c6:	697b      	ldr	r3, [r7, #20]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	f000 80be 	beq.w	8010b4a <icmp_input+0x256>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	895b      	ldrh	r3, [r3, #10]
 80109d2:	461a      	mov	r2, r3
 80109d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80109d6:	3308      	adds	r3, #8
 80109d8:	429a      	cmp	r2, r3
 80109da:	d203      	bcs.n	80109e4 <icmp_input+0xf0>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80109dc:	6978      	ldr	r0, [r7, #20]
 80109de:	f7f9 fd82 	bl	800a4e6 <pbuf_free>
          goto icmperr;
 80109e2:	e0b5      	b.n	8010b50 <icmp_input+0x25c>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80109e4:	697b      	ldr	r3, [r7, #20]
 80109e6:	685b      	ldr	r3, [r3, #4]
 80109e8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80109ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80109ec:	4618      	mov	r0, r3
 80109ee:	f002 fda7 	bl	8013540 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80109f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80109f4:	4619      	mov	r1, r3
 80109f6:	6978      	ldr	r0, [r7, #20]
 80109f8:	f7f9 fd04 	bl	800a404 <pbuf_remove_header>
 80109fc:	4603      	mov	r3, r0
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d003      	beq.n	8010a0a <icmp_input+0x116>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
          pbuf_free(r);
 8010a02:	6978      	ldr	r0, [r7, #20]
 8010a04:	f7f9 fd6f 	bl	800a4e6 <pbuf_free>
          goto icmperr;
 8010a08:	e0a2      	b.n	8010b50 <icmp_input+0x25c>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010a0a:	6879      	ldr	r1, [r7, #4]
 8010a0c:	6978      	ldr	r0, [r7, #20]
 8010a0e:	f7f9 fe19 	bl	800a644 <pbuf_copy>
 8010a12:	4603      	mov	r3, r0
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d003      	beq.n	8010a20 <icmp_input+0x12c>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8010a18:	6978      	ldr	r0, [r7, #20]
 8010a1a:	f7f9 fd64 	bl	800a4e6 <pbuf_free>
          goto icmperr;
 8010a1e:	e097      	b.n	8010b50 <icmp_input+0x25c>
        }
        /* free the original p */
        pbuf_free(p);
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f7f9 fd60 	bl	800a4e6 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010a26:	697b      	ldr	r3, [r7, #20]
 8010a28:	607b      	str	r3, [r7, #4]
 8010a2a:	e009      	b.n	8010a40 <icmp_input+0x14c>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010a2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a2e:	330e      	adds	r3, #14
 8010a30:	4619      	mov	r1, r3
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f7f9 fce6 	bl	800a404 <pbuf_remove_header>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	f040 8087 	bne.w	8010b4e <icmp_input+0x25a>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	685b      	ldr	r3, [r3, #4]
 8010a44:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010a46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a48:	4619      	mov	r1, r3
 8010a4a:	6878      	ldr	r0, [r7, #4]
 8010a4c:	f7f9 fcca 	bl	800a3e4 <pbuf_add_header>
 8010a50:	4603      	mov	r3, r0
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d15d      	bne.n	8010b12 <icmp_input+0x21e>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	685b      	ldr	r3, [r3, #4]
 8010a5a:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8010a5c:	69fb      	ldr	r3, [r7, #28]
 8010a5e:	681a      	ldr	r2, [r3, #0]
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010a64:	4b43      	ldr	r3, [pc, #268]	; (8010b74 <icmp_input+0x280>)
 8010a66:	691a      	ldr	r2, [r3, #16]
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8010a6c:	693b      	ldr	r3, [r7, #16]
 8010a6e:	2200      	movs	r2, #0
 8010a70:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8010a72:	693b      	ldr	r3, [r7, #16]
 8010a74:	885b      	ldrh	r3, [r3, #2]
 8010a76:	b29b      	uxth	r3, r3
 8010a78:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8010a7c:	4293      	cmp	r3, r2
 8010a7e:	d907      	bls.n	8010a90 <icmp_input+0x19c>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8010a80:	693b      	ldr	r3, [r7, #16]
 8010a82:	885b      	ldrh	r3, [r3, #2]
 8010a84:	b29b      	uxth	r3, r3
 8010a86:	3309      	adds	r3, #9
 8010a88:	b29a      	uxth	r2, r3
 8010a8a:	693b      	ldr	r3, [r7, #16]
 8010a8c:	805a      	strh	r2, [r3, #2]
 8010a8e:	e006      	b.n	8010a9e <icmp_input+0x1aa>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8010a90:	693b      	ldr	r3, [r7, #16]
 8010a92:	885b      	ldrh	r3, [r3, #2]
 8010a94:	b29b      	uxth	r3, r3
 8010a96:	3308      	adds	r3, #8
 8010a98:	b29a      	uxth	r2, r3
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	22ff      	movs	r2, #255	; 0xff
 8010aa2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	729a      	strb	r2, [r3, #10]
 8010aaa:	2200      	movs	r2, #0
 8010aac:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8010aae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	68f8      	ldr	r0, [r7, #12]
 8010ab4:	f7f8 faea 	bl	800908c <inet_chksum>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	461a      	mov	r2, r3
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	815a      	strh	r2, [r3, #10]
        }
#endif /* CHECKSUM_GEN_IP */

        ICMP_STATS_INC(icmp.xmit);
 8010ac0:	4b2b      	ldr	r3, [pc, #172]	; (8010b70 <icmp_input+0x27c>)
 8010ac2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010ac6:	3301      	adds	r3, #1
 8010ac8:	b29a      	uxth	r2, r3
 8010aca:	4b29      	ldr	r3, [pc, #164]	; (8010b70 <icmp_input+0x27c>)
 8010acc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	9302      	str	r3, [sp, #8]
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	9301      	str	r3, [sp, #4]
 8010ad8:	2300      	movs	r3, #0
 8010ada:	9300      	str	r3, [sp, #0]
 8010adc:	23ff      	movs	r3, #255	; 0xff
 8010ade:	2200      	movs	r2, #0
 8010ae0:	69f9      	ldr	r1, [r7, #28]
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f000 fe30 	bl	8011748 <ip4_output_if>
 8010ae8:	60b8      	str	r0, [r7, #8]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010aea:	e012      	b.n	8010b12 <icmp_input+0x21e>
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 8010aec:	4b20      	ldr	r3, [pc, #128]	; (8010b70 <icmp_input+0x27c>)
 8010aee:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8010af2:	3301      	adds	r3, #1
 8010af4:	b29a      	uxth	r2, r3
 8010af6:	4b1e      	ldr	r3, [pc, #120]	; (8010b70 <icmp_input+0x27c>)
 8010af8:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 8010afc:	4b1c      	ldr	r3, [pc, #112]	; (8010b70 <icmp_input+0x27c>)
 8010afe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b02:	3301      	adds	r3, #1
 8010b04:	b29a      	uxth	r2, r3
 8010b06:	4b1a      	ldr	r3, [pc, #104]	; (8010b70 <icmp_input+0x27c>)
 8010b08:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8010b0c:	e002      	b.n	8010b14 <icmp_input+0x220>
      break;
 8010b0e:	bf00      	nop
 8010b10:	e000      	b.n	8010b14 <icmp_input+0x220>
      break;
 8010b12:	bf00      	nop
  }
  pbuf_free(p);
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f7f9 fce6 	bl	800a4e6 <pbuf_free>
  return;
 8010b1a:	e025      	b.n	8010b68 <icmp_input+0x274>
    goto lenerr;
 8010b1c:	bf00      	nop
 8010b1e:	e002      	b.n	8010b26 <icmp_input+0x232>
    goto lenerr;
 8010b20:	bf00      	nop
 8010b22:	e000      	b.n	8010b26 <icmp_input+0x232>
        goto lenerr;
 8010b24:	bf00      	nop
lenerr:
  pbuf_free(p);
 8010b26:	6878      	ldr	r0, [r7, #4]
 8010b28:	f7f9 fcdd 	bl	800a4e6 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 8010b2c:	4b10      	ldr	r3, [pc, #64]	; (8010b70 <icmp_input+0x27c>)
 8010b2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010b32:	3301      	adds	r3, #1
 8010b34:	b29a      	uxth	r2, r3
 8010b36:	4b0e      	ldr	r3, [pc, #56]	; (8010b70 <icmp_input+0x27c>)
 8010b38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010b3c:	e014      	b.n	8010b68 <icmp_input+0x274>
        goto icmperr;
 8010b3e:	bf00      	nop
 8010b40:	e006      	b.n	8010b50 <icmp_input+0x25c>
        goto icmperr;
 8010b42:	bf00      	nop
 8010b44:	e004      	b.n	8010b50 <icmp_input+0x25c>
          goto icmperr;
 8010b46:	bf00      	nop
 8010b48:	e002      	b.n	8010b50 <icmp_input+0x25c>
          goto icmperr;
 8010b4a:	bf00      	nop
 8010b4c:	e000      	b.n	8010b50 <icmp_input+0x25c>
          goto icmperr;
 8010b4e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	f7f9 fcc8 	bl	800a4e6 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 8010b56:	4b06      	ldr	r3, [pc, #24]	; (8010b70 <icmp_input+0x27c>)
 8010b58:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8010b5c:	3301      	adds	r3, #1
 8010b5e:	b29a      	uxth	r2, r3
 8010b60:	4b03      	ldr	r3, [pc, #12]	; (8010b70 <icmp_input+0x27c>)
 8010b62:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010b66:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8010b68:	3728      	adds	r7, #40	; 0x28
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}
 8010b6e:	bf00      	nop
 8010b70:	200080c8 	.word	0x200080c8
 8010b74:	20000ee4 	.word	0x20000ee4
 8010b78:	20000ef8 	.word	0x20000ef8

08010b7c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b082      	sub	sp, #8
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	460b      	mov	r3, r1
 8010b86:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010b88:	78fb      	ldrb	r3, [r7, #3]
 8010b8a:	461a      	mov	r2, r3
 8010b8c:	2103      	movs	r1, #3
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f000 f814 	bl	8010bbc <icmp_send_response>
}
 8010b94:	bf00      	nop
 8010b96:	3708      	adds	r7, #8
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b082      	sub	sp, #8
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	460b      	mov	r3, r1
 8010ba6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010ba8:	78fb      	ldrb	r3, [r7, #3]
 8010baa:	461a      	mov	r2, r3
 8010bac:	210b      	movs	r1, #11
 8010bae:	6878      	ldr	r0, [r7, #4]
 8010bb0:	f000 f804 	bl	8010bbc <icmp_send_response>
}
 8010bb4:	bf00      	nop
 8010bb6:	3708      	adds	r7, #8
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bd80      	pop	{r7, pc}

08010bbc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b08c      	sub	sp, #48	; 0x30
 8010bc0:	af04      	add	r7, sp, #16
 8010bc2:	6078      	str	r0, [r7, #4]
 8010bc4:	460b      	mov	r3, r1
 8010bc6:	70fb      	strb	r3, [r7, #3]
 8010bc8:	4613      	mov	r3, r2
 8010bca:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* Keep IP header + up to 8 bytes */
  response_pkt_len = IP_HLEN + ICMP_DEST_UNREACH_DATASIZE;
 8010bcc:	231c      	movs	r3, #28
 8010bce:	837b      	strh	r3, [r7, #26]
  if (p->tot_len < response_pkt_len) {
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	891b      	ldrh	r3, [r3, #8]
 8010bd4:	8b7a      	ldrh	r2, [r7, #26]
 8010bd6:	429a      	cmp	r2, r3
 8010bd8:	d902      	bls.n	8010be0 <icmp_send_response+0x24>
    response_pkt_len = p->tot_len;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	891b      	ldrh	r3, [r3, #8]
 8010bde:	837b      	strh	r3, [r7, #26]
  }

  /* ICMP header + part of original packet */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + response_pkt_len, PBUF_RAM);
 8010be0:	8b7b      	ldrh	r3, [r7, #26]
 8010be2:	3308      	adds	r3, #8
 8010be4:	b29b      	uxth	r3, r3
 8010be6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010bea:	4619      	mov	r1, r3
 8010bec:	2022      	movs	r0, #34	; 0x22
 8010bee:	f7f9 fa33 	bl	800a058 <pbuf_alloc>
 8010bf2:	6178      	str	r0, [r7, #20]
  if (q == NULL) {
 8010bf4:	697b      	ldr	r3, [r7, #20]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d053      	beq.n	8010ca2 <icmp_send_response+0xe6>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
              (q->len >= (sizeof(struct icmp_echo_hdr) + response_pkt_len)));

  iphdr = (struct ip_hdr *)p->payload;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	685b      	ldr	r3, [r3, #4]
 8010bfe:	613b      	str	r3, [r7, #16]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8010c00:	697b      	ldr	r3, [r7, #20]
 8010c02:	685b      	ldr	r3, [r3, #4]
 8010c04:	60fb      	str	r3, [r7, #12]
  icmphdr->type = type;
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	78fa      	ldrb	r2, [r7, #3]
 8010c0a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	78ba      	ldrb	r2, [r7, #2]
 8010c10:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	2200      	movs	r2, #0
 8010c16:	711a      	strb	r2, [r3, #4]
 8010c18:	2200      	movs	r2, #0
 8010c1a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	2200      	movs	r2, #0
 8010c20:	719a      	strb	r2, [r3, #6]
 8010c22:	2200      	movs	r2, #0
 8010c24:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010c26:	697b      	ldr	r3, [r7, #20]
 8010c28:	685b      	ldr	r3, [r3, #4]
 8010c2a:	f103 0008 	add.w	r0, r3, #8
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	685b      	ldr	r3, [r3, #4]
 8010c32:	8b7a      	ldrh	r2, [r7, #26]
 8010c34:	4619      	mov	r1, r3
 8010c36:	f002 fc83 	bl	8013540 <memcpy>
          response_pkt_len);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010c3a:	693b      	ldr	r3, [r7, #16]
 8010c3c:	68db      	ldr	r3, [r3, #12]
 8010c3e:	60bb      	str	r3, [r7, #8]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8010c40:	f107 0308 	add.w	r3, r7, #8
 8010c44:	4618      	mov	r0, r3
 8010c46:	f000 fb1d 	bl	8011284 <ip4_route>
 8010c4a:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 8010c4c:	69fb      	ldr	r3, [r7, #28]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d023      	beq.n	8010c9a <icmp_send_response+0xde>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	2200      	movs	r2, #0
 8010c56:	709a      	strb	r2, [r3, #2]
 8010c58:	2200      	movs	r2, #0
 8010c5a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	895b      	ldrh	r3, [r3, #10]
 8010c60:	4619      	mov	r1, r3
 8010c62:	68f8      	ldr	r0, [r7, #12]
 8010c64:	f7f8 fa12 	bl	800908c <inet_chksum>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 8010c70:	4b0e      	ldr	r3, [pc, #56]	; (8010cac <icmp_send_response+0xf0>)
 8010c72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010c76:	3301      	adds	r3, #1
 8010c78:	b29a      	uxth	r2, r3
 8010c7a:	4b0c      	ldr	r3, [pc, #48]	; (8010cac <icmp_send_response+0xf0>)
 8010c7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010c80:	f107 0208 	add.w	r2, r7, #8
 8010c84:	69fb      	ldr	r3, [r7, #28]
 8010c86:	9302      	str	r3, [sp, #8]
 8010c88:	2301      	movs	r3, #1
 8010c8a:	9301      	str	r3, [sp, #4]
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	9300      	str	r3, [sp, #0]
 8010c90:	23ff      	movs	r3, #255	; 0xff
 8010c92:	2100      	movs	r1, #0
 8010c94:	6978      	ldr	r0, [r7, #20]
 8010c96:	f000 fd57 	bl	8011748 <ip4_output_if>
  }
  pbuf_free(q);
 8010c9a:	6978      	ldr	r0, [r7, #20]
 8010c9c:	f7f9 fc23 	bl	800a4e6 <pbuf_free>
 8010ca0:	e000      	b.n	8010ca4 <icmp_send_response+0xe8>
    return;
 8010ca2:	bf00      	nop
}
 8010ca4:	3720      	adds	r7, #32
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd80      	pop	{r7, pc}
 8010caa:	bf00      	nop
 8010cac:	200080c8 	.word	0x200080c8

08010cb0 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
 8010cb0:	b480      	push	{r7}
 8010cb2:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 8010cb4:	4b05      	ldr	r3, [pc, #20]	; (8010ccc <igmp_init+0x1c>)
 8010cb6:	4a06      	ldr	r2, [pc, #24]	; (8010cd0 <igmp_init+0x20>)
 8010cb8:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 8010cba:	4b06      	ldr	r3, [pc, #24]	; (8010cd4 <igmp_init+0x24>)
 8010cbc:	4a06      	ldr	r2, [pc, #24]	; (8010cd8 <igmp_init+0x28>)
 8010cbe:	601a      	str	r2, [r3, #0]
}
 8010cc0:	bf00      	nop
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc8:	4770      	bx	lr
 8010cca:	bf00      	nop
 8010ccc:	2000831c 	.word	0x2000831c
 8010cd0:	010000e0 	.word	0x010000e0
 8010cd4:	20008320 	.word	0x20008320
 8010cd8:	020000e0 	.word	0x020000e0

08010cdc <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b084      	sub	sp, #16
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
  struct igmp_group *group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void *)netif));

  group = igmp_lookup_group(netif, &allsystems);
 8010ce4:	4911      	ldr	r1, [pc, #68]	; (8010d2c <igmp_start+0x50>)
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f000 f85d 	bl	8010da6 <igmp_lookup_group>
 8010cec:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d014      	beq.n	8010d1e <igmp_start+0x42>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	2202      	movs	r2, #2
 8010cf8:	725a      	strb	r2, [r3, #9]
    group->use++;
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	7b1b      	ldrb	r3, [r3, #12]
 8010cfe:	3301      	adds	r3, #1
 8010d00:	b2da      	uxtb	r2, r3
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	731a      	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d005      	beq.n	8010d1a <igmp_start+0x3e>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d12:	2201      	movs	r2, #1
 8010d14:	4905      	ldr	r1, [pc, #20]	; (8010d2c <igmp_start+0x50>)
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	4798      	blx	r3
    }

    return ERR_OK;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	e001      	b.n	8010d22 <igmp_start+0x46>
  }

  return ERR_MEM;
 8010d1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010d22:	4618      	mov	r0, r3
 8010d24:	3710      	adds	r7, #16
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}
 8010d2a:	bf00      	nop
 8010d2c:	2000831c 	.word	0x2000831c

08010d30 <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b084      	sub	sp, #16
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
  struct igmp_group *group = netif_igmp_data(netif);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	6a1b      	ldr	r3, [r3, #32]
 8010d3c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void *)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if (group != NULL) {
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d00a      	beq.n	8010d5a <igmp_report_groups+0x2a>
    group = group->next;
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	60fb      	str	r3, [r7, #12]
  }

  while (group != NULL) {
 8010d4a:	e006      	b.n	8010d5a <igmp_report_groups+0x2a>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 8010d4c:	2105      	movs	r1, #5
 8010d4e:	68f8      	ldr	r0, [r7, #12]
 8010d50:	f000 f9d9 	bl	8011106 <igmp_delaying_member>
    group = group->next;
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d1f5      	bne.n	8010d4c <igmp_report_groups+0x1c>
  }
}
 8010d60:	bf00      	nop
 8010d62:	bf00      	nop
 8010d64:	3710      	adds	r7, #16
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd80      	pop	{r7, pc}

08010d6a <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
 8010d6a:	b480      	push	{r7}
 8010d6c:	b085      	sub	sp, #20
 8010d6e:	af00      	add	r7, sp, #0
 8010d70:	6078      	str	r0, [r7, #4]
 8010d72:	6039      	str	r1, [r7, #0]
  struct igmp_group *group = netif_igmp_data(ifp);
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	6a1b      	ldr	r3, [r3, #32]
 8010d78:	60fb      	str	r3, [r7, #12]

  while (group != NULL) {
 8010d7a:	e00a      	b.n	8010d92 <igmp_lookfor_group+0x28>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	685a      	ldr	r2, [r3, #4]
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	429a      	cmp	r2, r3
 8010d86:	d101      	bne.n	8010d8c <igmp_lookfor_group+0x22>
      return group;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	e006      	b.n	8010d9a <igmp_lookfor_group+0x30>
    }
    group = group->next;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d1f1      	bne.n	8010d7c <igmp_lookfor_group+0x12>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
 8010d98:	2300      	movs	r3, #0
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	3714      	adds	r7, #20
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da4:	4770      	bx	lr

08010da6 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
 8010da6:	b580      	push	{r7, lr}
 8010da8:	b084      	sub	sp, #16
 8010daa:	af00      	add	r7, sp, #0
 8010dac:	6078      	str	r0, [r7, #4]
 8010dae:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	6a1b      	ldr	r3, [r3, #32]
 8010db4:	60bb      	str	r3, [r7, #8]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
 8010db6:	6839      	ldr	r1, [r7, #0]
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	f7ff ffd6 	bl	8010d6a <igmp_lookfor_group>
 8010dbe:	60f8      	str	r0, [r7, #12]
  if (group != NULL) {
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d001      	beq.n	8010dca <igmp_lookup_group+0x24>
    /* Group already exists. */
    return group;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	e02d      	b.n	8010e26 <igmp_lookup_group+0x80>
  }

  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 8010dca:	2006      	movs	r0, #6
 8010dcc:	f7f8 fd9a 	bl	8009904 <memp_malloc>
 8010dd0:	60f8      	str	r0, [r7, #12]
  if (group != NULL) {
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d025      	beq.n	8010e24 <igmp_lookup_group+0x7e>
    ip4_addr_set(&(group->group_address), addr);
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d002      	beq.n	8010de4 <igmp_lookup_group+0x3e>
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	e000      	b.n	8010de6 <igmp_lookup_group+0x40>
 8010de4:	2300      	movs	r3, #0
 8010de6:	68fa      	ldr	r2, [r7, #12]
 8010de8:	6053      	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	2200      	movs	r2, #0
 8010dee:	815a      	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	2200      	movs	r2, #0
 8010df4:	725a      	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	2200      	movs	r2, #0
 8010dfa:	721a      	strb	r2, [r3, #8]
    group->use                = 0;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	2200      	movs	r2, #0
 8010e00:	731a      	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */
    if (list_head == NULL) {
 8010e02:	68bb      	ldr	r3, [r7, #8]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d106      	bne.n	8010e16 <igmp_lookup_group+0x70>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
                  (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	601a      	str	r2, [r3, #0]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	68fa      	ldr	r2, [r7, #12]
 8010e12:	621a      	str	r2, [r3, #32]
 8010e14:	e006      	b.n	8010e24 <igmp_lookup_group+0x7e>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
                  (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
 8010e16:	68bb      	ldr	r3, [r7, #8]
 8010e18:	681a      	ldr	r2, [r3, #0]
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	601a      	str	r2, [r3, #0]
      list_head->next = group;
 8010e1e:	68bb      	ldr	r3, [r7, #8]
 8010e20:	68fa      	ldr	r2, [r7, #12]
 8010e22:	601a      	str	r2, [r3, #0]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group ? "" : "impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)ifp));

  return group;
 8010e24:	68fb      	ldr	r3, [r7, #12]
}
 8010e26:	4618      	mov	r0, r3
 8010e28:	3710      	adds	r7, #16
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	bd80      	pop	{r7, pc}
	...

08010e30 <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b088      	sub	sp, #32
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	60f8      	str	r0, [r7, #12]
 8010e38:	60b9      	str	r1, [r7, #8]
 8010e3a:	607a      	str	r2, [r7, #4]
  struct igmp_msg   *igmp;
  struct igmp_group *group;
  struct igmp_group *groupref;

  IGMP_STATS_INC(igmp.recv);
 8010e3c:	4b77      	ldr	r3, [pc, #476]	; (801101c <igmp_input+0x1ec>)
 8010e3e:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8010e42:	3301      	adds	r3, #1
 8010e44:	b29a      	uxth	r2, r3
 8010e46:	4b75      	ldr	r3, [pc, #468]	; (801101c <igmp_input+0x1ec>)
 8010e48:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	895b      	ldrh	r3, [r3, #10]
 8010e50:	2b07      	cmp	r3, #7
 8010e52:	d80b      	bhi.n	8010e6c <igmp_input+0x3c>
    pbuf_free(p);
 8010e54:	68f8      	ldr	r0, [r7, #12]
 8010e56:	f7f9 fb46 	bl	800a4e6 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
 8010e5a:	4b70      	ldr	r3, [pc, #448]	; (801101c <igmp_input+0x1ec>)
 8010e5c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8010e60:	3301      	adds	r3, #1
 8010e62:	b29a      	uxth	r2, r3
 8010e64:	4b6d      	ldr	r3, [pc, #436]	; (801101c <igmp_input+0x1ec>)
 8010e66:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
 8010e6a:	e0d3      	b.n	8011014 <igmp_input+0x1e4>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print_val(IGMP_DEBUG, ip4_current_header()->dest);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	685b      	ldr	r3, [r3, #4]
 8010e70:	61bb      	str	r3, [r7, #24]
  if (inet_chksum(igmp, p->len)) {
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	895b      	ldrh	r3, [r3, #10]
 8010e76:	4619      	mov	r1, r3
 8010e78:	69b8      	ldr	r0, [r7, #24]
 8010e7a:	f7f8 f907 	bl	800908c <inet_chksum>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d00b      	beq.n	8010e9c <igmp_input+0x6c>
    pbuf_free(p);
 8010e84:	68f8      	ldr	r0, [r7, #12]
 8010e86:	f7f9 fb2e 	bl	800a4e6 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
 8010e8a:	4b64      	ldr	r3, [pc, #400]	; (801101c <igmp_input+0x1ec>)
 8010e8c:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8010e90:	3301      	adds	r3, #1
 8010e92:	b29a      	uxth	r2, r3
 8010e94:	4b61      	ldr	r3, [pc, #388]	; (801101c <igmp_input+0x1ec>)
 8010e96:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
 8010e9a:	e0bb      	b.n	8011014 <igmp_input+0x1e4>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
 8010e9c:	6879      	ldr	r1, [r7, #4]
 8010e9e:	68b8      	ldr	r0, [r7, #8]
 8010ea0:	f7ff ff63 	bl	8010d6a <igmp_lookfor_group>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	617b      	str	r3, [r7, #20]

  /* If group can be found or create... */
  if (!group) {
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d10b      	bne.n	8010ec6 <igmp_input+0x96>
    pbuf_free(p);
 8010eae:	68f8      	ldr	r0, [r7, #12]
 8010eb0:	f7f9 fb19 	bl	800a4e6 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
 8010eb4:	4b59      	ldr	r3, [pc, #356]	; (801101c <igmp_input+0x1ec>)
 8010eb6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8010eba:	3301      	adds	r3, #1
 8010ebc:	b29a      	uxth	r2, r3
 8010ebe:	4b57      	ldr	r3, [pc, #348]	; (801101c <igmp_input+0x1ec>)
 8010ec0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
 8010ec4:	e0a6      	b.n	8011014 <igmp_input+0x1e4>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
 8010ec6:	69bb      	ldr	r3, [r7, #24]
 8010ec8:	781b      	ldrb	r3, [r3, #0]
 8010eca:	2b11      	cmp	r3, #17
 8010ecc:	d002      	beq.n	8010ed4 <igmp_input+0xa4>
 8010ece:	2b16      	cmp	r3, #22
 8010ed0:	d07c      	beq.n	8010fcc <igmp_input+0x19c>
 8010ed2:	e091      	b.n	8010ff8 <igmp_input+0x1c8>
    case IGMP_MEMB_QUERY:
      /* IGMP_MEMB_QUERY to the "all systems" address ? */
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681a      	ldr	r2, [r3, #0]
 8010ed8:	4b51      	ldr	r3, [pc, #324]	; (8011020 <igmp_input+0x1f0>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	429a      	cmp	r2, r3
 8010ede:	d136      	bne.n	8010f4e <igmp_input+0x11e>
 8010ee0:	69bb      	ldr	r3, [r7, #24]
 8010ee2:	3304      	adds	r3, #4
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d003      	beq.n	8010ef0 <igmp_input+0xc0>
 8010ee8:	69bb      	ldr	r3, [r7, #24]
 8010eea:	685b      	ldr	r3, [r3, #4]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d12e      	bne.n	8010f4e <igmp_input+0x11e>
        /* THIS IS THE GENERAL QUERY */
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: General IGMP_MEMB_QUERY on \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));

        if (igmp->igmp_maxresp == 0) {
 8010ef0:	69bb      	ldr	r3, [r7, #24]
 8010ef2:	785b      	ldrb	r3, [r3, #1]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d10b      	bne.n	8010f10 <igmp_input+0xe0>
          IGMP_STATS_INC(igmp.rx_v1);
 8010ef8:	4b48      	ldr	r3, [pc, #288]	; (801101c <igmp_input+0x1ec>)
 8010efa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8010efe:	3301      	adds	r3, #1
 8010f00:	b29a      	uxth	r2, r3
 8010f02:	4b46      	ldr	r3, [pc, #280]	; (801101c <igmp_input+0x1ec>)
 8010f04:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
          LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: got an all hosts query with time== 0 - this is V1 and not implemented - treat as v2\n"));
          igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 8010f08:	69bb      	ldr	r3, [r7, #24]
 8010f0a:	220a      	movs	r2, #10
 8010f0c:	705a      	strb	r2, [r3, #1]
 8010f0e:	e007      	b.n	8010f20 <igmp_input+0xf0>
        } else {
          IGMP_STATS_INC(igmp.rx_general);
 8010f10:	4b42      	ldr	r3, [pc, #264]	; (801101c <igmp_input+0x1ec>)
 8010f12:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8010f16:	3301      	adds	r3, #1
 8010f18:	b29a      	uxth	r2, r3
 8010f1a:	4b40      	ldr	r3, [pc, #256]	; (801101c <igmp_input+0x1ec>)
 8010f1c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
        }

        groupref = netif_igmp_data(inp);
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	6a1b      	ldr	r3, [r3, #32]
 8010f24:	61fb      	str	r3, [r7, #28]

        /* Do not send messages on the all systems group address! */
        /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
        if (groupref != NULL) {
 8010f26:	69fb      	ldr	r3, [r7, #28]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d00c      	beq.n	8010f46 <igmp_input+0x116>
          groupref = groupref->next;
 8010f2c:	69fb      	ldr	r3, [r7, #28]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	61fb      	str	r3, [r7, #28]
        }

        while (groupref) {
 8010f32:	e008      	b.n	8010f46 <igmp_input+0x116>
          igmp_delaying_member(groupref, igmp->igmp_maxresp);
 8010f34:	69bb      	ldr	r3, [r7, #24]
 8010f36:	785b      	ldrb	r3, [r3, #1]
 8010f38:	4619      	mov	r1, r3
 8010f3a:	69f8      	ldr	r0, [r7, #28]
 8010f3c:	f000 f8e3 	bl	8011106 <igmp_delaying_member>
          groupref = groupref->next;
 8010f40:	69fb      	ldr	r3, [r7, #28]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	61fb      	str	r3, [r7, #28]
        while (groupref) {
 8010f46:	69fb      	ldr	r3, [r7, #28]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d1f3      	bne.n	8010f34 <igmp_input+0x104>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8010f4c:	e03d      	b.n	8010fca <igmp_input+0x19a>
        }
      } else {
        /* IGMP_MEMB_QUERY to a specific group ? */
        if (!ip4_addr_isany(&igmp->igmp_group_address)) {
 8010f4e:	69bb      	ldr	r3, [r7, #24]
 8010f50:	3304      	adds	r3, #4
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d030      	beq.n	8010fb8 <igmp_input+0x188>
 8010f56:	69bb      	ldr	r3, [r7, #24]
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d02c      	beq.n	8010fb8 <igmp_input+0x188>
          LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_MEMB_QUERY to a specific group "));
          ip4_addr_debug_print_val(IGMP_DEBUG, igmp->igmp_group_address);
          if (ip4_addr_cmp(dest, &allsystems)) {
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681a      	ldr	r2, [r3, #0]
 8010f62:	4b2f      	ldr	r3, [pc, #188]	; (8011020 <igmp_input+0x1f0>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	429a      	cmp	r2, r3
 8010f68:	d10a      	bne.n	8010f80 <igmp_input+0x150>
            ip4_addr_t groupaddr;
            LWIP_DEBUGF(IGMP_DEBUG, (" using \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
            /* we first need to re-look for the group since we used dest last time */
            ip4_addr_copy(groupaddr, igmp->igmp_group_address);
 8010f6a:	69bb      	ldr	r3, [r7, #24]
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	613b      	str	r3, [r7, #16]
            group = igmp_lookfor_group(inp, &groupaddr);
 8010f70:	f107 0310 	add.w	r3, r7, #16
 8010f74:	4619      	mov	r1, r3
 8010f76:	68b8      	ldr	r0, [r7, #8]
 8010f78:	f7ff fef7 	bl	8010d6a <igmp_lookfor_group>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	617b      	str	r3, [r7, #20]
          } else {
            LWIP_DEBUGF(IGMP_DEBUG, (" with the group address as destination [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
          }

          if (group != NULL) {
 8010f80:	697b      	ldr	r3, [r7, #20]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d00f      	beq.n	8010fa6 <igmp_input+0x176>
            IGMP_STATS_INC(igmp.rx_group);
 8010f86:	4b25      	ldr	r3, [pc, #148]	; (801101c <igmp_input+0x1ec>)
 8010f88:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8010f8c:	3301      	adds	r3, #1
 8010f8e:	b29a      	uxth	r2, r3
 8010f90:	4b22      	ldr	r3, [pc, #136]	; (801101c <igmp_input+0x1ec>)
 8010f92:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            igmp_delaying_member(group, igmp->igmp_maxresp);
 8010f96:	697a      	ldr	r2, [r7, #20]
 8010f98:	69bb      	ldr	r3, [r7, #24]
 8010f9a:	785b      	ldrb	r3, [r3, #1]
 8010f9c:	4619      	mov	r1, r3
 8010f9e:	4610      	mov	r0, r2
 8010fa0:	f000 f8b1 	bl	8011106 <igmp_delaying_member>
          if (group != NULL) {
 8010fa4:	e011      	b.n	8010fca <igmp_input+0x19a>
          } else {
            IGMP_STATS_INC(igmp.drop);
 8010fa6:	4b1d      	ldr	r3, [pc, #116]	; (801101c <igmp_input+0x1ec>)
 8010fa8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8010fac:	3301      	adds	r3, #1
 8010fae:	b29a      	uxth	r2, r3
 8010fb0:	4b1a      	ldr	r3, [pc, #104]	; (801101c <igmp_input+0x1ec>)
 8010fb2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
          if (group != NULL) {
 8010fb6:	e008      	b.n	8010fca <igmp_input+0x19a>
          }
        } else {
          IGMP_STATS_INC(igmp.proterr);
 8010fb8:	4b18      	ldr	r3, [pc, #96]	; (801101c <igmp_input+0x1ec>)
 8010fba:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8010fbe:	3301      	adds	r3, #1
 8010fc0:	b29a      	uxth	r2, r3
 8010fc2:	4b16      	ldr	r3, [pc, #88]	; (801101c <igmp_input+0x1ec>)
 8010fc4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
        }
      }
      break;
 8010fc8:	e020      	b.n	801100c <igmp_input+0x1dc>
 8010fca:	e01f      	b.n	801100c <igmp_input+0x1dc>
    case IGMP_V2_MEMB_REPORT:
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));
      IGMP_STATS_INC(igmp.rx_report);
 8010fcc:	4b13      	ldr	r3, [pc, #76]	; (801101c <igmp_input+0x1ec>)
 8010fce:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8010fd2:	3301      	adds	r3, #1
 8010fd4:	b29a      	uxth	r2, r3
 8010fd6:	4b11      	ldr	r3, [pc, #68]	; (801101c <igmp_input+0x1ec>)
 8010fd8:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
      if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 8010fdc:	697b      	ldr	r3, [r7, #20]
 8010fde:	7a5b      	ldrb	r3, [r3, #9]
 8010fe0:	2b01      	cmp	r3, #1
 8010fe2:	d112      	bne.n	801100a <igmp_input+0x1da>
        /* This is on a specific group we have already looked up */
        group->timer = 0; /* stopped */
 8010fe4:	697b      	ldr	r3, [r7, #20]
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	815a      	strh	r2, [r3, #10]
        group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8010fea:	697b      	ldr	r3, [r7, #20]
 8010fec:	2202      	movs	r2, #2
 8010fee:	725a      	strb	r2, [r3, #9]
        group->last_reporter_flag = 0;
 8010ff0:	697b      	ldr	r3, [r7, #20]
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	721a      	strb	r2, [r3, #8]
      }
      break;
 8010ff6:	e008      	b.n	801100a <igmp_input+0x1da>
    default:
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
                               igmp->igmp_msgtype, group->group_state, (void *)&group, (void *)inp));
      IGMP_STATS_INC(igmp.proterr);
 8010ff8:	4b08      	ldr	r3, [pc, #32]	; (801101c <igmp_input+0x1ec>)
 8010ffa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8010ffe:	3301      	adds	r3, #1
 8011000:	b29a      	uxth	r2, r3
 8011002:	4b06      	ldr	r3, [pc, #24]	; (801101c <igmp_input+0x1ec>)
 8011004:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      break;
 8011008:	e000      	b.n	801100c <igmp_input+0x1dc>
      break;
 801100a:	bf00      	nop
  }

  pbuf_free(p);
 801100c:	68f8      	ldr	r0, [r7, #12]
 801100e:	f7f9 fa6a 	bl	800a4e6 <pbuf_free>
  return;
 8011012:	bf00      	nop
}
 8011014:	3720      	adds	r7, #32
 8011016:	46bd      	mov	sp, r7
 8011018:	bd80      	pop	{r7, pc}
 801101a:	bf00      	nop
 801101c:	200080c8 	.word	0x200080c8
 8011020:	2000831c 	.word	0x2000831c

08011024 <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b082      	sub	sp, #8
 8011028:	af00      	add	r7, sp, #0
  struct netif *netif;

  NETIF_FOREACH(netif) {
 801102a:	4b15      	ldr	r3, [pc, #84]	; (8011080 <igmp_tmr+0x5c>)
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	607b      	str	r3, [r7, #4]
 8011030:	e01e      	b.n	8011070 <igmp_tmr+0x4c>
    struct igmp_group *group = netif_igmp_data(netif);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	6a1b      	ldr	r3, [r3, #32]
 8011036:	603b      	str	r3, [r7, #0]

    while (group != NULL) {
 8011038:	e014      	b.n	8011064 <igmp_tmr+0x40>
      if (group->timer > 0) {
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	895b      	ldrh	r3, [r3, #10]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d00d      	beq.n	801105e <igmp_tmr+0x3a>
        group->timer--;
 8011042:	683b      	ldr	r3, [r7, #0]
 8011044:	895b      	ldrh	r3, [r3, #10]
 8011046:	3b01      	subs	r3, #1
 8011048:	b29a      	uxth	r2, r3
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	815a      	strh	r2, [r3, #10]
        if (group->timer == 0) {
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	895b      	ldrh	r3, [r3, #10]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d103      	bne.n	801105e <igmp_tmr+0x3a>
          igmp_timeout(netif, group);
 8011056:	6839      	ldr	r1, [r7, #0]
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f000 f813 	bl	8011084 <igmp_timeout>
        }
      }
      group = group->next;
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	603b      	str	r3, [r7, #0]
    while (group != NULL) {
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d1e7      	bne.n	801103a <igmp_tmr+0x16>
  NETIF_FOREACH(netif) {
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	607b      	str	r3, [r7, #4]
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d1dd      	bne.n	8011032 <igmp_tmr+0xe>
    }
  }
}
 8011076:	bf00      	nop
 8011078:	bf00      	nop
 801107a:	3708      	adds	r7, #8
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}
 8011080:	200080bc 	.word	0x200080bc

08011084 <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b082      	sub	sp, #8
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
 801108c:	6039      	str	r1, [r7, #0]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	7a5b      	ldrb	r3, [r3, #9]
 8011092:	2b01      	cmp	r3, #1
 8011094:	d115      	bne.n	80110c2 <igmp_timeout+0x3e>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
 8011096:	683b      	ldr	r3, [r7, #0]
 8011098:	685a      	ldr	r2, [r3, #4]
 801109a:	4b0c      	ldr	r3, [pc, #48]	; (80110cc <igmp_timeout+0x48>)
 801109c:	681b      	ldr	r3, [r3, #0]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 801109e:	429a      	cmp	r2, r3
 80110a0:	d00f      	beq.n	80110c2 <igmp_timeout+0x3e>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print_val(IGMP_DEBUG, group->group_address);
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	2202      	movs	r2, #2
 80110a6:	725a      	strb	r2, [r3, #9]

    IGMP_STATS_INC(igmp.tx_report);
 80110a8:	4b09      	ldr	r3, [pc, #36]	; (80110d0 <igmp_timeout+0x4c>)
 80110aa:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 80110ae:	3301      	adds	r3, #1
 80110b0:	b29a      	uxth	r2, r3
 80110b2:	4b07      	ldr	r3, [pc, #28]	; (80110d0 <igmp_timeout+0x4c>)
 80110b4:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 80110b8:	2216      	movs	r2, #22
 80110ba:	6839      	ldr	r1, [r7, #0]
 80110bc:	6878      	ldr	r0, [r7, #4]
 80110be:	f000 f873 	bl	80111a8 <igmp_send>
  }
}
 80110c2:	bf00      	nop
 80110c4:	3708      	adds	r7, #8
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}
 80110ca:	bf00      	nop
 80110cc:	2000831c 	.word	0x2000831c
 80110d0:	200080c8 	.word	0x200080c8

080110d4 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
 80110d4:	b480      	push	{r7}
 80110d6:	b083      	sub	sp, #12
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
 80110dc:	460b      	mov	r3, r1
 80110de:	70fb      	strb	r3, [r7, #3]
#ifdef LWIP_RAND
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
 80110e0:	78fb      	ldrb	r3, [r7, #3]
 80110e2:	085b      	lsrs	r3, r3, #1
 80110e4:	b2db      	uxtb	r3, r3
 80110e6:	b29a      	uxth	r2, r3
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	815a      	strh	r2, [r3, #10]
#endif /* LWIP_RAND */

  if (group->timer == 0) {
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	895b      	ldrh	r3, [r3, #10]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d102      	bne.n	80110fa <igmp_start_timer+0x26>
    group->timer = 1;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2201      	movs	r2, #1
 80110f8:	815a      	strh	r2, [r3, #10]
  }
}
 80110fa:	bf00      	nop
 80110fc:	370c      	adds	r7, #12
 80110fe:	46bd      	mov	sp, r7
 8011100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011104:	4770      	bx	lr

08011106 <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
 8011106:	b580      	push	{r7, lr}
 8011108:	b082      	sub	sp, #8
 801110a:	af00      	add	r7, sp, #0
 801110c:	6078      	str	r0, [r7, #4]
 801110e:	460b      	mov	r3, r1
 8011110:	70fb      	strb	r3, [r7, #3]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	7a5b      	ldrb	r3, [r3, #9]
 8011116:	2b02      	cmp	r3, #2
 8011118:	d00d      	beq.n	8011136 <igmp_delaying_member+0x30>
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	7a5b      	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 801111e:	2b01      	cmp	r3, #1
 8011120:	d111      	bne.n	8011146 <igmp_delaying_member+0x40>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	895b      	ldrh	r3, [r3, #10]
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8011126:	2b00      	cmp	r3, #0
 8011128:	d005      	beq.n	8011136 <igmp_delaying_member+0x30>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 801112a:	78fb      	ldrb	r3, [r7, #3]
 801112c:	b29a      	uxth	r2, r3
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	895b      	ldrh	r3, [r3, #10]
 8011132:	429a      	cmp	r2, r3
 8011134:	d207      	bcs.n	8011146 <igmp_delaying_member+0x40>
    igmp_start_timer(group, maxresp);
 8011136:	78fb      	ldrb	r3, [r7, #3]
 8011138:	4619      	mov	r1, r3
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f7ff ffca 	bl	80110d4 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2201      	movs	r2, #1
 8011144:	725a      	strb	r2, [r3, #9]
  }
}
 8011146:	bf00      	nop
 8011148:	3708      	adds	r7, #8
 801114a:	46bd      	mov	sp, r7
 801114c:	bd80      	pop	{r7, pc}
	...

08011150 <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b08c      	sub	sp, #48	; 0x30
 8011154:	af06      	add	r7, sp, #24
 8011156:	60f8      	str	r0, [r7, #12]
 8011158:	60b9      	str	r1, [r7, #8]
 801115a:	607a      	str	r2, [r7, #4]
 801115c:	603b      	str	r3, [r7, #0]
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
 801115e:	f240 4394 	movw	r3, #1172	; 0x494
 8011162:	82bb      	strh	r3, [r7, #20]
  ra[1] = 0x0000; /* Router shall examine packet */
 8011164:	2300      	movs	r3, #0
 8011166:	82fb      	strh	r3, [r7, #22]
  IGMP_STATS_INC(igmp.xmit);
 8011168:	4b0e      	ldr	r3, [pc, #56]	; (80111a4 <igmp_ip_output_if+0x54>)
 801116a:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 801116e:	3301      	adds	r3, #1
 8011170:	b29a      	uxth	r2, r3
 8011172:	4b0c      	ldr	r3, [pc, #48]	; (80111a4 <igmp_ip_output_if+0x54>)
 8011174:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 8011178:	2304      	movs	r3, #4
 801117a:	9304      	str	r3, [sp, #16]
 801117c:	f107 0314 	add.w	r3, r7, #20
 8011180:	9303      	str	r3, [sp, #12]
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	9302      	str	r3, [sp, #8]
 8011186:	2302      	movs	r3, #2
 8011188:	9301      	str	r3, [sp, #4]
 801118a:	2300      	movs	r3, #0
 801118c:	9300      	str	r3, [sp, #0]
 801118e:	2301      	movs	r3, #1
 8011190:	687a      	ldr	r2, [r7, #4]
 8011192:	68b9      	ldr	r1, [r7, #8]
 8011194:	68f8      	ldr	r0, [r7, #12]
 8011196:	f000 faf4 	bl	8011782 <ip4_output_if_opt>
 801119a:	4603      	mov	r3, r0
}
 801119c:	4618      	mov	r0, r3
 801119e:	3718      	adds	r7, #24
 80111a0:	46bd      	mov	sp, r7
 80111a2:	bd80      	pop	{r7, pc}
 80111a4:	200080c8 	.word	0x200080c8

080111a8 <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b088      	sub	sp, #32
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	60f8      	str	r0, [r7, #12]
 80111b0:	60b9      	str	r1, [r7, #8]
 80111b2:	4613      	mov	r3, r2
 80111b4:	71fb      	strb	r3, [r7, #7]
  struct pbuf     *p    = NULL;
 80111b6:	2300      	movs	r3, #0
 80111b8:	61bb      	str	r3, [r7, #24]
  struct igmp_msg *igmp = NULL;
 80111ba:	2300      	movs	r3, #0
 80111bc:	617b      	str	r3, [r7, #20]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
 80111be:	4b2e      	ldr	r3, [pc, #184]	; (8011278 <igmp_send+0xd0>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	613b      	str	r3, [r7, #16]
  ip4_addr_t  *dest = NULL;
 80111c4:	2300      	movs	r3, #0
 80111c6:	61fb      	str	r3, [r7, #28]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 80111c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80111cc:	2108      	movs	r1, #8
 80111ce:	2036      	movs	r0, #54	; 0x36
 80111d0:	f7f8 ff42 	bl	800a058 <pbuf_alloc>
 80111d4:	61b8      	str	r0, [r7, #24]

  if (p) {
 80111d6:	69bb      	ldr	r3, [r7, #24]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d041      	beq.n	8011260 <igmp_send+0xb8>
    igmp = (struct igmp_msg *)p->payload;
 80111dc:	69bb      	ldr	r3, [r7, #24]
 80111de:	685b      	ldr	r3, [r3, #4]
 80111e0:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
                (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	3304      	adds	r3, #4
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	613b      	str	r3, [r7, #16]

    if (type == IGMP_V2_MEMB_REPORT) {
 80111ea:	79fb      	ldrb	r3, [r7, #7]
 80111ec:	2b16      	cmp	r3, #22
 80111ee:	d10a      	bne.n	8011206 <igmp_send+0x5e>
      dest = &(group->group_address);
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	3304      	adds	r3, #4
 80111f4:	61fb      	str	r3, [r7, #28]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 80111f6:	68bb      	ldr	r3, [r7, #8]
 80111f8:	685a      	ldr	r2, [r3, #4]
 80111fa:	697b      	ldr	r3, [r7, #20]
 80111fc:	605a      	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	2201      	movs	r2, #1
 8011202:	721a      	strb	r2, [r3, #8]
 8011204:	e008      	b.n	8011218 <igmp_send+0x70>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
 8011206:	79fb      	ldrb	r3, [r7, #7]
 8011208:	2b17      	cmp	r3, #23
 801120a:	d105      	bne.n	8011218 <igmp_send+0x70>
        dest = &allrouters;
 801120c:	4b1b      	ldr	r3, [pc, #108]	; (801127c <igmp_send+0xd4>)
 801120e:	61fb      	str	r3, [r7, #28]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 8011210:	68bb      	ldr	r3, [r7, #8]
 8011212:	685a      	ldr	r2, [r3, #4]
 8011214:	697b      	ldr	r3, [r7, #20]
 8011216:	605a      	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
 8011218:	79fb      	ldrb	r3, [r7, #7]
 801121a:	2b16      	cmp	r3, #22
 801121c:	d002      	beq.n	8011224 <igmp_send+0x7c>
 801121e:	79fb      	ldrb	r3, [r7, #7]
 8011220:	2b17      	cmp	r3, #23
 8011222:	d119      	bne.n	8011258 <igmp_send+0xb0>
      igmp->igmp_msgtype  = type;
 8011224:	697b      	ldr	r3, [r7, #20]
 8011226:	79fa      	ldrb	r2, [r7, #7]
 8011228:	701a      	strb	r2, [r3, #0]
      igmp->igmp_maxresp  = 0;
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	2200      	movs	r2, #0
 801122e:	705a      	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
 8011230:	697b      	ldr	r3, [r7, #20]
 8011232:	2200      	movs	r2, #0
 8011234:	709a      	strb	r2, [r3, #2]
 8011236:	2200      	movs	r2, #0
 8011238:	70da      	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 801123a:	2108      	movs	r1, #8
 801123c:	6978      	ldr	r0, [r7, #20]
 801123e:	f7f7 ff25 	bl	800908c <inet_chksum>
 8011242:	4603      	mov	r3, r0
 8011244:	461a      	mov	r2, r3
 8011246:	697b      	ldr	r3, [r7, #20]
 8011248:	805a      	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
 801124a:	f107 0110 	add.w	r1, r7, #16
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	69fa      	ldr	r2, [r7, #28]
 8011252:	69b8      	ldr	r0, [r7, #24]
 8011254:	f7ff ff7c 	bl	8011150 <igmp_ip_output_if>
    }

    pbuf_free(p);
 8011258:	69b8      	ldr	r0, [r7, #24]
 801125a:	f7f9 f944 	bl	800a4e6 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 801125e:	e007      	b.n	8011270 <igmp_send+0xc8>
    IGMP_STATS_INC(igmp.memerr);
 8011260:	4b07      	ldr	r3, [pc, #28]	; (8011280 <igmp_send+0xd8>)
 8011262:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8011266:	3301      	adds	r3, #1
 8011268:	b29a      	uxth	r2, r3
 801126a:	4b05      	ldr	r3, [pc, #20]	; (8011280 <igmp_send+0xd8>)
 801126c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
}
 8011270:	bf00      	nop
 8011272:	3720      	adds	r7, #32
 8011274:	46bd      	mov	sp, r7
 8011276:	bd80      	pop	{r7, pc}
 8011278:	08016ca0 	.word	0x08016ca0
 801127c:	20008320 	.word	0x20008320
 8011280:	200080c8 	.word	0x200080c8

08011284 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011284:	b480      	push	{r7}
 8011286:	b085      	sub	sp, #20
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011294:	2be0      	cmp	r3, #224	; 0xe0
 8011296:	d106      	bne.n	80112a6 <ip4_route+0x22>
 8011298:	4b3a      	ldr	r3, [pc, #232]	; (8011384 <ip4_route+0x100>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d002      	beq.n	80112a6 <ip4_route+0x22>
    return ip4_default_multicast_netif;
 80112a0:	4b38      	ldr	r3, [pc, #224]	; (8011384 <ip4_route+0x100>)
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	e068      	b.n	8011378 <ip4_route+0xf4>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80112a6:	4b38      	ldr	r3, [pc, #224]	; (8011388 <ip4_route+0x104>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	60fb      	str	r3, [r7, #12]
 80112ac:	e036      	b.n	801131c <ip4_route+0x98>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80112b4:	f003 0301 	and.w	r3, r3, #1
 80112b8:	b2db      	uxtb	r3, r3
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d02b      	beq.n	8011316 <ip4_route+0x92>
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80112c4:	089b      	lsrs	r3, r3, #2
 80112c6:	f003 0301 	and.w	r3, r3, #1
 80112ca:	b2db      	uxtb	r3, r3
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d022      	beq.n	8011316 <ip4_route+0x92>
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	3304      	adds	r3, #4
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d01d      	beq.n	8011316 <ip4_route+0x92>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681a      	ldr	r2, [r3, #0]
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	3304      	adds	r3, #4
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	405a      	eors	r2, r3
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	3308      	adds	r3, #8
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	4013      	ands	r3, r2
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d101      	bne.n	80112f6 <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	e040      	b.n	8011378 <ip4_route+0xf4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80112fc:	f003 0302 	and.w	r3, r3, #2
 8011300:	2b00      	cmp	r3, #0
 8011302:	d108      	bne.n	8011316 <ip4_route+0x92>
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681a      	ldr	r2, [r3, #0]
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	330c      	adds	r3, #12
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	429a      	cmp	r2, r3
 8011310:	d101      	bne.n	8011316 <ip4_route+0x92>
        /* return netif on which to forward IP packet */
        return netif;
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	e030      	b.n	8011378 <ip4_route+0xf4>
  NETIF_FOREACH(netif) {
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	60fb      	str	r3, [r7, #12]
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d1c5      	bne.n	80112ae <ip4_route+0x2a>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011322:	4b1a      	ldr	r3, [pc, #104]	; (801138c <ip4_route+0x108>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d01a      	beq.n	8011360 <ip4_route+0xdc>
 801132a:	4b18      	ldr	r3, [pc, #96]	; (801138c <ip4_route+0x108>)
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011332:	f003 0301 	and.w	r3, r3, #1
 8011336:	2b00      	cmp	r3, #0
 8011338:	d012      	beq.n	8011360 <ip4_route+0xdc>
 801133a:	4b14      	ldr	r3, [pc, #80]	; (801138c <ip4_route+0x108>)
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011342:	f003 0304 	and.w	r3, r3, #4
 8011346:	2b00      	cmp	r3, #0
 8011348:	d00a      	beq.n	8011360 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801134a:	4b10      	ldr	r3, [pc, #64]	; (801138c <ip4_route+0x108>)
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	3304      	adds	r3, #4
 8011350:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011352:	2b00      	cmp	r3, #0
 8011354:	d004      	beq.n	8011360 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	b2db      	uxtb	r3, r3
 801135c:	2b7f      	cmp	r3, #127	; 0x7f
 801135e:	d109      	bne.n	8011374 <ip4_route+0xf0>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 8011360:	4b0b      	ldr	r3, [pc, #44]	; (8011390 <ip4_route+0x10c>)
 8011362:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011366:	3301      	adds	r3, #1
 8011368:	b29a      	uxth	r2, r3
 801136a:	4b09      	ldr	r3, [pc, #36]	; (8011390 <ip4_route+0x10c>)
 801136c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011370:	2300      	movs	r3, #0
 8011372:	e001      	b.n	8011378 <ip4_route+0xf4>
  }

  return netif_default;
 8011374:	4b05      	ldr	r3, [pc, #20]	; (801138c <ip4_route+0x108>)
 8011376:	681b      	ldr	r3, [r3, #0]
}
 8011378:	4618      	mov	r0, r3
 801137a:	3714      	adds	r7, #20
 801137c:	46bd      	mov	sp, r7
 801137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011382:	4770      	bx	lr
 8011384:	20008328 	.word	0x20008328
 8011388:	200080bc 	.word	0x200080bc
 801138c:	200080c0 	.word	0x200080c0
 8011390:	200080c8 	.word	0x200080c8

08011394 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b082      	sub	sp, #8
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80113a2:	f003 0301 	and.w	r3, r3, #1
 80113a6:	b2db      	uxtb	r3, r3
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d016      	beq.n	80113da <ip4_input_accept+0x46>
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	3304      	adds	r3, #4
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d011      	beq.n	80113da <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80113b6:	4b0b      	ldr	r3, [pc, #44]	; (80113e4 <ip4_input_accept+0x50>)
 80113b8:	695a      	ldr	r2, [r3, #20]
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	3304      	adds	r3, #4
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	429a      	cmp	r2, r3
 80113c2:	d008      	beq.n	80113d6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80113c4:	4b07      	ldr	r3, [pc, #28]	; (80113e4 <ip4_input_accept+0x50>)
 80113c6:	695b      	ldr	r3, [r3, #20]
 80113c8:	6879      	ldr	r1, [r7, #4]
 80113ca:	4618      	mov	r0, r3
 80113cc:	f000 fb7e 	bl	8011acc <ip4_addr_isbroadcast_u32>
 80113d0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d001      	beq.n	80113da <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80113d6:	2301      	movs	r3, #1
 80113d8:	e000      	b.n	80113dc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80113da:	2300      	movs	r3, #0
}
 80113dc:	4618      	mov	r0, r3
 80113de:	3708      	adds	r7, #8
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd80      	pop	{r7, pc}
 80113e4:	20000ee4 	.word	0x20000ee4

080113e8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b088      	sub	sp, #32
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
 80113f0:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80113f2:	2301      	movs	r3, #1
 80113f4:	60fb      	str	r3, [r7, #12]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 80113f6:	4b9f      	ldr	r3, [pc, #636]	; (8011674 <ip4_input+0x28c>)
 80113f8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80113fc:	3301      	adds	r3, #1
 80113fe:	b29a      	uxth	r2, r3
 8011400:	4b9c      	ldr	r3, [pc, #624]	; (8011674 <ip4_input+0x28c>)
 8011402:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	685b      	ldr	r3, [r3, #4]
 801140a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	781b      	ldrb	r3, [r3, #0]
 8011410:	091b      	lsrs	r3, r3, #4
 8011412:	b2db      	uxtb	r3, r3
 8011414:	2b04      	cmp	r3, #4
 8011416:	d014      	beq.n	8011442 <ip4_input+0x5a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f7f9 f864 	bl	800a4e6 <pbuf_free>
    IP_STATS_INC(ip.err);
 801141e:	4b95      	ldr	r3, [pc, #596]	; (8011674 <ip4_input+0x28c>)
 8011420:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011424:	3301      	adds	r3, #1
 8011426:	b29a      	uxth	r2, r3
 8011428:	4b92      	ldr	r3, [pc, #584]	; (8011674 <ip4_input+0x28c>)
 801142a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 801142e:	4b91      	ldr	r3, [pc, #580]	; (8011674 <ip4_input+0x28c>)
 8011430:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011434:	3301      	adds	r3, #1
 8011436:	b29a      	uxth	r2, r3
 8011438:	4b8e      	ldr	r3, [pc, #568]	; (8011674 <ip4_input+0x28c>)
 801143a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801143e:	2300      	movs	r3, #0
 8011440:	e177      	b.n	8011732 <ip4_input+0x34a>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	781b      	ldrb	r3, [r3, #0]
 8011446:	f003 030f 	and.w	r3, r3, #15
 801144a:	b2db      	uxtb	r3, r3
 801144c:	009b      	lsls	r3, r3, #2
 801144e:	b2db      	uxtb	r3, r3
 8011450:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	885b      	ldrh	r3, [r3, #2]
 8011456:	b29b      	uxth	r3, r3
 8011458:	4618      	mov	r0, r3
 801145a:	f7f7 fccf 	bl	8008dfc <lwip_htons>
 801145e:	4603      	mov	r3, r0
 8011460:	837b      	strh	r3, [r7, #26]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	891b      	ldrh	r3, [r3, #8]
 8011466:	8b7a      	ldrh	r2, [r7, #26]
 8011468:	429a      	cmp	r2, r3
 801146a:	d204      	bcs.n	8011476 <ip4_input+0x8e>
    pbuf_realloc(p, iphdr_len);
 801146c:	8b7b      	ldrh	r3, [r7, #26]
 801146e:	4619      	mov	r1, r3
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f7f8 fefe 	bl	800a272 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	895b      	ldrh	r3, [r3, #10]
 801147a:	8a7a      	ldrh	r2, [r7, #18]
 801147c:	429a      	cmp	r2, r3
 801147e:	d807      	bhi.n	8011490 <ip4_input+0xa8>
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	891b      	ldrh	r3, [r3, #8]
 8011484:	8b7a      	ldrh	r2, [r7, #26]
 8011486:	429a      	cmp	r2, r3
 8011488:	d802      	bhi.n	8011490 <ip4_input+0xa8>
 801148a:	8a7b      	ldrh	r3, [r7, #18]
 801148c:	2b13      	cmp	r3, #19
 801148e:	d814      	bhi.n	80114ba <ip4_input+0xd2>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011490:	6878      	ldr	r0, [r7, #4]
 8011492:	f7f9 f828 	bl	800a4e6 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 8011496:	4b77      	ldr	r3, [pc, #476]	; (8011674 <ip4_input+0x28c>)
 8011498:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801149c:	3301      	adds	r3, #1
 801149e:	b29a      	uxth	r2, r3
 80114a0:	4b74      	ldr	r3, [pc, #464]	; (8011674 <ip4_input+0x28c>)
 80114a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 80114a6:	4b73      	ldr	r3, [pc, #460]	; (8011674 <ip4_input+0x28c>)
 80114a8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80114ac:	3301      	adds	r3, #1
 80114ae:	b29a      	uxth	r2, r3
 80114b0:	4b70      	ldr	r3, [pc, #448]	; (8011674 <ip4_input+0x28c>)
 80114b2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80114b6:	2300      	movs	r3, #0
 80114b8:	e13b      	b.n	8011732 <ip4_input+0x34a>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80114ba:	697b      	ldr	r3, [r7, #20]
 80114bc:	691b      	ldr	r3, [r3, #16]
 80114be:	4a6e      	ldr	r2, [pc, #440]	; (8011678 <ip4_input+0x290>)
 80114c0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80114c2:	697b      	ldr	r3, [r7, #20]
 80114c4:	68db      	ldr	r3, [r3, #12]
 80114c6:	4a6c      	ldr	r2, [pc, #432]	; (8011678 <ip4_input+0x290>)
 80114c8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80114ca:	4b6b      	ldr	r3, [pc, #428]	; (8011678 <ip4_input+0x290>)
 80114cc:	695b      	ldr	r3, [r3, #20]
 80114ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80114d2:	2be0      	cmp	r3, #224	; 0xe0
 80114d4:	d120      	bne.n	8011518 <ip4_input+0x130>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80114dc:	f003 0320 	and.w	r3, r3, #32
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d016      	beq.n	8011512 <ip4_input+0x12a>
 80114e4:	4965      	ldr	r1, [pc, #404]	; (801167c <ip4_input+0x294>)
 80114e6:	6838      	ldr	r0, [r7, #0]
 80114e8:	f7ff fc3f 	bl	8010d6a <igmp_lookfor_group>
 80114ec:	4603      	mov	r3, r0
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d00f      	beq.n	8011512 <ip4_input+0x12a>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
 80114f2:	4b63      	ldr	r3, [pc, #396]	; (8011680 <ip4_input+0x298>)
 80114f4:	60bb      	str	r3, [r7, #8]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 80114f6:	4b60      	ldr	r3, [pc, #384]	; (8011678 <ip4_input+0x290>)
 80114f8:	695a      	ldr	r2, [r3, #20]
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	429a      	cmp	r2, r3
 80114fe:	d105      	bne.n	801150c <ip4_input+0x124>
          ip4_addr_isany(ip4_current_src_addr())) {
 8011500:	4b5d      	ldr	r3, [pc, #372]	; (8011678 <ip4_input+0x290>)
 8011502:	691b      	ldr	r3, [r3, #16]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 8011504:	2b00      	cmp	r3, #0
 8011506:	d101      	bne.n	801150c <ip4_input+0x124>
        check_ip_src = 0;
 8011508:	2300      	movs	r3, #0
 801150a:	60fb      	str	r3, [r7, #12]
      }
      netif = inp;
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	61fb      	str	r3, [r7, #28]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 8011510:	e02a      	b.n	8011568 <ip4_input+0x180>
    } else {
      netif = NULL;
 8011512:	2300      	movs	r3, #0
 8011514:	61fb      	str	r3, [r7, #28]
 8011516:	e027      	b.n	8011568 <ip4_input+0x180>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011518:	6838      	ldr	r0, [r7, #0]
 801151a:	f7ff ff3b 	bl	8011394 <ip4_input_accept>
 801151e:	4603      	mov	r3, r0
 8011520:	2b00      	cmp	r3, #0
 8011522:	d002      	beq.n	801152a <ip4_input+0x142>
      netif = inp;
 8011524:	683b      	ldr	r3, [r7, #0]
 8011526:	61fb      	str	r3, [r7, #28]
 8011528:	e01e      	b.n	8011568 <ip4_input+0x180>
    } else {
      netif = NULL;
 801152a:	2300      	movs	r3, #0
 801152c:	61fb      	str	r3, [r7, #28]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801152e:	4b52      	ldr	r3, [pc, #328]	; (8011678 <ip4_input+0x290>)
 8011530:	695b      	ldr	r3, [r3, #20]
 8011532:	b2db      	uxtb	r3, r3
 8011534:	2b7f      	cmp	r3, #127	; 0x7f
 8011536:	d017      	beq.n	8011568 <ip4_input+0x180>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011538:	4b52      	ldr	r3, [pc, #328]	; (8011684 <ip4_input+0x29c>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	61fb      	str	r3, [r7, #28]
 801153e:	e00e      	b.n	801155e <ip4_input+0x176>
          if (netif == inp) {
 8011540:	69fa      	ldr	r2, [r7, #28]
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	429a      	cmp	r2, r3
 8011546:	d006      	beq.n	8011556 <ip4_input+0x16e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011548:	69f8      	ldr	r0, [r7, #28]
 801154a:	f7ff ff23 	bl	8011394 <ip4_input_accept>
 801154e:	4603      	mov	r3, r0
 8011550:	2b00      	cmp	r3, #0
 8011552:	d108      	bne.n	8011566 <ip4_input+0x17e>
 8011554:	e000      	b.n	8011558 <ip4_input+0x170>
            continue;
 8011556:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011558:	69fb      	ldr	r3, [r7, #28]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	61fb      	str	r3, [r7, #28]
 801155e:	69fb      	ldr	r3, [r7, #28]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d1ed      	bne.n	8011540 <ip4_input+0x158>
 8011564:	e000      	b.n	8011568 <ip4_input+0x180>
            break;
 8011566:	bf00      	nop
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d01b      	beq.n	80115a6 <ip4_input+0x1be>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801156e:	4b42      	ldr	r3, [pc, #264]	; (8011678 <ip4_input+0x290>)
 8011570:	691b      	ldr	r3, [r3, #16]
 8011572:	6839      	ldr	r1, [r7, #0]
 8011574:	4618      	mov	r0, r3
 8011576:	f000 faa9 	bl	8011acc <ip4_addr_isbroadcast_u32>
 801157a:	4603      	mov	r3, r0
 801157c:	2b00      	cmp	r3, #0
 801157e:	d105      	bne.n	801158c <ip4_input+0x1a4>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011580:	4b3d      	ldr	r3, [pc, #244]	; (8011678 <ip4_input+0x290>)
 8011582:	691b      	ldr	r3, [r3, #16]
 8011584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011588:	2be0      	cmp	r3, #224	; 0xe0
 801158a:	d10c      	bne.n	80115a6 <ip4_input+0x1be>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801158c:	6878      	ldr	r0, [r7, #4]
 801158e:	f7f8 ffaa 	bl	800a4e6 <pbuf_free>
      IP_STATS_INC(ip.drop);
 8011592:	4b38      	ldr	r3, [pc, #224]	; (8011674 <ip4_input+0x28c>)
 8011594:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011598:	3301      	adds	r3, #1
 801159a:	b29a      	uxth	r2, r3
 801159c:	4b35      	ldr	r3, [pc, #212]	; (8011674 <ip4_input+0x28c>)
 801159e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80115a2:	2300      	movs	r3, #0
 80115a4:	e0c5      	b.n	8011732 <ip4_input+0x34a>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80115a6:	69fb      	ldr	r3, [r7, #28]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d10c      	bne.n	80115c6 <ip4_input+0x1de>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 80115ac:	4b31      	ldr	r3, [pc, #196]	; (8011674 <ip4_input+0x28c>)
 80115ae:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80115b2:	3301      	adds	r3, #1
 80115b4:	b29a      	uxth	r2, r3
 80115b6:	4b2f      	ldr	r3, [pc, #188]	; (8011674 <ip4_input+0x28c>)
 80115b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80115bc:	6878      	ldr	r0, [r7, #4]
 80115be:	f7f8 ff92 	bl	800a4e6 <pbuf_free>
    return ERR_OK;
 80115c2:	2300      	movs	r3, #0
 80115c4:	e0b5      	b.n	8011732 <ip4_input+0x34a>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	88db      	ldrh	r3, [r3, #6]
 80115ca:	b29b      	uxth	r3, r3
 80115cc:	461a      	mov	r2, r3
 80115ce:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80115d2:	4013      	ands	r3, r2
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d00b      	beq.n	80115f0 <ip4_input+0x208>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80115d8:	6878      	ldr	r0, [r7, #4]
 80115da:	f000 fdb9 	bl	8012150 <ip4_reass>
 80115de:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d101      	bne.n	80115ea <ip4_input+0x202>
      return ERR_OK;
 80115e6:	2300      	movs	r3, #0
 80115e8:	e0a3      	b.n	8011732 <ip4_input+0x34a>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	685b      	ldr	r3, [r3, #4]
 80115ee:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80115f0:	4a21      	ldr	r2, [pc, #132]	; (8011678 <ip4_input+0x290>)
 80115f2:	69fb      	ldr	r3, [r7, #28]
 80115f4:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80115f6:	4a20      	ldr	r2, [pc, #128]	; (8011678 <ip4_input+0x290>)
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80115fc:	4a1e      	ldr	r2, [pc, #120]	; (8011678 <ip4_input+0x290>)
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011602:	697b      	ldr	r3, [r7, #20]
 8011604:	781b      	ldrb	r3, [r3, #0]
 8011606:	f003 030f 	and.w	r3, r3, #15
 801160a:	b2db      	uxtb	r3, r3
 801160c:	009b      	lsls	r3, r3, #2
 801160e:	b2db      	uxtb	r3, r3
 8011610:	b29a      	uxth	r2, r3
 8011612:	4b19      	ldr	r3, [pc, #100]	; (8011678 <ip4_input+0x290>)
 8011614:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011616:	8a7b      	ldrh	r3, [r7, #18]
 8011618:	4619      	mov	r1, r3
 801161a:	6878      	ldr	r0, [r7, #4]
 801161c:	f7f8 fef2 	bl	800a404 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011620:	697b      	ldr	r3, [r7, #20]
 8011622:	7a5b      	ldrb	r3, [r3, #9]
 8011624:	3b01      	subs	r3, #1
 8011626:	2b10      	cmp	r3, #16
 8011628:	d843      	bhi.n	80116b2 <ip4_input+0x2ca>
 801162a:	a201      	add	r2, pc, #4	; (adr r2, 8011630 <ip4_input+0x248>)
 801162c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011630:	0801169d 	.word	0x0801169d
 8011634:	080116a7 	.word	0x080116a7
 8011638:	080116b3 	.word	0x080116b3
 801163c:	080116b3 	.word	0x080116b3
 8011640:	080116b3 	.word	0x080116b3
 8011644:	08011693 	.word	0x08011693
 8011648:	080116b3 	.word	0x080116b3
 801164c:	080116b3 	.word	0x080116b3
 8011650:	080116b3 	.word	0x080116b3
 8011654:	080116b3 	.word	0x080116b3
 8011658:	080116b3 	.word	0x080116b3
 801165c:	080116b3 	.word	0x080116b3
 8011660:	080116b3 	.word	0x080116b3
 8011664:	080116b3 	.word	0x080116b3
 8011668:	080116b3 	.word	0x080116b3
 801166c:	080116b3 	.word	0x080116b3
 8011670:	08011689 	.word	0x08011689
 8011674:	200080c8 	.word	0x200080c8
 8011678:	20000ee4 	.word	0x20000ee4
 801167c:	20000ef8 	.word	0x20000ef8
 8011680:	010000e0 	.word	0x010000e0
 8011684:	200080bc 	.word	0x200080bc
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011688:	6839      	ldr	r1, [r7, #0]
 801168a:	6878      	ldr	r0, [r7, #4]
 801168c:	f7fe f952 	bl	800f934 <udp_input>
        break;
 8011690:	e03c      	b.n	801170c <ip4_input+0x324>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011692:	6839      	ldr	r1, [r7, #0]
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	f7fa fd55 	bl	800c144 <tcp_input>
        break;
 801169a:	e037      	b.n	801170c <ip4_input+0x324>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801169c:	6839      	ldr	r1, [r7, #0]
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	f7ff f928 	bl	80108f4 <icmp_input>
        break;
 80116a4:	e032      	b.n	801170c <ip4_input+0x324>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
      case IP_PROTO_IGMP:
        igmp_input(p, inp, ip4_current_dest_addr());
 80116a6:	4a25      	ldr	r2, [pc, #148]	; (801173c <ip4_input+0x354>)
 80116a8:	6839      	ldr	r1, [r7, #0]
 80116aa:	6878      	ldr	r0, [r7, #4]
 80116ac:	f7ff fbc0 	bl	8010e30 <igmp_input>
        break;
 80116b0:	e02c      	b.n	801170c <ip4_input+0x324>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80116b2:	4b23      	ldr	r3, [pc, #140]	; (8011740 <ip4_input+0x358>)
 80116b4:	695b      	ldr	r3, [r3, #20]
 80116b6:	69f9      	ldr	r1, [r7, #28]
 80116b8:	4618      	mov	r0, r3
 80116ba:	f000 fa07 	bl	8011acc <ip4_addr_isbroadcast_u32>
 80116be:	4603      	mov	r3, r0
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d10f      	bne.n	80116e4 <ip4_input+0x2fc>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80116c4:	4b1e      	ldr	r3, [pc, #120]	; (8011740 <ip4_input+0x358>)
 80116c6:	695b      	ldr	r3, [r3, #20]
 80116c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80116cc:	2be0      	cmp	r3, #224	; 0xe0
 80116ce:	d009      	beq.n	80116e4 <ip4_input+0x2fc>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80116d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80116d4:	4619      	mov	r1, r3
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	f7f8 fef3 	bl	800a4c2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80116dc:	2102      	movs	r1, #2
 80116de:	6878      	ldr	r0, [r7, #4]
 80116e0:	f7ff fa4c 	bl	8010b7c <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 80116e4:	4b17      	ldr	r3, [pc, #92]	; (8011744 <ip4_input+0x35c>)
 80116e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80116ea:	3301      	adds	r3, #1
 80116ec:	b29a      	uxth	r2, r3
 80116ee:	4b15      	ldr	r3, [pc, #84]	; (8011744 <ip4_input+0x35c>)
 80116f0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 80116f4:	4b13      	ldr	r3, [pc, #76]	; (8011744 <ip4_input+0x35c>)
 80116f6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80116fa:	3301      	adds	r3, #1
 80116fc:	b29a      	uxth	r2, r3
 80116fe:	4b11      	ldr	r3, [pc, #68]	; (8011744 <ip4_input+0x35c>)
 8011700:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011704:	6878      	ldr	r0, [r7, #4]
 8011706:	f7f8 feee 	bl	800a4e6 <pbuf_free>
        break;
 801170a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801170c:	4b0c      	ldr	r3, [pc, #48]	; (8011740 <ip4_input+0x358>)
 801170e:	2200      	movs	r2, #0
 8011710:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011712:	4b0b      	ldr	r3, [pc, #44]	; (8011740 <ip4_input+0x358>)
 8011714:	2200      	movs	r2, #0
 8011716:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011718:	4b09      	ldr	r3, [pc, #36]	; (8011740 <ip4_input+0x358>)
 801171a:	2200      	movs	r2, #0
 801171c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801171e:	4b08      	ldr	r3, [pc, #32]	; (8011740 <ip4_input+0x358>)
 8011720:	2200      	movs	r2, #0
 8011722:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011724:	4b06      	ldr	r3, [pc, #24]	; (8011740 <ip4_input+0x358>)
 8011726:	2200      	movs	r2, #0
 8011728:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801172a:	4b05      	ldr	r3, [pc, #20]	; (8011740 <ip4_input+0x358>)
 801172c:	2200      	movs	r2, #0
 801172e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011730:	2300      	movs	r3, #0
}
 8011732:	4618      	mov	r0, r3
 8011734:	3720      	adds	r7, #32
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}
 801173a:	bf00      	nop
 801173c:	20000ef8 	.word	0x20000ef8
 8011740:	20000ee4 	.word	0x20000ee4
 8011744:	200080c8 	.word	0x200080c8

08011748 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b08a      	sub	sp, #40	; 0x28
 801174c:	af06      	add	r7, sp, #24
 801174e:	60f8      	str	r0, [r7, #12]
 8011750:	60b9      	str	r1, [r7, #8]
 8011752:	607a      	str	r2, [r7, #4]
 8011754:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 8011756:	78fa      	ldrb	r2, [r7, #3]
 8011758:	2300      	movs	r3, #0
 801175a:	9304      	str	r3, [sp, #16]
 801175c:	2300      	movs	r3, #0
 801175e:	9303      	str	r3, [sp, #12]
 8011760:	6a3b      	ldr	r3, [r7, #32]
 8011762:	9302      	str	r3, [sp, #8]
 8011764:	7f3b      	ldrb	r3, [r7, #28]
 8011766:	9301      	str	r3, [sp, #4]
 8011768:	7e3b      	ldrb	r3, [r7, #24]
 801176a:	9300      	str	r3, [sp, #0]
 801176c:	4613      	mov	r3, r2
 801176e:	687a      	ldr	r2, [r7, #4]
 8011770:	68b9      	ldr	r1, [r7, #8]
 8011772:	68f8      	ldr	r0, [r7, #12]
 8011774:	f000 f805 	bl	8011782 <ip4_output_if_opt>
 8011778:	4603      	mov	r3, r0
}
 801177a:	4618      	mov	r0, r3
 801177c:	3710      	adds	r7, #16
 801177e:	46bd      	mov	sp, r7
 8011780:	bd80      	pop	{r7, pc}

08011782 <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
 8011782:	b580      	push	{r7, lr}
 8011784:	b08c      	sub	sp, #48	; 0x30
 8011786:	af06      	add	r7, sp, #24
 8011788:	60f8      	str	r0, [r7, #12]
 801178a:	60b9      	str	r1, [r7, #8]
 801178c:	607a      	str	r2, [r7, #4]
 801178e:	70fb      	strb	r3, [r7, #3]
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d009      	beq.n	80117ae <ip4_output_if_opt+0x2c>
    if (ip4_addr_isany(src)) {
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d003      	beq.n	80117a8 <ip4_output_if_opt+0x26>
 80117a0:	68bb      	ldr	r3, [r7, #8]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d102      	bne.n	80117ae <ip4_output_if_opt+0x2c>
      src_used = netif_ip4_addr(netif);
 80117a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117aa:	3304      	adds	r3, #4
 80117ac:	617b      	str	r3, [r7, #20]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
 80117ae:	78fa      	ldrb	r2, [r7, #3]
 80117b0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80117b2:	9304      	str	r3, [sp, #16]
 80117b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b6:	9303      	str	r3, [sp, #12]
 80117b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ba:	9302      	str	r3, [sp, #8]
 80117bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80117c0:	9301      	str	r3, [sp, #4]
 80117c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80117c6:	9300      	str	r3, [sp, #0]
 80117c8:	4613      	mov	r3, r2
 80117ca:	687a      	ldr	r2, [r7, #4]
 80117cc:	6979      	ldr	r1, [r7, #20]
 80117ce:	68f8      	ldr	r0, [r7, #12]
 80117d0:	f000 f806 	bl	80117e0 <ip4_output_if_opt_src>
 80117d4:	4603      	mov	r3, r0
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3718      	adds	r7, #24
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}
	...

080117e0 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                      u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                      u16_t optlen)
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b08a      	sub	sp, #40	; 0x28
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	60f8      	str	r0, [r7, #12]
 80117e8:	60b9      	str	r1, [r7, #8]
 80117ea:	607a      	str	r2, [r7, #4]
 80117ec:	70fb      	strb	r3, [r7, #3]
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 80117ee:	2300      	movs	r3, #0
 80117f0:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	f000 8125 	beq.w	8011a44 <ip4_output_if_opt_src+0x264>
    u16_t ip_hlen = IP_HLEN;
 80117fa:	2314      	movs	r3, #20
 80117fc:	847b      	strh	r3, [r7, #34]	; 0x22
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
 80117fe:	2300      	movs	r3, #0
 8011800:	82fb      	strh	r3, [r7, #22]
    if (optlen != 0) {
 8011802:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011806:	2b00      	cmp	r3, #0
 8011808:	d05d      	beq.n	80118c6 <ip4_output_if_opt_src+0xe6>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      if (optlen > (IP_HLEN_MAX - IP_HLEN)) {
 801180a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801180e:	2b28      	cmp	r3, #40	; 0x28
 8011810:	d90a      	bls.n	8011828 <ip4_output_if_opt_src+0x48>
        /* optlen too long */
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: optlen too long\n"));
        IP_STATS_INC(ip.err);
 8011812:	4ba5      	ldr	r3, [pc, #660]	; (8011aa8 <ip4_output_if_opt_src+0x2c8>)
 8011814:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011818:	3301      	adds	r3, #1
 801181a:	b29a      	uxth	r2, r3
 801181c:	4ba2      	ldr	r3, [pc, #648]	; (8011aa8 <ip4_output_if_opt_src+0x2c8>)
 801181e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_VAL;
 8011822:	f06f 0305 	mvn.w	r3, #5
 8011826:	e14c      	b.n	8011ac2 <ip4_output_if_opt_src+0x2e2>
      }
      /* round up to a multiple of 4 */
      optlen_aligned = (u16_t)((optlen + 3) & ~3);
 8011828:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801182c:	3303      	adds	r3, #3
 801182e:	b29b      	uxth	r3, r3
 8011830:	f023 0303 	bic.w	r3, r3, #3
 8011834:	82fb      	strh	r3, [r7, #22]
      ip_hlen = (u16_t)(ip_hlen + optlen_aligned);
 8011836:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011838:	8afb      	ldrh	r3, [r7, #22]
 801183a:	4413      	add	r3, r2
 801183c:	847b      	strh	r3, [r7, #34]	; 0x22
      /* First write in the IP options */
      if (pbuf_add_header(p, optlen_aligned)) {
 801183e:	8afb      	ldrh	r3, [r7, #22]
 8011840:	4619      	mov	r1, r3
 8011842:	68f8      	ldr	r0, [r7, #12]
 8011844:	f7f8 fdce 	bl	800a3e4 <pbuf_add_header>
 8011848:	4603      	mov	r3, r0
 801184a:	2b00      	cmp	r3, #0
 801184c:	d00a      	beq.n	8011864 <ip4_output_if_opt_src+0x84>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
 801184e:	4b96      	ldr	r3, [pc, #600]	; (8011aa8 <ip4_output_if_opt_src+0x2c8>)
 8011850:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011854:	3301      	adds	r3, #1
 8011856:	b29a      	uxth	r2, r3
 8011858:	4b93      	ldr	r3, [pc, #588]	; (8011aa8 <ip4_output_if_opt_src+0x2c8>)
 801185a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_BUF;
 801185e:	f06f 0301 	mvn.w	r3, #1
 8011862:	e12e      	b.n	8011ac2 <ip4_output_if_opt_src+0x2e2>
      }
      MEMCPY(p->payload, ip_options, optlen);
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	685b      	ldr	r3, [r3, #4]
 8011868:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801186c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801186e:	4618      	mov	r0, r3
 8011870:	f001 fe66 	bl	8013540 <memcpy>
      if (optlen < optlen_aligned) {
 8011874:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011878:	8afb      	ldrh	r3, [r7, #22]
 801187a:	429a      	cmp	r2, r3
 801187c:	d20c      	bcs.n	8011898 <ip4_output_if_opt_src+0xb8>
        /* zero the remaining bytes */
        memset(((char *)p->payload) + optlen, 0, (size_t)(optlen_aligned - optlen));
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	685a      	ldr	r2, [r3, #4]
 8011882:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011886:	18d0      	adds	r0, r2, r3
 8011888:	8afa      	ldrh	r2, [r7, #22]
 801188a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801188e:	1ad3      	subs	r3, r2, r3
 8011890:	461a      	mov	r2, r3
 8011892:	2100      	movs	r1, #0
 8011894:	f001 fe7c 	bl	8013590 <memset>
      }
#if CHECKSUM_GEN_IP_INLINE
      for (i = 0; i < optlen_aligned / 2; i++) {
 8011898:	2300      	movs	r3, #0
 801189a:	61fb      	str	r3, [r7, #28]
 801189c:	e00c      	b.n	80118b8 <ip4_output_if_opt_src+0xd8>
        chk_sum += ((u16_t *)p->payload)[i];
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	685a      	ldr	r2, [r3, #4]
 80118a2:	69fb      	ldr	r3, [r7, #28]
 80118a4:	005b      	lsls	r3, r3, #1
 80118a6:	4413      	add	r3, r2
 80118a8:	881b      	ldrh	r3, [r3, #0]
 80118aa:	461a      	mov	r2, r3
 80118ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ae:	4413      	add	r3, r2
 80118b0:	627b      	str	r3, [r7, #36]	; 0x24
      for (i = 0; i < optlen_aligned / 2; i++) {
 80118b2:	69fb      	ldr	r3, [r7, #28]
 80118b4:	3301      	adds	r3, #1
 80118b6:	61fb      	str	r3, [r7, #28]
 80118b8:	8afb      	ldrh	r3, [r7, #22]
 80118ba:	085b      	lsrs	r3, r3, #1
 80118bc:	b29b      	uxth	r3, r3
 80118be:	461a      	mov	r2, r3
 80118c0:	69fb      	ldr	r3, [r7, #28]
 80118c2:	4293      	cmp	r3, r2
 80118c4:	dbeb      	blt.n	801189e <ip4_output_if_opt_src+0xbe>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80118c6:	2114      	movs	r1, #20
 80118c8:	68f8      	ldr	r0, [r7, #12]
 80118ca:	f7f8 fd8b 	bl	800a3e4 <pbuf_add_header>
 80118ce:	4603      	mov	r3, r0
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d00a      	beq.n	80118ea <ip4_output_if_opt_src+0x10a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 80118d4:	4b74      	ldr	r3, [pc, #464]	; (8011aa8 <ip4_output_if_opt_src+0x2c8>)
 80118d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80118da:	3301      	adds	r3, #1
 80118dc:	b29a      	uxth	r2, r3
 80118de:	4b72      	ldr	r3, [pc, #456]	; (8011aa8 <ip4_output_if_opt_src+0x2c8>)
 80118e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80118e4:	f06f 0301 	mvn.w	r3, #1
 80118e8:	e0eb      	b.n	8011ac2 <ip4_output_if_opt_src+0x2e2>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	685b      	ldr	r3, [r3, #4]
 80118ee:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80118f0:	69bb      	ldr	r3, [r7, #24]
 80118f2:	78fa      	ldrb	r2, [r7, #3]
 80118f4:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80118f6:	69bb      	ldr	r3, [r7, #24]
 80118f8:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80118fc:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 80118fe:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8011902:	78fb      	ldrb	r3, [r7, #3]
 8011904:	021b      	lsls	r3, r3, #8
 8011906:	4313      	orrs	r3, r2
 8011908:	021b      	lsls	r3, r3, #8
 801190a:	b21a      	sxth	r2, r3
 801190c:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8011910:	78fb      	ldrb	r3, [r7, #3]
 8011912:	021b      	lsls	r3, r3, #8
 8011914:	430b      	orrs	r3, r1
 8011916:	121b      	asrs	r3, r3, #8
 8011918:	b21b      	sxth	r3, r3
 801191a:	b2db      	uxtb	r3, r3
 801191c:	b21b      	sxth	r3, r3
 801191e:	4313      	orrs	r3, r2
 8011920:	b21b      	sxth	r3, r3
 8011922:	b29b      	uxth	r3, r3
 8011924:	461a      	mov	r2, r3
 8011926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011928:	4413      	add	r3, r2
 801192a:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681a      	ldr	r2, [r3, #0]
 8011930:	69bb      	ldr	r3, [r7, #24]
 8011932:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8011934:	69bb      	ldr	r3, [r7, #24]
 8011936:	691b      	ldr	r3, [r3, #16]
 8011938:	b29b      	uxth	r3, r3
 801193a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801193c:	4413      	add	r3, r2
 801193e:	627b      	str	r3, [r7, #36]	; 0x24
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8011940:	69bb      	ldr	r3, [r7, #24]
 8011942:	691b      	ldr	r3, [r3, #16]
 8011944:	0c1b      	lsrs	r3, r3, #16
 8011946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011948:	4413      	add	r3, r2
 801194a:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801194c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801194e:	089b      	lsrs	r3, r3, #2
 8011950:	b29b      	uxth	r3, r3
 8011952:	b2db      	uxtb	r3, r3
 8011954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011958:	b2da      	uxtb	r2, r3
 801195a:	69bb      	ldr	r3, [r7, #24]
 801195c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801195e:	69bb      	ldr	r3, [r7, #24]
 8011960:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8011964:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8011966:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801196a:	69bb      	ldr	r3, [r7, #24]
 801196c:	781b      	ldrb	r3, [r3, #0]
 801196e:	021b      	lsls	r3, r3, #8
 8011970:	4313      	orrs	r3, r2
 8011972:	021b      	lsls	r3, r3, #8
 8011974:	b21a      	sxth	r2, r3
 8011976:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 801197a:	69bb      	ldr	r3, [r7, #24]
 801197c:	781b      	ldrb	r3, [r3, #0]
 801197e:	021b      	lsls	r3, r3, #8
 8011980:	430b      	orrs	r3, r1
 8011982:	121b      	asrs	r3, r3, #8
 8011984:	b21b      	sxth	r3, r3
 8011986:	b2db      	uxtb	r3, r3
 8011988:	b21b      	sxth	r3, r3
 801198a:	4313      	orrs	r3, r2
 801198c:	b21b      	sxth	r3, r3
 801198e:	b29b      	uxth	r3, r3
 8011990:	461a      	mov	r2, r3
 8011992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011994:	4413      	add	r3, r2
 8011996:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	891b      	ldrh	r3, [r3, #8]
 801199c:	4618      	mov	r0, r3
 801199e:	f7f7 fa2d 	bl	8008dfc <lwip_htons>
 80119a2:	4603      	mov	r3, r0
 80119a4:	461a      	mov	r2, r3
 80119a6:	69bb      	ldr	r3, [r7, #24]
 80119a8:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 80119aa:	69bb      	ldr	r3, [r7, #24]
 80119ac:	885b      	ldrh	r3, [r3, #2]
 80119ae:	b29b      	uxth	r3, r3
 80119b0:	461a      	mov	r2, r3
 80119b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b4:	4413      	add	r3, r2
 80119b6:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80119b8:	69bb      	ldr	r3, [r7, #24]
 80119ba:	2200      	movs	r2, #0
 80119bc:	719a      	strb	r2, [r3, #6]
 80119be:	2200      	movs	r2, #0
 80119c0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80119c2:	4b3a      	ldr	r3, [pc, #232]	; (8011aac <ip4_output_if_opt_src+0x2cc>)
 80119c4:	881b      	ldrh	r3, [r3, #0]
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7f7 fa18 	bl	8008dfc <lwip_htons>
 80119cc:	4603      	mov	r3, r0
 80119ce:	461a      	mov	r2, r3
 80119d0:	69bb      	ldr	r3, [r7, #24]
 80119d2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 80119d4:	69bb      	ldr	r3, [r7, #24]
 80119d6:	889b      	ldrh	r3, [r3, #4]
 80119d8:	b29b      	uxth	r3, r3
 80119da:	461a      	mov	r2, r3
 80119dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119de:	4413      	add	r3, r2
 80119e0:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80119e2:	4b32      	ldr	r3, [pc, #200]	; (8011aac <ip4_output_if_opt_src+0x2cc>)
 80119e4:	881b      	ldrh	r3, [r3, #0]
 80119e6:	3301      	adds	r3, #1
 80119e8:	b29a      	uxth	r2, r3
 80119ea:	4b30      	ldr	r3, [pc, #192]	; (8011aac <ip4_output_if_opt_src+0x2cc>)
 80119ec:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80119ee:	68bb      	ldr	r3, [r7, #8]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d104      	bne.n	80119fe <ip4_output_if_opt_src+0x21e>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80119f4:	4b2e      	ldr	r3, [pc, #184]	; (8011ab0 <ip4_output_if_opt_src+0x2d0>)
 80119f6:	681a      	ldr	r2, [r3, #0]
 80119f8:	69bb      	ldr	r3, [r7, #24]
 80119fa:	60da      	str	r2, [r3, #12]
 80119fc:	e003      	b.n	8011a06 <ip4_output_if_opt_src+0x226>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	681a      	ldr	r2, [r3, #0]
 8011a02:	69bb      	ldr	r3, [r7, #24]
 8011a04:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8011a06:	69bb      	ldr	r3, [r7, #24]
 8011a08:	68db      	ldr	r3, [r3, #12]
 8011a0a:	b29b      	uxth	r3, r3
 8011a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a0e:	4413      	add	r3, r2
 8011a10:	627b      	str	r3, [r7, #36]	; 0x24
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8011a12:	69bb      	ldr	r3, [r7, #24]
 8011a14:	68db      	ldr	r3, [r3, #12]
 8011a16:	0c1b      	lsrs	r3, r3, #16
 8011a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a1a:	4413      	add	r3, r2
 8011a1c:	627b      	str	r3, [r7, #36]	; 0x24
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8011a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a20:	0c1a      	lsrs	r2, r3, #16
 8011a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a24:	b29b      	uxth	r3, r3
 8011a26:	4413      	add	r3, r2
 8011a28:	627b      	str	r3, [r7, #36]	; 0x24
    chk_sum = (chk_sum >> 16) + chk_sum;
 8011a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a2c:	0c1b      	lsrs	r3, r3, #16
 8011a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a30:	4413      	add	r3, r2
 8011a32:	627b      	str	r3, [r7, #36]	; 0x24
    chk_sum = ~chk_sum;
 8011a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a36:	43db      	mvns	r3, r3
 8011a38:	627b      	str	r3, [r7, #36]	; 0x24
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8011a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a3c:	b29a      	uxth	r2, r3
 8011a3e:	69bb      	ldr	r3, [r7, #24]
 8011a40:	815a      	strh	r2, [r3, #10]
 8011a42:	e017      	b.n	8011a74 <ip4_output_if_opt_src+0x294>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	895b      	ldrh	r3, [r3, #10]
 8011a48:	2b13      	cmp	r3, #19
 8011a4a:	d80a      	bhi.n	8011a62 <ip4_output_if_opt_src+0x282>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 8011a4c:	4b16      	ldr	r3, [pc, #88]	; (8011aa8 <ip4_output_if_opt_src+0x2c8>)
 8011a4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011a52:	3301      	adds	r3, #1
 8011a54:	b29a      	uxth	r2, r3
 8011a56:	4b14      	ldr	r3, [pc, #80]	; (8011aa8 <ip4_output_if_opt_src+0x2c8>)
 8011a58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011a5c:	f06f 0301 	mvn.w	r3, #1
 8011a60:	e02f      	b.n	8011ac2 <ip4_output_if_opt_src+0x2e2>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	685b      	ldr	r3, [r3, #4]
 8011a66:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011a68:	69bb      	ldr	r3, [r7, #24]
 8011a6a:	691b      	ldr	r3, [r3, #16]
 8011a6c:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8011a6e:	f107 0310 	add.w	r3, r7, #16
 8011a72:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 8011a74:	4b0c      	ldr	r3, [pc, #48]	; (8011aa8 <ip4_output_if_opt_src+0x2c8>)
 8011a76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011a7a:	3301      	adds	r3, #1
 8011a7c:	b29a      	uxth	r2, r3
 8011a7e:	4b0a      	ldr	r3, [pc, #40]	; (8011aa8 <ip4_output_if_opt_src+0x2c8>)
 8011a80:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d013      	beq.n	8011ab4 <ip4_output_if_opt_src+0x2d4>
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	891a      	ldrh	r2, [r3, #8]
 8011a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011a94:	429a      	cmp	r2, r3
 8011a96:	d90d      	bls.n	8011ab4 <ip4_output_if_opt_src+0x2d4>
    return ip4_frag(p, netif, dest);
 8011a98:	687a      	ldr	r2, [r7, #4]
 8011a9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011a9c:	68f8      	ldr	r0, [r7, #12]
 8011a9e:	f000 fd17 	bl	80124d0 <ip4_frag>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	e00d      	b.n	8011ac2 <ip4_output_if_opt_src+0x2e2>
 8011aa6:	bf00      	nop
 8011aa8:	200080c8 	.word	0x200080c8
 8011aac:	20008324 	.word	0x20008324
 8011ab0:	08016ca0 	.word	0x08016ca0
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ab6:	695b      	ldr	r3, [r3, #20]
 8011ab8:	687a      	ldr	r2, [r7, #4]
 8011aba:	68f9      	ldr	r1, [r7, #12]
 8011abc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011abe:	4798      	blx	r3
 8011ac0:	4603      	mov	r3, r0
}
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	3728      	adds	r7, #40	; 0x28
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	bd80      	pop	{r7, pc}
 8011aca:	bf00      	nop

08011acc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011acc:	b480      	push	{r7}
 8011ace:	b085      	sub	sp, #20
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
 8011ad4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ae0:	d002      	beq.n	8011ae8 <ip4_addr_isbroadcast_u32+0x1c>
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d101      	bne.n	8011aec <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011ae8:	2301      	movs	r3, #1
 8011aea:	e02a      	b.n	8011b42 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011af2:	f003 0302 	and.w	r3, r3, #2
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d101      	bne.n	8011afe <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011afa:	2300      	movs	r3, #0
 8011afc:	e021      	b.n	8011b42 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011afe:	683b      	ldr	r3, [r7, #0]
 8011b00:	3304      	adds	r3, #4
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	687a      	ldr	r2, [r7, #4]
 8011b06:	429a      	cmp	r2, r3
 8011b08:	d101      	bne.n	8011b0e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	e019      	b.n	8011b42 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011b0e:	68fa      	ldr	r2, [r7, #12]
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	3304      	adds	r3, #4
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	405a      	eors	r2, r3
 8011b18:	683b      	ldr	r3, [r7, #0]
 8011b1a:	3308      	adds	r3, #8
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	4013      	ands	r3, r2
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d10d      	bne.n	8011b40 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	3308      	adds	r3, #8
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	43da      	mvns	r2, r3
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011b30:	683b      	ldr	r3, [r7, #0]
 8011b32:	3308      	adds	r3, #8
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011b38:	429a      	cmp	r2, r3
 8011b3a:	d101      	bne.n	8011b40 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011b3c:	2301      	movs	r3, #1
 8011b3e:	e000      	b.n	8011b42 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011b40:	2300      	movs	r3, #0
  }
}
 8011b42:	4618      	mov	r0, r3
 8011b44:	3714      	adds	r7, #20
 8011b46:	46bd      	mov	sp, r7
 8011b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4c:	4770      	bx	lr
	...

08011b50 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b082      	sub	sp, #8
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8011b58:	2210      	movs	r2, #16
 8011b5a:	4904      	ldr	r1, [pc, #16]	; (8011b6c <ip4addr_ntoa+0x1c>)
 8011b5c:	6878      	ldr	r0, [r7, #4]
 8011b5e:	f000 f807 	bl	8011b70 <ip4addr_ntoa_r>
 8011b62:	4603      	mov	r3, r0
}
 8011b64:	4618      	mov	r0, r3
 8011b66:	3708      	adds	r7, #8
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}
 8011b6c:	2000832c 	.word	0x2000832c

08011b70 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8011b70:	b480      	push	{r7}
 8011b72:	b08d      	sub	sp, #52	; 0x34
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	60f8      	str	r0, [r7, #12]
 8011b78:	60b9      	str	r1, [r7, #8]
 8011b7a:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8011b8a:	f107 0318 	add.w	r3, r7, #24
 8011b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8011b90:	2300      	movs	r3, #0
 8011b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011b96:	e058      	b.n	8011c4a <ip4addr_ntoa_r+0xda>
    i = 0;
 8011b98:	2300      	movs	r3, #0
 8011b9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8011b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ba0:	781a      	ldrb	r2, [r3, #0]
 8011ba2:	4b32      	ldr	r3, [pc, #200]	; (8011c6c <ip4addr_ntoa_r+0xfc>)
 8011ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8011ba8:	08d9      	lsrs	r1, r3, #3
 8011baa:	460b      	mov	r3, r1
 8011bac:	009b      	lsls	r3, r3, #2
 8011bae:	440b      	add	r3, r1
 8011bb0:	005b      	lsls	r3, r3, #1
 8011bb2:	1ad3      	subs	r3, r2, r3
 8011bb4:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8011bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb8:	781b      	ldrb	r3, [r3, #0]
 8011bba:	4a2c      	ldr	r2, [pc, #176]	; (8011c6c <ip4addr_ntoa_r+0xfc>)
 8011bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8011bc0:	08db      	lsrs	r3, r3, #3
 8011bc2:	b2da      	uxtb	r2, r3
 8011bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bc6:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8011bc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011bcc:	1c5a      	adds	r2, r3, #1
 8011bce:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8011bd2:	4619      	mov	r1, r3
 8011bd4:	7ffb      	ldrb	r3, [r7, #31]
 8011bd6:	3330      	adds	r3, #48	; 0x30
 8011bd8:	b2da      	uxtb	r2, r3
 8011bda:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8011bde:	443b      	add	r3, r7
 8011be0:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8011be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d1d8      	bne.n	8011b9e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8011bec:	e011      	b.n	8011c12 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8011bee:	6a3b      	ldr	r3, [r7, #32]
 8011bf0:	1c5a      	adds	r2, r3, #1
 8011bf2:	623a      	str	r2, [r7, #32]
 8011bf4:	687a      	ldr	r2, [r7, #4]
 8011bf6:	429a      	cmp	r2, r3
 8011bf8:	dc01      	bgt.n	8011bfe <ip4addr_ntoa_r+0x8e>
        return NULL;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	e030      	b.n	8011c60 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8011bfe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8011c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c04:	1c59      	adds	r1, r3, #1
 8011c06:	62f9      	str	r1, [r7, #44]	; 0x2c
 8011c08:	3230      	adds	r2, #48	; 0x30
 8011c0a:	443a      	add	r2, r7
 8011c0c:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8011c10:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8011c12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011c16:	1e5a      	subs	r2, r3, #1
 8011c18:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d1e6      	bne.n	8011bee <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8011c20:	6a3b      	ldr	r3, [r7, #32]
 8011c22:	1c5a      	adds	r2, r3, #1
 8011c24:	623a      	str	r2, [r7, #32]
 8011c26:	687a      	ldr	r2, [r7, #4]
 8011c28:	429a      	cmp	r2, r3
 8011c2a:	dc01      	bgt.n	8011c30 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	e017      	b.n	8011c60 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8011c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c32:	1c5a      	adds	r2, r3, #1
 8011c34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011c36:	222e      	movs	r2, #46	; 0x2e
 8011c38:	701a      	strb	r2, [r3, #0]
    ap++;
 8011c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c3c:	3301      	adds	r3, #1
 8011c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8011c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c44:	3301      	adds	r3, #1
 8011c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c4e:	2b03      	cmp	r3, #3
 8011c50:	d9a2      	bls.n	8011b98 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8011c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c54:	3b01      	subs	r3, #1
 8011c56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	701a      	strb	r2, [r3, #0]
  return buf;
 8011c5e:	68bb      	ldr	r3, [r7, #8]
}
 8011c60:	4618      	mov	r0, r3
 8011c62:	3734      	adds	r7, #52	; 0x34
 8011c64:	46bd      	mov	sp, r7
 8011c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c6a:	4770      	bx	lr
 8011c6c:	cccccccd 	.word	0xcccccccd

08011c70 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b084      	sub	sp, #16
 8011c74:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011c76:	2300      	movs	r3, #0
 8011c78:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011c7a:	4b12      	ldr	r3, [pc, #72]	; (8011cc4 <ip_reass_tmr+0x54>)
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011c80:	e018      	b.n	8011cb4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	7fdb      	ldrb	r3, [r3, #31]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d00b      	beq.n	8011ca2 <ip_reass_tmr+0x32>
      r->timer--;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	7fdb      	ldrb	r3, [r3, #31]
 8011c8e:	3b01      	subs	r3, #1
 8011c90:	b2da      	uxtb	r2, r3
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	60fb      	str	r3, [r7, #12]
 8011ca0:	e008      	b.n	8011cb4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011cac:	68b9      	ldr	r1, [r7, #8]
 8011cae:	6878      	ldr	r0, [r7, #4]
 8011cb0:	f000 f80a 	bl	8011cc8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d1e3      	bne.n	8011c82 <ip_reass_tmr+0x12>
    }
  }
}
 8011cba:	bf00      	nop
 8011cbc:	bf00      	nop
 8011cbe:	3710      	adds	r7, #16
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}
 8011cc4:	2000833c 	.word	0x2000833c

08011cc8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b088      	sub	sp, #32
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
 8011cd0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
  if (prev != NULL) {
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	2b00      	cmp	r3, #0
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	685b      	ldr	r3, [r3, #4]
 8011cde:	685b      	ldr	r3, [r3, #4]
 8011ce0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011ce2:	697b      	ldr	r3, [r7, #20]
 8011ce4:	889b      	ldrh	r3, [r3, #4]
 8011ce6:	b29b      	uxth	r3, r3
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d11e      	bne.n	8011d2a <ip_reass_free_complete_datagram+0x62>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	685b      	ldr	r3, [r3, #4]
 8011cf0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011cf2:	697b      	ldr	r3, [r7, #20]
 8011cf4:	681a      	ldr	r2, [r3, #0]
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011cfa:	69bb      	ldr	r3, [r7, #24]
 8011cfc:	6858      	ldr	r0, [r3, #4]
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	3308      	adds	r3, #8
 8011d02:	2214      	movs	r2, #20
 8011d04:	4619      	mov	r1, r3
 8011d06:	f001 fc1b 	bl	8013540 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011d0a:	2101      	movs	r1, #1
 8011d0c:	69b8      	ldr	r0, [r7, #24]
 8011d0e:	f7fe ff45 	bl	8010b9c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011d12:	69b8      	ldr	r0, [r7, #24]
 8011d14:	f7f8 fc3a 	bl	800a58c <pbuf_clen>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011d1c:	8bfa      	ldrh	r2, [r7, #30]
 8011d1e:	8a7b      	ldrh	r3, [r7, #18]
 8011d20:	4413      	add	r3, r2
 8011d22:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011d24:	69b8      	ldr	r0, [r7, #24]
 8011d26:	f7f8 fbde 	bl	800a4e6 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	685b      	ldr	r3, [r3, #4]
 8011d2e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011d30:	e013      	b.n	8011d5a <ip_reass_free_complete_datagram+0x92>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011d32:	69bb      	ldr	r3, [r7, #24]
 8011d34:	685b      	ldr	r3, [r3, #4]
 8011d36:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011d38:	69bb      	ldr	r3, [r7, #24]
 8011d3a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011d3c:	697b      	ldr	r3, [r7, #20]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011d42:	68f8      	ldr	r0, [r7, #12]
 8011d44:	f7f8 fc22 	bl	800a58c <pbuf_clen>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011d4c:	8bfa      	ldrh	r2, [r7, #30]
 8011d4e:	8a7b      	ldrh	r3, [r7, #18]
 8011d50:	4413      	add	r3, r2
 8011d52:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011d54:	68f8      	ldr	r0, [r7, #12]
 8011d56:	f7f8 fbc6 	bl	800a4e6 <pbuf_free>
  while (p != NULL) {
 8011d5a:	69bb      	ldr	r3, [r7, #24]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d1e8      	bne.n	8011d32 <ip_reass_free_complete_datagram+0x6a>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011d60:	6839      	ldr	r1, [r7, #0]
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f000 f8b2 	bl	8011ecc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011d68:	4b05      	ldr	r3, [pc, #20]	; (8011d80 <ip_reass_free_complete_datagram+0xb8>)
 8011d6a:	881a      	ldrh	r2, [r3, #0]
 8011d6c:	8bfb      	ldrh	r3, [r7, #30]
 8011d6e:	1ad3      	subs	r3, r2, r3
 8011d70:	b29a      	uxth	r2, r3
 8011d72:	4b03      	ldr	r3, [pc, #12]	; (8011d80 <ip_reass_free_complete_datagram+0xb8>)
 8011d74:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011d76:	8bfb      	ldrh	r3, [r7, #30]
}
 8011d78:	4618      	mov	r0, r3
 8011d7a:	3720      	adds	r7, #32
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}
 8011d80:	20008340 	.word	0x20008340

08011d84 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b08a      	sub	sp, #40	; 0x28
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
 8011d8c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011d8e:	2300      	movs	r3, #0
 8011d90:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011d92:	2300      	movs	r3, #0
 8011d94:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011d96:	2300      	movs	r3, #0
 8011d98:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011da2:	4b28      	ldr	r3, [pc, #160]	; (8011e44 <ip_reass_remove_oldest_datagram+0xc0>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011da8:	e030      	b.n	8011e0c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dac:	695a      	ldr	r2, [r3, #20]
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	68db      	ldr	r3, [r3, #12]
 8011db2:	429a      	cmp	r2, r3
 8011db4:	d10c      	bne.n	8011dd0 <ip_reass_remove_oldest_datagram+0x4c>
 8011db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db8:	699a      	ldr	r2, [r3, #24]
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	691b      	ldr	r3, [r3, #16]
 8011dbe:	429a      	cmp	r2, r3
 8011dc0:	d106      	bne.n	8011dd0 <ip_reass_remove_oldest_datagram+0x4c>
 8011dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc4:	899a      	ldrh	r2, [r3, #12]
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	889b      	ldrh	r3, [r3, #4]
 8011dca:	b29b      	uxth	r3, r3
 8011dcc:	429a      	cmp	r2, r3
 8011dce:	d014      	beq.n	8011dfa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011dd0:	693b      	ldr	r3, [r7, #16]
 8011dd2:	3301      	adds	r3, #1
 8011dd4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011dd6:	6a3b      	ldr	r3, [r7, #32]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d104      	bne.n	8011de6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dde:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011de0:	69fb      	ldr	r3, [r7, #28]
 8011de2:	61bb      	str	r3, [r7, #24]
 8011de4:	e009      	b.n	8011dfa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de8:	7fda      	ldrb	r2, [r3, #31]
 8011dea:	6a3b      	ldr	r3, [r7, #32]
 8011dec:	7fdb      	ldrb	r3, [r3, #31]
 8011dee:	429a      	cmp	r2, r3
 8011df0:	d803      	bhi.n	8011dfa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011df6:	69fb      	ldr	r3, [r7, #28]
 8011df8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d001      	beq.n	8011e06 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e04:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d1cb      	bne.n	8011daa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011e12:	6a3b      	ldr	r3, [r7, #32]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d008      	beq.n	8011e2a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011e18:	69b9      	ldr	r1, [r7, #24]
 8011e1a:	6a38      	ldr	r0, [r7, #32]
 8011e1c:	f7ff ff54 	bl	8011cc8 <ip_reass_free_complete_datagram>
 8011e20:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011e22:	697a      	ldr	r2, [r7, #20]
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	4413      	add	r3, r2
 8011e28:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011e2a:	697a      	ldr	r2, [r7, #20]
 8011e2c:	683b      	ldr	r3, [r7, #0]
 8011e2e:	429a      	cmp	r2, r3
 8011e30:	da02      	bge.n	8011e38 <ip_reass_remove_oldest_datagram+0xb4>
 8011e32:	693b      	ldr	r3, [r7, #16]
 8011e34:	2b01      	cmp	r3, #1
 8011e36:	dcac      	bgt.n	8011d92 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011e38:	697b      	ldr	r3, [r7, #20]
}
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	3728      	adds	r7, #40	; 0x28
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bd80      	pop	{r7, pc}
 8011e42:	bf00      	nop
 8011e44:	2000833c 	.word	0x2000833c

08011e48 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b084      	sub	sp, #16
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
 8011e50:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011e52:	2004      	movs	r0, #4
 8011e54:	f7f7 fd56 	bl	8009904 <memp_malloc>
 8011e58:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d116      	bne.n	8011e8e <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011e60:	6839      	ldr	r1, [r7, #0]
 8011e62:	6878      	ldr	r0, [r7, #4]
 8011e64:	f7ff ff8e 	bl	8011d84 <ip_reass_remove_oldest_datagram>
 8011e68:	4602      	mov	r2, r0
 8011e6a:	683b      	ldr	r3, [r7, #0]
 8011e6c:	4293      	cmp	r3, r2
 8011e6e:	dc03      	bgt.n	8011e78 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011e70:	2004      	movs	r0, #4
 8011e72:	f7f7 fd47 	bl	8009904 <memp_malloc>
 8011e76:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d107      	bne.n	8011e8e <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 8011e7e:	4b11      	ldr	r3, [pc, #68]	; (8011ec4 <ip_reass_enqueue_new_datagram+0x7c>)
 8011e80:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8011e82:	3301      	adds	r3, #1
 8011e84:	b29a      	uxth	r2, r3
 8011e86:	4b0f      	ldr	r3, [pc, #60]	; (8011ec4 <ip_reass_enqueue_new_datagram+0x7c>)
 8011e88:	879a      	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	e016      	b.n	8011ebc <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011e8e:	2220      	movs	r2, #32
 8011e90:	2100      	movs	r1, #0
 8011e92:	68f8      	ldr	r0, [r7, #12]
 8011e94:	f001 fb7c 	bl	8013590 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	220f      	movs	r2, #15
 8011e9c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011e9e:	4b0a      	ldr	r3, [pc, #40]	; (8011ec8 <ip_reass_enqueue_new_datagram+0x80>)
 8011ea0:	681a      	ldr	r2, [r3, #0]
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011ea6:	4a08      	ldr	r2, [pc, #32]	; (8011ec8 <ip_reass_enqueue_new_datagram+0x80>)
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	3308      	adds	r3, #8
 8011eb0:	2214      	movs	r2, #20
 8011eb2:	6879      	ldr	r1, [r7, #4]
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	f001 fb43 	bl	8013540 <memcpy>
  return ipr;
 8011eba:	68fb      	ldr	r3, [r7, #12]
}
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	3710      	adds	r7, #16
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}
 8011ec4:	200080c8 	.word	0x200080c8
 8011ec8:	2000833c 	.word	0x2000833c

08011ecc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b082      	sub	sp, #8
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
 8011ed4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011ed6:	4b0b      	ldr	r3, [pc, #44]	; (8011f04 <ip_reass_dequeue_datagram+0x38>)
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	687a      	ldr	r2, [r7, #4]
 8011edc:	429a      	cmp	r2, r3
 8011ede:	d104      	bne.n	8011eea <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	4a07      	ldr	r2, [pc, #28]	; (8011f04 <ip_reass_dequeue_datagram+0x38>)
 8011ee6:	6013      	str	r3, [r2, #0]
 8011ee8:	e003      	b.n	8011ef2 <ip_reass_dequeue_datagram+0x26>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	681a      	ldr	r2, [r3, #0]
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011ef2:	6879      	ldr	r1, [r7, #4]
 8011ef4:	2004      	movs	r0, #4
 8011ef6:	f7f7 fd3f 	bl	8009978 <memp_free>
}
 8011efa:	bf00      	nop
 8011efc:	3708      	adds	r7, #8
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}
 8011f02:	bf00      	nop
 8011f04:	2000833c 	.word	0x2000833c

08011f08 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b08c      	sub	sp, #48	; 0x30
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	60f8      	str	r0, [r7, #12]
 8011f10:	60b9      	str	r1, [r7, #8]
 8011f12:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011f14:	2300      	movs	r3, #0
 8011f16:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011f18:	2301      	movs	r3, #1
 8011f1a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011f1c:	68bb      	ldr	r3, [r7, #8]
 8011f1e:	685b      	ldr	r3, [r3, #4]
 8011f20:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011f22:	69fb      	ldr	r3, [r7, #28]
 8011f24:	885b      	ldrh	r3, [r3, #2]
 8011f26:	b29b      	uxth	r3, r3
 8011f28:	4618      	mov	r0, r3
 8011f2a:	f7f6 ff67 	bl	8008dfc <lwip_htons>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011f32:	69fb      	ldr	r3, [r7, #28]
 8011f34:	781b      	ldrb	r3, [r3, #0]
 8011f36:	f003 030f 	and.w	r3, r3, #15
 8011f3a:	b2db      	uxtb	r3, r3
 8011f3c:	009b      	lsls	r3, r3, #2
 8011f3e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011f40:	7e7b      	ldrb	r3, [r7, #25]
 8011f42:	b29b      	uxth	r3, r3
 8011f44:	8b7a      	ldrh	r2, [r7, #26]
 8011f46:	429a      	cmp	r2, r3
 8011f48:	d202      	bcs.n	8011f50 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8011f4e:	e0fb      	b.n	8012148 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
  }
  len = (u16_t)(len - hlen);
 8011f50:	7e7b      	ldrb	r3, [r7, #25]
 8011f52:	b29b      	uxth	r3, r3
 8011f54:	8b7a      	ldrh	r2, [r7, #26]
 8011f56:	1ad3      	subs	r3, r2, r3
 8011f58:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011f5a:	69fb      	ldr	r3, [r7, #28]
 8011f5c:	88db      	ldrh	r3, [r3, #6]
 8011f5e:	b29b      	uxth	r3, r3
 8011f60:	4618      	mov	r0, r3
 8011f62:	f7f6 ff4b 	bl	8008dfc <lwip_htons>
 8011f66:	4603      	mov	r3, r0
 8011f68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011f6c:	b29b      	uxth	r3, r3
 8011f6e:	00db      	lsls	r3, r3, #3
 8011f70:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011f72:	68bb      	ldr	r3, [r7, #8]
 8011f74:	685b      	ldr	r3, [r3, #4]
 8011f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	701a      	strb	r2, [r3, #0]
 8011f7e:	2200      	movs	r2, #0
 8011f80:	705a      	strb	r2, [r3, #1]
 8011f82:	2200      	movs	r2, #0
 8011f84:	709a      	strb	r2, [r3, #2]
 8011f86:	2200      	movs	r2, #0
 8011f88:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f8c:	8afa      	ldrh	r2, [r7, #22]
 8011f8e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011f90:	8afa      	ldrh	r2, [r7, #22]
 8011f92:	8b7b      	ldrh	r3, [r7, #26]
 8011f94:	4413      	add	r3, r2
 8011f96:	b29a      	uxth	r2, r3
 8011f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f9a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f9e:	88db      	ldrh	r3, [r3, #6]
 8011fa0:	b29b      	uxth	r3, r3
 8011fa2:	8afa      	ldrh	r2, [r7, #22]
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	d902      	bls.n	8011fae <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8011fac:	e0cc      	b.n	8012148 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	685b      	ldr	r3, [r3, #4]
 8011fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8011fb4:	e068      	b.n	8012088 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb8:	685b      	ldr	r3, [r3, #4]
 8011fba:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fbe:	889b      	ldrh	r3, [r3, #4]
 8011fc0:	b29a      	uxth	r2, r3
 8011fc2:	693b      	ldr	r3, [r7, #16]
 8011fc4:	889b      	ldrh	r3, [r3, #4]
 8011fc6:	b29b      	uxth	r3, r3
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	d235      	bcs.n	8012038 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011fd0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d020      	beq.n	801201a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fda:	889b      	ldrh	r3, [r3, #4]
 8011fdc:	b29a      	uxth	r2, r3
 8011fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fe0:	88db      	ldrh	r3, [r3, #6]
 8011fe2:	b29b      	uxth	r3, r3
 8011fe4:	429a      	cmp	r2, r3
 8011fe6:	d307      	bcc.n	8011ff8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fea:	88db      	ldrh	r3, [r3, #6]
 8011fec:	b29a      	uxth	r2, r3
 8011fee:	693b      	ldr	r3, [r7, #16]
 8011ff0:	889b      	ldrh	r3, [r3, #4]
 8011ff2:	b29b      	uxth	r3, r3
 8011ff4:	429a      	cmp	r2, r3
 8011ff6:	d902      	bls.n	8011ffe <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8011ffc:	e0a4      	b.n	8012148 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012000:	68ba      	ldr	r2, [r7, #8]
 8012002:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012006:	88db      	ldrh	r3, [r3, #6]
 8012008:	b29a      	uxth	r2, r3
 801200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801200c:	889b      	ldrh	r3, [r3, #4]
 801200e:	b29b      	uxth	r3, r3
 8012010:	429a      	cmp	r2, r3
 8012012:	d03d      	beq.n	8012090 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012014:	2300      	movs	r3, #0
 8012016:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012018:	e03a      	b.n	8012090 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801201a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801201c:	88db      	ldrh	r3, [r3, #6]
 801201e:	b29a      	uxth	r2, r3
 8012020:	693b      	ldr	r3, [r7, #16]
 8012022:	889b      	ldrh	r3, [r3, #4]
 8012024:	b29b      	uxth	r3, r3
 8012026:	429a      	cmp	r2, r3
 8012028:	d902      	bls.n	8012030 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801202a:	f04f 33ff 	mov.w	r3, #4294967295
 801202e:	e08b      	b.n	8012148 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
        ipr->p = new_p;
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	68ba      	ldr	r2, [r7, #8]
 8012034:	605a      	str	r2, [r3, #4]
      break;
 8012036:	e02b      	b.n	8012090 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801203a:	889b      	ldrh	r3, [r3, #4]
 801203c:	b29a      	uxth	r2, r3
 801203e:	693b      	ldr	r3, [r7, #16]
 8012040:	889b      	ldrh	r3, [r3, #4]
 8012042:	b29b      	uxth	r3, r3
 8012044:	429a      	cmp	r2, r3
 8012046:	d102      	bne.n	801204e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012048:	f04f 33ff 	mov.w	r3, #4294967295
 801204c:	e07c      	b.n	8012148 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801204e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012050:	889b      	ldrh	r3, [r3, #4]
 8012052:	b29a      	uxth	r2, r3
 8012054:	693b      	ldr	r3, [r7, #16]
 8012056:	88db      	ldrh	r3, [r3, #6]
 8012058:	b29b      	uxth	r3, r3
 801205a:	429a      	cmp	r2, r3
 801205c:	d202      	bcs.n	8012064 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801205e:	f04f 33ff 	mov.w	r3, #4294967295
 8012062:	e071      	b.n	8012148 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012066:	2b00      	cmp	r3, #0
 8012068:	d009      	beq.n	801207e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801206a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801206c:	88db      	ldrh	r3, [r3, #6]
 801206e:	b29a      	uxth	r2, r3
 8012070:	693b      	ldr	r3, [r7, #16]
 8012072:	889b      	ldrh	r3, [r3, #4]
 8012074:	b29b      	uxth	r3, r3
 8012076:	429a      	cmp	r2, r3
 8012078:	d001      	beq.n	801207e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801207a:	2300      	movs	r3, #0
 801207c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801207e:	693b      	ldr	r3, [r7, #16]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012084:	693b      	ldr	r3, [r7, #16]
 8012086:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801208a:	2b00      	cmp	r3, #0
 801208c:	d193      	bne.n	8011fb6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801208e:	e000      	b.n	8012092 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012090:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012094:	2b00      	cmp	r3, #0
 8012096:	d117      	bne.n	80120c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1c0>
    if (iprh_prev != NULL) {
 8012098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801209a:	2b00      	cmp	r3, #0
 801209c:	d011      	beq.n	80120c2 <ip_reass_chain_frag_into_datagram_and_validate+0x1ba>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120a0:	88db      	ldrh	r3, [r3, #6]
 80120a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120a4:	889b      	ldrh	r3, [r3, #4]
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80120a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120a8:	68ba      	ldr	r2, [r7, #8]
 80120aa:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80120ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ae:	88db      	ldrh	r3, [r3, #6]
 80120b0:	b29a      	uxth	r2, r3
 80120b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b4:	889b      	ldrh	r3, [r3, #4]
 80120b6:	b29b      	uxth	r3, r3
 80120b8:	429a      	cmp	r2, r3
 80120ba:	d005      	beq.n	80120c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1c0>
        valid = 0;
 80120bc:	2300      	movs	r3, #0
 80120be:	623b      	str	r3, [r7, #32]
 80120c0:	e002      	b.n	80120c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1c0>
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	68ba      	ldr	r2, [r7, #8]
 80120c6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d105      	bne.n	80120da <ip_reass_chain_frag_into_datagram_and_validate+0x1d2>
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	7f9b      	ldrb	r3, [r3, #30]
 80120d2:	f003 0301 	and.w	r3, r3, #1
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d035      	beq.n	8012146 <ip_reass_chain_frag_into_datagram_and_validate+0x23e>
    /* and had no holes so far */
    if (valid) {
 80120da:	6a3b      	ldr	r3, [r7, #32]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d02b      	beq.n	8012138 <ip_reass_chain_frag_into_datagram_and_validate+0x230>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	685b      	ldr	r3, [r3, #4]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d006      	beq.n	80120f6 <ip_reass_chain_frag_into_datagram_and_validate+0x1ee>
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	685b      	ldr	r3, [r3, #4]
 80120ec:	685b      	ldr	r3, [r3, #4]
 80120ee:	889b      	ldrh	r3, [r3, #4]
 80120f0:	b29b      	uxth	r3, r3
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d002      	beq.n	80120fc <ip_reass_chain_frag_into_datagram_and_validate+0x1f4>
        valid = 0;
 80120f6:	2300      	movs	r3, #0
 80120f8:	623b      	str	r3, [r7, #32]
 80120fa:	e01d      	b.n	8012138 <ip_reass_chain_frag_into_datagram_and_validate+0x230>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80120fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120fe:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012106:	e012      	b.n	801212e <ip_reass_chain_frag_into_datagram_and_validate+0x226>
          iprh = (struct ip_reass_helper *)q->payload;
 8012108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801210a:	685b      	ldr	r3, [r3, #4]
 801210c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801210e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012110:	88db      	ldrh	r3, [r3, #6]
 8012112:	b29a      	uxth	r2, r3
 8012114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012116:	889b      	ldrh	r3, [r3, #4]
 8012118:	b29b      	uxth	r3, r3
 801211a:	429a      	cmp	r2, r3
 801211c:	d002      	beq.n	8012124 <ip_reass_chain_frag_into_datagram_and_validate+0x21c>
            valid = 0;
 801211e:	2300      	movs	r3, #0
 8012120:	623b      	str	r3, [r7, #32]
            break;
 8012122:	e007      	b.n	8012134 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
          }
          iprh_prev = iprh;
 8012124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012126:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012130:	2b00      	cmp	r3, #0
 8012132:	d1e9      	bne.n	8012108 <ip_reass_chain_frag_into_datagram_and_validate+0x200>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012134:	6a3b      	ldr	r3, [r7, #32]
 8012136:	2b00      	cmp	r3, #0
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012138:	6a3b      	ldr	r3, [r7, #32]
 801213a:	2b00      	cmp	r3, #0
 801213c:	bf14      	ite	ne
 801213e:	2301      	movne	r3, #1
 8012140:	2300      	moveq	r3, #0
 8012142:	b2db      	uxtb	r3, r3
 8012144:	e000      	b.n	8012148 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012146:	2300      	movs	r3, #0
}
 8012148:	4618      	mov	r0, r3
 801214a:	3730      	adds	r7, #48	; 0x30
 801214c:	46bd      	mov	sp, r7
 801214e:	bd80      	pop	{r7, pc}

08012150 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b08e      	sub	sp, #56	; 0x38
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 8012158:	4b94      	ldr	r3, [pc, #592]	; (80123ac <ip4_reass+0x25c>)
 801215a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801215c:	3301      	adds	r3, #1
 801215e:	b29a      	uxth	r2, r3
 8012160:	4b92      	ldr	r3, [pc, #584]	; (80123ac <ip4_reass+0x25c>)
 8012162:	865a      	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	685b      	ldr	r3, [r3, #4]
 8012168:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801216c:	781b      	ldrb	r3, [r3, #0]
 801216e:	f003 030f 	and.w	r3, r3, #15
 8012172:	b2db      	uxtb	r3, r3
 8012174:	009b      	lsls	r3, r3, #2
 8012176:	b2db      	uxtb	r3, r3
 8012178:	2b14      	cmp	r3, #20
 801217a:	d008      	beq.n	801218e <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 801217c:	4b8b      	ldr	r3, [pc, #556]	; (80123ac <ip4_reass+0x25c>)
 801217e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8012182:	3301      	adds	r3, #1
 8012184:	b29a      	uxth	r2, r3
 8012186:	4b89      	ldr	r3, [pc, #548]	; (80123ac <ip4_reass+0x25c>)
 8012188:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    goto nullreturn;
 801218c:	e161      	b.n	8012452 <ip4_reass+0x302>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801218e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012190:	88db      	ldrh	r3, [r3, #6]
 8012192:	b29b      	uxth	r3, r3
 8012194:	4618      	mov	r0, r3
 8012196:	f7f6 fe31 	bl	8008dfc <lwip_htons>
 801219a:	4603      	mov	r3, r0
 801219c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80121a0:	b29b      	uxth	r3, r3
 80121a2:	00db      	lsls	r3, r3, #3
 80121a4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80121a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121a8:	885b      	ldrh	r3, [r3, #2]
 80121aa:	b29b      	uxth	r3, r3
 80121ac:	4618      	mov	r0, r3
 80121ae:	f7f6 fe25 	bl	8008dfc <lwip_htons>
 80121b2:	4603      	mov	r3, r0
 80121b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80121b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121b8:	781b      	ldrb	r3, [r3, #0]
 80121ba:	f003 030f 	and.w	r3, r3, #15
 80121be:	b2db      	uxtb	r3, r3
 80121c0:	009b      	lsls	r3, r3, #2
 80121c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80121c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80121ca:	b29b      	uxth	r3, r3
 80121cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80121ce:	429a      	cmp	r2, r3
 80121d0:	f0c0 813c 	bcc.w	801244c <ip4_reass+0x2fc>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80121d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80121d8:	b29b      	uxth	r3, r3
 80121da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80121dc:	1ad3      	subs	r3, r2, r3
 80121de:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	f7f8 f9d3 	bl	800a58c <pbuf_clen>
 80121e6:	4603      	mov	r3, r0
 80121e8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80121ea:	4b71      	ldr	r3, [pc, #452]	; (80123b0 <ip4_reass+0x260>)
 80121ec:	881b      	ldrh	r3, [r3, #0]
 80121ee:	461a      	mov	r2, r3
 80121f0:	8c3b      	ldrh	r3, [r7, #32]
 80121f2:	4413      	add	r3, r2
 80121f4:	2b0a      	cmp	r3, #10
 80121f6:	dd15      	ble.n	8012224 <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80121f8:	8c3b      	ldrh	r3, [r7, #32]
 80121fa:	4619      	mov	r1, r3
 80121fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121fe:	f7ff fdc1 	bl	8011d84 <ip_reass_remove_oldest_datagram>
 8012202:	4603      	mov	r3, r0
 8012204:	2b00      	cmp	r3, #0
 8012206:	d006      	beq.n	8012216 <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012208:	4b69      	ldr	r3, [pc, #420]	; (80123b0 <ip4_reass+0x260>)
 801220a:	881b      	ldrh	r3, [r3, #0]
 801220c:	461a      	mov	r2, r3
 801220e:	8c3b      	ldrh	r3, [r7, #32]
 8012210:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012212:	2b0a      	cmp	r3, #10
 8012214:	dd06      	ble.n	8012224 <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 8012216:	4b65      	ldr	r3, [pc, #404]	; (80123ac <ip4_reass+0x25c>)
 8012218:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801221a:	3301      	adds	r3, #1
 801221c:	b29a      	uxth	r2, r3
 801221e:	4b63      	ldr	r3, [pc, #396]	; (80123ac <ip4_reass+0x25c>)
 8012220:	879a      	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 8012222:	e116      	b.n	8012452 <ip4_reass+0x302>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012224:	4b63      	ldr	r3, [pc, #396]	; (80123b4 <ip4_reass+0x264>)
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	633b      	str	r3, [r7, #48]	; 0x30
 801222a:	e01e      	b.n	801226a <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801222c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801222e:	695a      	ldr	r2, [r3, #20]
 8012230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012232:	68db      	ldr	r3, [r3, #12]
 8012234:	429a      	cmp	r2, r3
 8012236:	d115      	bne.n	8012264 <ip4_reass+0x114>
 8012238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801223a:	699a      	ldr	r2, [r3, #24]
 801223c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801223e:	691b      	ldr	r3, [r3, #16]
 8012240:	429a      	cmp	r2, r3
 8012242:	d10f      	bne.n	8012264 <ip4_reass+0x114>
 8012244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012246:	899a      	ldrh	r2, [r3, #12]
 8012248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801224a:	889b      	ldrh	r3, [r3, #4]
 801224c:	b29b      	uxth	r3, r3
 801224e:	429a      	cmp	r2, r3
 8012250:	d108      	bne.n	8012264 <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 8012252:	4b56      	ldr	r3, [pc, #344]	; (80123ac <ip4_reass+0x25c>)
 8012254:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012258:	3301      	adds	r3, #1
 801225a:	b29a      	uxth	r2, r3
 801225c:	4b53      	ldr	r3, [pc, #332]	; (80123ac <ip4_reass+0x25c>)
 801225e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      break;
 8012262:	e005      	b.n	8012270 <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	633b      	str	r3, [r7, #48]	; 0x30
 801226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801226c:	2b00      	cmp	r3, #0
 801226e:	d1dd      	bne.n	801222c <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 8012270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012272:	2b00      	cmp	r3, #0
 8012274:	d109      	bne.n	801228a <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012276:	8c3b      	ldrh	r3, [r7, #32]
 8012278:	4619      	mov	r1, r3
 801227a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801227c:	f7ff fde4 	bl	8011e48 <ip_reass_enqueue_new_datagram>
 8012280:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012284:	2b00      	cmp	r3, #0
 8012286:	d11c      	bne.n	80122c2 <ip4_reass+0x172>
      goto nullreturn;
 8012288:	e0e3      	b.n	8012452 <ip4_reass+0x302>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801228a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801228c:	88db      	ldrh	r3, [r3, #6]
 801228e:	b29b      	uxth	r3, r3
 8012290:	4618      	mov	r0, r3
 8012292:	f7f6 fdb3 	bl	8008dfc <lwip_htons>
 8012296:	4603      	mov	r3, r0
 8012298:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801229c:	2b00      	cmp	r3, #0
 801229e:	d110      	bne.n	80122c2 <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80122a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122a2:	89db      	ldrh	r3, [r3, #14]
 80122a4:	4618      	mov	r0, r3
 80122a6:	f7f6 fda9 	bl	8008dfc <lwip_htons>
 80122aa:	4603      	mov	r3, r0
 80122ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d006      	beq.n	80122c2 <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80122b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122b6:	3308      	adds	r3, #8
 80122b8:	2214      	movs	r2, #20
 80122ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80122bc:	4618      	mov	r0, r3
 80122be:	f001 f93f 	bl	8013540 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80122c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122c4:	88db      	ldrh	r3, [r3, #6]
 80122c6:	b29b      	uxth	r3, r3
 80122c8:	f003 0320 	and.w	r3, r3, #32
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	bf0c      	ite	eq
 80122d0:	2301      	moveq	r3, #1
 80122d2:	2300      	movne	r3, #0
 80122d4:	b2db      	uxtb	r3, r3
 80122d6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80122d8:	69fb      	ldr	r3, [r7, #28]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d00e      	beq.n	80122fc <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 80122de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80122e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122e2:	4413      	add	r3, r2
 80122e4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80122e6:	8b7a      	ldrh	r2, [r7, #26]
 80122e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122ea:	429a      	cmp	r2, r3
 80122ec:	f0c0 80a2 	bcc.w	8012434 <ip4_reass+0x2e4>
 80122f0:	8b7b      	ldrh	r3, [r7, #26]
 80122f2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80122f6:	4293      	cmp	r3, r2
 80122f8:	f200 809c 	bhi.w	8012434 <ip4_reass+0x2e4>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80122fc:	69fa      	ldr	r2, [r7, #28]
 80122fe:	6879      	ldr	r1, [r7, #4]
 8012300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012302:	f7ff fe01 	bl	8011f08 <ip_reass_chain_frag_into_datagram_and_validate>
 8012306:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012308:	697b      	ldr	r3, [r7, #20]
 801230a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801230e:	f000 8093 	beq.w	8012438 <ip4_reass+0x2e8>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012312:	4b27      	ldr	r3, [pc, #156]	; (80123b0 <ip4_reass+0x260>)
 8012314:	881a      	ldrh	r2, [r3, #0]
 8012316:	8c3b      	ldrh	r3, [r7, #32]
 8012318:	4413      	add	r3, r2
 801231a:	b29a      	uxth	r2, r3
 801231c:	4b24      	ldr	r3, [pc, #144]	; (80123b0 <ip4_reass+0x260>)
 801231e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012320:	69fb      	ldr	r3, [r7, #28]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d00d      	beq.n	8012342 <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 8012326:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012328:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801232a:	4413      	add	r3, r2
 801232c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012330:	8a7a      	ldrh	r2, [r7, #18]
 8012332:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012336:	7f9b      	ldrb	r3, [r3, #30]
 8012338:	f043 0301 	orr.w	r3, r3, #1
 801233c:	b2da      	uxtb	r2, r3
 801233e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012340:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012342:	697b      	ldr	r3, [r7, #20]
 8012344:	2b01      	cmp	r3, #1
 8012346:	d173      	bne.n	8012430 <ip4_reass+0x2e0>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801234a:	8b9b      	ldrh	r3, [r3, #28]
 801234c:	3314      	adds	r3, #20
 801234e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012352:	685b      	ldr	r3, [r3, #4]
 8012354:	685b      	ldr	r3, [r3, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801235a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801235c:	685b      	ldr	r3, [r3, #4]
 801235e:	685b      	ldr	r3, [r3, #4]
 8012360:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012364:	3308      	adds	r3, #8
 8012366:	2214      	movs	r2, #20
 8012368:	4619      	mov	r1, r3
 801236a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801236c:	f001 f8e8 	bl	8013540 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012370:	8a3b      	ldrh	r3, [r7, #16]
 8012372:	4618      	mov	r0, r3
 8012374:	f7f6 fd42 	bl	8008dfc <lwip_htons>
 8012378:	4603      	mov	r3, r0
 801237a:	461a      	mov	r2, r3
 801237c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801237e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012382:	2200      	movs	r2, #0
 8012384:	719a      	strb	r2, [r3, #6]
 8012386:	2200      	movs	r2, #0
 8012388:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801238a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801238c:	2200      	movs	r2, #0
 801238e:	729a      	strb	r2, [r3, #10]
 8012390:	2200      	movs	r2, #0
 8012392:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8012394:	2114      	movs	r1, #20
 8012396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012398:	f7f6 fe78 	bl	800908c <inet_chksum>
 801239c:	4603      	mov	r3, r0
 801239e:	461a      	mov	r2, r3
 80123a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123a2:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80123a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123a6:	685b      	ldr	r3, [r3, #4]
 80123a8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80123aa:	e013      	b.n	80123d4 <ip4_reass+0x284>
 80123ac:	200080c8 	.word	0x200080c8
 80123b0:	20008340 	.word	0x20008340
 80123b4:	2000833c 	.word	0x2000833c
      iprh = (struct ip_reass_helper *)r->payload;
 80123b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123ba:	685b      	ldr	r3, [r3, #4]
 80123bc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80123be:	2114      	movs	r1, #20
 80123c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80123c2:	f7f8 f81f 	bl	800a404 <pbuf_remove_header>
      pbuf_cat(p, r);
 80123c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f7f8 f909 	bl	800a5e0 <pbuf_cat>
      r = iprh->next_pbuf;
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 80123d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d1ee      	bne.n	80123b8 <ip4_reass+0x268>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80123da:	4b25      	ldr	r3, [pc, #148]	; (8012470 <ip4_reass+0x320>)
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123e0:	429a      	cmp	r2, r3
 80123e2:	d102      	bne.n	80123ea <ip4_reass+0x29a>
      ipr_prev = NULL;
 80123e4:	2300      	movs	r3, #0
 80123e6:	637b      	str	r3, [r7, #52]	; 0x34
 80123e8:	e010      	b.n	801240c <ip4_reass+0x2bc>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80123ea:	4b21      	ldr	r3, [pc, #132]	; (8012470 <ip4_reass+0x320>)
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	637b      	str	r3, [r7, #52]	; 0x34
 80123f0:	e007      	b.n	8012402 <ip4_reass+0x2b2>
        if (ipr_prev->next == ipr) {
 80123f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123f8:	429a      	cmp	r2, r3
 80123fa:	d006      	beq.n	801240a <ip4_reass+0x2ba>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80123fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	637b      	str	r3, [r7, #52]	; 0x34
 8012402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012404:	2b00      	cmp	r3, #0
 8012406:	d1f4      	bne.n	80123f2 <ip4_reass+0x2a2>
 8012408:	e000      	b.n	801240c <ip4_reass+0x2bc>
          break;
 801240a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801240c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801240e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012410:	f7ff fd5c 	bl	8011ecc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f7f8 f8b9 	bl	800a58c <pbuf_clen>
 801241a:	4603      	mov	r3, r0
 801241c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801241e:	4b15      	ldr	r3, [pc, #84]	; (8012474 <ip4_reass+0x324>)
 8012420:	881a      	ldrh	r2, [r3, #0]
 8012422:	8c3b      	ldrh	r3, [r7, #32]
 8012424:	1ad3      	subs	r3, r2, r3
 8012426:	b29a      	uxth	r2, r3
 8012428:	4b12      	ldr	r3, [pc, #72]	; (8012474 <ip4_reass+0x324>)
 801242a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	e01a      	b.n	8012466 <ip4_reass+0x316>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012430:	2300      	movs	r3, #0
 8012432:	e018      	b.n	8012466 <ip4_reass+0x316>
      goto nullreturn_ipr;
 8012434:	bf00      	nop
 8012436:	e000      	b.n	801243a <ip4_reass+0x2ea>
    goto nullreturn_ipr;
 8012438:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
  if (ipr->p == NULL) {
 801243a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801243c:	685b      	ldr	r3, [r3, #4]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d106      	bne.n	8012450 <ip4_reass+0x300>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
    ip_reass_dequeue_datagram(ipr, NULL);
 8012442:	2100      	movs	r1, #0
 8012444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012446:	f7ff fd41 	bl	8011ecc <ip_reass_dequeue_datagram>
 801244a:	e002      	b.n	8012452 <ip4_reass+0x302>
    goto nullreturn;
 801244c:	bf00      	nop
 801244e:	e000      	b.n	8012452 <ip4_reass+0x302>
  }

nullreturn:
 8012450:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 8012452:	4b09      	ldr	r3, [pc, #36]	; (8012478 <ip4_reass+0x328>)
 8012454:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012456:	3301      	adds	r3, #1
 8012458:	b29a      	uxth	r2, r3
 801245a:	4b07      	ldr	r3, [pc, #28]	; (8012478 <ip4_reass+0x328>)
 801245c:	86da      	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
 801245e:	6878      	ldr	r0, [r7, #4]
 8012460:	f7f8 f841 	bl	800a4e6 <pbuf_free>
  return NULL;
 8012464:	2300      	movs	r3, #0
}
 8012466:	4618      	mov	r0, r3
 8012468:	3738      	adds	r7, #56	; 0x38
 801246a:	46bd      	mov	sp, r7
 801246c:	bd80      	pop	{r7, pc}
 801246e:	bf00      	nop
 8012470:	2000833c 	.word	0x2000833c
 8012474:	20008340 	.word	0x20008340
 8012478:	200080c8 	.word	0x200080c8

0801247c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012480:	2005      	movs	r0, #5
 8012482:	f7f7 fa3f 	bl	8009904 <memp_malloc>
 8012486:	4603      	mov	r3, r0
}
 8012488:	4618      	mov	r0, r3
 801248a:	bd80      	pop	{r7, pc}

0801248c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b082      	sub	sp, #8
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
  memp_free(MEMP_FRAG_PBUF, p);
 8012494:	6879      	ldr	r1, [r7, #4]
 8012496:	2005      	movs	r0, #5
 8012498:	f7f7 fa6e 	bl	8009978 <memp_free>
}
 801249c:	bf00      	nop
 801249e:	3708      	adds	r7, #8
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}

080124a4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b084      	sub	sp, #16
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	695b      	ldr	r3, [r3, #20]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d004      	beq.n	80124c2 <ipfrag_free_pbuf_custom+0x1e>
    pbuf_free(pcr->original);
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	695b      	ldr	r3, [r3, #20]
 80124bc:	4618      	mov	r0, r3
 80124be:	f7f8 f812 	bl	800a4e6 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80124c2:	68f8      	ldr	r0, [r7, #12]
 80124c4:	f7ff ffe2 	bl	801248c <ip_frag_free_pbuf_custom_ref>
}
 80124c8:	bf00      	nop
 80124ca:	3710      	adds	r7, #16
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}

080124d0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b094      	sub	sp, #80	; 0x50
 80124d4:	af02      	add	r7, sp, #8
 80124d6:	60f8      	str	r0, [r7, #12]
 80124d8:	60b9      	str	r1, [r7, #8]
 80124da:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80124dc:	2300      	movs	r3, #0
 80124de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80124e6:	3b14      	subs	r3, #20
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	da00      	bge.n	80124ee <ip4_frag+0x1e>
 80124ec:	3307      	adds	r3, #7
 80124ee:	10db      	asrs	r3, r3, #3
 80124f0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80124f2:	2314      	movs	r3, #20
 80124f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	685b      	ldr	r3, [r3, #4]
 80124fa:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80124fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124fe:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012502:	781b      	ldrb	r3, [r3, #0]
 8012504:	f003 030f 	and.w	r3, r3, #15
 8012508:	b2db      	uxtb	r3, r3
 801250a:	009b      	lsls	r3, r3, #2
 801250c:	b2db      	uxtb	r3, r3
 801250e:	2b14      	cmp	r3, #20
 8012510:	d002      	beq.n	8012518 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012512:	f06f 0305 	mvn.w	r3, #5
 8012516:	e103      	b.n	8012720 <ip4_frag+0x250>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	895b      	ldrh	r3, [r3, #10]
 801251c:	2b13      	cmp	r3, #19
 801251e:	d805      	bhi.n	801252c <ip4_frag+0x5c>
 8012520:	4881      	ldr	r0, [pc, #516]	; (8012728 <ip4_frag+0x258>)
 8012522:	f7ed feb6 	bl	8000292 <Console_DEBUG>
 8012526:	f06f 0305 	mvn.w	r3, #5
 801252a:	e0f9      	b.n	8012720 <ip4_frag+0x250>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801252e:	88db      	ldrh	r3, [r3, #6]
 8012530:	b29b      	uxth	r3, r3
 8012532:	4618      	mov	r0, r3
 8012534:	f7f6 fc62 	bl	8008dfc <lwip_htons>
 8012538:	4603      	mov	r3, r0
 801253a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801253c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801253e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012542:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012546:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801254c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	891b      	ldrh	r3, [r3, #8]
 8012552:	3b14      	subs	r3, #20
 8012554:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012558:	e0d8      	b.n	801270c <ip4_frag+0x23c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801255a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801255c:	00db      	lsls	r3, r3, #3
 801255e:	b29b      	uxth	r3, r3
 8012560:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012564:	4293      	cmp	r3, r2
 8012566:	bf28      	it	cs
 8012568:	4613      	movcs	r3, r2
 801256a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801256c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012570:	2114      	movs	r1, #20
 8012572:	200e      	movs	r0, #14
 8012574:	f7f7 fd70 	bl	800a058 <pbuf_alloc>
 8012578:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801257c:	2b00      	cmp	r3, #0
 801257e:	f000 80cc 	beq.w	801271a <ip4_frag+0x24a>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012584:	685b      	ldr	r3, [r3, #4]
 8012586:	2214      	movs	r2, #20
 8012588:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801258a:	4618      	mov	r0, r3
 801258c:	f000 ffd8 	bl	8013540 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012592:	685b      	ldr	r3, [r3, #4]
 8012594:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012596:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012598:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801259c:	e058      	b.n	8012650 <ip4_frag+0x180>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	895a      	ldrh	r2, [r3, #10]
 80125a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80125a4:	1ad3      	subs	r3, r2, r3
 80125a6:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80125a8:	8bfa      	ldrh	r2, [r7, #30]
 80125aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80125ae:	4293      	cmp	r3, r2
 80125b0:	bf28      	it	cs
 80125b2:	4613      	movcs	r3, r2
 80125b4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80125b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d105      	bne.n	80125cc <ip4_frag+0xfc>
        poff = 0;
 80125c0:	2300      	movs	r3, #0
 80125c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	60fb      	str	r3, [r7, #12]
        continue;
 80125ca:	e041      	b.n	8012650 <ip4_frag+0x180>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80125cc:	f7ff ff56 	bl	801247c <ip_frag_alloc_pbuf_custom_ref>
 80125d0:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80125d2:	69bb      	ldr	r3, [r7, #24]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d103      	bne.n	80125e0 <ip4_frag+0x110>
        pbuf_free(rambuf);
 80125d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80125da:	f7f7 ff84 	bl	800a4e6 <pbuf_free>
        goto memerr;
 80125de:	e09d      	b.n	801271c <ip4_frag+0x24c>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80125e0:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80125e6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80125e8:	4413      	add	r3, r2
 80125ea:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80125ee:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80125f2:	9201      	str	r2, [sp, #4]
 80125f4:	9300      	str	r3, [sp, #0]
 80125f6:	4603      	mov	r3, r0
 80125f8:	2241      	movs	r2, #65	; 0x41
 80125fa:	2000      	movs	r0, #0
 80125fc:	f7f7 fe05 	bl	800a20a <pbuf_alloced_custom>
 8012600:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012602:	697b      	ldr	r3, [r7, #20]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d106      	bne.n	8012616 <ip4_frag+0x146>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012608:	69b8      	ldr	r0, [r7, #24]
 801260a:	f7ff ff3f 	bl	801248c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801260e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012610:	f7f7 ff69 	bl	800a4e6 <pbuf_free>
        goto memerr;
 8012614:	e082      	b.n	801271c <ip4_frag+0x24c>
      }
      pbuf_ref(p);
 8012616:	68f8      	ldr	r0, [r7, #12]
 8012618:	f7f7 ffcf 	bl	800a5ba <pbuf_ref>
      pcr->original = p;
 801261c:	69bb      	ldr	r3, [r7, #24]
 801261e:	68fa      	ldr	r2, [r7, #12]
 8012620:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012622:	69bb      	ldr	r3, [r7, #24]
 8012624:	4a41      	ldr	r2, [pc, #260]	; (801272c <ip4_frag+0x25c>)
 8012626:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012628:	6979      	ldr	r1, [r7, #20]
 801262a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801262c:	f7f7 ffd8 	bl	800a5e0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012630:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012634:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012638:	1ad3      	subs	r3, r2, r3
 801263a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801263e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012642:	2b00      	cmp	r3, #0
 8012644:	d004      	beq.n	8012650 <ip4_frag+0x180>
        poff = 0;
 8012646:	2300      	movs	r3, #0
 8012648:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012650:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012654:	2b00      	cmp	r3, #0
 8012656:	d1a2      	bne.n	801259e <ip4_frag+0xce>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012658:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801265a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801265e:	4413      	add	r3, r2
 8012660:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012662:	68bb      	ldr	r3, [r7, #8]
 8012664:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012666:	f1a3 0213 	sub.w	r2, r3, #19
 801266a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801266e:	429a      	cmp	r2, r3
 8012670:	bfcc      	ite	gt
 8012672:	2301      	movgt	r3, #1
 8012674:	2300      	movle	r3, #0
 8012676:	b2db      	uxtb	r3, r3
 8012678:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801267a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801267e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012682:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012684:	6a3b      	ldr	r3, [r7, #32]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d002      	beq.n	8012690 <ip4_frag+0x1c0>
 801268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801268c:	2b00      	cmp	r3, #0
 801268e:	d003      	beq.n	8012698 <ip4_frag+0x1c8>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012690:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012692:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012696:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012698:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801269a:	4618      	mov	r0, r3
 801269c:	f7f6 fbae 	bl	8008dfc <lwip_htons>
 80126a0:	4603      	mov	r3, r0
 80126a2:	461a      	mov	r2, r3
 80126a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a6:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80126a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80126aa:	3314      	adds	r3, #20
 80126ac:	b29b      	uxth	r3, r3
 80126ae:	4618      	mov	r0, r3
 80126b0:	f7f6 fba4 	bl	8008dfc <lwip_htons>
 80126b4:	4603      	mov	r3, r0
 80126b6:	461a      	mov	r2, r3
 80126b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ba:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80126bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126be:	2200      	movs	r2, #0
 80126c0:	729a      	strb	r2, [r3, #10]
 80126c2:	2200      	movs	r2, #0
 80126c4:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 80126c6:	2114      	movs	r1, #20
 80126c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126ca:	f7f6 fcdf 	bl	800908c <inet_chksum>
 80126ce:	4603      	mov	r3, r0
 80126d0:	461a      	mov	r2, r3
 80126d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126d4:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80126d6:	68bb      	ldr	r3, [r7, #8]
 80126d8:	695b      	ldr	r3, [r3, #20]
 80126da:	687a      	ldr	r2, [r7, #4]
 80126dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80126de:	68b8      	ldr	r0, [r7, #8]
 80126e0:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 80126e2:	4b13      	ldr	r3, [pc, #76]	; (8012730 <ip4_frag+0x260>)
 80126e4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80126e6:	3301      	adds	r3, #1
 80126e8:	b29a      	uxth	r2, r3
 80126ea:	4b11      	ldr	r3, [pc, #68]	; (8012730 <ip4_frag+0x260>)
 80126ec:	861a      	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80126ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80126f0:	f7f7 fef9 	bl	800a4e6 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80126f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80126f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80126fa:	1ad3      	subs	r3, r2, r3
 80126fc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8012700:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012704:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012706:	4413      	add	r3, r2
 8012708:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801270c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012710:	2b00      	cmp	r3, #0
 8012712:	f47f af22 	bne.w	801255a <ip4_frag+0x8a>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012716:	2300      	movs	r3, #0
 8012718:	e002      	b.n	8012720 <ip4_frag+0x250>
      goto memerr;
 801271a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801271c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012720:	4618      	mov	r0, r3
 8012722:	3748      	adds	r7, #72	; 0x48
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}
 8012728:	08016858 	.word	0x08016858
 801272c:	080124a5 	.word	0x080124a5
 8012730:	200080c8 	.word	0x200080c8

08012734 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b086      	sub	sp, #24
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
 801273c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801273e:	230e      	movs	r3, #14
 8012740:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	895b      	ldrh	r3, [r3, #10]
 8012746:	2b0e      	cmp	r3, #14
 8012748:	d80c      	bhi.n	8012764 <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 801274a:	4b51      	ldr	r3, [pc, #324]	; (8012890 <ethernet_input+0x15c>)
 801274c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801274e:	3301      	adds	r3, #1
 8012750:	b29a      	uxth	r2, r3
 8012752:	4b4f      	ldr	r3, [pc, #316]	; (8012890 <ethernet_input+0x15c>)
 8012754:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 8012756:	4b4e      	ldr	r3, [pc, #312]	; (8012890 <ethernet_input+0x15c>)
 8012758:	8bdb      	ldrh	r3, [r3, #30]
 801275a:	3301      	adds	r3, #1
 801275c:	b29a      	uxth	r2, r3
 801275e:	4b4c      	ldr	r3, [pc, #304]	; (8012890 <ethernet_input+0x15c>)
 8012760:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 8012762:	e08d      	b.n	8012880 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	7bdb      	ldrb	r3, [r3, #15]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d106      	bne.n	801277a <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 801276c:	683b      	ldr	r3, [r7, #0]
 801276e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012772:	3301      	adds	r3, #1
 8012774:	b2da      	uxtb	r2, r3
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	685b      	ldr	r3, [r3, #4]
 801277e:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012780:	693b      	ldr	r3, [r7, #16]
 8012782:	7b1a      	ldrb	r2, [r3, #12]
 8012784:	7b5b      	ldrb	r3, [r3, #13]
 8012786:	021b      	lsls	r3, r3, #8
 8012788:	4313      	orrs	r3, r2
 801278a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801278c:	693b      	ldr	r3, [r7, #16]
 801278e:	781b      	ldrb	r3, [r3, #0]
 8012790:	f003 0301 	and.w	r3, r3, #1
 8012794:	2b00      	cmp	r3, #0
 8012796:	d023      	beq.n	80127e0 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012798:	693b      	ldr	r3, [r7, #16]
 801279a:	781b      	ldrb	r3, [r3, #0]
 801279c:	2b01      	cmp	r3, #1
 801279e:	d10f      	bne.n	80127c0 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80127a0:	693b      	ldr	r3, [r7, #16]
 80127a2:	785b      	ldrb	r3, [r3, #1]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d11b      	bne.n	80127e0 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80127a8:	693b      	ldr	r3, [r7, #16]
 80127aa:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80127ac:	2b5e      	cmp	r3, #94	; 0x5e
 80127ae:	d117      	bne.n	80127e0 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	7b5b      	ldrb	r3, [r3, #13]
 80127b4:	f043 0310 	orr.w	r3, r3, #16
 80127b8:	b2da      	uxtb	r2, r3
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	735a      	strb	r2, [r3, #13]
 80127be:	e00f      	b.n	80127e0 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80127c0:	693b      	ldr	r3, [r7, #16]
 80127c2:	2206      	movs	r2, #6
 80127c4:	4933      	ldr	r1, [pc, #204]	; (8012894 <ethernet_input+0x160>)
 80127c6:	4618      	mov	r0, r3
 80127c8:	f000 feaa 	bl	8013520 <memcmp>
 80127cc:	4603      	mov	r3, r0
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d106      	bne.n	80127e0 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	7b5b      	ldrb	r3, [r3, #13]
 80127d6:	f043 0308 	orr.w	r3, r3, #8
 80127da:	b2da      	uxtb	r2, r3
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80127e0:	89fb      	ldrh	r3, [r7, #14]
 80127e2:	2b08      	cmp	r3, #8
 80127e4:	d003      	beq.n	80127ee <ethernet_input+0xba>
 80127e6:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80127ea:	d014      	beq.n	8012816 <ethernet_input+0xe2>
 80127ec:	e034      	b.n	8012858 <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80127ee:	683b      	ldr	r3, [r7, #0]
 80127f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80127f4:	f003 0308 	and.w	r3, r3, #8
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d03c      	beq.n	8012876 <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80127fc:	8afb      	ldrh	r3, [r7, #22]
 80127fe:	4619      	mov	r1, r3
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	f7f7 fdff 	bl	800a404 <pbuf_remove_header>
 8012806:	4603      	mov	r3, r0
 8012808:	2b00      	cmp	r3, #0
 801280a:	d136      	bne.n	801287a <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 801280c:	6839      	ldr	r1, [r7, #0]
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f7fe fdea 	bl	80113e8 <ip4_input>
      }
      break;
 8012814:	e02d      	b.n	8012872 <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012816:	683b      	ldr	r3, [r7, #0]
 8012818:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801281c:	f003 0308 	and.w	r3, r3, #8
 8012820:	2b00      	cmp	r3, #0
 8012822:	d02c      	beq.n	801287e <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012824:	8afb      	ldrh	r3, [r7, #22]
 8012826:	4619      	mov	r1, r3
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f7f7 fdeb 	bl	800a404 <pbuf_remove_header>
 801282e:	4603      	mov	r3, r0
 8012830:	2b00      	cmp	r3, #0
 8012832:	d00c      	beq.n	801284e <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 8012834:	4b16      	ldr	r3, [pc, #88]	; (8012890 <ethernet_input+0x15c>)
 8012836:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8012838:	3301      	adds	r3, #1
 801283a:	b29a      	uxth	r2, r3
 801283c:	4b14      	ldr	r3, [pc, #80]	; (8012890 <ethernet_input+0x15c>)
 801283e:	845a      	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 8012840:	4b13      	ldr	r3, [pc, #76]	; (8012890 <ethernet_input+0x15c>)
 8012842:	8bdb      	ldrh	r3, [r3, #30]
 8012844:	3301      	adds	r3, #1
 8012846:	b29a      	uxth	r2, r3
 8012848:	4b11      	ldr	r3, [pc, #68]	; (8012890 <ethernet_input+0x15c>)
 801284a:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 801284c:	e018      	b.n	8012880 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 801284e:	6839      	ldr	r1, [r7, #0]
 8012850:	6878      	ldr	r0, [r7, #4]
 8012852:	f7fd fc89 	bl	8010168 <etharp_input>
      }
      break;
 8012856:	e00c      	b.n	8012872 <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 8012858:	4b0d      	ldr	r3, [pc, #52]	; (8012890 <ethernet_input+0x15c>)
 801285a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801285c:	3301      	adds	r3, #1
 801285e:	b29a      	uxth	r2, r3
 8012860:	4b0b      	ldr	r3, [pc, #44]	; (8012890 <ethernet_input+0x15c>)
 8012862:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 8012864:	4b0a      	ldr	r3, [pc, #40]	; (8012890 <ethernet_input+0x15c>)
 8012866:	8bdb      	ldrh	r3, [r3, #30]
 8012868:	3301      	adds	r3, #1
 801286a:	b29a      	uxth	r2, r3
 801286c:	4b08      	ldr	r3, [pc, #32]	; (8012890 <ethernet_input+0x15c>)
 801286e:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012870:	e006      	b.n	8012880 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012872:	2300      	movs	r3, #0
 8012874:	e008      	b.n	8012888 <ethernet_input+0x154>
        goto free_and_return;
 8012876:	bf00      	nop
 8012878:	e002      	b.n	8012880 <ethernet_input+0x14c>
        goto free_and_return;
 801287a:	bf00      	nop
 801287c:	e000      	b.n	8012880 <ethernet_input+0x14c>
        goto free_and_return;
 801287e:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012880:	6878      	ldr	r0, [r7, #4]
 8012882:	f7f7 fe30 	bl	800a4e6 <pbuf_free>
  return ERR_OK;
 8012886:	2300      	movs	r3, #0
}
 8012888:	4618      	mov	r0, r3
 801288a:	3718      	adds	r7, #24
 801288c:	46bd      	mov	sp, r7
 801288e:	bd80      	pop	{r7, pc}
 8012890:	200080c8 	.word	0x200080c8
 8012894:	08016ca4 	.word	0x08016ca4

08012898 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012898:	b580      	push	{r7, lr}
 801289a:	b086      	sub	sp, #24
 801289c:	af00      	add	r7, sp, #0
 801289e:	60f8      	str	r0, [r7, #12]
 80128a0:	60b9      	str	r1, [r7, #8]
 80128a2:	607a      	str	r2, [r7, #4]
 80128a4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80128a6:	8c3b      	ldrh	r3, [r7, #32]
 80128a8:	4618      	mov	r0, r3
 80128aa:	f7f6 faa7 	bl	8008dfc <lwip_htons>
 80128ae:	4603      	mov	r3, r0
 80128b0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80128b2:	210e      	movs	r1, #14
 80128b4:	68b8      	ldr	r0, [r7, #8]
 80128b6:	f7f7 fd95 	bl	800a3e4 <pbuf_add_header>
 80128ba:	4603      	mov	r3, r0
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d119      	bne.n	80128f4 <ethernet_output+0x5c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80128c0:	68bb      	ldr	r3, [r7, #8]
 80128c2:	685b      	ldr	r3, [r3, #4]
 80128c4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80128c6:	693b      	ldr	r3, [r7, #16]
 80128c8:	8afa      	ldrh	r2, [r7, #22]
 80128ca:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80128cc:	693b      	ldr	r3, [r7, #16]
 80128ce:	2206      	movs	r2, #6
 80128d0:	6839      	ldr	r1, [r7, #0]
 80128d2:	4618      	mov	r0, r3
 80128d4:	f000 fe34 	bl	8013540 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80128d8:	693b      	ldr	r3, [r7, #16]
 80128da:	3306      	adds	r3, #6
 80128dc:	2206      	movs	r2, #6
 80128de:	6879      	ldr	r1, [r7, #4]
 80128e0:	4618      	mov	r0, r3
 80128e2:	f000 fe2d 	bl	8013540 <memcpy>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	699b      	ldr	r3, [r3, #24]
 80128ea:	68b9      	ldr	r1, [r7, #8]
 80128ec:	68f8      	ldr	r0, [r7, #12]
 80128ee:	4798      	blx	r3
 80128f0:	4603      	mov	r3, r0
 80128f2:	e008      	b.n	8012906 <ethernet_output+0x6e>
      goto pbuf_header_failed;
 80128f4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 80128f6:	4b06      	ldr	r3, [pc, #24]	; (8012910 <ethernet_output+0x78>)
 80128f8:	895b      	ldrh	r3, [r3, #10]
 80128fa:	3301      	adds	r3, #1
 80128fc:	b29a      	uxth	r2, r3
 80128fe:	4b04      	ldr	r3, [pc, #16]	; (8012910 <ethernet_output+0x78>)
 8012900:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 8012902:	f06f 0301 	mvn.w	r3, #1
}
 8012906:	4618      	mov	r0, r3
 8012908:	3718      	adds	r7, #24
 801290a:	46bd      	mov	sp, r7
 801290c:	bd80      	pop	{r7, pc}
 801290e:	bf00      	nop
 8012910:	200080c8 	.word	0x200080c8

08012914 <enc_setup_basic>:
 * This function needs to be called first whenever the MCU or the network
 * device is powered up. It will not configure transmission or reception; use
 * @ref enc_ethernet_setup for that, possibly after having run self tests.
 * */
int enc_setup_basic(enc_device_t *dev)
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b082      	sub	sp, #8
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_RESET);
//	HAL_Delay(20);
//	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
//	HAL_Delay(100);

	enchw_setup(HWDEV);
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	689b      	ldr	r3, [r3, #8]
 8012920:	4618      	mov	r0, r3
 8012922:	f000 fcad 	bl	8013280 <enchw_setup>

	if (enc_wait(dev))
 8012926:	6878      	ldr	r0, [r7, #4]
 8012928:	f000 fa58 	bl	8012ddc <enc_wait>
 801292c:	4603      	mov	r3, r0
 801292e:	2b00      	cmp	r3, #0
 8012930:	d001      	beq.n	8012936 <enc_setup_basic+0x22>
		return 1;
 8012932:	2301      	movs	r3, #1
 8012934:	e00c      	b.n	8012950 <enc_setup_basic+0x3c>

	dev->last_used_register = ENC_BANK_INDETERMINATE;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	2280      	movs	r2, #128	; 0x80
 801293a:	701a      	strb	r2, [r3, #0]
	dev->rxbufsize = ~0;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012942:	805a      	strh	r2, [r3, #2]

	enc_BFS(dev, ENC_ECON2, ENC_ECON2_AUTOINC);
 8012944:	2280      	movs	r2, #128	; 0x80
 8012946:	21de      	movs	r1, #222	; 0xde
 8012948:	6878      	ldr	r0, [r7, #4]
 801294a:	f000 f956 	bl	8012bfa <enc_BFS>

	return 0;
 801294e:	2300      	movs	r3, #0
}
 8012950:	4618      	mov	r0, r3
 8012952:	3708      	adds	r7, #8
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}

08012958 <set_erxnd>:

static void set_erxnd(enc_device_t *dev, uint16_t erxnd)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b082      	sub	sp, #8
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	460b      	mov	r3, r1
 8012962:	807b      	strh	r3, [r7, #2]
	if (erxnd != dev->rxbufsize)
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	885b      	ldrh	r3, [r3, #2]
 8012968:	887a      	ldrh	r2, [r7, #2]
 801296a:	429a      	cmp	r2, r3
 801296c:	d008      	beq.n	8012980 <set_erxnd+0x28>
	{
		dev->rxbufsize = erxnd;
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	887a      	ldrh	r2, [r7, #2]
 8012972:	805a      	strh	r2, [r3, #2]
		enc_WCR16(dev, ENC_ERXNDL, erxnd);
 8012974:	887b      	ldrh	r3, [r7, #2]
 8012976:	461a      	mov	r2, r3
 8012978:	212a      	movs	r1, #42	; 0x2a
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	f000 fa0c 	bl	8012d98 <enc_WCR16>
	}
}
 8012980:	bf00      	nop
 8012982:	3708      	adds	r7, #8
 8012984:	46bd      	mov	sp, r7
 8012986:	bd80      	pop	{r7, pc}

08012988 <enc_bist_manual>:
}

/* Similar check to enc_bist, but doesn't rely on the BIST of the chip but
 * doesn some own reading and writing */
uint8_t enc_bist_manual(enc_device_t *dev)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b0c4      	sub	sp, #272	; 0x110
 801298c:	af00      	add	r7, sp, #0
 801298e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012992:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012996:	6018      	str	r0, [r3, #0]
	uint16_t address;
	uint8_t buffer[256];
	int i;

	set_erxnd(dev, ENC_RAMSIZE - 1);
 8012998:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801299c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80129a0:	f641 71ff 	movw	r1, #8191	; 0x1fff
 80129a4:	6818      	ldr	r0, [r3, #0]
 80129a6:	f7ff ffd7 	bl	8012958 <set_erxnd>

	for (address = 0; address < ENC_RAMSIZE; address += 256)
 80129aa:	2300      	movs	r3, #0
 80129ac:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 80129b0:	e036      	b.n	8012a20 <enc_bist_manual+0x98>
	{
		for (i = 0; i < 256; ++i)
 80129b2:	2300      	movs	r3, #0
 80129b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80129b8:	e01b      	b.n	80129f2 <enc_bist_manual+0x6a>
			buffer[i] = ((address >> 8) + i) % 256;
 80129ba:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80129be:	0a1b      	lsrs	r3, r3, #8
 80129c0:	b29b      	uxth	r3, r3
 80129c2:	461a      	mov	r2, r3
 80129c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80129c8:	4413      	add	r3, r2
 80129ca:	425a      	negs	r2, r3
 80129cc:	b2db      	uxtb	r3, r3
 80129ce:	b2d2      	uxtb	r2, r2
 80129d0:	bf58      	it	pl
 80129d2:	4253      	negpl	r3, r2
 80129d4:	b2d9      	uxtb	r1, r3
 80129d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80129da:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80129de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80129e2:	4413      	add	r3, r2
 80129e4:	460a      	mov	r2, r1
 80129e6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 256; ++i)
 80129e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80129ec:	3301      	adds	r3, #1
 80129ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80129f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80129f6:	2bff      	cmp	r3, #255	; 0xff
 80129f8:	dddf      	ble.n	80129ba <enc_bist_manual+0x32>

		enc_WBM(dev, buffer, address, 256);
 80129fa:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80129fe:	f107 0108 	add.w	r1, r7, #8
 8012a02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012a06:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8012a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a0e:	6800      	ldr	r0, [r0, #0]
 8012a10:	f000 f985 	bl	8012d1e <enc_WBM>
	for (address = 0; address < ENC_RAMSIZE; address += 256)
 8012a14:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8012a18:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012a1c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8012a20:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8012a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012a28:	d3c3      	bcc.n	80129b2 <enc_bist_manual+0x2a>
	}

	for (address = 0; address < ENC_RAMSIZE; address += 256)
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8012a30:	e039      	b.n	8012aa6 <enc_bist_manual+0x11e>
	{
		enc_RBM(dev, buffer, address, 256);
 8012a32:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8012a36:	f107 0108 	add.w	r1, r7, #8
 8012a3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012a3e:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8012a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a46:	6800      	ldr	r0, [r0, #0]
 8012a48:	f000 f915 	bl	8012c76 <enc_RBM>

		for (i = 0; i < 256; ++i)
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8012a52:	e01e      	b.n	8012a92 <enc_bist_manual+0x10a>
			if (buffer[i] != ((address >> 8) + i) % 256)
 8012a54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012a58:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8012a5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012a60:	4413      	add	r3, r2
 8012a62:	781b      	ldrb	r3, [r3, #0]
 8012a64:	4619      	mov	r1, r3
 8012a66:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8012a6a:	0a1b      	lsrs	r3, r3, #8
 8012a6c:	b29b      	uxth	r3, r3
 8012a6e:	461a      	mov	r2, r3
 8012a70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012a74:	4413      	add	r3, r2
 8012a76:	425a      	negs	r2, r3
 8012a78:	b2db      	uxtb	r3, r3
 8012a7a:	b2d2      	uxtb	r2, r2
 8012a7c:	bf58      	it	pl
 8012a7e:	4253      	negpl	r3, r2
 8012a80:	4299      	cmp	r1, r3
 8012a82:	d001      	beq.n	8012a88 <enc_bist_manual+0x100>
				return 1;
 8012a84:	2301      	movs	r3, #1
 8012a86:	e014      	b.n	8012ab2 <enc_bist_manual+0x12a>
		for (i = 0; i < 256; ++i)
 8012a88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012a8c:	3301      	adds	r3, #1
 8012a8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8012a92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012a96:	2bff      	cmp	r3, #255	; 0xff
 8012a98:	dddc      	ble.n	8012a54 <enc_bist_manual+0xcc>
	for (address = 0; address < ENC_RAMSIZE; address += 256)
 8012a9a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8012a9e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012aa2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8012aa6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8012aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012aae:	d3c0      	bcc.n	8012a32 <enc_bist_manual+0xaa>
	while (enc_RCR(ENC_ECON1) & ENC_ECON1_DMAST) DEBUG_PRINT("[enc] .");

	DEBUG_PRINT("[enc] csum %08x", enc_RCR16(ENC_EDMACSL));
	*/

	return 0;
 8012ab0:	2300      	movs	r3, #0
}
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	bd80      	pop	{r7, pc}

08012abc <command>:

static uint8_t command(enc_device_t *dev, uint8_t first, uint8_t second)
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b084      	sub	sp, #16
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
 8012ac4:	460b      	mov	r3, r1
 8012ac6:	70fb      	strb	r3, [r7, #3]
 8012ac8:	4613      	mov	r3, r2
 8012aca:	70bb      	strb	r3, [r7, #2]
	//	uint8_t result;
	uint8_t arr[2] = {first, second};
 8012acc:	78fb      	ldrb	r3, [r7, #3]
 8012ace:	733b      	strb	r3, [r7, #12]
 8012ad0:	78bb      	ldrb	r3, [r7, #2]
 8012ad2:	737b      	strb	r3, [r7, #13]
	enchw_select(HWDEV);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	689b      	ldr	r3, [r3, #8]
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f000 fbdb 	bl	8013294 <enchw_select>
	//	enchw_exchangebyte(HWDEV, first);
	//	result = enchw_exchangebyte(HWDEV, second);
	enchw_txrxbytes(arr, 2);
 8012ade:	f107 030c 	add.w	r3, r7, #12
 8012ae2:	2102      	movs	r1, #2
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f000 fc35 	bl	8013354 <enchw_txrxbytes>
	enchw_unselect(HWDEV);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	689b      	ldr	r3, [r3, #8]
 8012aee:	4618      	mov	r0, r3
 8012af0:	f000 fbe0 	bl	80132b4 <enchw_unselect>
	return arr[1];
 8012af4:	7b7b      	ldrb	r3, [r7, #13]
}
 8012af6:	4618      	mov	r0, r3
 8012af8:	3710      	adds	r7, #16
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}

08012afe <select_page>:
	return arr[2];
}

/* this would recurse infinitely if ENC_ECON1 was not ENC_BANKALL */
static void select_page(enc_device_t *dev, uint8_t page)
{
 8012afe:	b580      	push	{r7, lr}
 8012b00:	b084      	sub	sp, #16
 8012b02:	af00      	add	r7, sp, #0
 8012b04:	6078      	str	r0, [r7, #4]
 8012b06:	460b      	mov	r3, r1
 8012b08:	70fb      	strb	r3, [r7, #3]
	uint8_t set = page & 0x03;
 8012b0a:	78fb      	ldrb	r3, [r7, #3]
 8012b0c:	f003 0303 	and.w	r3, r3, #3
 8012b10:	73fb      	strb	r3, [r7, #15]
	uint8_t clear = (~page) & 0x03;
 8012b12:	78fb      	ldrb	r3, [r7, #3]
 8012b14:	43db      	mvns	r3, r3
 8012b16:	b2db      	uxtb	r3, r3
 8012b18:	f003 0303 	and.w	r3, r3, #3
 8012b1c:	73bb      	strb	r3, [r7, #14]
	if (set)
 8012b1e:	7bfb      	ldrb	r3, [r7, #15]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d005      	beq.n	8012b30 <select_page+0x32>
		enc_BFS(dev, ENC_ECON1, set);
 8012b24:	7bfb      	ldrb	r3, [r7, #15]
 8012b26:	461a      	mov	r2, r3
 8012b28:	21df      	movs	r1, #223	; 0xdf
 8012b2a:	6878      	ldr	r0, [r7, #4]
 8012b2c:	f000 f865 	bl	8012bfa <enc_BFS>
	if (clear)
 8012b30:	7bbb      	ldrb	r3, [r7, #14]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d005      	beq.n	8012b42 <select_page+0x44>
		enc_BFC(dev, ENC_ECON1, clear);
 8012b36:	7bbb      	ldrb	r3, [r7, #14]
 8012b38:	461a      	mov	r2, r3
 8012b3a:	21df      	movs	r1, #223	; 0xdf
 8012b3c:	6878      	ldr	r0, [r7, #4]
 8012b3e:	f000 f87b 	bl	8012c38 <enc_BFC>
}
 8012b42:	bf00      	nop
 8012b44:	3710      	adds	r7, #16
 8012b46:	46bd      	mov	sp, r7
 8012b48:	bd80      	pop	{r7, pc}

08012b4a <ensure_register_accessible>:

static void ensure_register_accessible(enc_device_t *dev, enc_register_t r)
{
 8012b4a:	b580      	push	{r7, lr}
 8012b4c:	b082      	sub	sp, #8
 8012b4e:	af00      	add	r7, sp, #0
 8012b50:	6078      	str	r0, [r7, #4]
 8012b52:	460b      	mov	r3, r1
 8012b54:	70fb      	strb	r3, [r7, #3]
	if ((r & ENC_BANKMASK) == ENC_BANKALL)
 8012b56:	78fb      	ldrb	r3, [r7, #3]
 8012b58:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8012b5c:	2bc0      	cmp	r3, #192	; 0xc0
 8012b5e:	d00e      	beq.n	8012b7e <ensure_register_accessible+0x34>
		return;
	if ((r & ENC_BANKMASK) == dev->last_used_register)
 8012b60:	78fb      	ldrb	r3, [r7, #3]
 8012b62:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8012b66:	687a      	ldr	r2, [r7, #4]
 8012b68:	7812      	ldrb	r2, [r2, #0]
 8012b6a:	4293      	cmp	r3, r2
 8012b6c:	d009      	beq.n	8012b82 <ensure_register_accessible+0x38>
		return;

	select_page(dev, r >> 6);
 8012b6e:	78fb      	ldrb	r3, [r7, #3]
 8012b70:	099b      	lsrs	r3, r3, #6
 8012b72:	b2db      	uxtb	r3, r3
 8012b74:	4619      	mov	r1, r3
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	f7ff ffc1 	bl	8012afe <select_page>
 8012b7c:	e002      	b.n	8012b84 <ensure_register_accessible+0x3a>
		return;
 8012b7e:	bf00      	nop
 8012b80:	e000      	b.n	8012b84 <ensure_register_accessible+0x3a>
		return;
 8012b82:	bf00      	nop
}
 8012b84:	3708      	adds	r7, #8
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}

08012b8a <enc_RCR>:

/** @todo applies only to eth registers, not to mii ones */
uint8_t enc_RCR(enc_device_t *dev, enc_register_t reg)
{
 8012b8a:	b580      	push	{r7, lr}
 8012b8c:	b082      	sub	sp, #8
 8012b8e:	af00      	add	r7, sp, #0
 8012b90:	6078      	str	r0, [r7, #4]
 8012b92:	460b      	mov	r3, r1
 8012b94:	70fb      	strb	r3, [r7, #3]
	ensure_register_accessible(dev, reg);
 8012b96:	78fb      	ldrb	r3, [r7, #3]
 8012b98:	4619      	mov	r1, r3
 8012b9a:	6878      	ldr	r0, [r7, #4]
 8012b9c:	f7ff ffd5 	bl	8012b4a <ensure_register_accessible>
	return command(dev, reg & ENC_REGISTERMASK, 0);
 8012ba0:	78fb      	ldrb	r3, [r7, #3]
 8012ba2:	f003 031f 	and.w	r3, r3, #31
 8012ba6:	b2db      	uxtb	r3, r3
 8012ba8:	2200      	movs	r2, #0
 8012baa:	4619      	mov	r1, r3
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f7ff ff85 	bl	8012abc <command>
 8012bb2:	4603      	mov	r3, r0
}
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	3708      	adds	r7, #8
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	bd80      	pop	{r7, pc}

08012bbc <enc_WCR>:
	ensure_register_accessible(dev, reg);
	return command_with_dummyByte(dev, reg & ENC_REGISTERMASK, 0);
}

void enc_WCR(enc_device_t *dev, uint8_t reg, uint8_t data)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b082      	sub	sp, #8
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
 8012bc4:	460b      	mov	r3, r1
 8012bc6:	70fb      	strb	r3, [r7, #3]
 8012bc8:	4613      	mov	r3, r2
 8012bca:	70bb      	strb	r3, [r7, #2]
	ensure_register_accessible(dev, reg);
 8012bcc:	78fb      	ldrb	r3, [r7, #3]
 8012bce:	4619      	mov	r1, r3
 8012bd0:	6878      	ldr	r0, [r7, #4]
 8012bd2:	f7ff ffba 	bl	8012b4a <ensure_register_accessible>
	command(dev, 0x40 | (reg & ENC_REGISTERMASK), data);
 8012bd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012bda:	f003 031f 	and.w	r3, r3, #31
 8012bde:	b25b      	sxtb	r3, r3
 8012be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012be4:	b25b      	sxtb	r3, r3
 8012be6:	b2db      	uxtb	r3, r3
 8012be8:	78ba      	ldrb	r2, [r7, #2]
 8012bea:	4619      	mov	r1, r3
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	f7ff ff65 	bl	8012abc <command>
}
 8012bf2:	bf00      	nop
 8012bf4:	3708      	adds	r7, #8
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bd80      	pop	{r7, pc}

08012bfa <enc_BFS>:
void enc_BFS(enc_device_t *dev, uint8_t reg, uint8_t data)
{
 8012bfa:	b580      	push	{r7, lr}
 8012bfc:	b082      	sub	sp, #8
 8012bfe:	af00      	add	r7, sp, #0
 8012c00:	6078      	str	r0, [r7, #4]
 8012c02:	460b      	mov	r3, r1
 8012c04:	70fb      	strb	r3, [r7, #3]
 8012c06:	4613      	mov	r3, r2
 8012c08:	70bb      	strb	r3, [r7, #2]
	ensure_register_accessible(dev, reg);
 8012c0a:	78fb      	ldrb	r3, [r7, #3]
 8012c0c:	4619      	mov	r1, r3
 8012c0e:	6878      	ldr	r0, [r7, #4]
 8012c10:	f7ff ff9b 	bl	8012b4a <ensure_register_accessible>
	command(dev, 0x80 | (reg & ENC_REGISTERMASK), data);
 8012c14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012c18:	f003 031f 	and.w	r3, r3, #31
 8012c1c:	b25b      	sxtb	r3, r3
 8012c1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012c22:	b25b      	sxtb	r3, r3
 8012c24:	b2db      	uxtb	r3, r3
 8012c26:	78ba      	ldrb	r2, [r7, #2]
 8012c28:	4619      	mov	r1, r3
 8012c2a:	6878      	ldr	r0, [r7, #4]
 8012c2c:	f7ff ff46 	bl	8012abc <command>
}
 8012c30:	bf00      	nop
 8012c32:	3708      	adds	r7, #8
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}

08012c38 <enc_BFC>:
void enc_BFC(enc_device_t *dev, uint8_t reg, uint8_t data)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b082      	sub	sp, #8
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
 8012c40:	460b      	mov	r3, r1
 8012c42:	70fb      	strb	r3, [r7, #3]
 8012c44:	4613      	mov	r3, r2
 8012c46:	70bb      	strb	r3, [r7, #2]
	ensure_register_accessible(dev, reg);
 8012c48:	78fb      	ldrb	r3, [r7, #3]
 8012c4a:	4619      	mov	r1, r3
 8012c4c:	6878      	ldr	r0, [r7, #4]
 8012c4e:	f7ff ff7c 	bl	8012b4a <ensure_register_accessible>
	command(dev, 0xa0 | (reg & ENC_REGISTERMASK), data);
 8012c52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012c56:	f003 031f 	and.w	r3, r3, #31
 8012c5a:	b25b      	sxtb	r3, r3
 8012c5c:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8012c60:	b25b      	sxtb	r3, r3
 8012c62:	b2db      	uxtb	r3, r3
 8012c64:	78ba      	ldrb	r2, [r7, #2]
 8012c66:	4619      	mov	r1, r3
 8012c68:	6878      	ldr	r0, [r7, #4]
 8012c6a:	f7ff ff27 	bl	8012abc <command>
}
 8012c6e:	bf00      	nop
 8012c70:	3708      	adds	r7, #8
 8012c72:	46bd      	mov	sp, r7
 8012c74:	bd80      	pop	{r7, pc}

08012c76 <enc_RBM>:

void enc_RBM(enc_device_t *dev, uint8_t *dest, uint16_t start, uint16_t length)
{
 8012c76:	b580      	push	{r7, lr}
 8012c78:	b084      	sub	sp, #16
 8012c7a:	af00      	add	r7, sp, #0
 8012c7c:	60f8      	str	r0, [r7, #12]
 8012c7e:	60b9      	str	r1, [r7, #8]
 8012c80:	4611      	mov	r1, r2
 8012c82:	461a      	mov	r2, r3
 8012c84:	460b      	mov	r3, r1
 8012c86:	80fb      	strh	r3, [r7, #6]
 8012c88:	4613      	mov	r3, r2
 8012c8a:	80bb      	strh	r3, [r7, #4]
	if (start != ENC_READLOCATION_ANY)
 8012c8c:	88fb      	ldrh	r3, [r7, #6]
 8012c8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012c92:	4293      	cmp	r3, r2
 8012c94:	d005      	beq.n	8012ca2 <enc_RBM+0x2c>
		enc_WCR16(dev, ENC_ERDPTL, start);
 8012c96:	88fb      	ldrh	r3, [r7, #6]
 8012c98:	461a      	mov	r2, r3
 8012c9a:	2120      	movs	r1, #32
 8012c9c:	68f8      	ldr	r0, [r7, #12]
 8012c9e:	f000 f87b 	bl	8012d98 <enc_WCR16>

	enchw_select(HWDEV);
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	689b      	ldr	r3, [r3, #8]
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	f000 faf4 	bl	8013294 <enchw_select>
	enchw_exchangebyte(HWDEV, 0x3a);
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	689b      	ldr	r3, [r3, #8]
 8012cb0:	213a      	movs	r1, #58	; 0x3a
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f000 fb0e 	bl	80132d4 <enchw_exchangebyte>
	// while (length--)
	// 	*(dest++) = enchw_exchangebyte(HWDEV, 0);
	enchw_rxbytes(dest, length);
 8012cb8:	88bb      	ldrh	r3, [r7, #4]
 8012cba:	4619      	mov	r1, r3
 8012cbc:	68b8      	ldr	r0, [r7, #8]
 8012cbe:	f000 fb35 	bl	801332c <enchw_rxbytes>
	enchw_unselect(HWDEV);
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	689b      	ldr	r3, [r3, #8]
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	f000 faf4 	bl	80132b4 <enchw_unselect>
}
 8012ccc:	bf00      	nop
 8012cce:	3710      	adds	r7, #16
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}

08012cd4 <WBM_raw>:

static void WBM_raw(enc_device_t *dev, uint8_t *src, uint16_t length)
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b084      	sub	sp, #16
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	60f8      	str	r0, [r7, #12]
 8012cdc:	60b9      	str	r1, [r7, #8]
 8012cde:	4613      	mov	r3, r2
 8012ce0:	80fb      	strh	r3, [r7, #6]
	enchw_select(HWDEV);
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	689b      	ldr	r3, [r3, #8]
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	f000 fad4 	bl	8013294 <enchw_select>
	enchw_exchangebyte(HWDEV, 0x7a);
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	689b      	ldr	r3, [r3, #8]
 8012cf0:	217a      	movs	r1, #122	; 0x7a
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	f000 faee 	bl	80132d4 <enchw_exchangebyte>
	// while (length--)
	// 	enchw_exchangebyte(HWDEV, *(src++));
	enchw_txbytes(src, length);
 8012cf8:	88fb      	ldrh	r3, [r7, #6]
 8012cfa:	4619      	mov	r1, r3
 8012cfc:	68b8      	ldr	r0, [r7, #8]
 8012cfe:	f000 fb01 	bl	8013304 <enchw_txbytes>
	enchw_unselect(HWDEV);
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	689b      	ldr	r3, [r3, #8]
 8012d06:	4618      	mov	r0, r3
 8012d08:	f000 fad4 	bl	80132b4 <enchw_unselect>
	/** @todo this is actually just triggering another pause */
	enchw_unselect(HWDEV);
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	689b      	ldr	r3, [r3, #8]
 8012d10:	4618      	mov	r0, r3
 8012d12:	f000 facf 	bl	80132b4 <enchw_unselect>
}
 8012d16:	bf00      	nop
 8012d18:	3710      	adds	r7, #16
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}

08012d1e <enc_WBM>:

void enc_WBM(enc_device_t *dev, uint8_t *src, uint16_t start, uint16_t length)
{
 8012d1e:	b580      	push	{r7, lr}
 8012d20:	b084      	sub	sp, #16
 8012d22:	af00      	add	r7, sp, #0
 8012d24:	60f8      	str	r0, [r7, #12]
 8012d26:	60b9      	str	r1, [r7, #8]
 8012d28:	4611      	mov	r1, r2
 8012d2a:	461a      	mov	r2, r3
 8012d2c:	460b      	mov	r3, r1
 8012d2e:	80fb      	strh	r3, [r7, #6]
 8012d30:	4613      	mov	r3, r2
 8012d32:	80bb      	strh	r3, [r7, #4]
	enc_WCR16(dev, ENC_EWRPTL, start);
 8012d34:	88fb      	ldrh	r3, [r7, #6]
 8012d36:	461a      	mov	r2, r3
 8012d38:	2122      	movs	r1, #34	; 0x22
 8012d3a:	68f8      	ldr	r0, [r7, #12]
 8012d3c:	f000 f82c 	bl	8012d98 <enc_WCR16>

	WBM_raw(dev, src, length);
 8012d40:	88bb      	ldrh	r3, [r7, #4]
 8012d42:	461a      	mov	r2, r3
 8012d44:	68b9      	ldr	r1, [r7, #8]
 8012d46:	68f8      	ldr	r0, [r7, #12]
 8012d48:	f7ff ffc4 	bl	8012cd4 <WBM_raw>
}
 8012d4c:	bf00      	nop
 8012d4e:	3710      	adds	r7, #16
 8012d50:	46bd      	mov	sp, r7
 8012d52:	bd80      	pop	{r7, pc}

08012d54 <enc_RCR16>:
 * passed either L or H sub-register.
 *
 * @todo could use enc_register16_t
 * */
uint16_t enc_RCR16(enc_device_t *dev, enc_register_t reg)
{
 8012d54:	b590      	push	{r4, r7, lr}
 8012d56:	b083      	sub	sp, #12
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
 8012d5c:	460b      	mov	r3, r1
 8012d5e:	70fb      	strb	r3, [r7, #3]
	return (enc_RCR(dev, reg | 1) << 8) | enc_RCR(dev, reg & ~1);
 8012d60:	78fb      	ldrb	r3, [r7, #3]
 8012d62:	f043 0301 	orr.w	r3, r3, #1
 8012d66:	b2db      	uxtb	r3, r3
 8012d68:	4619      	mov	r1, r3
 8012d6a:	6878      	ldr	r0, [r7, #4]
 8012d6c:	f7ff ff0d 	bl	8012b8a <enc_RCR>
 8012d70:	4603      	mov	r3, r0
 8012d72:	021b      	lsls	r3, r3, #8
 8012d74:	b21c      	sxth	r4, r3
 8012d76:	78fb      	ldrb	r3, [r7, #3]
 8012d78:	f023 0301 	bic.w	r3, r3, #1
 8012d7c:	b2db      	uxtb	r3, r3
 8012d7e:	4619      	mov	r1, r3
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f7ff ff02 	bl	8012b8a <enc_RCR>
 8012d86:	4603      	mov	r3, r0
 8012d88:	b21b      	sxth	r3, r3
 8012d8a:	4323      	orrs	r3, r4
 8012d8c:	b21b      	sxth	r3, r3
 8012d8e:	b29b      	uxth	r3, r3
}
 8012d90:	4618      	mov	r0, r3
 8012d92:	370c      	adds	r7, #12
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bd90      	pop	{r4, r7, pc}

08012d98 <enc_WCR16>:
/** 16-bit register write. Compare enc_RCR16. Writes the lower byte first, then
 * the higher, as required for the MII interfaces as well as for ERXRDPT. */
void enc_WCR16(enc_device_t *dev, uint8_t reg, uint16_t data)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b082      	sub	sp, #8
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
 8012da0:	460b      	mov	r3, r1
 8012da2:	70fb      	strb	r3, [r7, #3]
 8012da4:	4613      	mov	r3, r2
 8012da6:	803b      	strh	r3, [r7, #0]
	enc_WCR(dev, reg & ~1, data & 0xff);
 8012da8:	78fb      	ldrb	r3, [r7, #3]
 8012daa:	f023 0301 	bic.w	r3, r3, #1
 8012dae:	b2db      	uxtb	r3, r3
 8012db0:	883a      	ldrh	r2, [r7, #0]
 8012db2:	b2d2      	uxtb	r2, r2
 8012db4:	4619      	mov	r1, r3
 8012db6:	6878      	ldr	r0, [r7, #4]
 8012db8:	f7ff ff00 	bl	8012bbc <enc_WCR>
	enc_WCR(dev, reg | 1, data >> 8);
 8012dbc:	78fb      	ldrb	r3, [r7, #3]
 8012dbe:	f043 0301 	orr.w	r3, r3, #1
 8012dc2:	b2d9      	uxtb	r1, r3
 8012dc4:	883b      	ldrh	r3, [r7, #0]
 8012dc6:	0a1b      	lsrs	r3, r3, #8
 8012dc8:	b29b      	uxth	r3, r3
 8012dca:	b2db      	uxtb	r3, r3
 8012dcc:	461a      	mov	r2, r3
 8012dce:	6878      	ldr	r0, [r7, #4]
 8012dd0:	f7ff fef4 	bl	8012bbc <enc_WCR>
}
 8012dd4:	bf00      	nop
 8012dd6:	3708      	adds	r7, #8
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	bd80      	pop	{r7, pc}

08012ddc <enc_wait>:
}

/** Wait for the ENC28J60 clock to be ready. Returns 0 on success,
 * and an unspecified non-zero integer on timeout. */
int enc_wait(enc_device_t *dev)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b084      	sub	sp, #16
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
	int i = 0;
 8012de4:	2300      	movs	r3, #0
 8012de6:	60fb      	str	r3, [r7, #12]
	while (!(enc_RCR(dev, ENC_ESTAT) & ENC_ESTAT_CLKRDY))
 8012de8:	e007      	b.n	8012dfa <enc_wait+0x1e>
		/** @todo as soon as we need a clock somewhere else, make this
		 * time and not iteration based */
		if (i++ == 100000)
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	1c5a      	adds	r2, r3, #1
 8012dee:	60fa      	str	r2, [r7, #12]
 8012df0:	4a09      	ldr	r2, [pc, #36]	; (8012e18 <enc_wait+0x3c>)
 8012df2:	4293      	cmp	r3, r2
 8012df4:	d101      	bne.n	8012dfa <enc_wait+0x1e>
			return 1;
 8012df6:	2301      	movs	r3, #1
 8012df8:	e009      	b.n	8012e0e <enc_wait+0x32>
	while (!(enc_RCR(dev, ENC_ESTAT) & ENC_ESTAT_CLKRDY))
 8012dfa:	21dd      	movs	r1, #221	; 0xdd
 8012dfc:	6878      	ldr	r0, [r7, #4]
 8012dfe:	f7ff fec4 	bl	8012b8a <enc_RCR>
 8012e02:	4603      	mov	r3, r0
 8012e04:	f003 0301 	and.w	r3, r3, #1
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d0ee      	beq.n	8012dea <enc_wait+0xe>
	return 0;
 8012e0c:	2300      	movs	r3, #0
}
 8012e0e:	4618      	mov	r0, r3
 8012e10:	3710      	adds	r7, #16
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd80      	pop	{r7, pc}
 8012e16:	bf00      	nop
 8012e18:	000186a0 	.word	0x000186a0

08012e1c <enc_MII_write>:

	return result;
}

void enc_MII_write(enc_device_t *dev, uint8_t mireg, uint16_t data)
{
 8012e1c:	b580      	push	{r7, lr}
 8012e1e:	b082      	sub	sp, #8
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	6078      	str	r0, [r7, #4]
 8012e24:	460b      	mov	r3, r1
 8012e26:	70fb      	strb	r3, [r7, #3]
 8012e28:	4613      	mov	r3, r2
 8012e2a:	803b      	strh	r3, [r7, #0]
	while (enc_RCR(dev, ENC_MISTAT) & ENC_MISTAT_BUSY)
 8012e2c:	bf00      	nop
 8012e2e:	21ea      	movs	r1, #234	; 0xea
 8012e30:	6878      	ldr	r0, [r7, #4]
 8012e32:	f7ff feaa 	bl	8012b8a <enc_RCR>
 8012e36:	4603      	mov	r3, r0
 8012e38:	f003 0301 	and.w	r3, r3, #1
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d1f6      	bne.n	8012e2e <enc_MII_write+0x12>
		;

	enc_WCR(dev, ENC_MIREGADR, mireg);
 8012e40:	78fb      	ldrb	r3, [r7, #3]
 8012e42:	461a      	mov	r2, r3
 8012e44:	21b4      	movs	r1, #180	; 0xb4
 8012e46:	6878      	ldr	r0, [r7, #4]
 8012e48:	f7ff feb8 	bl	8012bbc <enc_WCR>
	enc_WCR16(dev, ENC_MIWRL, data);
 8012e4c:	883b      	ldrh	r3, [r7, #0]
 8012e4e:	461a      	mov	r2, r3
 8012e50:	21b6      	movs	r1, #182	; 0xb6
 8012e52:	6878      	ldr	r0, [r7, #4]
 8012e54:	f7ff ffa0 	bl	8012d98 <enc_WCR16>
}
 8012e58:	bf00      	nop
 8012e5a:	3708      	adds	r7, #8
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd80      	pop	{r7, pc}

08012e60 <enc_ethernet_setup>:
}

/** Configure the ENC28J60 for network operation, whose initial parameters get
 * passed as well. */
void enc_ethernet_setup(enc_device_t *dev, uint16_t rxbufsize, uint8_t mac[6])
{
 8012e60:	b5b0      	push	{r4, r5, r7, lr}
 8012e62:	b088      	sub	sp, #32
 8012e64:	af04      	add	r7, sp, #16
 8012e66:	60f8      	str	r0, [r7, #12]
 8012e68:	460b      	mov	r3, r1
 8012e6a:	607a      	str	r2, [r7, #4]
 8012e6c:	817b      	strh	r3, [r7, #10]
	/* practical consideration: we don't come out of clean reset, better do
	 * this -- discard all previous packages */

	enc_BFS(dev, ENC_ECON1, ENC_ECON1_TXRST | ENC_ECON1_RXRST);
 8012e6e:	22c0      	movs	r2, #192	; 0xc0
 8012e70:	21df      	movs	r1, #223	; 0xdf
 8012e72:	68f8      	ldr	r0, [r7, #12]
 8012e74:	f7ff fec1 	bl	8012bfa <enc_BFS>
	while (enc_RCR(dev, ENC_EPKTCNT))
 8012e78:	e004      	b.n	8012e84 <enc_ethernet_setup+0x24>
	{
		enc_BFS(dev, ENC_ECON2, ENC_ECON2_PKTDEC);
 8012e7a:	2240      	movs	r2, #64	; 0x40
 8012e7c:	21de      	movs	r1, #222	; 0xde
 8012e7e:	68f8      	ldr	r0, [r7, #12]
 8012e80:	f7ff febb 	bl	8012bfa <enc_BFS>
	while (enc_RCR(dev, ENC_EPKTCNT))
 8012e84:	2179      	movs	r1, #121	; 0x79
 8012e86:	68f8      	ldr	r0, [r7, #12]
 8012e88:	f7ff fe7f 	bl	8012b8a <enc_RCR>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d1f3      	bne.n	8012e7a <enc_ethernet_setup+0x1a>
	}
	enc_BFC(dev, ENC_ECON1, ENC_ECON1_TXRST | ENC_ECON1_RXRST); /** @todo this should happen later, but when i don't do it here, things won't come up again. probably a problem in the startup sequence. */
 8012e92:	22c0      	movs	r2, #192	; 0xc0
 8012e94:	21df      	movs	r1, #223	; 0xdf
 8012e96:	68f8      	ldr	r0, [r7, #12]
 8012e98:	f7ff fece 	bl	8012c38 <enc_BFC>

	/********* receive buffer setup according to 6.1 ********/

	enc_WCR16(dev, ENC_ERXSTL, 0); /* see errata, must be 0 */
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	2128      	movs	r1, #40	; 0x28
 8012ea0:	68f8      	ldr	r0, [r7, #12]
 8012ea2:	f7ff ff79 	bl	8012d98 <enc_WCR16>
	set_erxnd(dev, rxbufsize);
 8012ea6:	897b      	ldrh	r3, [r7, #10]
 8012ea8:	4619      	mov	r1, r3
 8012eaa:	68f8      	ldr	r0, [r7, #12]
 8012eac:	f7ff fd54 	bl	8012958 <set_erxnd>
	enc_WCR16(dev, ENC_ERXRDPTL, 0);
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	212c      	movs	r1, #44	; 0x2c
 8012eb4:	68f8      	ldr	r0, [r7, #12]
 8012eb6:	f7ff ff6f 	bl	8012d98 <enc_WCR16>

	dev->next_frame_location = 0;
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	809a      	strh	r2, [r3, #4]
	/******** waiting for ost (6.4) already happened in _setup ******/

	/******** mac initialization acording to 6.5 ************/

	/* enable reception and flow control (shouldn't hurt in simplex either) */
	enc_BFS(dev, ENC_MACON1, ENC_MACON1_MARXEN | ENC_MACON1_TXPAUS | ENC_MACON1_RXPAUS);
 8012ec0:	220d      	movs	r2, #13
 8012ec2:	21a0      	movs	r1, #160	; 0xa0
 8012ec4:	68f8      	ldr	r0, [r7, #12]
 8012ec6:	f7ff fe98 	bl	8012bfa <enc_BFS>

	/* generate checksums for outgoing frames and manage padding automatically */
	enc_WCR(dev, ENC_MACON3, ENC_MACON3_TXCRCEN | ENC_MACON3_FULLPADDING | ENC_MACON3_FRMLEN | ENC_MACON3_FULLDUPLEX);
 8012eca:	22f3      	movs	r2, #243	; 0xf3
 8012ecc:	21a2      	movs	r1, #162	; 0xa2
 8012ece:	68f8      	ldr	r0, [r7, #12]
 8012ed0:	f7ff fe74 	bl	8012bbc <enc_WCR>

    /*  PDPXMD is set, PHY operates in Full-Duplex mode*/
    enc_MII_write(dev, ENC_PHCON1, 0x0100);
 8012ed4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012ed8:	2100      	movs	r1, #0
 8012eda:	68f8      	ldr	r0, [r7, #12]
 8012edc:	f7ff ff9e 	bl	8012e1c <enc_MII_write>
	/* setting defer is mandatory for 802.3, but it seems the default is reasonable too */

	/* MAMXF has reasonable default */

	/* it's not documented in detail what these do, just how to program them */
	enc_WCR(dev, ENC_MAIPGL, 0x12);
 8012ee0:	2212      	movs	r2, #18
 8012ee2:	21a6      	movs	r1, #166	; 0xa6
 8012ee4:	68f8      	ldr	r0, [r7, #12]
 8012ee6:	f7ff fe69 	bl	8012bbc <enc_WCR>
	enc_WCR(dev, ENC_MAIPGH, 0x0C);
 8012eea:	220c      	movs	r2, #12
 8012eec:	21a7      	movs	r1, #167	; 0xa7
 8012eee:	68f8      	ldr	r0, [r7, #12]
 8012ef0:	f7ff fe64 	bl	8012bbc <enc_WCR>

	/* MACLCON registers have reasonable defaults */

	/* set the mac address */
	enc_WCR(dev, ENC_MAADR1, mac[0]);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	781b      	ldrb	r3, [r3, #0]
 8012ef8:	461a      	mov	r2, r3
 8012efa:	21e4      	movs	r1, #228	; 0xe4
 8012efc:	68f8      	ldr	r0, [r7, #12]
 8012efe:	f7ff fe5d 	bl	8012bbc <enc_WCR>
	enc_WCR(dev, ENC_MAADR2, mac[1]);
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	3301      	adds	r3, #1
 8012f06:	781b      	ldrb	r3, [r3, #0]
 8012f08:	461a      	mov	r2, r3
 8012f0a:	21e5      	movs	r1, #229	; 0xe5
 8012f0c:	68f8      	ldr	r0, [r7, #12]
 8012f0e:	f7ff fe55 	bl	8012bbc <enc_WCR>
	enc_WCR(dev, ENC_MAADR3, mac[2]);
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	3302      	adds	r3, #2
 8012f16:	781b      	ldrb	r3, [r3, #0]
 8012f18:	461a      	mov	r2, r3
 8012f1a:	21e2      	movs	r1, #226	; 0xe2
 8012f1c:	68f8      	ldr	r0, [r7, #12]
 8012f1e:	f7ff fe4d 	bl	8012bbc <enc_WCR>
	enc_WCR(dev, ENC_MAADR4, mac[3]);
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	3303      	adds	r3, #3
 8012f26:	781b      	ldrb	r3, [r3, #0]
 8012f28:	461a      	mov	r2, r3
 8012f2a:	21e3      	movs	r1, #227	; 0xe3
 8012f2c:	68f8      	ldr	r0, [r7, #12]
 8012f2e:	f7ff fe45 	bl	8012bbc <enc_WCR>
	enc_WCR(dev, ENC_MAADR5, mac[4]);
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	3304      	adds	r3, #4
 8012f36:	781b      	ldrb	r3, [r3, #0]
 8012f38:	461a      	mov	r2, r3
 8012f3a:	21e0      	movs	r1, #224	; 0xe0
 8012f3c:	68f8      	ldr	r0, [r7, #12]
 8012f3e:	f7ff fe3d 	bl	8012bbc <enc_WCR>
	enc_WCR(dev, ENC_MAADR6, mac[5]);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	3305      	adds	r3, #5
 8012f46:	781b      	ldrb	r3, [r3, #0]
 8012f48:	461a      	mov	r2, r3
 8012f4a:	21e1      	movs	r1, #225	; 0xe1
 8012f4c:	68f8      	ldr	r0, [r7, #12]
 8012f4e:	f7ff fe35 	bl	8012bbc <enc_WCR>

	DEBUG_PRINT("[enc] MAC. %02x:%02x:%02x:%02x:%02x:%02x\n", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	781b      	ldrb	r3, [r3, #0]
 8012f56:	4618      	mov	r0, r3
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	3301      	adds	r3, #1
 8012f5c:	781b      	ldrb	r3, [r3, #0]
 8012f5e:	461c      	mov	r4, r3
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	3302      	adds	r3, #2
 8012f64:	781b      	ldrb	r3, [r3, #0]
 8012f66:	461d      	mov	r5, r3
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	3303      	adds	r3, #3
 8012f6c:	781b      	ldrb	r3, [r3, #0]
 8012f6e:	461a      	mov	r2, r3
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	3304      	adds	r3, #4
 8012f74:	781b      	ldrb	r3, [r3, #0]
 8012f76:	4619      	mov	r1, r3
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	3305      	adds	r3, #5
 8012f7c:	781b      	ldrb	r3, [r3, #0]
 8012f7e:	9302      	str	r3, [sp, #8]
 8012f80:	9101      	str	r1, [sp, #4]
 8012f82:	9200      	str	r2, [sp, #0]
 8012f84:	462b      	mov	r3, r5
 8012f86:	4622      	mov	r2, r4
 8012f88:	4601      	mov	r1, r0
 8012f8a:	4808      	ldr	r0, [pc, #32]	; (8012fac <enc_ethernet_setup+0x14c>)
 8012f8c:	f7ed f981 	bl	8000292 <Console_DEBUG>
	/*************** enabling reception as per 7.2 ***********/

	/* enable reception */
	enc_BFS(dev, ENC_ECON1, ENC_ECON1_RXEN);
 8012f90:	2204      	movs	r2, #4
 8012f92:	21df      	movs	r1, #223	; 0xdf
 8012f94:	68f8      	ldr	r0, [r7, #12]
 8012f96:	f7ff fe30 	bl	8012bfa <enc_BFS>

	/* pull transmitter and receiver out of reset */
	enc_BFC(dev, ENC_ECON1, ENC_ECON1_TXRST | ENC_ECON1_RXRST);
 8012f9a:	22c0      	movs	r2, #192	; 0xc0
 8012f9c:	21df      	movs	r1, #223	; 0xdf
 8012f9e:	68f8      	ldr	r0, [r7, #12]
 8012fa0:	f7ff fe4a 	bl	8012c38 <enc_BFC>
}
 8012fa4:	bf00      	nop
 8012fa6:	3710      	adds	r7, #16
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bdb0      	pop	{r4, r5, r7, pc}
 8012fac:	08016894 	.word	0x08016894

08012fb0 <transmit_start>:

/* Partial function of enc_transmit. Always call this as transmit_start /
 * {transmit_partial * n} / transmit_end -- and use enc_transmit or
 * enc_transmit_pbuf unless you're just implementing those two */
void transmit_start(enc_device_t *dev)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b084      	sub	sp, #16
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
	/* according to section 7.1 */
	uint8_t control_byte = 0; /* no overrides */
 8012fb8:	2300      	movs	r3, #0
 8012fba:	73fb      	strb	r3, [r7, #15]

	/* 1. */
	/** @todo we only send a single frame blockingly, starting at the end of rxbuf */
	enc_WCR16(dev, ENC_ETXSTL, dev->rxbufsize);
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	885b      	ldrh	r3, [r3, #2]
 8012fc0:	461a      	mov	r2, r3
 8012fc2:	2124      	movs	r1, #36	; 0x24
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f7ff fee7 	bl	8012d98 <enc_WCR16>
	/* 2. */
	enc_WBM(dev, &control_byte, dev->rxbufsize, 1);
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	885a      	ldrh	r2, [r3, #2]
 8012fce:	f107 010f 	add.w	r1, r7, #15
 8012fd2:	2301      	movs	r3, #1
 8012fd4:	6878      	ldr	r0, [r7, #4]
 8012fd6:	f7ff fea2 	bl	8012d1e <enc_WBM>
}
 8012fda:	bf00      	nop
 8012fdc:	3710      	adds	r7, #16
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}

08012fe2 <transmit_partial>:

void transmit_partial(enc_device_t *dev, uint8_t *data, uint16_t length)
{
 8012fe2:	b580      	push	{r7, lr}
 8012fe4:	b084      	sub	sp, #16
 8012fe6:	af00      	add	r7, sp, #0
 8012fe8:	60f8      	str	r0, [r7, #12]
 8012fea:	60b9      	str	r1, [r7, #8]
 8012fec:	4613      	mov	r3, r2
 8012fee:	80fb      	strh	r3, [r7, #6]
	WBM_raw(dev, data, length);
 8012ff0:	88fb      	ldrh	r3, [r7, #6]
 8012ff2:	461a      	mov	r2, r3
 8012ff4:	68b9      	ldr	r1, [r7, #8]
 8012ff6:	68f8      	ldr	r0, [r7, #12]
 8012ff8:	f7ff fe6c 	bl	8012cd4 <WBM_raw>
}
 8012ffc:	bf00      	nop
 8012ffe:	3710      	adds	r7, #16
 8013000:	46bd      	mov	sp, r7
 8013002:	bd80      	pop	{r7, pc}

08013004 <transmit_end>:

void transmit_end(enc_device_t *dev, uint16_t length)
{
 8013004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013006:	b089      	sub	sp, #36	; 0x24
 8013008:	af04      	add	r7, sp, #16
 801300a:	6078      	str	r0, [r7, #4]
 801300c:	460b      	mov	r3, r1
 801300e:	807b      	strh	r3, [r7, #2]
	//	uint16_t checksum = enc_RCR16(dev, ENC_EDMACSL);
	//	checksum = ((checksum & 0xff) << 8) | (checksum >> 8);
	//	enc_WBM(dev, &checksum, start + 1 + length - 2, 2);

	/* 3. */
	enc_WCR16(dev, ENC_ETXNDL, dev->rxbufsize + 1 + length - 1);
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	885a      	ldrh	r2, [r3, #2]
 8013014:	887b      	ldrh	r3, [r7, #2]
 8013016:	4413      	add	r3, r2
 8013018:	b29b      	uxth	r3, r3
 801301a:	461a      	mov	r2, r3
 801301c:	2126      	movs	r1, #38	; 0x26
 801301e:	6878      	ldr	r0, [r7, #4]
 8013020:	f7ff feba 	bl	8012d98 <enc_WCR16>

	/* 4. */
	/* skipped because not using interrupts yet */
	/* 5. */
	enc_BFS(dev, ENC_ECON1, ENC_ECON1_TXRTS);
 8013024:	2208      	movs	r2, #8
 8013026:	21df      	movs	r1, #223	; 0xdf
 8013028:	6878      	ldr	r0, [r7, #4]
 801302a:	f7ff fde6 	bl	8012bfa <enc_BFS>

	/* block */
	while (enc_RCR(dev, ENC_ECON1) & ENC_ECON1_TXRTS)
 801302e:	bf00      	nop
 8013030:	21df      	movs	r1, #223	; 0xdf
 8013032:	6878      	ldr	r0, [r7, #4]
 8013034:	f7ff fda9 	bl	8012b8a <enc_RCR>
 8013038:	4603      	mov	r3, r0
 801303a:	f003 0308 	and.w	r3, r3, #8
 801303e:	2b00      	cmp	r3, #0
 8013040:	d1f6      	bne.n	8013030 <transmit_end+0x2c>
		;

	uint8_t result[7];
	enc_RBM(dev, result, dev->rxbufsize + 1 + length, 7);
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	885a      	ldrh	r2, [r3, #2]
 8013046:	887b      	ldrh	r3, [r7, #2]
 8013048:	4413      	add	r3, r2
 801304a:	b29b      	uxth	r3, r3
 801304c:	3301      	adds	r3, #1
 801304e:	b29a      	uxth	r2, r3
 8013050:	f107 0108 	add.w	r1, r7, #8
 8013054:	2307      	movs	r3, #7
 8013056:	6878      	ldr	r0, [r7, #4]
 8013058:	f7ff fe0d 	bl	8012c76 <enc_RBM>
	DEBUG_PRINT("[enc] transmitted. %02x %02x %02x %02x %02x %02x %02x\n", result[0], result[1], result[2], result[3], result[4], result[5], result[6]);
 801305c:	7a3b      	ldrb	r3, [r7, #8]
 801305e:	461c      	mov	r4, r3
 8013060:	7a7b      	ldrb	r3, [r7, #9]
 8013062:	461d      	mov	r5, r3
 8013064:	7abb      	ldrb	r3, [r7, #10]
 8013066:	461e      	mov	r6, r3
 8013068:	7afb      	ldrb	r3, [r7, #11]
 801306a:	7b3a      	ldrb	r2, [r7, #12]
 801306c:	7b79      	ldrb	r1, [r7, #13]
 801306e:	7bb8      	ldrb	r0, [r7, #14]
 8013070:	9003      	str	r0, [sp, #12]
 8013072:	9102      	str	r1, [sp, #8]
 8013074:	9201      	str	r2, [sp, #4]
 8013076:	9300      	str	r3, [sp, #0]
 8013078:	4633      	mov	r3, r6
 801307a:	462a      	mov	r2, r5
 801307c:	4621      	mov	r1, r4
 801307e:	4803      	ldr	r0, [pc, #12]	; (801308c <transmit_end+0x88>)
 8013080:	f7ed f907 	bl	8000292 <Console_DEBUG>

	/** @todo parse that and return reasonable state */
}
 8013084:	bf00      	nop
 8013086:	3714      	adds	r7, #20
 8013088:	46bd      	mov	sp, r7
 801308a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801308c:	080168c0 	.word	0x080168c0

08013090 <enc_transmit_pbuf>:
#ifdef ENC28J60_USE_PBUF
/** Like enc_transmit, but read from a pbuf. This is not a trivial wrapper
 * around enc_transmit as the pbuf is not guaranteed to have a contiguous
 * memory region to be transmitted. */
void enc_transmit_pbuf(enc_device_t *dev, struct pbuf *buf)
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b084      	sub	sp, #16
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
 8013098:	6039      	str	r1, [r7, #0]
	uint16_t length = buf->tot_len;
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	891b      	ldrh	r3, [r3, #8]
 801309e:	81fb      	strh	r3, [r7, #14]

	/** @todo check buffer size */
	transmit_start(dev);
 80130a0:	6878      	ldr	r0, [r7, #4]
 80130a2:	f7ff ff85 	bl	8012fb0 <transmit_start>
	while (1)
	{
		transmit_partial(dev, buf->payload, buf->len);
 80130a6:	683b      	ldr	r3, [r7, #0]
 80130a8:	6859      	ldr	r1, [r3, #4]
 80130aa:	683b      	ldr	r3, [r7, #0]
 80130ac:	895b      	ldrh	r3, [r3, #10]
 80130ae:	461a      	mov	r2, r3
 80130b0:	6878      	ldr	r0, [r7, #4]
 80130b2:	f7ff ff96 	bl	8012fe2 <transmit_partial>
		if (buf->len == buf->tot_len)
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	895a      	ldrh	r2, [r3, #10]
 80130ba:	683b      	ldr	r3, [r7, #0]
 80130bc:	891b      	ldrh	r3, [r3, #8]
 80130be:	429a      	cmp	r2, r3
 80130c0:	d003      	beq.n	80130ca <enc_transmit_pbuf+0x3a>
			break;
		buf = buf->next;
 80130c2:	683b      	ldr	r3, [r7, #0]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	603b      	str	r3, [r7, #0]
		transmit_partial(dev, buf->payload, buf->len);
 80130c8:	e7ed      	b.n	80130a6 <enc_transmit_pbuf+0x16>
			break;
 80130ca:	bf00      	nop
	}
	transmit_end(dev, length);
 80130cc:	89fb      	ldrh	r3, [r7, #14]
 80130ce:	4619      	mov	r1, r3
 80130d0:	6878      	ldr	r0, [r7, #4]
 80130d2:	f7ff ff97 	bl	8013004 <transmit_end>
}
 80130d6:	bf00      	nop
 80130d8:	3710      	adds	r7, #16
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd80      	pop	{r7, pc}

080130de <receive_start>:
#endif

void receive_start(enc_device_t *dev, uint8_t header[6], uint16_t *length)
{
 80130de:	b580      	push	{r7, lr}
 80130e0:	b084      	sub	sp, #16
 80130e2:	af00      	add	r7, sp, #0
 80130e4:	60f8      	str	r0, [r7, #12]
 80130e6:	60b9      	str	r1, [r7, #8]
 80130e8:	607a      	str	r2, [r7, #4]
	enc_RBM(dev, header, dev->next_frame_location, 6);
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	889a      	ldrh	r2, [r3, #4]
 80130ee:	2306      	movs	r3, #6
 80130f0:	68b9      	ldr	r1, [r7, #8]
 80130f2:	68f8      	ldr	r0, [r7, #12]
 80130f4:	f7ff fdbf 	bl	8012c76 <enc_RBM>
	*length = header[2] | ((header[3] & 0x7f) << 8);
 80130f8:	68bb      	ldr	r3, [r7, #8]
 80130fa:	3302      	adds	r3, #2
 80130fc:	781b      	ldrb	r3, [r3, #0]
 80130fe:	b21a      	sxth	r2, r3
 8013100:	68bb      	ldr	r3, [r7, #8]
 8013102:	3303      	adds	r3, #3
 8013104:	781b      	ldrb	r3, [r3, #0]
 8013106:	021b      	lsls	r3, r3, #8
 8013108:	b21b      	sxth	r3, r3
 801310a:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 801310e:	b21b      	sxth	r3, r3
 8013110:	4313      	orrs	r3, r2
 8013112:	b21b      	sxth	r3, r3
 8013114:	b29a      	uxth	r2, r3
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	801a      	strh	r2, [r3, #0]
}
 801311a:	bf00      	nop
 801311c:	3710      	adds	r7, #16
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}
	...

08013124 <receive_end>:

void receive_end(enc_device_t *dev, uint8_t header[6])
{
 8013124:	b5b0      	push	{r4, r5, r7, lr}
 8013126:	b086      	sub	sp, #24
 8013128:	af04      	add	r7, sp, #16
 801312a:	6078      	str	r0, [r7, #4]
 801312c:	6039      	str	r1, [r7, #0]
	dev->next_frame_location = header[0] + (header[1] << 8);
 801312e:	683b      	ldr	r3, [r7, #0]
 8013130:	781b      	ldrb	r3, [r3, #0]
 8013132:	b29a      	uxth	r2, r3
 8013134:	683b      	ldr	r3, [r7, #0]
 8013136:	3301      	adds	r3, #1
 8013138:	781b      	ldrb	r3, [r3, #0]
 801313a:	b29b      	uxth	r3, r3
 801313c:	021b      	lsls	r3, r3, #8
 801313e:	b29b      	uxth	r3, r3
 8013140:	4413      	add	r3, r2
 8013142:	b29a      	uxth	r2, r3
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	809a      	strh	r2, [r3, #4]
	/* workaround for 80349c.pdf (errata) #14 start.
	 *
	 * originally, this would have been
	 * enc_WCR16(dev, ENC_ERXRDPTL, next_location);
	 * but thus: */
	if (dev->next_frame_location == /* enc_RCR16(dev, ENC_ERXSTL) can be simplified because of errata item #5 */ 0)
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	889b      	ldrh	r3, [r3, #4]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d10a      	bne.n	8013166 <receive_end+0x42>
		enc_WCR16(dev, ENC_ERXRDPTL, enc_RCR16(dev, ENC_ERXNDL));
 8013150:	212a      	movs	r1, #42	; 0x2a
 8013152:	6878      	ldr	r0, [r7, #4]
 8013154:	f7ff fdfe 	bl	8012d54 <enc_RCR16>
 8013158:	4603      	mov	r3, r0
 801315a:	461a      	mov	r2, r3
 801315c:	212c      	movs	r1, #44	; 0x2c
 801315e:	6878      	ldr	r0, [r7, #4]
 8013160:	f7ff fe1a 	bl	8012d98 <enc_WCR16>
 8013164:	e008      	b.n	8013178 <receive_end+0x54>
	else
		enc_WCR16(dev, ENC_ERXRDPTL, dev->next_frame_location - 1);
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	889b      	ldrh	r3, [r3, #4]
 801316a:	3b01      	subs	r3, #1
 801316c:	b29b      	uxth	r3, r3
 801316e:	461a      	mov	r2, r3
 8013170:	212c      	movs	r1, #44	; 0x2c
 8013172:	6878      	ldr	r0, [r7, #4]
 8013174:	f7ff fe10 	bl	8012d98 <enc_WCR16>
	/* workaround end */

	DEBUG_PRINT("[enc] before %d, ", enc_RCR(dev, ENC_EPKTCNT));
 8013178:	2179      	movs	r1, #121	; 0x79
 801317a:	6878      	ldr	r0, [r7, #4]
 801317c:	f7ff fd05 	bl	8012b8a <enc_RCR>
 8013180:	4603      	mov	r3, r0
 8013182:	4619      	mov	r1, r3
 8013184:	4819      	ldr	r0, [pc, #100]	; (80131ec <receive_end+0xc8>)
 8013186:	f7ed f884 	bl	8000292 <Console_DEBUG>
	enc_BFS(dev, ENC_ECON2, ENC_ECON2_PKTDEC);
 801318a:	2240      	movs	r2, #64	; 0x40
 801318c:	21de      	movs	r1, #222	; 0xde
 801318e:	6878      	ldr	r0, [r7, #4]
 8013190:	f7ff fd33 	bl	8012bfa <enc_BFS>
	DEBUG_PRINT("[enc] after %d.\n", enc_RCR(dev, ENC_EPKTCNT));
 8013194:	2179      	movs	r1, #121	; 0x79
 8013196:	6878      	ldr	r0, [r7, #4]
 8013198:	f7ff fcf7 	bl	8012b8a <enc_RCR>
 801319c:	4603      	mov	r3, r0
 801319e:	4619      	mov	r1, r3
 80131a0:	4813      	ldr	r0, [pc, #76]	; (80131f0 <receive_end+0xcc>)
 80131a2:	f7ed f876 	bl	8000292 <Console_DEBUG>

	DEBUG_PRINT("[enc] read with header (%02x %02x) %02x %02x %02x %02x.\n", header[1], /* swapped due to endianness -- i want to read 1234 */ header[0], header[2], header[3], header[4], header[5]);
 80131a6:	683b      	ldr	r3, [r7, #0]
 80131a8:	3301      	adds	r3, #1
 80131aa:	781b      	ldrb	r3, [r3, #0]
 80131ac:	4618      	mov	r0, r3
 80131ae:	683b      	ldr	r3, [r7, #0]
 80131b0:	781b      	ldrb	r3, [r3, #0]
 80131b2:	461c      	mov	r4, r3
 80131b4:	683b      	ldr	r3, [r7, #0]
 80131b6:	3302      	adds	r3, #2
 80131b8:	781b      	ldrb	r3, [r3, #0]
 80131ba:	461d      	mov	r5, r3
 80131bc:	683b      	ldr	r3, [r7, #0]
 80131be:	3303      	adds	r3, #3
 80131c0:	781b      	ldrb	r3, [r3, #0]
 80131c2:	461a      	mov	r2, r3
 80131c4:	683b      	ldr	r3, [r7, #0]
 80131c6:	3304      	adds	r3, #4
 80131c8:	781b      	ldrb	r3, [r3, #0]
 80131ca:	4619      	mov	r1, r3
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	3305      	adds	r3, #5
 80131d0:	781b      	ldrb	r3, [r3, #0]
 80131d2:	9302      	str	r3, [sp, #8]
 80131d4:	9101      	str	r1, [sp, #4]
 80131d6:	9200      	str	r2, [sp, #0]
 80131d8:	462b      	mov	r3, r5
 80131da:	4622      	mov	r2, r4
 80131dc:	4601      	mov	r1, r0
 80131de:	4805      	ldr	r0, [pc, #20]	; (80131f4 <receive_end+0xd0>)
 80131e0:	f7ed f857 	bl	8000292 <Console_DEBUG>
}
 80131e4:	bf00      	nop
 80131e6:	3708      	adds	r7, #8
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bdb0      	pop	{r4, r5, r7, pc}
 80131ec:	080168f8 	.word	0x080168f8
 80131f0:	0801690c 	.word	0x0801690c
 80131f4:	08016920 	.word	0x08016920

080131f8 <enc_read_received_pbuf>:

#ifdef ENC28J60_USE_PBUF
/** Like enc_read_received, but allocate a pbuf buf. Returns 0 on success, or
 * unspecified non-zero values on errors. */
int enc_read_received_pbuf(enc_device_t *dev, struct pbuf **buf)
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b086      	sub	sp, #24
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
 8013200:	6039      	str	r1, [r7, #0]
	uint8_t header[6];
	uint16_t length;

	if (*buf != NULL)
 8013202:	683b      	ldr	r3, [r7, #0]
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d001      	beq.n	801320e <enc_read_received_pbuf+0x16>
		return 1;
 801320a:	2301      	movs	r3, #1
 801320c:	e031      	b.n	8013272 <enc_read_received_pbuf+0x7a>

	receive_start(dev, header, &length);
 801320e:	f107 020e 	add.w	r2, r7, #14
 8013212:	f107 0310 	add.w	r3, r7, #16
 8013216:	4619      	mov	r1, r3
 8013218:	6878      	ldr	r0, [r7, #4]
 801321a:	f7ff ff60 	bl	80130de <receive_start>

	*buf = pbuf_alloc(PBUF_RAW, length, PBUF_RAM);
 801321e:	89fb      	ldrh	r3, [r7, #14]
 8013220:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013224:	4619      	mov	r1, r3
 8013226:	2000      	movs	r0, #0
 8013228:	f7f6 ff16 	bl	800a058 <pbuf_alloc>
 801322c:	4602      	mov	r2, r0
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	601a      	str	r2, [r3, #0]
	if (*buf == NULL)
 8013232:	683b      	ldr	r3, [r7, #0]
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d105      	bne.n	8013246 <enc_read_received_pbuf+0x4e>
		DEBUG_PRINT("[enc] failed to allocate buf of length %u, discarding", length);
 801323a:	89fb      	ldrh	r3, [r7, #14]
 801323c:	4619      	mov	r1, r3
 801323e:	480f      	ldr	r0, [pc, #60]	; (801327c <enc_read_received_pbuf+0x84>)
 8013240:	f7ed f827 	bl	8000292 <Console_DEBUG>
 8013244:	e008      	b.n	8013258 <enc_read_received_pbuf+0x60>
	else
		enc_RBM(dev, (*buf)->payload, ENC_READLOCATION_ANY, length);
 8013246:	683b      	ldr	r3, [r7, #0]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	6859      	ldr	r1, [r3, #4]
 801324c:	89fb      	ldrh	r3, [r7, #14]
 801324e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013252:	6878      	ldr	r0, [r7, #4]
 8013254:	f7ff fd0f 	bl	8012c76 <enc_RBM>

	receive_end(dev, header);
 8013258:	f107 0310 	add.w	r3, r7, #16
 801325c:	4619      	mov	r1, r3
 801325e:	6878      	ldr	r0, [r7, #4]
 8013260:	f7ff ff60 	bl	8013124 <receive_end>

	return (*buf == NULL) ? 2 : 0;
 8013264:	683b      	ldr	r3, [r7, #0]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d101      	bne.n	8013270 <enc_read_received_pbuf+0x78>
 801326c:	2302      	movs	r3, #2
 801326e:	e000      	b.n	8013272 <enc_read_received_pbuf+0x7a>
 8013270:	2300      	movs	r3, #0
}
 8013272:	4618      	mov	r0, r3
 8013274:	3718      	adds	r7, #24
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}
 801327a:	bf00      	nop
 801327c:	0801697c 	.word	0x0801697c

08013280 <enchw_setup>:

#define pause() // HAL_Delay(100)
#define SPI_ETH_HANDLE (&hspi1)

void enchw_setup(enchw_device_t __attribute__((unused)) * dev)
{
 8013280:	b480      	push	{r7}
 8013282:	b083      	sub	sp, #12
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
}
 8013288:	bf00      	nop
 801328a:	370c      	adds	r7, #12
 801328c:	46bd      	mov	sp, r7
 801328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013292:	4770      	bx	lr

08013294 <enchw_select>:

void enchw_select(enchw_device_t __attribute__((unused)) * dev)
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b082      	sub	sp, #8
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
	/* this migh be relevant for t_{CSD}, especially when sending consecutive commands. */
	pause();
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 801329c:	2200      	movs	r2, #0
 801329e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80132a2:	4803      	ldr	r0, [pc, #12]	; (80132b0 <enchw_select+0x1c>)
 80132a4:	f7f0 fd8c 	bl	8003dc0 <HAL_GPIO_WritePin>
}
 80132a8:	bf00      	nop
 80132aa:	3708      	adds	r7, #8
 80132ac:	46bd      	mov	sp, r7
 80132ae:	bd80      	pop	{r7, pc}
 80132b0:	48000400 	.word	0x48000400

080132b4 <enchw_unselect>:

void enchw_unselect(enchw_device_t __attribute__((unused)) * dev)
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	b082      	sub	sp, #8
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	6078      	str	r0, [r7, #4]
	/* if this pause is not observed, T_{CSH} will not be obeyed and writes
	 * to MIREGADR will fail */
	pause();
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 80132bc:	2201      	movs	r2, #1
 80132be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80132c2:	4803      	ldr	r0, [pc, #12]	; (80132d0 <enchw_unselect+0x1c>)
 80132c4:	f7f0 fd7c 	bl	8003dc0 <HAL_GPIO_WritePin>
}
 80132c8:	bf00      	nop
 80132ca:	3708      	adds	r7, #8
 80132cc:	46bd      	mov	sp, r7
 80132ce:	bd80      	pop	{r7, pc}
 80132d0:	48000400 	.word	0x48000400

080132d4 <enchw_exchangebyte>:

uint8_t enchw_exchangebyte(enchw_device_t __attribute__((unused)) * dev, uint8_t byte)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b086      	sub	sp, #24
 80132d8:	af02      	add	r7, sp, #8
 80132da:	6078      	str	r0, [r7, #4]
 80132dc:	460b      	mov	r3, r1
 80132de:	70fb      	strb	r3, [r7, #3]
	uint8_t rxData;
	HAL_SPI_TransmitReceive(SPI_ETH_HANDLE, &byte, &rxData, 1, HAL_MAX_DELAY);
 80132e0:	f107 020f 	add.w	r2, r7, #15
 80132e4:	1cf9      	adds	r1, r7, #3
 80132e6:	f04f 33ff 	mov.w	r3, #4294967295
 80132ea:	9300      	str	r3, [sp, #0]
 80132ec:	2301      	movs	r3, #1
 80132ee:	4804      	ldr	r0, [pc, #16]	; (8013300 <enchw_exchangebyte+0x2c>)
 80132f0:	f7f2 fa53 	bl	800579a <HAL_SPI_TransmitReceive>
	return rxData;
 80132f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80132f6:	4618      	mov	r0, r3
 80132f8:	3710      	adds	r7, #16
 80132fa:	46bd      	mov	sp, r7
 80132fc:	bd80      	pop	{r7, pc}
 80132fe:	bf00      	nop
 8013300:	20000bc4 	.word	0x20000bc4

08013304 <enchw_txbytes>:

void enchw_txbytes(const void *buffer, int len)
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b082      	sub	sp, #8
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
 801330c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(SPI_ETH_HANDLE, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 801330e:	683b      	ldr	r3, [r7, #0]
 8013310:	b29a      	uxth	r2, r3
 8013312:	f04f 33ff 	mov.w	r3, #4294967295
 8013316:	6879      	ldr	r1, [r7, #4]
 8013318:	4803      	ldr	r0, [pc, #12]	; (8013328 <enchw_txbytes+0x24>)
 801331a:	f7f1 ffa0 	bl	800525e <HAL_SPI_Transmit>
}
 801331e:	bf00      	nop
 8013320:	3708      	adds	r7, #8
 8013322:	46bd      	mov	sp, r7
 8013324:	bd80      	pop	{r7, pc}
 8013326:	bf00      	nop
 8013328:	20000bc4 	.word	0x20000bc4

0801332c <enchw_rxbytes>:

void enchw_rxbytes(void *buffer, int len)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b082      	sub	sp, #8
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
 8013334:	6039      	str	r1, [r7, #0]
	HAL_SPI_Receive(SPI_ETH_HANDLE, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	b29a      	uxth	r2, r3
 801333a:	f04f 33ff 	mov.w	r3, #4294967295
 801333e:	6879      	ldr	r1, [r7, #4]
 8013340:	4803      	ldr	r0, [pc, #12]	; (8013350 <enchw_rxbytes+0x24>)
 8013342:	f7f2 f8fa 	bl	800553a <HAL_SPI_Receive>
}
 8013346:	bf00      	nop
 8013348:	3708      	adds	r7, #8
 801334a:	46bd      	mov	sp, r7
 801334c:	bd80      	pop	{r7, pc}
 801334e:	bf00      	nop
 8013350:	20000bc4 	.word	0x20000bc4

08013354 <enchw_txrxbytes>:

void enchw_txrxbytes(void *buffer, int len)
{
 8013354:	b580      	push	{r7, lr}
 8013356:	b084      	sub	sp, #16
 8013358:	af02      	add	r7, sp, #8
 801335a:	6078      	str	r0, [r7, #4]
 801335c:	6039      	str	r1, [r7, #0]
	HAL_SPI_TransmitReceive(SPI_ETH_HANDLE, (uint8_t *)buffer, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 801335e:	683b      	ldr	r3, [r7, #0]
 8013360:	b29b      	uxth	r3, r3
 8013362:	f04f 32ff 	mov.w	r2, #4294967295
 8013366:	9200      	str	r2, [sp, #0]
 8013368:	687a      	ldr	r2, [r7, #4]
 801336a:	6879      	ldr	r1, [r7, #4]
 801336c:	4803      	ldr	r0, [pc, #12]	; (801337c <enchw_txrxbytes+0x28>)
 801336e:	f7f2 fa14 	bl	800579a <HAL_SPI_TransmitReceive>
}
 8013372:	bf00      	nop
 8013374:	3708      	adds	r7, #8
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}
 801337a:	bf00      	nop
 801337c:	20000bc4 	.word	0x20000bc4

08013380 <mchdrv_poll>:
#include <lwip/pbuf.h>
#include <netif/etharp.h>
#include <enc28j60.h>

void mchdrv_poll(struct netif *netif)
{
 8013380:	b580      	push	{r7, lr}
 8013382:	b086      	sub	sp, #24
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
	err_t result;
	struct pbuf *buf = NULL;
 8013388:	2300      	movs	r3, #0
 801338a:	60bb      	str	r3, [r7, #8]

	uint8_t epktcnt;
	enc_device_t *encdevice = (enc_device_t *)netif->state;
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	69db      	ldr	r3, [r3, #28]
 8013390:	617b      	str	r3, [r7, #20]

	epktcnt = enc_RCR(encdevice, ENC_EPKTCNT);
 8013392:	2179      	movs	r1, #121	; 0x79
 8013394:	6978      	ldr	r0, [r7, #20]
 8013396:	f7ff fbf8 	bl	8012b8a <enc_RCR>
 801339a:	4603      	mov	r3, r0
 801339c:	74fb      	strb	r3, [r7, #19]

	if (epktcnt)
 801339e:	7cfb      	ldrb	r3, [r7, #19]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d01d      	beq.n	80133e0 <mchdrv_poll+0x60>
	{
		if (enc_read_received_pbuf(encdevice, &buf) == 0)
 80133a4:	f107 0308 	add.w	r3, r7, #8
 80133a8:	4619      	mov	r1, r3
 80133aa:	6978      	ldr	r0, [r7, #20]
 80133ac:	f7ff ff24 	bl	80131f8 <enc_read_received_pbuf>
 80133b0:	4603      	mov	r3, r0
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d111      	bne.n	80133da <mchdrv_poll+0x5a>
		{
			LWIP_DEBUGF(NETIF_DEBUG, ("[lwip] incoming: %d packages, first read into %x\n", epktcnt, (unsigned int)(buf)));
 80133b6:	7cfb      	ldrb	r3, [r7, #19]
 80133b8:	68ba      	ldr	r2, [r7, #8]
 80133ba:	4619      	mov	r1, r3
 80133bc:	480a      	ldr	r0, [pc, #40]	; (80133e8 <mchdrv_poll+0x68>)
 80133be:	f7ec ff68 	bl	8000292 <Console_DEBUG>
			result = netif->input(buf, netif);
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	691b      	ldr	r3, [r3, #16]
 80133c6:	68ba      	ldr	r2, [r7, #8]
 80133c8:	6879      	ldr	r1, [r7, #4]
 80133ca:	4610      	mov	r0, r2
 80133cc:	4798      	blx	r3
 80133ce:	60f8      	str	r0, [r7, #12]
			LWIP_DEBUGF(NETIF_DEBUG, ("[lwip] received with result %d\n", result));
 80133d0:	68f9      	ldr	r1, [r7, #12]
 80133d2:	4806      	ldr	r0, [pc, #24]	; (80133ec <mchdrv_poll+0x6c>)
 80133d4:	f7ec ff5d 	bl	8000292 <Console_DEBUG>
		{
			/* FIXME: error reporting */
			LWIP_DEBUGF(NETIF_DEBUG, ("[lwip] didn't receive.\n"));
		}
	}
}
 80133d8:	e002      	b.n	80133e0 <mchdrv_poll+0x60>
			LWIP_DEBUGF(NETIF_DEBUG, ("[lwip] didn't receive.\n"));
 80133da:	4805      	ldr	r0, [pc, #20]	; (80133f0 <mchdrv_poll+0x70>)
 80133dc:	f7ec ff59 	bl	8000292 <Console_DEBUG>
}
 80133e0:	bf00      	nop
 80133e2:	3718      	adds	r7, #24
 80133e4:	46bd      	mov	sp, r7
 80133e6:	bd80      	pop	{r7, pc}
 80133e8:	080169b4 	.word	0x080169b4
 80133ec:	080169e8 	.word	0x080169e8
 80133f0:	08016a08 	.word	0x08016a08

080133f4 <mchdrv_linkoutput>:

static err_t mchdrv_linkoutput(struct netif *netif, struct pbuf *p)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b084      	sub	sp, #16
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
 80133fc:	6039      	str	r1, [r7, #0]
	enc_device_t *encdevice = (enc_device_t *)netif->state;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	69db      	ldr	r3, [r3, #28]
 8013402:	60fb      	str	r3, [r7, #12]
	enc_transmit_pbuf(encdevice, p);
 8013404:	6839      	ldr	r1, [r7, #0]
 8013406:	68f8      	ldr	r0, [r7, #12]
 8013408:	f7ff fe42 	bl	8013090 <enc_transmit_pbuf>
	LWIP_DEBUGF(NETIF_DEBUG, ("[lwip] sent %d bytes.\n", p->tot_len));
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	891b      	ldrh	r3, [r3, #8]
 8013410:	4619      	mov	r1, r3
 8013412:	4804      	ldr	r0, [pc, #16]	; (8013424 <mchdrv_linkoutput+0x30>)
 8013414:	f7ec ff3d 	bl	8000292 <Console_DEBUG>
	/* FIXME: evaluate result state */
	return ERR_OK;
 8013418:	2300      	movs	r3, #0
}
 801341a:	4618      	mov	r0, r3
 801341c:	3710      	adds	r7, #16
 801341e:	46bd      	mov	sp, r7
 8013420:	bd80      	pop	{r7, pc}
 8013422:	bf00      	nop
 8013424:	08016a20 	.word	0x08016a20

08013428 <mchdrv_init>:

err_t mchdrv_init(struct netif *netif)
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b084      	sub	sp, #16
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
	int result;
	enc_device_t *encdevice = (enc_device_t *)netif->state;
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	69db      	ldr	r3, [r3, #28]
 8013434:	60fb      	str	r3, [r7, #12]

	LWIP_DEBUGF(NETIF_DEBUG, ("[lwip] Starting mchdrv_init.\n"));
 8013436:	4820      	ldr	r0, [pc, #128]	; (80134b8 <mchdrv_init+0x90>)
 8013438:	f7ec ff2b 	bl	8000292 <Console_DEBUG>

	result = enc_setup_basic(encdevice);
 801343c:	68f8      	ldr	r0, [r7, #12]
 801343e:	f7ff fa69 	bl	8012914 <enc_setup_basic>
 8013442:	60b8      	str	r0, [r7, #8]
	if (result != 0)
 8013444:	68bb      	ldr	r3, [r7, #8]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d005      	beq.n	8013456 <mchdrv_init+0x2e>
	{
		LWIP_DEBUGF(NETIF_DEBUG, ("[lwip] Error %d in enc_setup, interface setup aborted.\n", result));
 801344a:	68b9      	ldr	r1, [r7, #8]
 801344c:	481b      	ldr	r0, [pc, #108]	; (80134bc <mchdrv_init+0x94>)
 801344e:	f7ec ff20 	bl	8000292 <Console_DEBUG>
		return 2; // ERR_IF;
 8013452:	2302      	movs	r3, #2
 8013454:	e02c      	b.n	80134b0 <mchdrv_init+0x88>
	}
	result = enc_bist_manual(encdevice);
 8013456:	68f8      	ldr	r0, [r7, #12]
 8013458:	f7ff fa96 	bl	8012988 <enc_bist_manual>
 801345c:	4603      	mov	r3, r0
 801345e:	60bb      	str	r3, [r7, #8]
	if (result != 0)
 8013460:	68bb      	ldr	r3, [r7, #8]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d005      	beq.n	8013472 <mchdrv_init+0x4a>
	{
		LWIP_DEBUGF(NETIF_DEBUG, ("[lwip] Error %d in enc_bist_manual, interface setup aborted.\n", result));
 8013466:	68b9      	ldr	r1, [r7, #8]
 8013468:	4815      	ldr	r0, [pc, #84]	; (80134c0 <mchdrv_init+0x98>)
 801346a:	f7ec ff12 	bl	8000292 <Console_DEBUG>
		return 4; // ERR_IF;
 801346e:	2304      	movs	r3, #4
 8013470:	e01e      	b.n	80134b0 <mchdrv_init+0x88>
	}
	enc_ethernet_setup(encdevice, 4 * 1024, netif->hwaddr);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	3326      	adds	r3, #38	; 0x26
 8013476:	461a      	mov	r2, r3
 8013478:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801347c:	68f8      	ldr	r0, [r7, #12]
 801347e:	f7ff fcef 	bl	8012e60 <enc_ethernet_setup>

	netif->output = etharp_output;
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	4a0f      	ldr	r2, [pc, #60]	; (80134c4 <mchdrv_init+0x9c>)
 8013486:	615a      	str	r2, [r3, #20]
	netif->linkoutput = mchdrv_linkoutput;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	4a0f      	ldr	r2, [pc, #60]	; (80134c8 <mchdrv_init+0xa0>)
 801348c:	619a      	str	r2, [r3, #24]

	netif->mtu = 1500; /** FIXME check with documentation when jumboframes can be ok */
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8013494:	849a      	strh	r2, [r3, #36]	; 0x24

	netif->flags |= NETIF_FLAG_ETHARP | NETIF_FLAG_LINK_UP;
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801349c:	f043 030c 	orr.w	r3, r3, #12
 80134a0:	b2da      	uxtb	r2, r3
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	LWIP_DEBUGF(NETIF_DEBUG, ("[lwip] Driver initialized.\n"));
 80134a8:	4808      	ldr	r0, [pc, #32]	; (80134cc <mchdrv_init+0xa4>)
 80134aa:	f7ec fef2 	bl	8000292 <Console_DEBUG>

	return ERR_OK;
 80134ae:	2300      	movs	r3, #0
}
 80134b0:	4618      	mov	r0, r3
 80134b2:	3710      	adds	r7, #16
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bd80      	pop	{r7, pc}
 80134b8:	08016a38 	.word	0x08016a38
 80134bc:	08016a58 	.word	0x08016a58
 80134c0:	08016a90 	.word	0x08016a90
 80134c4:	080103a5 	.word	0x080103a5
 80134c8:	080133f5 	.word	0x080133f5
 80134cc:	08016ad0 	.word	0x08016ad0

080134d0 <atoi>:
 80134d0:	220a      	movs	r2, #10
 80134d2:	2100      	movs	r1, #0
 80134d4:	f000 ba22 	b.w	801391c <strtol>

080134d8 <__libc_init_array>:
 80134d8:	b570      	push	{r4, r5, r6, lr}
 80134da:	4d0d      	ldr	r5, [pc, #52]	; (8013510 <__libc_init_array+0x38>)
 80134dc:	4c0d      	ldr	r4, [pc, #52]	; (8013514 <__libc_init_array+0x3c>)
 80134de:	1b64      	subs	r4, r4, r5
 80134e0:	10a4      	asrs	r4, r4, #2
 80134e2:	2600      	movs	r6, #0
 80134e4:	42a6      	cmp	r6, r4
 80134e6:	d109      	bne.n	80134fc <__libc_init_array+0x24>
 80134e8:	4d0b      	ldr	r5, [pc, #44]	; (8013518 <__libc_init_array+0x40>)
 80134ea:	4c0c      	ldr	r4, [pc, #48]	; (801351c <__libc_init_array+0x44>)
 80134ec:	f001 fc04 	bl	8014cf8 <_init>
 80134f0:	1b64      	subs	r4, r4, r5
 80134f2:	10a4      	asrs	r4, r4, #2
 80134f4:	2600      	movs	r6, #0
 80134f6:	42a6      	cmp	r6, r4
 80134f8:	d105      	bne.n	8013506 <__libc_init_array+0x2e>
 80134fa:	bd70      	pop	{r4, r5, r6, pc}
 80134fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8013500:	4798      	blx	r3
 8013502:	3601      	adds	r6, #1
 8013504:	e7ee      	b.n	80134e4 <__libc_init_array+0xc>
 8013506:	f855 3b04 	ldr.w	r3, [r5], #4
 801350a:	4798      	blx	r3
 801350c:	3601      	adds	r6, #1
 801350e:	e7f2      	b.n	80134f6 <__libc_init_array+0x1e>
 8013510:	08016efc 	.word	0x08016efc
 8013514:	08016efc 	.word	0x08016efc
 8013518:	08016efc 	.word	0x08016efc
 801351c:	08016f00 	.word	0x08016f00

08013520 <memcmp>:
 8013520:	b510      	push	{r4, lr}
 8013522:	3901      	subs	r1, #1
 8013524:	4402      	add	r2, r0
 8013526:	4290      	cmp	r0, r2
 8013528:	d101      	bne.n	801352e <memcmp+0xe>
 801352a:	2000      	movs	r0, #0
 801352c:	e005      	b.n	801353a <memcmp+0x1a>
 801352e:	7803      	ldrb	r3, [r0, #0]
 8013530:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013534:	42a3      	cmp	r3, r4
 8013536:	d001      	beq.n	801353c <memcmp+0x1c>
 8013538:	1b18      	subs	r0, r3, r4
 801353a:	bd10      	pop	{r4, pc}
 801353c:	3001      	adds	r0, #1
 801353e:	e7f2      	b.n	8013526 <memcmp+0x6>

08013540 <memcpy>:
 8013540:	440a      	add	r2, r1
 8013542:	4291      	cmp	r1, r2
 8013544:	f100 33ff 	add.w	r3, r0, #4294967295
 8013548:	d100      	bne.n	801354c <memcpy+0xc>
 801354a:	4770      	bx	lr
 801354c:	b510      	push	{r4, lr}
 801354e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013552:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013556:	4291      	cmp	r1, r2
 8013558:	d1f9      	bne.n	801354e <memcpy+0xe>
 801355a:	bd10      	pop	{r4, pc}

0801355c <memmove>:
 801355c:	4288      	cmp	r0, r1
 801355e:	b510      	push	{r4, lr}
 8013560:	eb01 0402 	add.w	r4, r1, r2
 8013564:	d902      	bls.n	801356c <memmove+0x10>
 8013566:	4284      	cmp	r4, r0
 8013568:	4623      	mov	r3, r4
 801356a:	d807      	bhi.n	801357c <memmove+0x20>
 801356c:	1e43      	subs	r3, r0, #1
 801356e:	42a1      	cmp	r1, r4
 8013570:	d008      	beq.n	8013584 <memmove+0x28>
 8013572:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013576:	f803 2f01 	strb.w	r2, [r3, #1]!
 801357a:	e7f8      	b.n	801356e <memmove+0x12>
 801357c:	4402      	add	r2, r0
 801357e:	4601      	mov	r1, r0
 8013580:	428a      	cmp	r2, r1
 8013582:	d100      	bne.n	8013586 <memmove+0x2a>
 8013584:	bd10      	pop	{r4, pc}
 8013586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801358a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801358e:	e7f7      	b.n	8013580 <memmove+0x24>

08013590 <memset>:
 8013590:	4402      	add	r2, r0
 8013592:	4603      	mov	r3, r0
 8013594:	4293      	cmp	r3, r2
 8013596:	d100      	bne.n	801359a <memset+0xa>
 8013598:	4770      	bx	lr
 801359a:	f803 1b01 	strb.w	r1, [r3], #1
 801359e:	e7f9      	b.n	8013594 <memset+0x4>

080135a0 <iprintf>:
 80135a0:	b40f      	push	{r0, r1, r2, r3}
 80135a2:	4b0a      	ldr	r3, [pc, #40]	; (80135cc <iprintf+0x2c>)
 80135a4:	b513      	push	{r0, r1, r4, lr}
 80135a6:	681c      	ldr	r4, [r3, #0]
 80135a8:	b124      	cbz	r4, 80135b4 <iprintf+0x14>
 80135aa:	69a3      	ldr	r3, [r4, #24]
 80135ac:	b913      	cbnz	r3, 80135b4 <iprintf+0x14>
 80135ae:	4620      	mov	r0, r4
 80135b0:	f000 fbbc 	bl	8013d2c <__sinit>
 80135b4:	ab05      	add	r3, sp, #20
 80135b6:	9a04      	ldr	r2, [sp, #16]
 80135b8:	68a1      	ldr	r1, [r4, #8]
 80135ba:	9301      	str	r3, [sp, #4]
 80135bc:	4620      	mov	r0, r4
 80135be:	f000 ff3b 	bl	8014438 <_vfiprintf_r>
 80135c2:	b002      	add	sp, #8
 80135c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135c8:	b004      	add	sp, #16
 80135ca:	4770      	bx	lr
 80135cc:	200000a8 	.word	0x200000a8

080135d0 <_puts_r>:
 80135d0:	b570      	push	{r4, r5, r6, lr}
 80135d2:	460e      	mov	r6, r1
 80135d4:	4605      	mov	r5, r0
 80135d6:	b118      	cbz	r0, 80135e0 <_puts_r+0x10>
 80135d8:	6983      	ldr	r3, [r0, #24]
 80135da:	b90b      	cbnz	r3, 80135e0 <_puts_r+0x10>
 80135dc:	f000 fba6 	bl	8013d2c <__sinit>
 80135e0:	69ab      	ldr	r3, [r5, #24]
 80135e2:	68ac      	ldr	r4, [r5, #8]
 80135e4:	b913      	cbnz	r3, 80135ec <_puts_r+0x1c>
 80135e6:	4628      	mov	r0, r5
 80135e8:	f000 fba0 	bl	8013d2c <__sinit>
 80135ec:	4b2c      	ldr	r3, [pc, #176]	; (80136a0 <_puts_r+0xd0>)
 80135ee:	429c      	cmp	r4, r3
 80135f0:	d120      	bne.n	8013634 <_puts_r+0x64>
 80135f2:	686c      	ldr	r4, [r5, #4]
 80135f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80135f6:	07db      	lsls	r3, r3, #31
 80135f8:	d405      	bmi.n	8013606 <_puts_r+0x36>
 80135fa:	89a3      	ldrh	r3, [r4, #12]
 80135fc:	0598      	lsls	r0, r3, #22
 80135fe:	d402      	bmi.n	8013606 <_puts_r+0x36>
 8013600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013602:	f000 fc43 	bl	8013e8c <__retarget_lock_acquire_recursive>
 8013606:	89a3      	ldrh	r3, [r4, #12]
 8013608:	0719      	lsls	r1, r3, #28
 801360a:	d51d      	bpl.n	8013648 <_puts_r+0x78>
 801360c:	6923      	ldr	r3, [r4, #16]
 801360e:	b1db      	cbz	r3, 8013648 <_puts_r+0x78>
 8013610:	3e01      	subs	r6, #1
 8013612:	68a3      	ldr	r3, [r4, #8]
 8013614:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013618:	3b01      	subs	r3, #1
 801361a:	60a3      	str	r3, [r4, #8]
 801361c:	bb39      	cbnz	r1, 801366e <_puts_r+0x9e>
 801361e:	2b00      	cmp	r3, #0
 8013620:	da38      	bge.n	8013694 <_puts_r+0xc4>
 8013622:	4622      	mov	r2, r4
 8013624:	210a      	movs	r1, #10
 8013626:	4628      	mov	r0, r5
 8013628:	f000 f982 	bl	8013930 <__swbuf_r>
 801362c:	3001      	adds	r0, #1
 801362e:	d011      	beq.n	8013654 <_puts_r+0x84>
 8013630:	250a      	movs	r5, #10
 8013632:	e011      	b.n	8013658 <_puts_r+0x88>
 8013634:	4b1b      	ldr	r3, [pc, #108]	; (80136a4 <_puts_r+0xd4>)
 8013636:	429c      	cmp	r4, r3
 8013638:	d101      	bne.n	801363e <_puts_r+0x6e>
 801363a:	68ac      	ldr	r4, [r5, #8]
 801363c:	e7da      	b.n	80135f4 <_puts_r+0x24>
 801363e:	4b1a      	ldr	r3, [pc, #104]	; (80136a8 <_puts_r+0xd8>)
 8013640:	429c      	cmp	r4, r3
 8013642:	bf08      	it	eq
 8013644:	68ec      	ldreq	r4, [r5, #12]
 8013646:	e7d5      	b.n	80135f4 <_puts_r+0x24>
 8013648:	4621      	mov	r1, r4
 801364a:	4628      	mov	r0, r5
 801364c:	f000 f9c2 	bl	80139d4 <__swsetup_r>
 8013650:	2800      	cmp	r0, #0
 8013652:	d0dd      	beq.n	8013610 <_puts_r+0x40>
 8013654:	f04f 35ff 	mov.w	r5, #4294967295
 8013658:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801365a:	07da      	lsls	r2, r3, #31
 801365c:	d405      	bmi.n	801366a <_puts_r+0x9a>
 801365e:	89a3      	ldrh	r3, [r4, #12]
 8013660:	059b      	lsls	r3, r3, #22
 8013662:	d402      	bmi.n	801366a <_puts_r+0x9a>
 8013664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013666:	f000 fc12 	bl	8013e8e <__retarget_lock_release_recursive>
 801366a:	4628      	mov	r0, r5
 801366c:	bd70      	pop	{r4, r5, r6, pc}
 801366e:	2b00      	cmp	r3, #0
 8013670:	da04      	bge.n	801367c <_puts_r+0xac>
 8013672:	69a2      	ldr	r2, [r4, #24]
 8013674:	429a      	cmp	r2, r3
 8013676:	dc06      	bgt.n	8013686 <_puts_r+0xb6>
 8013678:	290a      	cmp	r1, #10
 801367a:	d004      	beq.n	8013686 <_puts_r+0xb6>
 801367c:	6823      	ldr	r3, [r4, #0]
 801367e:	1c5a      	adds	r2, r3, #1
 8013680:	6022      	str	r2, [r4, #0]
 8013682:	7019      	strb	r1, [r3, #0]
 8013684:	e7c5      	b.n	8013612 <_puts_r+0x42>
 8013686:	4622      	mov	r2, r4
 8013688:	4628      	mov	r0, r5
 801368a:	f000 f951 	bl	8013930 <__swbuf_r>
 801368e:	3001      	adds	r0, #1
 8013690:	d1bf      	bne.n	8013612 <_puts_r+0x42>
 8013692:	e7df      	b.n	8013654 <_puts_r+0x84>
 8013694:	6823      	ldr	r3, [r4, #0]
 8013696:	250a      	movs	r5, #10
 8013698:	1c5a      	adds	r2, r3, #1
 801369a:	6022      	str	r2, [r4, #0]
 801369c:	701d      	strb	r5, [r3, #0]
 801369e:	e7db      	b.n	8013658 <_puts_r+0x88>
 80136a0:	08016e88 	.word	0x08016e88
 80136a4:	08016ea8 	.word	0x08016ea8
 80136a8:	08016e68 	.word	0x08016e68

080136ac <puts>:
 80136ac:	4b02      	ldr	r3, [pc, #8]	; (80136b8 <puts+0xc>)
 80136ae:	4601      	mov	r1, r0
 80136b0:	6818      	ldr	r0, [r3, #0]
 80136b2:	f7ff bf8d 	b.w	80135d0 <_puts_r>
 80136b6:	bf00      	nop
 80136b8:	200000a8 	.word	0x200000a8

080136bc <siprintf>:
 80136bc:	b40e      	push	{r1, r2, r3}
 80136be:	b500      	push	{lr}
 80136c0:	b09c      	sub	sp, #112	; 0x70
 80136c2:	ab1d      	add	r3, sp, #116	; 0x74
 80136c4:	9002      	str	r0, [sp, #8]
 80136c6:	9006      	str	r0, [sp, #24]
 80136c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80136cc:	4809      	ldr	r0, [pc, #36]	; (80136f4 <siprintf+0x38>)
 80136ce:	9107      	str	r1, [sp, #28]
 80136d0:	9104      	str	r1, [sp, #16]
 80136d2:	4909      	ldr	r1, [pc, #36]	; (80136f8 <siprintf+0x3c>)
 80136d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80136d8:	9105      	str	r1, [sp, #20]
 80136da:	6800      	ldr	r0, [r0, #0]
 80136dc:	9301      	str	r3, [sp, #4]
 80136de:	a902      	add	r1, sp, #8
 80136e0:	f000 fd80 	bl	80141e4 <_svfiprintf_r>
 80136e4:	9b02      	ldr	r3, [sp, #8]
 80136e6:	2200      	movs	r2, #0
 80136e8:	701a      	strb	r2, [r3, #0]
 80136ea:	b01c      	add	sp, #112	; 0x70
 80136ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80136f0:	b003      	add	sp, #12
 80136f2:	4770      	bx	lr
 80136f4:	200000a8 	.word	0x200000a8
 80136f8:	ffff0208 	.word	0xffff0208

080136fc <strcpy>:
 80136fc:	4603      	mov	r3, r0
 80136fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013702:	f803 2b01 	strb.w	r2, [r3], #1
 8013706:	2a00      	cmp	r2, #0
 8013708:	d1f9      	bne.n	80136fe <strcpy+0x2>
 801370a:	4770      	bx	lr

0801370c <strncpy>:
 801370c:	b510      	push	{r4, lr}
 801370e:	3901      	subs	r1, #1
 8013710:	4603      	mov	r3, r0
 8013712:	b132      	cbz	r2, 8013722 <strncpy+0x16>
 8013714:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013718:	f803 4b01 	strb.w	r4, [r3], #1
 801371c:	3a01      	subs	r2, #1
 801371e:	2c00      	cmp	r4, #0
 8013720:	d1f7      	bne.n	8013712 <strncpy+0x6>
 8013722:	441a      	add	r2, r3
 8013724:	2100      	movs	r1, #0
 8013726:	4293      	cmp	r3, r2
 8013728:	d100      	bne.n	801372c <strncpy+0x20>
 801372a:	bd10      	pop	{r4, pc}
 801372c:	f803 1b01 	strb.w	r1, [r3], #1
 8013730:	e7f9      	b.n	8013726 <strncpy+0x1a>

08013732 <strstr>:
 8013732:	780a      	ldrb	r2, [r1, #0]
 8013734:	b570      	push	{r4, r5, r6, lr}
 8013736:	b96a      	cbnz	r2, 8013754 <strstr+0x22>
 8013738:	bd70      	pop	{r4, r5, r6, pc}
 801373a:	429a      	cmp	r2, r3
 801373c:	d109      	bne.n	8013752 <strstr+0x20>
 801373e:	460c      	mov	r4, r1
 8013740:	4605      	mov	r5, r0
 8013742:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013746:	2b00      	cmp	r3, #0
 8013748:	d0f6      	beq.n	8013738 <strstr+0x6>
 801374a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801374e:	429e      	cmp	r6, r3
 8013750:	d0f7      	beq.n	8013742 <strstr+0x10>
 8013752:	3001      	adds	r0, #1
 8013754:	7803      	ldrb	r3, [r0, #0]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d1ef      	bne.n	801373a <strstr+0x8>
 801375a:	4618      	mov	r0, r3
 801375c:	e7ec      	b.n	8013738 <strstr+0x6>
	...

08013760 <strtok>:
 8013760:	4b16      	ldr	r3, [pc, #88]	; (80137bc <strtok+0x5c>)
 8013762:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013764:	681e      	ldr	r6, [r3, #0]
 8013766:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8013768:	4605      	mov	r5, r0
 801376a:	b9fc      	cbnz	r4, 80137ac <strtok+0x4c>
 801376c:	2050      	movs	r0, #80	; 0x50
 801376e:	9101      	str	r1, [sp, #4]
 8013770:	f000 fbf4 	bl	8013f5c <malloc>
 8013774:	9901      	ldr	r1, [sp, #4]
 8013776:	65b0      	str	r0, [r6, #88]	; 0x58
 8013778:	4602      	mov	r2, r0
 801377a:	b920      	cbnz	r0, 8013786 <strtok+0x26>
 801377c:	4b10      	ldr	r3, [pc, #64]	; (80137c0 <strtok+0x60>)
 801377e:	4811      	ldr	r0, [pc, #68]	; (80137c4 <strtok+0x64>)
 8013780:	2157      	movs	r1, #87	; 0x57
 8013782:	f000 f995 	bl	8013ab0 <__assert_func>
 8013786:	e9c0 4400 	strd	r4, r4, [r0]
 801378a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801378e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8013792:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8013796:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801379a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801379e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80137a2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80137a6:	6184      	str	r4, [r0, #24]
 80137a8:	7704      	strb	r4, [r0, #28]
 80137aa:	6244      	str	r4, [r0, #36]	; 0x24
 80137ac:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80137ae:	2301      	movs	r3, #1
 80137b0:	4628      	mov	r0, r5
 80137b2:	b002      	add	sp, #8
 80137b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80137b8:	f000 b806 	b.w	80137c8 <__strtok_r>
 80137bc:	200000a8 	.word	0x200000a8
 80137c0:	08016db8 	.word	0x08016db8
 80137c4:	08016dcf 	.word	0x08016dcf

080137c8 <__strtok_r>:
 80137c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137ca:	b908      	cbnz	r0, 80137d0 <__strtok_r+0x8>
 80137cc:	6810      	ldr	r0, [r2, #0]
 80137ce:	b188      	cbz	r0, 80137f4 <__strtok_r+0x2c>
 80137d0:	4604      	mov	r4, r0
 80137d2:	4620      	mov	r0, r4
 80137d4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80137d8:	460f      	mov	r7, r1
 80137da:	f817 6b01 	ldrb.w	r6, [r7], #1
 80137de:	b91e      	cbnz	r6, 80137e8 <__strtok_r+0x20>
 80137e0:	b965      	cbnz	r5, 80137fc <__strtok_r+0x34>
 80137e2:	6015      	str	r5, [r2, #0]
 80137e4:	4628      	mov	r0, r5
 80137e6:	e005      	b.n	80137f4 <__strtok_r+0x2c>
 80137e8:	42b5      	cmp	r5, r6
 80137ea:	d1f6      	bne.n	80137da <__strtok_r+0x12>
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d1f0      	bne.n	80137d2 <__strtok_r+0xa>
 80137f0:	6014      	str	r4, [r2, #0]
 80137f2:	7003      	strb	r3, [r0, #0]
 80137f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137f6:	461c      	mov	r4, r3
 80137f8:	e00c      	b.n	8013814 <__strtok_r+0x4c>
 80137fa:	b915      	cbnz	r5, 8013802 <__strtok_r+0x3a>
 80137fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013800:	460e      	mov	r6, r1
 8013802:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013806:	42ab      	cmp	r3, r5
 8013808:	d1f7      	bne.n	80137fa <__strtok_r+0x32>
 801380a:	2b00      	cmp	r3, #0
 801380c:	d0f3      	beq.n	80137f6 <__strtok_r+0x2e>
 801380e:	2300      	movs	r3, #0
 8013810:	f804 3c01 	strb.w	r3, [r4, #-1]
 8013814:	6014      	str	r4, [r2, #0]
 8013816:	e7ed      	b.n	80137f4 <__strtok_r+0x2c>

08013818 <_strtol_l.constprop.0>:
 8013818:	2b01      	cmp	r3, #1
 801381a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801381e:	d001      	beq.n	8013824 <_strtol_l.constprop.0+0xc>
 8013820:	2b24      	cmp	r3, #36	; 0x24
 8013822:	d906      	bls.n	8013832 <_strtol_l.constprop.0+0x1a>
 8013824:	f000 f962 	bl	8013aec <__errno>
 8013828:	2316      	movs	r3, #22
 801382a:	6003      	str	r3, [r0, #0]
 801382c:	2000      	movs	r0, #0
 801382e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013832:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013918 <_strtol_l.constprop.0+0x100>
 8013836:	460d      	mov	r5, r1
 8013838:	462e      	mov	r6, r5
 801383a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801383e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8013842:	f017 0708 	ands.w	r7, r7, #8
 8013846:	d1f7      	bne.n	8013838 <_strtol_l.constprop.0+0x20>
 8013848:	2c2d      	cmp	r4, #45	; 0x2d
 801384a:	d132      	bne.n	80138b2 <_strtol_l.constprop.0+0x9a>
 801384c:	782c      	ldrb	r4, [r5, #0]
 801384e:	2701      	movs	r7, #1
 8013850:	1cb5      	adds	r5, r6, #2
 8013852:	2b00      	cmp	r3, #0
 8013854:	d05b      	beq.n	801390e <_strtol_l.constprop.0+0xf6>
 8013856:	2b10      	cmp	r3, #16
 8013858:	d109      	bne.n	801386e <_strtol_l.constprop.0+0x56>
 801385a:	2c30      	cmp	r4, #48	; 0x30
 801385c:	d107      	bne.n	801386e <_strtol_l.constprop.0+0x56>
 801385e:	782c      	ldrb	r4, [r5, #0]
 8013860:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013864:	2c58      	cmp	r4, #88	; 0x58
 8013866:	d14d      	bne.n	8013904 <_strtol_l.constprop.0+0xec>
 8013868:	786c      	ldrb	r4, [r5, #1]
 801386a:	2310      	movs	r3, #16
 801386c:	3502      	adds	r5, #2
 801386e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8013872:	f108 38ff 	add.w	r8, r8, #4294967295
 8013876:	f04f 0c00 	mov.w	ip, #0
 801387a:	fbb8 f9f3 	udiv	r9, r8, r3
 801387e:	4666      	mov	r6, ip
 8013880:	fb03 8a19 	mls	sl, r3, r9, r8
 8013884:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8013888:	f1be 0f09 	cmp.w	lr, #9
 801388c:	d816      	bhi.n	80138bc <_strtol_l.constprop.0+0xa4>
 801388e:	4674      	mov	r4, lr
 8013890:	42a3      	cmp	r3, r4
 8013892:	dd24      	ble.n	80138de <_strtol_l.constprop.0+0xc6>
 8013894:	f1bc 0f00 	cmp.w	ip, #0
 8013898:	db1e      	blt.n	80138d8 <_strtol_l.constprop.0+0xc0>
 801389a:	45b1      	cmp	r9, r6
 801389c:	d31c      	bcc.n	80138d8 <_strtol_l.constprop.0+0xc0>
 801389e:	d101      	bne.n	80138a4 <_strtol_l.constprop.0+0x8c>
 80138a0:	45a2      	cmp	sl, r4
 80138a2:	db19      	blt.n	80138d8 <_strtol_l.constprop.0+0xc0>
 80138a4:	fb06 4603 	mla	r6, r6, r3, r4
 80138a8:	f04f 0c01 	mov.w	ip, #1
 80138ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80138b0:	e7e8      	b.n	8013884 <_strtol_l.constprop.0+0x6c>
 80138b2:	2c2b      	cmp	r4, #43	; 0x2b
 80138b4:	bf04      	itt	eq
 80138b6:	782c      	ldrbeq	r4, [r5, #0]
 80138b8:	1cb5      	addeq	r5, r6, #2
 80138ba:	e7ca      	b.n	8013852 <_strtol_l.constprop.0+0x3a>
 80138bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80138c0:	f1be 0f19 	cmp.w	lr, #25
 80138c4:	d801      	bhi.n	80138ca <_strtol_l.constprop.0+0xb2>
 80138c6:	3c37      	subs	r4, #55	; 0x37
 80138c8:	e7e2      	b.n	8013890 <_strtol_l.constprop.0+0x78>
 80138ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80138ce:	f1be 0f19 	cmp.w	lr, #25
 80138d2:	d804      	bhi.n	80138de <_strtol_l.constprop.0+0xc6>
 80138d4:	3c57      	subs	r4, #87	; 0x57
 80138d6:	e7db      	b.n	8013890 <_strtol_l.constprop.0+0x78>
 80138d8:	f04f 3cff 	mov.w	ip, #4294967295
 80138dc:	e7e6      	b.n	80138ac <_strtol_l.constprop.0+0x94>
 80138de:	f1bc 0f00 	cmp.w	ip, #0
 80138e2:	da05      	bge.n	80138f0 <_strtol_l.constprop.0+0xd8>
 80138e4:	2322      	movs	r3, #34	; 0x22
 80138e6:	6003      	str	r3, [r0, #0]
 80138e8:	4646      	mov	r6, r8
 80138ea:	b942      	cbnz	r2, 80138fe <_strtol_l.constprop.0+0xe6>
 80138ec:	4630      	mov	r0, r6
 80138ee:	e79e      	b.n	801382e <_strtol_l.constprop.0+0x16>
 80138f0:	b107      	cbz	r7, 80138f4 <_strtol_l.constprop.0+0xdc>
 80138f2:	4276      	negs	r6, r6
 80138f4:	2a00      	cmp	r2, #0
 80138f6:	d0f9      	beq.n	80138ec <_strtol_l.constprop.0+0xd4>
 80138f8:	f1bc 0f00 	cmp.w	ip, #0
 80138fc:	d000      	beq.n	8013900 <_strtol_l.constprop.0+0xe8>
 80138fe:	1e69      	subs	r1, r5, #1
 8013900:	6011      	str	r1, [r2, #0]
 8013902:	e7f3      	b.n	80138ec <_strtol_l.constprop.0+0xd4>
 8013904:	2430      	movs	r4, #48	; 0x30
 8013906:	2b00      	cmp	r3, #0
 8013908:	d1b1      	bne.n	801386e <_strtol_l.constprop.0+0x56>
 801390a:	2308      	movs	r3, #8
 801390c:	e7af      	b.n	801386e <_strtol_l.constprop.0+0x56>
 801390e:	2c30      	cmp	r4, #48	; 0x30
 8013910:	d0a5      	beq.n	801385e <_strtol_l.constprop.0+0x46>
 8013912:	230a      	movs	r3, #10
 8013914:	e7ab      	b.n	801386e <_strtol_l.constprop.0+0x56>
 8013916:	bf00      	nop
 8013918:	08016cb3 	.word	0x08016cb3

0801391c <strtol>:
 801391c:	4613      	mov	r3, r2
 801391e:	460a      	mov	r2, r1
 8013920:	4601      	mov	r1, r0
 8013922:	4802      	ldr	r0, [pc, #8]	; (801392c <strtol+0x10>)
 8013924:	6800      	ldr	r0, [r0, #0]
 8013926:	f7ff bf77 	b.w	8013818 <_strtol_l.constprop.0>
 801392a:	bf00      	nop
 801392c:	200000a8 	.word	0x200000a8

08013930 <__swbuf_r>:
 8013930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013932:	460e      	mov	r6, r1
 8013934:	4614      	mov	r4, r2
 8013936:	4605      	mov	r5, r0
 8013938:	b118      	cbz	r0, 8013942 <__swbuf_r+0x12>
 801393a:	6983      	ldr	r3, [r0, #24]
 801393c:	b90b      	cbnz	r3, 8013942 <__swbuf_r+0x12>
 801393e:	f000 f9f5 	bl	8013d2c <__sinit>
 8013942:	4b21      	ldr	r3, [pc, #132]	; (80139c8 <__swbuf_r+0x98>)
 8013944:	429c      	cmp	r4, r3
 8013946:	d12b      	bne.n	80139a0 <__swbuf_r+0x70>
 8013948:	686c      	ldr	r4, [r5, #4]
 801394a:	69a3      	ldr	r3, [r4, #24]
 801394c:	60a3      	str	r3, [r4, #8]
 801394e:	89a3      	ldrh	r3, [r4, #12]
 8013950:	071a      	lsls	r2, r3, #28
 8013952:	d52f      	bpl.n	80139b4 <__swbuf_r+0x84>
 8013954:	6923      	ldr	r3, [r4, #16]
 8013956:	b36b      	cbz	r3, 80139b4 <__swbuf_r+0x84>
 8013958:	6923      	ldr	r3, [r4, #16]
 801395a:	6820      	ldr	r0, [r4, #0]
 801395c:	1ac0      	subs	r0, r0, r3
 801395e:	6963      	ldr	r3, [r4, #20]
 8013960:	b2f6      	uxtb	r6, r6
 8013962:	4283      	cmp	r3, r0
 8013964:	4637      	mov	r7, r6
 8013966:	dc04      	bgt.n	8013972 <__swbuf_r+0x42>
 8013968:	4621      	mov	r1, r4
 801396a:	4628      	mov	r0, r5
 801396c:	f000 f94a 	bl	8013c04 <_fflush_r>
 8013970:	bb30      	cbnz	r0, 80139c0 <__swbuf_r+0x90>
 8013972:	68a3      	ldr	r3, [r4, #8]
 8013974:	3b01      	subs	r3, #1
 8013976:	60a3      	str	r3, [r4, #8]
 8013978:	6823      	ldr	r3, [r4, #0]
 801397a:	1c5a      	adds	r2, r3, #1
 801397c:	6022      	str	r2, [r4, #0]
 801397e:	701e      	strb	r6, [r3, #0]
 8013980:	6963      	ldr	r3, [r4, #20]
 8013982:	3001      	adds	r0, #1
 8013984:	4283      	cmp	r3, r0
 8013986:	d004      	beq.n	8013992 <__swbuf_r+0x62>
 8013988:	89a3      	ldrh	r3, [r4, #12]
 801398a:	07db      	lsls	r3, r3, #31
 801398c:	d506      	bpl.n	801399c <__swbuf_r+0x6c>
 801398e:	2e0a      	cmp	r6, #10
 8013990:	d104      	bne.n	801399c <__swbuf_r+0x6c>
 8013992:	4621      	mov	r1, r4
 8013994:	4628      	mov	r0, r5
 8013996:	f000 f935 	bl	8013c04 <_fflush_r>
 801399a:	b988      	cbnz	r0, 80139c0 <__swbuf_r+0x90>
 801399c:	4638      	mov	r0, r7
 801399e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139a0:	4b0a      	ldr	r3, [pc, #40]	; (80139cc <__swbuf_r+0x9c>)
 80139a2:	429c      	cmp	r4, r3
 80139a4:	d101      	bne.n	80139aa <__swbuf_r+0x7a>
 80139a6:	68ac      	ldr	r4, [r5, #8]
 80139a8:	e7cf      	b.n	801394a <__swbuf_r+0x1a>
 80139aa:	4b09      	ldr	r3, [pc, #36]	; (80139d0 <__swbuf_r+0xa0>)
 80139ac:	429c      	cmp	r4, r3
 80139ae:	bf08      	it	eq
 80139b0:	68ec      	ldreq	r4, [r5, #12]
 80139b2:	e7ca      	b.n	801394a <__swbuf_r+0x1a>
 80139b4:	4621      	mov	r1, r4
 80139b6:	4628      	mov	r0, r5
 80139b8:	f000 f80c 	bl	80139d4 <__swsetup_r>
 80139bc:	2800      	cmp	r0, #0
 80139be:	d0cb      	beq.n	8013958 <__swbuf_r+0x28>
 80139c0:	f04f 37ff 	mov.w	r7, #4294967295
 80139c4:	e7ea      	b.n	801399c <__swbuf_r+0x6c>
 80139c6:	bf00      	nop
 80139c8:	08016e88 	.word	0x08016e88
 80139cc:	08016ea8 	.word	0x08016ea8
 80139d0:	08016e68 	.word	0x08016e68

080139d4 <__swsetup_r>:
 80139d4:	4b32      	ldr	r3, [pc, #200]	; (8013aa0 <__swsetup_r+0xcc>)
 80139d6:	b570      	push	{r4, r5, r6, lr}
 80139d8:	681d      	ldr	r5, [r3, #0]
 80139da:	4606      	mov	r6, r0
 80139dc:	460c      	mov	r4, r1
 80139de:	b125      	cbz	r5, 80139ea <__swsetup_r+0x16>
 80139e0:	69ab      	ldr	r3, [r5, #24]
 80139e2:	b913      	cbnz	r3, 80139ea <__swsetup_r+0x16>
 80139e4:	4628      	mov	r0, r5
 80139e6:	f000 f9a1 	bl	8013d2c <__sinit>
 80139ea:	4b2e      	ldr	r3, [pc, #184]	; (8013aa4 <__swsetup_r+0xd0>)
 80139ec:	429c      	cmp	r4, r3
 80139ee:	d10f      	bne.n	8013a10 <__swsetup_r+0x3c>
 80139f0:	686c      	ldr	r4, [r5, #4]
 80139f2:	89a3      	ldrh	r3, [r4, #12]
 80139f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80139f8:	0719      	lsls	r1, r3, #28
 80139fa:	d42c      	bmi.n	8013a56 <__swsetup_r+0x82>
 80139fc:	06dd      	lsls	r5, r3, #27
 80139fe:	d411      	bmi.n	8013a24 <__swsetup_r+0x50>
 8013a00:	2309      	movs	r3, #9
 8013a02:	6033      	str	r3, [r6, #0]
 8013a04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013a08:	81a3      	strh	r3, [r4, #12]
 8013a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8013a0e:	e03e      	b.n	8013a8e <__swsetup_r+0xba>
 8013a10:	4b25      	ldr	r3, [pc, #148]	; (8013aa8 <__swsetup_r+0xd4>)
 8013a12:	429c      	cmp	r4, r3
 8013a14:	d101      	bne.n	8013a1a <__swsetup_r+0x46>
 8013a16:	68ac      	ldr	r4, [r5, #8]
 8013a18:	e7eb      	b.n	80139f2 <__swsetup_r+0x1e>
 8013a1a:	4b24      	ldr	r3, [pc, #144]	; (8013aac <__swsetup_r+0xd8>)
 8013a1c:	429c      	cmp	r4, r3
 8013a1e:	bf08      	it	eq
 8013a20:	68ec      	ldreq	r4, [r5, #12]
 8013a22:	e7e6      	b.n	80139f2 <__swsetup_r+0x1e>
 8013a24:	0758      	lsls	r0, r3, #29
 8013a26:	d512      	bpl.n	8013a4e <__swsetup_r+0x7a>
 8013a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a2a:	b141      	cbz	r1, 8013a3e <__swsetup_r+0x6a>
 8013a2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a30:	4299      	cmp	r1, r3
 8013a32:	d002      	beq.n	8013a3a <__swsetup_r+0x66>
 8013a34:	4630      	mov	r0, r6
 8013a36:	f000 fa99 	bl	8013f6c <_free_r>
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	6363      	str	r3, [r4, #52]	; 0x34
 8013a3e:	89a3      	ldrh	r3, [r4, #12]
 8013a40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013a44:	81a3      	strh	r3, [r4, #12]
 8013a46:	2300      	movs	r3, #0
 8013a48:	6063      	str	r3, [r4, #4]
 8013a4a:	6923      	ldr	r3, [r4, #16]
 8013a4c:	6023      	str	r3, [r4, #0]
 8013a4e:	89a3      	ldrh	r3, [r4, #12]
 8013a50:	f043 0308 	orr.w	r3, r3, #8
 8013a54:	81a3      	strh	r3, [r4, #12]
 8013a56:	6923      	ldr	r3, [r4, #16]
 8013a58:	b94b      	cbnz	r3, 8013a6e <__swsetup_r+0x9a>
 8013a5a:	89a3      	ldrh	r3, [r4, #12]
 8013a5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013a64:	d003      	beq.n	8013a6e <__swsetup_r+0x9a>
 8013a66:	4621      	mov	r1, r4
 8013a68:	4630      	mov	r0, r6
 8013a6a:	f000 fa37 	bl	8013edc <__smakebuf_r>
 8013a6e:	89a0      	ldrh	r0, [r4, #12]
 8013a70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013a74:	f010 0301 	ands.w	r3, r0, #1
 8013a78:	d00a      	beq.n	8013a90 <__swsetup_r+0xbc>
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	60a3      	str	r3, [r4, #8]
 8013a7e:	6963      	ldr	r3, [r4, #20]
 8013a80:	425b      	negs	r3, r3
 8013a82:	61a3      	str	r3, [r4, #24]
 8013a84:	6923      	ldr	r3, [r4, #16]
 8013a86:	b943      	cbnz	r3, 8013a9a <__swsetup_r+0xc6>
 8013a88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013a8c:	d1ba      	bne.n	8013a04 <__swsetup_r+0x30>
 8013a8e:	bd70      	pop	{r4, r5, r6, pc}
 8013a90:	0781      	lsls	r1, r0, #30
 8013a92:	bf58      	it	pl
 8013a94:	6963      	ldrpl	r3, [r4, #20]
 8013a96:	60a3      	str	r3, [r4, #8]
 8013a98:	e7f4      	b.n	8013a84 <__swsetup_r+0xb0>
 8013a9a:	2000      	movs	r0, #0
 8013a9c:	e7f7      	b.n	8013a8e <__swsetup_r+0xba>
 8013a9e:	bf00      	nop
 8013aa0:	200000a8 	.word	0x200000a8
 8013aa4:	08016e88 	.word	0x08016e88
 8013aa8:	08016ea8 	.word	0x08016ea8
 8013aac:	08016e68 	.word	0x08016e68

08013ab0 <__assert_func>:
 8013ab0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013ab2:	4614      	mov	r4, r2
 8013ab4:	461a      	mov	r2, r3
 8013ab6:	4b09      	ldr	r3, [pc, #36]	; (8013adc <__assert_func+0x2c>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	4605      	mov	r5, r0
 8013abc:	68d8      	ldr	r0, [r3, #12]
 8013abe:	b14c      	cbz	r4, 8013ad4 <__assert_func+0x24>
 8013ac0:	4b07      	ldr	r3, [pc, #28]	; (8013ae0 <__assert_func+0x30>)
 8013ac2:	9100      	str	r1, [sp, #0]
 8013ac4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013ac8:	4906      	ldr	r1, [pc, #24]	; (8013ae4 <__assert_func+0x34>)
 8013aca:	462b      	mov	r3, r5
 8013acc:	f000 f9ac 	bl	8013e28 <fiprintf>
 8013ad0:	f000 ffdc 	bl	8014a8c <abort>
 8013ad4:	4b04      	ldr	r3, [pc, #16]	; (8013ae8 <__assert_func+0x38>)
 8013ad6:	461c      	mov	r4, r3
 8013ad8:	e7f3      	b.n	8013ac2 <__assert_func+0x12>
 8013ada:	bf00      	nop
 8013adc:	200000a8 	.word	0x200000a8
 8013ae0:	08016e2c 	.word	0x08016e2c
 8013ae4:	08016e39 	.word	0x08016e39
 8013ae8:	08016e67 	.word	0x08016e67

08013aec <__errno>:
 8013aec:	4b01      	ldr	r3, [pc, #4]	; (8013af4 <__errno+0x8>)
 8013aee:	6818      	ldr	r0, [r3, #0]
 8013af0:	4770      	bx	lr
 8013af2:	bf00      	nop
 8013af4:	200000a8 	.word	0x200000a8

08013af8 <__sflush_r>:
 8013af8:	898a      	ldrh	r2, [r1, #12]
 8013afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013afe:	4605      	mov	r5, r0
 8013b00:	0710      	lsls	r0, r2, #28
 8013b02:	460c      	mov	r4, r1
 8013b04:	d458      	bmi.n	8013bb8 <__sflush_r+0xc0>
 8013b06:	684b      	ldr	r3, [r1, #4]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	dc05      	bgt.n	8013b18 <__sflush_r+0x20>
 8013b0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	dc02      	bgt.n	8013b18 <__sflush_r+0x20>
 8013b12:	2000      	movs	r0, #0
 8013b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013b1a:	2e00      	cmp	r6, #0
 8013b1c:	d0f9      	beq.n	8013b12 <__sflush_r+0x1a>
 8013b1e:	2300      	movs	r3, #0
 8013b20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013b24:	682f      	ldr	r7, [r5, #0]
 8013b26:	602b      	str	r3, [r5, #0]
 8013b28:	d032      	beq.n	8013b90 <__sflush_r+0x98>
 8013b2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013b2c:	89a3      	ldrh	r3, [r4, #12]
 8013b2e:	075a      	lsls	r2, r3, #29
 8013b30:	d505      	bpl.n	8013b3e <__sflush_r+0x46>
 8013b32:	6863      	ldr	r3, [r4, #4]
 8013b34:	1ac0      	subs	r0, r0, r3
 8013b36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013b38:	b10b      	cbz	r3, 8013b3e <__sflush_r+0x46>
 8013b3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013b3c:	1ac0      	subs	r0, r0, r3
 8013b3e:	2300      	movs	r3, #0
 8013b40:	4602      	mov	r2, r0
 8013b42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013b44:	6a21      	ldr	r1, [r4, #32]
 8013b46:	4628      	mov	r0, r5
 8013b48:	47b0      	blx	r6
 8013b4a:	1c43      	adds	r3, r0, #1
 8013b4c:	89a3      	ldrh	r3, [r4, #12]
 8013b4e:	d106      	bne.n	8013b5e <__sflush_r+0x66>
 8013b50:	6829      	ldr	r1, [r5, #0]
 8013b52:	291d      	cmp	r1, #29
 8013b54:	d82c      	bhi.n	8013bb0 <__sflush_r+0xb8>
 8013b56:	4a2a      	ldr	r2, [pc, #168]	; (8013c00 <__sflush_r+0x108>)
 8013b58:	40ca      	lsrs	r2, r1
 8013b5a:	07d6      	lsls	r6, r2, #31
 8013b5c:	d528      	bpl.n	8013bb0 <__sflush_r+0xb8>
 8013b5e:	2200      	movs	r2, #0
 8013b60:	6062      	str	r2, [r4, #4]
 8013b62:	04d9      	lsls	r1, r3, #19
 8013b64:	6922      	ldr	r2, [r4, #16]
 8013b66:	6022      	str	r2, [r4, #0]
 8013b68:	d504      	bpl.n	8013b74 <__sflush_r+0x7c>
 8013b6a:	1c42      	adds	r2, r0, #1
 8013b6c:	d101      	bne.n	8013b72 <__sflush_r+0x7a>
 8013b6e:	682b      	ldr	r3, [r5, #0]
 8013b70:	b903      	cbnz	r3, 8013b74 <__sflush_r+0x7c>
 8013b72:	6560      	str	r0, [r4, #84]	; 0x54
 8013b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013b76:	602f      	str	r7, [r5, #0]
 8013b78:	2900      	cmp	r1, #0
 8013b7a:	d0ca      	beq.n	8013b12 <__sflush_r+0x1a>
 8013b7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b80:	4299      	cmp	r1, r3
 8013b82:	d002      	beq.n	8013b8a <__sflush_r+0x92>
 8013b84:	4628      	mov	r0, r5
 8013b86:	f000 f9f1 	bl	8013f6c <_free_r>
 8013b8a:	2000      	movs	r0, #0
 8013b8c:	6360      	str	r0, [r4, #52]	; 0x34
 8013b8e:	e7c1      	b.n	8013b14 <__sflush_r+0x1c>
 8013b90:	6a21      	ldr	r1, [r4, #32]
 8013b92:	2301      	movs	r3, #1
 8013b94:	4628      	mov	r0, r5
 8013b96:	47b0      	blx	r6
 8013b98:	1c41      	adds	r1, r0, #1
 8013b9a:	d1c7      	bne.n	8013b2c <__sflush_r+0x34>
 8013b9c:	682b      	ldr	r3, [r5, #0]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d0c4      	beq.n	8013b2c <__sflush_r+0x34>
 8013ba2:	2b1d      	cmp	r3, #29
 8013ba4:	d001      	beq.n	8013baa <__sflush_r+0xb2>
 8013ba6:	2b16      	cmp	r3, #22
 8013ba8:	d101      	bne.n	8013bae <__sflush_r+0xb6>
 8013baa:	602f      	str	r7, [r5, #0]
 8013bac:	e7b1      	b.n	8013b12 <__sflush_r+0x1a>
 8013bae:	89a3      	ldrh	r3, [r4, #12]
 8013bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bb4:	81a3      	strh	r3, [r4, #12]
 8013bb6:	e7ad      	b.n	8013b14 <__sflush_r+0x1c>
 8013bb8:	690f      	ldr	r7, [r1, #16]
 8013bba:	2f00      	cmp	r7, #0
 8013bbc:	d0a9      	beq.n	8013b12 <__sflush_r+0x1a>
 8013bbe:	0793      	lsls	r3, r2, #30
 8013bc0:	680e      	ldr	r6, [r1, #0]
 8013bc2:	bf08      	it	eq
 8013bc4:	694b      	ldreq	r3, [r1, #20]
 8013bc6:	600f      	str	r7, [r1, #0]
 8013bc8:	bf18      	it	ne
 8013bca:	2300      	movne	r3, #0
 8013bcc:	eba6 0807 	sub.w	r8, r6, r7
 8013bd0:	608b      	str	r3, [r1, #8]
 8013bd2:	f1b8 0f00 	cmp.w	r8, #0
 8013bd6:	dd9c      	ble.n	8013b12 <__sflush_r+0x1a>
 8013bd8:	6a21      	ldr	r1, [r4, #32]
 8013bda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013bdc:	4643      	mov	r3, r8
 8013bde:	463a      	mov	r2, r7
 8013be0:	4628      	mov	r0, r5
 8013be2:	47b0      	blx	r6
 8013be4:	2800      	cmp	r0, #0
 8013be6:	dc06      	bgt.n	8013bf6 <__sflush_r+0xfe>
 8013be8:	89a3      	ldrh	r3, [r4, #12]
 8013bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bee:	81a3      	strh	r3, [r4, #12]
 8013bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8013bf4:	e78e      	b.n	8013b14 <__sflush_r+0x1c>
 8013bf6:	4407      	add	r7, r0
 8013bf8:	eba8 0800 	sub.w	r8, r8, r0
 8013bfc:	e7e9      	b.n	8013bd2 <__sflush_r+0xda>
 8013bfe:	bf00      	nop
 8013c00:	20400001 	.word	0x20400001

08013c04 <_fflush_r>:
 8013c04:	b538      	push	{r3, r4, r5, lr}
 8013c06:	690b      	ldr	r3, [r1, #16]
 8013c08:	4605      	mov	r5, r0
 8013c0a:	460c      	mov	r4, r1
 8013c0c:	b913      	cbnz	r3, 8013c14 <_fflush_r+0x10>
 8013c0e:	2500      	movs	r5, #0
 8013c10:	4628      	mov	r0, r5
 8013c12:	bd38      	pop	{r3, r4, r5, pc}
 8013c14:	b118      	cbz	r0, 8013c1e <_fflush_r+0x1a>
 8013c16:	6983      	ldr	r3, [r0, #24]
 8013c18:	b90b      	cbnz	r3, 8013c1e <_fflush_r+0x1a>
 8013c1a:	f000 f887 	bl	8013d2c <__sinit>
 8013c1e:	4b14      	ldr	r3, [pc, #80]	; (8013c70 <_fflush_r+0x6c>)
 8013c20:	429c      	cmp	r4, r3
 8013c22:	d11b      	bne.n	8013c5c <_fflush_r+0x58>
 8013c24:	686c      	ldr	r4, [r5, #4]
 8013c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d0ef      	beq.n	8013c0e <_fflush_r+0xa>
 8013c2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013c30:	07d0      	lsls	r0, r2, #31
 8013c32:	d404      	bmi.n	8013c3e <_fflush_r+0x3a>
 8013c34:	0599      	lsls	r1, r3, #22
 8013c36:	d402      	bmi.n	8013c3e <_fflush_r+0x3a>
 8013c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c3a:	f000 f927 	bl	8013e8c <__retarget_lock_acquire_recursive>
 8013c3e:	4628      	mov	r0, r5
 8013c40:	4621      	mov	r1, r4
 8013c42:	f7ff ff59 	bl	8013af8 <__sflush_r>
 8013c46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013c48:	07da      	lsls	r2, r3, #31
 8013c4a:	4605      	mov	r5, r0
 8013c4c:	d4e0      	bmi.n	8013c10 <_fflush_r+0xc>
 8013c4e:	89a3      	ldrh	r3, [r4, #12]
 8013c50:	059b      	lsls	r3, r3, #22
 8013c52:	d4dd      	bmi.n	8013c10 <_fflush_r+0xc>
 8013c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c56:	f000 f91a 	bl	8013e8e <__retarget_lock_release_recursive>
 8013c5a:	e7d9      	b.n	8013c10 <_fflush_r+0xc>
 8013c5c:	4b05      	ldr	r3, [pc, #20]	; (8013c74 <_fflush_r+0x70>)
 8013c5e:	429c      	cmp	r4, r3
 8013c60:	d101      	bne.n	8013c66 <_fflush_r+0x62>
 8013c62:	68ac      	ldr	r4, [r5, #8]
 8013c64:	e7df      	b.n	8013c26 <_fflush_r+0x22>
 8013c66:	4b04      	ldr	r3, [pc, #16]	; (8013c78 <_fflush_r+0x74>)
 8013c68:	429c      	cmp	r4, r3
 8013c6a:	bf08      	it	eq
 8013c6c:	68ec      	ldreq	r4, [r5, #12]
 8013c6e:	e7da      	b.n	8013c26 <_fflush_r+0x22>
 8013c70:	08016e88 	.word	0x08016e88
 8013c74:	08016ea8 	.word	0x08016ea8
 8013c78:	08016e68 	.word	0x08016e68

08013c7c <std>:
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	b510      	push	{r4, lr}
 8013c80:	4604      	mov	r4, r0
 8013c82:	e9c0 3300 	strd	r3, r3, [r0]
 8013c86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013c8a:	6083      	str	r3, [r0, #8]
 8013c8c:	8181      	strh	r1, [r0, #12]
 8013c8e:	6643      	str	r3, [r0, #100]	; 0x64
 8013c90:	81c2      	strh	r2, [r0, #14]
 8013c92:	6183      	str	r3, [r0, #24]
 8013c94:	4619      	mov	r1, r3
 8013c96:	2208      	movs	r2, #8
 8013c98:	305c      	adds	r0, #92	; 0x5c
 8013c9a:	f7ff fc79 	bl	8013590 <memset>
 8013c9e:	4b05      	ldr	r3, [pc, #20]	; (8013cb4 <std+0x38>)
 8013ca0:	6263      	str	r3, [r4, #36]	; 0x24
 8013ca2:	4b05      	ldr	r3, [pc, #20]	; (8013cb8 <std+0x3c>)
 8013ca4:	62a3      	str	r3, [r4, #40]	; 0x28
 8013ca6:	4b05      	ldr	r3, [pc, #20]	; (8013cbc <std+0x40>)
 8013ca8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013caa:	4b05      	ldr	r3, [pc, #20]	; (8013cc0 <std+0x44>)
 8013cac:	6224      	str	r4, [r4, #32]
 8013cae:	6323      	str	r3, [r4, #48]	; 0x30
 8013cb0:	bd10      	pop	{r4, pc}
 8013cb2:	bf00      	nop
 8013cb4:	080149e1 	.word	0x080149e1
 8013cb8:	08014a03 	.word	0x08014a03
 8013cbc:	08014a3b 	.word	0x08014a3b
 8013cc0:	08014a5f 	.word	0x08014a5f

08013cc4 <_cleanup_r>:
 8013cc4:	4901      	ldr	r1, [pc, #4]	; (8013ccc <_cleanup_r+0x8>)
 8013cc6:	f000 b8c1 	b.w	8013e4c <_fwalk_reent>
 8013cca:	bf00      	nop
 8013ccc:	08013c05 	.word	0x08013c05

08013cd0 <__sfmoreglue>:
 8013cd0:	b570      	push	{r4, r5, r6, lr}
 8013cd2:	2268      	movs	r2, #104	; 0x68
 8013cd4:	1e4d      	subs	r5, r1, #1
 8013cd6:	4355      	muls	r5, r2
 8013cd8:	460e      	mov	r6, r1
 8013cda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013cde:	f000 f9b1 	bl	8014044 <_malloc_r>
 8013ce2:	4604      	mov	r4, r0
 8013ce4:	b140      	cbz	r0, 8013cf8 <__sfmoreglue+0x28>
 8013ce6:	2100      	movs	r1, #0
 8013ce8:	e9c0 1600 	strd	r1, r6, [r0]
 8013cec:	300c      	adds	r0, #12
 8013cee:	60a0      	str	r0, [r4, #8]
 8013cf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013cf4:	f7ff fc4c 	bl	8013590 <memset>
 8013cf8:	4620      	mov	r0, r4
 8013cfa:	bd70      	pop	{r4, r5, r6, pc}

08013cfc <__sfp_lock_acquire>:
 8013cfc:	4801      	ldr	r0, [pc, #4]	; (8013d04 <__sfp_lock_acquire+0x8>)
 8013cfe:	f000 b8c5 	b.w	8013e8c <__retarget_lock_acquire_recursive>
 8013d02:	bf00      	nop
 8013d04:	20008343 	.word	0x20008343

08013d08 <__sfp_lock_release>:
 8013d08:	4801      	ldr	r0, [pc, #4]	; (8013d10 <__sfp_lock_release+0x8>)
 8013d0a:	f000 b8c0 	b.w	8013e8e <__retarget_lock_release_recursive>
 8013d0e:	bf00      	nop
 8013d10:	20008343 	.word	0x20008343

08013d14 <__sinit_lock_acquire>:
 8013d14:	4801      	ldr	r0, [pc, #4]	; (8013d1c <__sinit_lock_acquire+0x8>)
 8013d16:	f000 b8b9 	b.w	8013e8c <__retarget_lock_acquire_recursive>
 8013d1a:	bf00      	nop
 8013d1c:	20008344 	.word	0x20008344

08013d20 <__sinit_lock_release>:
 8013d20:	4801      	ldr	r0, [pc, #4]	; (8013d28 <__sinit_lock_release+0x8>)
 8013d22:	f000 b8b4 	b.w	8013e8e <__retarget_lock_release_recursive>
 8013d26:	bf00      	nop
 8013d28:	20008344 	.word	0x20008344

08013d2c <__sinit>:
 8013d2c:	b510      	push	{r4, lr}
 8013d2e:	4604      	mov	r4, r0
 8013d30:	f7ff fff0 	bl	8013d14 <__sinit_lock_acquire>
 8013d34:	69a3      	ldr	r3, [r4, #24]
 8013d36:	b11b      	cbz	r3, 8013d40 <__sinit+0x14>
 8013d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d3c:	f7ff bff0 	b.w	8013d20 <__sinit_lock_release>
 8013d40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013d44:	6523      	str	r3, [r4, #80]	; 0x50
 8013d46:	4b13      	ldr	r3, [pc, #76]	; (8013d94 <__sinit+0x68>)
 8013d48:	4a13      	ldr	r2, [pc, #76]	; (8013d98 <__sinit+0x6c>)
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8013d4e:	42a3      	cmp	r3, r4
 8013d50:	bf04      	itt	eq
 8013d52:	2301      	moveq	r3, #1
 8013d54:	61a3      	streq	r3, [r4, #24]
 8013d56:	4620      	mov	r0, r4
 8013d58:	f000 f820 	bl	8013d9c <__sfp>
 8013d5c:	6060      	str	r0, [r4, #4]
 8013d5e:	4620      	mov	r0, r4
 8013d60:	f000 f81c 	bl	8013d9c <__sfp>
 8013d64:	60a0      	str	r0, [r4, #8]
 8013d66:	4620      	mov	r0, r4
 8013d68:	f000 f818 	bl	8013d9c <__sfp>
 8013d6c:	2200      	movs	r2, #0
 8013d6e:	60e0      	str	r0, [r4, #12]
 8013d70:	2104      	movs	r1, #4
 8013d72:	6860      	ldr	r0, [r4, #4]
 8013d74:	f7ff ff82 	bl	8013c7c <std>
 8013d78:	68a0      	ldr	r0, [r4, #8]
 8013d7a:	2201      	movs	r2, #1
 8013d7c:	2109      	movs	r1, #9
 8013d7e:	f7ff ff7d 	bl	8013c7c <std>
 8013d82:	68e0      	ldr	r0, [r4, #12]
 8013d84:	2202      	movs	r2, #2
 8013d86:	2112      	movs	r1, #18
 8013d88:	f7ff ff78 	bl	8013c7c <std>
 8013d8c:	2301      	movs	r3, #1
 8013d8e:	61a3      	str	r3, [r4, #24]
 8013d90:	e7d2      	b.n	8013d38 <__sinit+0xc>
 8013d92:	bf00      	nop
 8013d94:	08016db4 	.word	0x08016db4
 8013d98:	08013cc5 	.word	0x08013cc5

08013d9c <__sfp>:
 8013d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d9e:	4607      	mov	r7, r0
 8013da0:	f7ff ffac 	bl	8013cfc <__sfp_lock_acquire>
 8013da4:	4b1e      	ldr	r3, [pc, #120]	; (8013e20 <__sfp+0x84>)
 8013da6:	681e      	ldr	r6, [r3, #0]
 8013da8:	69b3      	ldr	r3, [r6, #24]
 8013daa:	b913      	cbnz	r3, 8013db2 <__sfp+0x16>
 8013dac:	4630      	mov	r0, r6
 8013dae:	f7ff ffbd 	bl	8013d2c <__sinit>
 8013db2:	3648      	adds	r6, #72	; 0x48
 8013db4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013db8:	3b01      	subs	r3, #1
 8013dba:	d503      	bpl.n	8013dc4 <__sfp+0x28>
 8013dbc:	6833      	ldr	r3, [r6, #0]
 8013dbe:	b30b      	cbz	r3, 8013e04 <__sfp+0x68>
 8013dc0:	6836      	ldr	r6, [r6, #0]
 8013dc2:	e7f7      	b.n	8013db4 <__sfp+0x18>
 8013dc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013dc8:	b9d5      	cbnz	r5, 8013e00 <__sfp+0x64>
 8013dca:	4b16      	ldr	r3, [pc, #88]	; (8013e24 <__sfp+0x88>)
 8013dcc:	60e3      	str	r3, [r4, #12]
 8013dce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013dd2:	6665      	str	r5, [r4, #100]	; 0x64
 8013dd4:	f000 f859 	bl	8013e8a <__retarget_lock_init_recursive>
 8013dd8:	f7ff ff96 	bl	8013d08 <__sfp_lock_release>
 8013ddc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013de0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013de4:	6025      	str	r5, [r4, #0]
 8013de6:	61a5      	str	r5, [r4, #24]
 8013de8:	2208      	movs	r2, #8
 8013dea:	4629      	mov	r1, r5
 8013dec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013df0:	f7ff fbce 	bl	8013590 <memset>
 8013df4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013df8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013dfc:	4620      	mov	r0, r4
 8013dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e00:	3468      	adds	r4, #104	; 0x68
 8013e02:	e7d9      	b.n	8013db8 <__sfp+0x1c>
 8013e04:	2104      	movs	r1, #4
 8013e06:	4638      	mov	r0, r7
 8013e08:	f7ff ff62 	bl	8013cd0 <__sfmoreglue>
 8013e0c:	4604      	mov	r4, r0
 8013e0e:	6030      	str	r0, [r6, #0]
 8013e10:	2800      	cmp	r0, #0
 8013e12:	d1d5      	bne.n	8013dc0 <__sfp+0x24>
 8013e14:	f7ff ff78 	bl	8013d08 <__sfp_lock_release>
 8013e18:	230c      	movs	r3, #12
 8013e1a:	603b      	str	r3, [r7, #0]
 8013e1c:	e7ee      	b.n	8013dfc <__sfp+0x60>
 8013e1e:	bf00      	nop
 8013e20:	08016db4 	.word	0x08016db4
 8013e24:	ffff0001 	.word	0xffff0001

08013e28 <fiprintf>:
 8013e28:	b40e      	push	{r1, r2, r3}
 8013e2a:	b503      	push	{r0, r1, lr}
 8013e2c:	4601      	mov	r1, r0
 8013e2e:	ab03      	add	r3, sp, #12
 8013e30:	4805      	ldr	r0, [pc, #20]	; (8013e48 <fiprintf+0x20>)
 8013e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e36:	6800      	ldr	r0, [r0, #0]
 8013e38:	9301      	str	r3, [sp, #4]
 8013e3a:	f000 fafd 	bl	8014438 <_vfiprintf_r>
 8013e3e:	b002      	add	sp, #8
 8013e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8013e44:	b003      	add	sp, #12
 8013e46:	4770      	bx	lr
 8013e48:	200000a8 	.word	0x200000a8

08013e4c <_fwalk_reent>:
 8013e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e50:	4606      	mov	r6, r0
 8013e52:	4688      	mov	r8, r1
 8013e54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013e58:	2700      	movs	r7, #0
 8013e5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013e5e:	f1b9 0901 	subs.w	r9, r9, #1
 8013e62:	d505      	bpl.n	8013e70 <_fwalk_reent+0x24>
 8013e64:	6824      	ldr	r4, [r4, #0]
 8013e66:	2c00      	cmp	r4, #0
 8013e68:	d1f7      	bne.n	8013e5a <_fwalk_reent+0xe>
 8013e6a:	4638      	mov	r0, r7
 8013e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e70:	89ab      	ldrh	r3, [r5, #12]
 8013e72:	2b01      	cmp	r3, #1
 8013e74:	d907      	bls.n	8013e86 <_fwalk_reent+0x3a>
 8013e76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013e7a:	3301      	adds	r3, #1
 8013e7c:	d003      	beq.n	8013e86 <_fwalk_reent+0x3a>
 8013e7e:	4629      	mov	r1, r5
 8013e80:	4630      	mov	r0, r6
 8013e82:	47c0      	blx	r8
 8013e84:	4307      	orrs	r7, r0
 8013e86:	3568      	adds	r5, #104	; 0x68
 8013e88:	e7e9      	b.n	8013e5e <_fwalk_reent+0x12>

08013e8a <__retarget_lock_init_recursive>:
 8013e8a:	4770      	bx	lr

08013e8c <__retarget_lock_acquire_recursive>:
 8013e8c:	4770      	bx	lr

08013e8e <__retarget_lock_release_recursive>:
 8013e8e:	4770      	bx	lr

08013e90 <__swhatbuf_r>:
 8013e90:	b570      	push	{r4, r5, r6, lr}
 8013e92:	460e      	mov	r6, r1
 8013e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e98:	2900      	cmp	r1, #0
 8013e9a:	b096      	sub	sp, #88	; 0x58
 8013e9c:	4614      	mov	r4, r2
 8013e9e:	461d      	mov	r5, r3
 8013ea0:	da08      	bge.n	8013eb4 <__swhatbuf_r+0x24>
 8013ea2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	602a      	str	r2, [r5, #0]
 8013eaa:	061a      	lsls	r2, r3, #24
 8013eac:	d410      	bmi.n	8013ed0 <__swhatbuf_r+0x40>
 8013eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013eb2:	e00e      	b.n	8013ed2 <__swhatbuf_r+0x42>
 8013eb4:	466a      	mov	r2, sp
 8013eb6:	f000 fe01 	bl	8014abc <_fstat_r>
 8013eba:	2800      	cmp	r0, #0
 8013ebc:	dbf1      	blt.n	8013ea2 <__swhatbuf_r+0x12>
 8013ebe:	9a01      	ldr	r2, [sp, #4]
 8013ec0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013ec4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013ec8:	425a      	negs	r2, r3
 8013eca:	415a      	adcs	r2, r3
 8013ecc:	602a      	str	r2, [r5, #0]
 8013ece:	e7ee      	b.n	8013eae <__swhatbuf_r+0x1e>
 8013ed0:	2340      	movs	r3, #64	; 0x40
 8013ed2:	2000      	movs	r0, #0
 8013ed4:	6023      	str	r3, [r4, #0]
 8013ed6:	b016      	add	sp, #88	; 0x58
 8013ed8:	bd70      	pop	{r4, r5, r6, pc}
	...

08013edc <__smakebuf_r>:
 8013edc:	898b      	ldrh	r3, [r1, #12]
 8013ede:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013ee0:	079d      	lsls	r5, r3, #30
 8013ee2:	4606      	mov	r6, r0
 8013ee4:	460c      	mov	r4, r1
 8013ee6:	d507      	bpl.n	8013ef8 <__smakebuf_r+0x1c>
 8013ee8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013eec:	6023      	str	r3, [r4, #0]
 8013eee:	6123      	str	r3, [r4, #16]
 8013ef0:	2301      	movs	r3, #1
 8013ef2:	6163      	str	r3, [r4, #20]
 8013ef4:	b002      	add	sp, #8
 8013ef6:	bd70      	pop	{r4, r5, r6, pc}
 8013ef8:	ab01      	add	r3, sp, #4
 8013efa:	466a      	mov	r2, sp
 8013efc:	f7ff ffc8 	bl	8013e90 <__swhatbuf_r>
 8013f00:	9900      	ldr	r1, [sp, #0]
 8013f02:	4605      	mov	r5, r0
 8013f04:	4630      	mov	r0, r6
 8013f06:	f000 f89d 	bl	8014044 <_malloc_r>
 8013f0a:	b948      	cbnz	r0, 8013f20 <__smakebuf_r+0x44>
 8013f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f10:	059a      	lsls	r2, r3, #22
 8013f12:	d4ef      	bmi.n	8013ef4 <__smakebuf_r+0x18>
 8013f14:	f023 0303 	bic.w	r3, r3, #3
 8013f18:	f043 0302 	orr.w	r3, r3, #2
 8013f1c:	81a3      	strh	r3, [r4, #12]
 8013f1e:	e7e3      	b.n	8013ee8 <__smakebuf_r+0xc>
 8013f20:	4b0d      	ldr	r3, [pc, #52]	; (8013f58 <__smakebuf_r+0x7c>)
 8013f22:	62b3      	str	r3, [r6, #40]	; 0x28
 8013f24:	89a3      	ldrh	r3, [r4, #12]
 8013f26:	6020      	str	r0, [r4, #0]
 8013f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f2c:	81a3      	strh	r3, [r4, #12]
 8013f2e:	9b00      	ldr	r3, [sp, #0]
 8013f30:	6163      	str	r3, [r4, #20]
 8013f32:	9b01      	ldr	r3, [sp, #4]
 8013f34:	6120      	str	r0, [r4, #16]
 8013f36:	b15b      	cbz	r3, 8013f50 <__smakebuf_r+0x74>
 8013f38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f3c:	4630      	mov	r0, r6
 8013f3e:	f000 fdcf 	bl	8014ae0 <_isatty_r>
 8013f42:	b128      	cbz	r0, 8013f50 <__smakebuf_r+0x74>
 8013f44:	89a3      	ldrh	r3, [r4, #12]
 8013f46:	f023 0303 	bic.w	r3, r3, #3
 8013f4a:	f043 0301 	orr.w	r3, r3, #1
 8013f4e:	81a3      	strh	r3, [r4, #12]
 8013f50:	89a0      	ldrh	r0, [r4, #12]
 8013f52:	4305      	orrs	r5, r0
 8013f54:	81a5      	strh	r5, [r4, #12]
 8013f56:	e7cd      	b.n	8013ef4 <__smakebuf_r+0x18>
 8013f58:	08013cc5 	.word	0x08013cc5

08013f5c <malloc>:
 8013f5c:	4b02      	ldr	r3, [pc, #8]	; (8013f68 <malloc+0xc>)
 8013f5e:	4601      	mov	r1, r0
 8013f60:	6818      	ldr	r0, [r3, #0]
 8013f62:	f000 b86f 	b.w	8014044 <_malloc_r>
 8013f66:	bf00      	nop
 8013f68:	200000a8 	.word	0x200000a8

08013f6c <_free_r>:
 8013f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013f6e:	2900      	cmp	r1, #0
 8013f70:	d044      	beq.n	8013ffc <_free_r+0x90>
 8013f72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f76:	9001      	str	r0, [sp, #4]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	f1a1 0404 	sub.w	r4, r1, #4
 8013f7e:	bfb8      	it	lt
 8013f80:	18e4      	addlt	r4, r4, r3
 8013f82:	f000 fdcf 	bl	8014b24 <__malloc_lock>
 8013f86:	4a1e      	ldr	r2, [pc, #120]	; (8014000 <_free_r+0x94>)
 8013f88:	9801      	ldr	r0, [sp, #4]
 8013f8a:	6813      	ldr	r3, [r2, #0]
 8013f8c:	b933      	cbnz	r3, 8013f9c <_free_r+0x30>
 8013f8e:	6063      	str	r3, [r4, #4]
 8013f90:	6014      	str	r4, [r2, #0]
 8013f92:	b003      	add	sp, #12
 8013f94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013f98:	f000 bdca 	b.w	8014b30 <__malloc_unlock>
 8013f9c:	42a3      	cmp	r3, r4
 8013f9e:	d908      	bls.n	8013fb2 <_free_r+0x46>
 8013fa0:	6825      	ldr	r5, [r4, #0]
 8013fa2:	1961      	adds	r1, r4, r5
 8013fa4:	428b      	cmp	r3, r1
 8013fa6:	bf01      	itttt	eq
 8013fa8:	6819      	ldreq	r1, [r3, #0]
 8013faa:	685b      	ldreq	r3, [r3, #4]
 8013fac:	1949      	addeq	r1, r1, r5
 8013fae:	6021      	streq	r1, [r4, #0]
 8013fb0:	e7ed      	b.n	8013f8e <_free_r+0x22>
 8013fb2:	461a      	mov	r2, r3
 8013fb4:	685b      	ldr	r3, [r3, #4]
 8013fb6:	b10b      	cbz	r3, 8013fbc <_free_r+0x50>
 8013fb8:	42a3      	cmp	r3, r4
 8013fba:	d9fa      	bls.n	8013fb2 <_free_r+0x46>
 8013fbc:	6811      	ldr	r1, [r2, #0]
 8013fbe:	1855      	adds	r5, r2, r1
 8013fc0:	42a5      	cmp	r5, r4
 8013fc2:	d10b      	bne.n	8013fdc <_free_r+0x70>
 8013fc4:	6824      	ldr	r4, [r4, #0]
 8013fc6:	4421      	add	r1, r4
 8013fc8:	1854      	adds	r4, r2, r1
 8013fca:	42a3      	cmp	r3, r4
 8013fcc:	6011      	str	r1, [r2, #0]
 8013fce:	d1e0      	bne.n	8013f92 <_free_r+0x26>
 8013fd0:	681c      	ldr	r4, [r3, #0]
 8013fd2:	685b      	ldr	r3, [r3, #4]
 8013fd4:	6053      	str	r3, [r2, #4]
 8013fd6:	4421      	add	r1, r4
 8013fd8:	6011      	str	r1, [r2, #0]
 8013fda:	e7da      	b.n	8013f92 <_free_r+0x26>
 8013fdc:	d902      	bls.n	8013fe4 <_free_r+0x78>
 8013fde:	230c      	movs	r3, #12
 8013fe0:	6003      	str	r3, [r0, #0]
 8013fe2:	e7d6      	b.n	8013f92 <_free_r+0x26>
 8013fe4:	6825      	ldr	r5, [r4, #0]
 8013fe6:	1961      	adds	r1, r4, r5
 8013fe8:	428b      	cmp	r3, r1
 8013fea:	bf04      	itt	eq
 8013fec:	6819      	ldreq	r1, [r3, #0]
 8013fee:	685b      	ldreq	r3, [r3, #4]
 8013ff0:	6063      	str	r3, [r4, #4]
 8013ff2:	bf04      	itt	eq
 8013ff4:	1949      	addeq	r1, r1, r5
 8013ff6:	6021      	streq	r1, [r4, #0]
 8013ff8:	6054      	str	r4, [r2, #4]
 8013ffa:	e7ca      	b.n	8013f92 <_free_r+0x26>
 8013ffc:	b003      	add	sp, #12
 8013ffe:	bd30      	pop	{r4, r5, pc}
 8014000:	20008348 	.word	0x20008348

08014004 <sbrk_aligned>:
 8014004:	b570      	push	{r4, r5, r6, lr}
 8014006:	4e0e      	ldr	r6, [pc, #56]	; (8014040 <sbrk_aligned+0x3c>)
 8014008:	460c      	mov	r4, r1
 801400a:	6831      	ldr	r1, [r6, #0]
 801400c:	4605      	mov	r5, r0
 801400e:	b911      	cbnz	r1, 8014016 <sbrk_aligned+0x12>
 8014010:	f000 fcd6 	bl	80149c0 <_sbrk_r>
 8014014:	6030      	str	r0, [r6, #0]
 8014016:	4621      	mov	r1, r4
 8014018:	4628      	mov	r0, r5
 801401a:	f000 fcd1 	bl	80149c0 <_sbrk_r>
 801401e:	1c43      	adds	r3, r0, #1
 8014020:	d00a      	beq.n	8014038 <sbrk_aligned+0x34>
 8014022:	1cc4      	adds	r4, r0, #3
 8014024:	f024 0403 	bic.w	r4, r4, #3
 8014028:	42a0      	cmp	r0, r4
 801402a:	d007      	beq.n	801403c <sbrk_aligned+0x38>
 801402c:	1a21      	subs	r1, r4, r0
 801402e:	4628      	mov	r0, r5
 8014030:	f000 fcc6 	bl	80149c0 <_sbrk_r>
 8014034:	3001      	adds	r0, #1
 8014036:	d101      	bne.n	801403c <sbrk_aligned+0x38>
 8014038:	f04f 34ff 	mov.w	r4, #4294967295
 801403c:	4620      	mov	r0, r4
 801403e:	bd70      	pop	{r4, r5, r6, pc}
 8014040:	2000834c 	.word	0x2000834c

08014044 <_malloc_r>:
 8014044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014048:	1ccd      	adds	r5, r1, #3
 801404a:	f025 0503 	bic.w	r5, r5, #3
 801404e:	3508      	adds	r5, #8
 8014050:	2d0c      	cmp	r5, #12
 8014052:	bf38      	it	cc
 8014054:	250c      	movcc	r5, #12
 8014056:	2d00      	cmp	r5, #0
 8014058:	4607      	mov	r7, r0
 801405a:	db01      	blt.n	8014060 <_malloc_r+0x1c>
 801405c:	42a9      	cmp	r1, r5
 801405e:	d905      	bls.n	801406c <_malloc_r+0x28>
 8014060:	230c      	movs	r3, #12
 8014062:	603b      	str	r3, [r7, #0]
 8014064:	2600      	movs	r6, #0
 8014066:	4630      	mov	r0, r6
 8014068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801406c:	4e2e      	ldr	r6, [pc, #184]	; (8014128 <_malloc_r+0xe4>)
 801406e:	f000 fd59 	bl	8014b24 <__malloc_lock>
 8014072:	6833      	ldr	r3, [r6, #0]
 8014074:	461c      	mov	r4, r3
 8014076:	bb34      	cbnz	r4, 80140c6 <_malloc_r+0x82>
 8014078:	4629      	mov	r1, r5
 801407a:	4638      	mov	r0, r7
 801407c:	f7ff ffc2 	bl	8014004 <sbrk_aligned>
 8014080:	1c43      	adds	r3, r0, #1
 8014082:	4604      	mov	r4, r0
 8014084:	d14d      	bne.n	8014122 <_malloc_r+0xde>
 8014086:	6834      	ldr	r4, [r6, #0]
 8014088:	4626      	mov	r6, r4
 801408a:	2e00      	cmp	r6, #0
 801408c:	d140      	bne.n	8014110 <_malloc_r+0xcc>
 801408e:	6823      	ldr	r3, [r4, #0]
 8014090:	4631      	mov	r1, r6
 8014092:	4638      	mov	r0, r7
 8014094:	eb04 0803 	add.w	r8, r4, r3
 8014098:	f000 fc92 	bl	80149c0 <_sbrk_r>
 801409c:	4580      	cmp	r8, r0
 801409e:	d13a      	bne.n	8014116 <_malloc_r+0xd2>
 80140a0:	6821      	ldr	r1, [r4, #0]
 80140a2:	3503      	adds	r5, #3
 80140a4:	1a6d      	subs	r5, r5, r1
 80140a6:	f025 0503 	bic.w	r5, r5, #3
 80140aa:	3508      	adds	r5, #8
 80140ac:	2d0c      	cmp	r5, #12
 80140ae:	bf38      	it	cc
 80140b0:	250c      	movcc	r5, #12
 80140b2:	4629      	mov	r1, r5
 80140b4:	4638      	mov	r0, r7
 80140b6:	f7ff ffa5 	bl	8014004 <sbrk_aligned>
 80140ba:	3001      	adds	r0, #1
 80140bc:	d02b      	beq.n	8014116 <_malloc_r+0xd2>
 80140be:	6823      	ldr	r3, [r4, #0]
 80140c0:	442b      	add	r3, r5
 80140c2:	6023      	str	r3, [r4, #0]
 80140c4:	e00e      	b.n	80140e4 <_malloc_r+0xa0>
 80140c6:	6822      	ldr	r2, [r4, #0]
 80140c8:	1b52      	subs	r2, r2, r5
 80140ca:	d41e      	bmi.n	801410a <_malloc_r+0xc6>
 80140cc:	2a0b      	cmp	r2, #11
 80140ce:	d916      	bls.n	80140fe <_malloc_r+0xba>
 80140d0:	1961      	adds	r1, r4, r5
 80140d2:	42a3      	cmp	r3, r4
 80140d4:	6025      	str	r5, [r4, #0]
 80140d6:	bf18      	it	ne
 80140d8:	6059      	strne	r1, [r3, #4]
 80140da:	6863      	ldr	r3, [r4, #4]
 80140dc:	bf08      	it	eq
 80140de:	6031      	streq	r1, [r6, #0]
 80140e0:	5162      	str	r2, [r4, r5]
 80140e2:	604b      	str	r3, [r1, #4]
 80140e4:	4638      	mov	r0, r7
 80140e6:	f104 060b 	add.w	r6, r4, #11
 80140ea:	f000 fd21 	bl	8014b30 <__malloc_unlock>
 80140ee:	f026 0607 	bic.w	r6, r6, #7
 80140f2:	1d23      	adds	r3, r4, #4
 80140f4:	1af2      	subs	r2, r6, r3
 80140f6:	d0b6      	beq.n	8014066 <_malloc_r+0x22>
 80140f8:	1b9b      	subs	r3, r3, r6
 80140fa:	50a3      	str	r3, [r4, r2]
 80140fc:	e7b3      	b.n	8014066 <_malloc_r+0x22>
 80140fe:	6862      	ldr	r2, [r4, #4]
 8014100:	42a3      	cmp	r3, r4
 8014102:	bf0c      	ite	eq
 8014104:	6032      	streq	r2, [r6, #0]
 8014106:	605a      	strne	r2, [r3, #4]
 8014108:	e7ec      	b.n	80140e4 <_malloc_r+0xa0>
 801410a:	4623      	mov	r3, r4
 801410c:	6864      	ldr	r4, [r4, #4]
 801410e:	e7b2      	b.n	8014076 <_malloc_r+0x32>
 8014110:	4634      	mov	r4, r6
 8014112:	6876      	ldr	r6, [r6, #4]
 8014114:	e7b9      	b.n	801408a <_malloc_r+0x46>
 8014116:	230c      	movs	r3, #12
 8014118:	603b      	str	r3, [r7, #0]
 801411a:	4638      	mov	r0, r7
 801411c:	f000 fd08 	bl	8014b30 <__malloc_unlock>
 8014120:	e7a1      	b.n	8014066 <_malloc_r+0x22>
 8014122:	6025      	str	r5, [r4, #0]
 8014124:	e7de      	b.n	80140e4 <_malloc_r+0xa0>
 8014126:	bf00      	nop
 8014128:	20008348 	.word	0x20008348

0801412c <__ssputs_r>:
 801412c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014130:	688e      	ldr	r6, [r1, #8]
 8014132:	429e      	cmp	r6, r3
 8014134:	4682      	mov	sl, r0
 8014136:	460c      	mov	r4, r1
 8014138:	4690      	mov	r8, r2
 801413a:	461f      	mov	r7, r3
 801413c:	d838      	bhi.n	80141b0 <__ssputs_r+0x84>
 801413e:	898a      	ldrh	r2, [r1, #12]
 8014140:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014144:	d032      	beq.n	80141ac <__ssputs_r+0x80>
 8014146:	6825      	ldr	r5, [r4, #0]
 8014148:	6909      	ldr	r1, [r1, #16]
 801414a:	eba5 0901 	sub.w	r9, r5, r1
 801414e:	6965      	ldr	r5, [r4, #20]
 8014150:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014154:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014158:	3301      	adds	r3, #1
 801415a:	444b      	add	r3, r9
 801415c:	106d      	asrs	r5, r5, #1
 801415e:	429d      	cmp	r5, r3
 8014160:	bf38      	it	cc
 8014162:	461d      	movcc	r5, r3
 8014164:	0553      	lsls	r3, r2, #21
 8014166:	d531      	bpl.n	80141cc <__ssputs_r+0xa0>
 8014168:	4629      	mov	r1, r5
 801416a:	f7ff ff6b 	bl	8014044 <_malloc_r>
 801416e:	4606      	mov	r6, r0
 8014170:	b950      	cbnz	r0, 8014188 <__ssputs_r+0x5c>
 8014172:	230c      	movs	r3, #12
 8014174:	f8ca 3000 	str.w	r3, [sl]
 8014178:	89a3      	ldrh	r3, [r4, #12]
 801417a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801417e:	81a3      	strh	r3, [r4, #12]
 8014180:	f04f 30ff 	mov.w	r0, #4294967295
 8014184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014188:	6921      	ldr	r1, [r4, #16]
 801418a:	464a      	mov	r2, r9
 801418c:	f7ff f9d8 	bl	8013540 <memcpy>
 8014190:	89a3      	ldrh	r3, [r4, #12]
 8014192:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801419a:	81a3      	strh	r3, [r4, #12]
 801419c:	6126      	str	r6, [r4, #16]
 801419e:	6165      	str	r5, [r4, #20]
 80141a0:	444e      	add	r6, r9
 80141a2:	eba5 0509 	sub.w	r5, r5, r9
 80141a6:	6026      	str	r6, [r4, #0]
 80141a8:	60a5      	str	r5, [r4, #8]
 80141aa:	463e      	mov	r6, r7
 80141ac:	42be      	cmp	r6, r7
 80141ae:	d900      	bls.n	80141b2 <__ssputs_r+0x86>
 80141b0:	463e      	mov	r6, r7
 80141b2:	6820      	ldr	r0, [r4, #0]
 80141b4:	4632      	mov	r2, r6
 80141b6:	4641      	mov	r1, r8
 80141b8:	f7ff f9d0 	bl	801355c <memmove>
 80141bc:	68a3      	ldr	r3, [r4, #8]
 80141be:	1b9b      	subs	r3, r3, r6
 80141c0:	60a3      	str	r3, [r4, #8]
 80141c2:	6823      	ldr	r3, [r4, #0]
 80141c4:	4433      	add	r3, r6
 80141c6:	6023      	str	r3, [r4, #0]
 80141c8:	2000      	movs	r0, #0
 80141ca:	e7db      	b.n	8014184 <__ssputs_r+0x58>
 80141cc:	462a      	mov	r2, r5
 80141ce:	f000 fcb5 	bl	8014b3c <_realloc_r>
 80141d2:	4606      	mov	r6, r0
 80141d4:	2800      	cmp	r0, #0
 80141d6:	d1e1      	bne.n	801419c <__ssputs_r+0x70>
 80141d8:	6921      	ldr	r1, [r4, #16]
 80141da:	4650      	mov	r0, sl
 80141dc:	f7ff fec6 	bl	8013f6c <_free_r>
 80141e0:	e7c7      	b.n	8014172 <__ssputs_r+0x46>
	...

080141e4 <_svfiprintf_r>:
 80141e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141e8:	4698      	mov	r8, r3
 80141ea:	898b      	ldrh	r3, [r1, #12]
 80141ec:	061b      	lsls	r3, r3, #24
 80141ee:	b09d      	sub	sp, #116	; 0x74
 80141f0:	4607      	mov	r7, r0
 80141f2:	460d      	mov	r5, r1
 80141f4:	4614      	mov	r4, r2
 80141f6:	d50e      	bpl.n	8014216 <_svfiprintf_r+0x32>
 80141f8:	690b      	ldr	r3, [r1, #16]
 80141fa:	b963      	cbnz	r3, 8014216 <_svfiprintf_r+0x32>
 80141fc:	2140      	movs	r1, #64	; 0x40
 80141fe:	f7ff ff21 	bl	8014044 <_malloc_r>
 8014202:	6028      	str	r0, [r5, #0]
 8014204:	6128      	str	r0, [r5, #16]
 8014206:	b920      	cbnz	r0, 8014212 <_svfiprintf_r+0x2e>
 8014208:	230c      	movs	r3, #12
 801420a:	603b      	str	r3, [r7, #0]
 801420c:	f04f 30ff 	mov.w	r0, #4294967295
 8014210:	e0d1      	b.n	80143b6 <_svfiprintf_r+0x1d2>
 8014212:	2340      	movs	r3, #64	; 0x40
 8014214:	616b      	str	r3, [r5, #20]
 8014216:	2300      	movs	r3, #0
 8014218:	9309      	str	r3, [sp, #36]	; 0x24
 801421a:	2320      	movs	r3, #32
 801421c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014220:	f8cd 800c 	str.w	r8, [sp, #12]
 8014224:	2330      	movs	r3, #48	; 0x30
 8014226:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80143d0 <_svfiprintf_r+0x1ec>
 801422a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801422e:	f04f 0901 	mov.w	r9, #1
 8014232:	4623      	mov	r3, r4
 8014234:	469a      	mov	sl, r3
 8014236:	f813 2b01 	ldrb.w	r2, [r3], #1
 801423a:	b10a      	cbz	r2, 8014240 <_svfiprintf_r+0x5c>
 801423c:	2a25      	cmp	r2, #37	; 0x25
 801423e:	d1f9      	bne.n	8014234 <_svfiprintf_r+0x50>
 8014240:	ebba 0b04 	subs.w	fp, sl, r4
 8014244:	d00b      	beq.n	801425e <_svfiprintf_r+0x7a>
 8014246:	465b      	mov	r3, fp
 8014248:	4622      	mov	r2, r4
 801424a:	4629      	mov	r1, r5
 801424c:	4638      	mov	r0, r7
 801424e:	f7ff ff6d 	bl	801412c <__ssputs_r>
 8014252:	3001      	adds	r0, #1
 8014254:	f000 80aa 	beq.w	80143ac <_svfiprintf_r+0x1c8>
 8014258:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801425a:	445a      	add	r2, fp
 801425c:	9209      	str	r2, [sp, #36]	; 0x24
 801425e:	f89a 3000 	ldrb.w	r3, [sl]
 8014262:	2b00      	cmp	r3, #0
 8014264:	f000 80a2 	beq.w	80143ac <_svfiprintf_r+0x1c8>
 8014268:	2300      	movs	r3, #0
 801426a:	f04f 32ff 	mov.w	r2, #4294967295
 801426e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014272:	f10a 0a01 	add.w	sl, sl, #1
 8014276:	9304      	str	r3, [sp, #16]
 8014278:	9307      	str	r3, [sp, #28]
 801427a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801427e:	931a      	str	r3, [sp, #104]	; 0x68
 8014280:	4654      	mov	r4, sl
 8014282:	2205      	movs	r2, #5
 8014284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014288:	4851      	ldr	r0, [pc, #324]	; (80143d0 <_svfiprintf_r+0x1ec>)
 801428a:	f7eb ffa9 	bl	80001e0 <memchr>
 801428e:	9a04      	ldr	r2, [sp, #16]
 8014290:	b9d8      	cbnz	r0, 80142ca <_svfiprintf_r+0xe6>
 8014292:	06d0      	lsls	r0, r2, #27
 8014294:	bf44      	itt	mi
 8014296:	2320      	movmi	r3, #32
 8014298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801429c:	0711      	lsls	r1, r2, #28
 801429e:	bf44      	itt	mi
 80142a0:	232b      	movmi	r3, #43	; 0x2b
 80142a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80142a6:	f89a 3000 	ldrb.w	r3, [sl]
 80142aa:	2b2a      	cmp	r3, #42	; 0x2a
 80142ac:	d015      	beq.n	80142da <_svfiprintf_r+0xf6>
 80142ae:	9a07      	ldr	r2, [sp, #28]
 80142b0:	4654      	mov	r4, sl
 80142b2:	2000      	movs	r0, #0
 80142b4:	f04f 0c0a 	mov.w	ip, #10
 80142b8:	4621      	mov	r1, r4
 80142ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80142be:	3b30      	subs	r3, #48	; 0x30
 80142c0:	2b09      	cmp	r3, #9
 80142c2:	d94e      	bls.n	8014362 <_svfiprintf_r+0x17e>
 80142c4:	b1b0      	cbz	r0, 80142f4 <_svfiprintf_r+0x110>
 80142c6:	9207      	str	r2, [sp, #28]
 80142c8:	e014      	b.n	80142f4 <_svfiprintf_r+0x110>
 80142ca:	eba0 0308 	sub.w	r3, r0, r8
 80142ce:	fa09 f303 	lsl.w	r3, r9, r3
 80142d2:	4313      	orrs	r3, r2
 80142d4:	9304      	str	r3, [sp, #16]
 80142d6:	46a2      	mov	sl, r4
 80142d8:	e7d2      	b.n	8014280 <_svfiprintf_r+0x9c>
 80142da:	9b03      	ldr	r3, [sp, #12]
 80142dc:	1d19      	adds	r1, r3, #4
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	9103      	str	r1, [sp, #12]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	bfbb      	ittet	lt
 80142e6:	425b      	neglt	r3, r3
 80142e8:	f042 0202 	orrlt.w	r2, r2, #2
 80142ec:	9307      	strge	r3, [sp, #28]
 80142ee:	9307      	strlt	r3, [sp, #28]
 80142f0:	bfb8      	it	lt
 80142f2:	9204      	strlt	r2, [sp, #16]
 80142f4:	7823      	ldrb	r3, [r4, #0]
 80142f6:	2b2e      	cmp	r3, #46	; 0x2e
 80142f8:	d10c      	bne.n	8014314 <_svfiprintf_r+0x130>
 80142fa:	7863      	ldrb	r3, [r4, #1]
 80142fc:	2b2a      	cmp	r3, #42	; 0x2a
 80142fe:	d135      	bne.n	801436c <_svfiprintf_r+0x188>
 8014300:	9b03      	ldr	r3, [sp, #12]
 8014302:	1d1a      	adds	r2, r3, #4
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	9203      	str	r2, [sp, #12]
 8014308:	2b00      	cmp	r3, #0
 801430a:	bfb8      	it	lt
 801430c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014310:	3402      	adds	r4, #2
 8014312:	9305      	str	r3, [sp, #20]
 8014314:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80143e0 <_svfiprintf_r+0x1fc>
 8014318:	7821      	ldrb	r1, [r4, #0]
 801431a:	2203      	movs	r2, #3
 801431c:	4650      	mov	r0, sl
 801431e:	f7eb ff5f 	bl	80001e0 <memchr>
 8014322:	b140      	cbz	r0, 8014336 <_svfiprintf_r+0x152>
 8014324:	2340      	movs	r3, #64	; 0x40
 8014326:	eba0 000a 	sub.w	r0, r0, sl
 801432a:	fa03 f000 	lsl.w	r0, r3, r0
 801432e:	9b04      	ldr	r3, [sp, #16]
 8014330:	4303      	orrs	r3, r0
 8014332:	3401      	adds	r4, #1
 8014334:	9304      	str	r3, [sp, #16]
 8014336:	f814 1b01 	ldrb.w	r1, [r4], #1
 801433a:	4826      	ldr	r0, [pc, #152]	; (80143d4 <_svfiprintf_r+0x1f0>)
 801433c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014340:	2206      	movs	r2, #6
 8014342:	f7eb ff4d 	bl	80001e0 <memchr>
 8014346:	2800      	cmp	r0, #0
 8014348:	d038      	beq.n	80143bc <_svfiprintf_r+0x1d8>
 801434a:	4b23      	ldr	r3, [pc, #140]	; (80143d8 <_svfiprintf_r+0x1f4>)
 801434c:	bb1b      	cbnz	r3, 8014396 <_svfiprintf_r+0x1b2>
 801434e:	9b03      	ldr	r3, [sp, #12]
 8014350:	3307      	adds	r3, #7
 8014352:	f023 0307 	bic.w	r3, r3, #7
 8014356:	3308      	adds	r3, #8
 8014358:	9303      	str	r3, [sp, #12]
 801435a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801435c:	4433      	add	r3, r6
 801435e:	9309      	str	r3, [sp, #36]	; 0x24
 8014360:	e767      	b.n	8014232 <_svfiprintf_r+0x4e>
 8014362:	fb0c 3202 	mla	r2, ip, r2, r3
 8014366:	460c      	mov	r4, r1
 8014368:	2001      	movs	r0, #1
 801436a:	e7a5      	b.n	80142b8 <_svfiprintf_r+0xd4>
 801436c:	2300      	movs	r3, #0
 801436e:	3401      	adds	r4, #1
 8014370:	9305      	str	r3, [sp, #20]
 8014372:	4619      	mov	r1, r3
 8014374:	f04f 0c0a 	mov.w	ip, #10
 8014378:	4620      	mov	r0, r4
 801437a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801437e:	3a30      	subs	r2, #48	; 0x30
 8014380:	2a09      	cmp	r2, #9
 8014382:	d903      	bls.n	801438c <_svfiprintf_r+0x1a8>
 8014384:	2b00      	cmp	r3, #0
 8014386:	d0c5      	beq.n	8014314 <_svfiprintf_r+0x130>
 8014388:	9105      	str	r1, [sp, #20]
 801438a:	e7c3      	b.n	8014314 <_svfiprintf_r+0x130>
 801438c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014390:	4604      	mov	r4, r0
 8014392:	2301      	movs	r3, #1
 8014394:	e7f0      	b.n	8014378 <_svfiprintf_r+0x194>
 8014396:	ab03      	add	r3, sp, #12
 8014398:	9300      	str	r3, [sp, #0]
 801439a:	462a      	mov	r2, r5
 801439c:	4b0f      	ldr	r3, [pc, #60]	; (80143dc <_svfiprintf_r+0x1f8>)
 801439e:	a904      	add	r1, sp, #16
 80143a0:	4638      	mov	r0, r7
 80143a2:	f3af 8000 	nop.w
 80143a6:	1c42      	adds	r2, r0, #1
 80143a8:	4606      	mov	r6, r0
 80143aa:	d1d6      	bne.n	801435a <_svfiprintf_r+0x176>
 80143ac:	89ab      	ldrh	r3, [r5, #12]
 80143ae:	065b      	lsls	r3, r3, #25
 80143b0:	f53f af2c 	bmi.w	801420c <_svfiprintf_r+0x28>
 80143b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80143b6:	b01d      	add	sp, #116	; 0x74
 80143b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143bc:	ab03      	add	r3, sp, #12
 80143be:	9300      	str	r3, [sp, #0]
 80143c0:	462a      	mov	r2, r5
 80143c2:	4b06      	ldr	r3, [pc, #24]	; (80143dc <_svfiprintf_r+0x1f8>)
 80143c4:	a904      	add	r1, sp, #16
 80143c6:	4638      	mov	r0, r7
 80143c8:	f000 f9d4 	bl	8014774 <_printf_i>
 80143cc:	e7eb      	b.n	80143a6 <_svfiprintf_r+0x1c2>
 80143ce:	bf00      	nop
 80143d0:	08016ec8 	.word	0x08016ec8
 80143d4:	08016ed2 	.word	0x08016ed2
 80143d8:	00000000 	.word	0x00000000
 80143dc:	0801412d 	.word	0x0801412d
 80143e0:	08016ece 	.word	0x08016ece

080143e4 <__sfputc_r>:
 80143e4:	6893      	ldr	r3, [r2, #8]
 80143e6:	3b01      	subs	r3, #1
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	b410      	push	{r4}
 80143ec:	6093      	str	r3, [r2, #8]
 80143ee:	da08      	bge.n	8014402 <__sfputc_r+0x1e>
 80143f0:	6994      	ldr	r4, [r2, #24]
 80143f2:	42a3      	cmp	r3, r4
 80143f4:	db01      	blt.n	80143fa <__sfputc_r+0x16>
 80143f6:	290a      	cmp	r1, #10
 80143f8:	d103      	bne.n	8014402 <__sfputc_r+0x1e>
 80143fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80143fe:	f7ff ba97 	b.w	8013930 <__swbuf_r>
 8014402:	6813      	ldr	r3, [r2, #0]
 8014404:	1c58      	adds	r0, r3, #1
 8014406:	6010      	str	r0, [r2, #0]
 8014408:	7019      	strb	r1, [r3, #0]
 801440a:	4608      	mov	r0, r1
 801440c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014410:	4770      	bx	lr

08014412 <__sfputs_r>:
 8014412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014414:	4606      	mov	r6, r0
 8014416:	460f      	mov	r7, r1
 8014418:	4614      	mov	r4, r2
 801441a:	18d5      	adds	r5, r2, r3
 801441c:	42ac      	cmp	r4, r5
 801441e:	d101      	bne.n	8014424 <__sfputs_r+0x12>
 8014420:	2000      	movs	r0, #0
 8014422:	e007      	b.n	8014434 <__sfputs_r+0x22>
 8014424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014428:	463a      	mov	r2, r7
 801442a:	4630      	mov	r0, r6
 801442c:	f7ff ffda 	bl	80143e4 <__sfputc_r>
 8014430:	1c43      	adds	r3, r0, #1
 8014432:	d1f3      	bne.n	801441c <__sfputs_r+0xa>
 8014434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014438 <_vfiprintf_r>:
 8014438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801443c:	460d      	mov	r5, r1
 801443e:	b09d      	sub	sp, #116	; 0x74
 8014440:	4614      	mov	r4, r2
 8014442:	4698      	mov	r8, r3
 8014444:	4606      	mov	r6, r0
 8014446:	b118      	cbz	r0, 8014450 <_vfiprintf_r+0x18>
 8014448:	6983      	ldr	r3, [r0, #24]
 801444a:	b90b      	cbnz	r3, 8014450 <_vfiprintf_r+0x18>
 801444c:	f7ff fc6e 	bl	8013d2c <__sinit>
 8014450:	4b89      	ldr	r3, [pc, #548]	; (8014678 <_vfiprintf_r+0x240>)
 8014452:	429d      	cmp	r5, r3
 8014454:	d11b      	bne.n	801448e <_vfiprintf_r+0x56>
 8014456:	6875      	ldr	r5, [r6, #4]
 8014458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801445a:	07d9      	lsls	r1, r3, #31
 801445c:	d405      	bmi.n	801446a <_vfiprintf_r+0x32>
 801445e:	89ab      	ldrh	r3, [r5, #12]
 8014460:	059a      	lsls	r2, r3, #22
 8014462:	d402      	bmi.n	801446a <_vfiprintf_r+0x32>
 8014464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014466:	f7ff fd11 	bl	8013e8c <__retarget_lock_acquire_recursive>
 801446a:	89ab      	ldrh	r3, [r5, #12]
 801446c:	071b      	lsls	r3, r3, #28
 801446e:	d501      	bpl.n	8014474 <_vfiprintf_r+0x3c>
 8014470:	692b      	ldr	r3, [r5, #16]
 8014472:	b9eb      	cbnz	r3, 80144b0 <_vfiprintf_r+0x78>
 8014474:	4629      	mov	r1, r5
 8014476:	4630      	mov	r0, r6
 8014478:	f7ff faac 	bl	80139d4 <__swsetup_r>
 801447c:	b1c0      	cbz	r0, 80144b0 <_vfiprintf_r+0x78>
 801447e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014480:	07dc      	lsls	r4, r3, #31
 8014482:	d50e      	bpl.n	80144a2 <_vfiprintf_r+0x6a>
 8014484:	f04f 30ff 	mov.w	r0, #4294967295
 8014488:	b01d      	add	sp, #116	; 0x74
 801448a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801448e:	4b7b      	ldr	r3, [pc, #492]	; (801467c <_vfiprintf_r+0x244>)
 8014490:	429d      	cmp	r5, r3
 8014492:	d101      	bne.n	8014498 <_vfiprintf_r+0x60>
 8014494:	68b5      	ldr	r5, [r6, #8]
 8014496:	e7df      	b.n	8014458 <_vfiprintf_r+0x20>
 8014498:	4b79      	ldr	r3, [pc, #484]	; (8014680 <_vfiprintf_r+0x248>)
 801449a:	429d      	cmp	r5, r3
 801449c:	bf08      	it	eq
 801449e:	68f5      	ldreq	r5, [r6, #12]
 80144a0:	e7da      	b.n	8014458 <_vfiprintf_r+0x20>
 80144a2:	89ab      	ldrh	r3, [r5, #12]
 80144a4:	0598      	lsls	r0, r3, #22
 80144a6:	d4ed      	bmi.n	8014484 <_vfiprintf_r+0x4c>
 80144a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80144aa:	f7ff fcf0 	bl	8013e8e <__retarget_lock_release_recursive>
 80144ae:	e7e9      	b.n	8014484 <_vfiprintf_r+0x4c>
 80144b0:	2300      	movs	r3, #0
 80144b2:	9309      	str	r3, [sp, #36]	; 0x24
 80144b4:	2320      	movs	r3, #32
 80144b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80144ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80144be:	2330      	movs	r3, #48	; 0x30
 80144c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014684 <_vfiprintf_r+0x24c>
 80144c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80144c8:	f04f 0901 	mov.w	r9, #1
 80144cc:	4623      	mov	r3, r4
 80144ce:	469a      	mov	sl, r3
 80144d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80144d4:	b10a      	cbz	r2, 80144da <_vfiprintf_r+0xa2>
 80144d6:	2a25      	cmp	r2, #37	; 0x25
 80144d8:	d1f9      	bne.n	80144ce <_vfiprintf_r+0x96>
 80144da:	ebba 0b04 	subs.w	fp, sl, r4
 80144de:	d00b      	beq.n	80144f8 <_vfiprintf_r+0xc0>
 80144e0:	465b      	mov	r3, fp
 80144e2:	4622      	mov	r2, r4
 80144e4:	4629      	mov	r1, r5
 80144e6:	4630      	mov	r0, r6
 80144e8:	f7ff ff93 	bl	8014412 <__sfputs_r>
 80144ec:	3001      	adds	r0, #1
 80144ee:	f000 80aa 	beq.w	8014646 <_vfiprintf_r+0x20e>
 80144f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80144f4:	445a      	add	r2, fp
 80144f6:	9209      	str	r2, [sp, #36]	; 0x24
 80144f8:	f89a 3000 	ldrb.w	r3, [sl]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	f000 80a2 	beq.w	8014646 <_vfiprintf_r+0x20e>
 8014502:	2300      	movs	r3, #0
 8014504:	f04f 32ff 	mov.w	r2, #4294967295
 8014508:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801450c:	f10a 0a01 	add.w	sl, sl, #1
 8014510:	9304      	str	r3, [sp, #16]
 8014512:	9307      	str	r3, [sp, #28]
 8014514:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014518:	931a      	str	r3, [sp, #104]	; 0x68
 801451a:	4654      	mov	r4, sl
 801451c:	2205      	movs	r2, #5
 801451e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014522:	4858      	ldr	r0, [pc, #352]	; (8014684 <_vfiprintf_r+0x24c>)
 8014524:	f7eb fe5c 	bl	80001e0 <memchr>
 8014528:	9a04      	ldr	r2, [sp, #16]
 801452a:	b9d8      	cbnz	r0, 8014564 <_vfiprintf_r+0x12c>
 801452c:	06d1      	lsls	r1, r2, #27
 801452e:	bf44      	itt	mi
 8014530:	2320      	movmi	r3, #32
 8014532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014536:	0713      	lsls	r3, r2, #28
 8014538:	bf44      	itt	mi
 801453a:	232b      	movmi	r3, #43	; 0x2b
 801453c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014540:	f89a 3000 	ldrb.w	r3, [sl]
 8014544:	2b2a      	cmp	r3, #42	; 0x2a
 8014546:	d015      	beq.n	8014574 <_vfiprintf_r+0x13c>
 8014548:	9a07      	ldr	r2, [sp, #28]
 801454a:	4654      	mov	r4, sl
 801454c:	2000      	movs	r0, #0
 801454e:	f04f 0c0a 	mov.w	ip, #10
 8014552:	4621      	mov	r1, r4
 8014554:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014558:	3b30      	subs	r3, #48	; 0x30
 801455a:	2b09      	cmp	r3, #9
 801455c:	d94e      	bls.n	80145fc <_vfiprintf_r+0x1c4>
 801455e:	b1b0      	cbz	r0, 801458e <_vfiprintf_r+0x156>
 8014560:	9207      	str	r2, [sp, #28]
 8014562:	e014      	b.n	801458e <_vfiprintf_r+0x156>
 8014564:	eba0 0308 	sub.w	r3, r0, r8
 8014568:	fa09 f303 	lsl.w	r3, r9, r3
 801456c:	4313      	orrs	r3, r2
 801456e:	9304      	str	r3, [sp, #16]
 8014570:	46a2      	mov	sl, r4
 8014572:	e7d2      	b.n	801451a <_vfiprintf_r+0xe2>
 8014574:	9b03      	ldr	r3, [sp, #12]
 8014576:	1d19      	adds	r1, r3, #4
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	9103      	str	r1, [sp, #12]
 801457c:	2b00      	cmp	r3, #0
 801457e:	bfbb      	ittet	lt
 8014580:	425b      	neglt	r3, r3
 8014582:	f042 0202 	orrlt.w	r2, r2, #2
 8014586:	9307      	strge	r3, [sp, #28]
 8014588:	9307      	strlt	r3, [sp, #28]
 801458a:	bfb8      	it	lt
 801458c:	9204      	strlt	r2, [sp, #16]
 801458e:	7823      	ldrb	r3, [r4, #0]
 8014590:	2b2e      	cmp	r3, #46	; 0x2e
 8014592:	d10c      	bne.n	80145ae <_vfiprintf_r+0x176>
 8014594:	7863      	ldrb	r3, [r4, #1]
 8014596:	2b2a      	cmp	r3, #42	; 0x2a
 8014598:	d135      	bne.n	8014606 <_vfiprintf_r+0x1ce>
 801459a:	9b03      	ldr	r3, [sp, #12]
 801459c:	1d1a      	adds	r2, r3, #4
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	9203      	str	r2, [sp, #12]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	bfb8      	it	lt
 80145a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80145aa:	3402      	adds	r4, #2
 80145ac:	9305      	str	r3, [sp, #20]
 80145ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014694 <_vfiprintf_r+0x25c>
 80145b2:	7821      	ldrb	r1, [r4, #0]
 80145b4:	2203      	movs	r2, #3
 80145b6:	4650      	mov	r0, sl
 80145b8:	f7eb fe12 	bl	80001e0 <memchr>
 80145bc:	b140      	cbz	r0, 80145d0 <_vfiprintf_r+0x198>
 80145be:	2340      	movs	r3, #64	; 0x40
 80145c0:	eba0 000a 	sub.w	r0, r0, sl
 80145c4:	fa03 f000 	lsl.w	r0, r3, r0
 80145c8:	9b04      	ldr	r3, [sp, #16]
 80145ca:	4303      	orrs	r3, r0
 80145cc:	3401      	adds	r4, #1
 80145ce:	9304      	str	r3, [sp, #16]
 80145d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145d4:	482c      	ldr	r0, [pc, #176]	; (8014688 <_vfiprintf_r+0x250>)
 80145d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80145da:	2206      	movs	r2, #6
 80145dc:	f7eb fe00 	bl	80001e0 <memchr>
 80145e0:	2800      	cmp	r0, #0
 80145e2:	d03f      	beq.n	8014664 <_vfiprintf_r+0x22c>
 80145e4:	4b29      	ldr	r3, [pc, #164]	; (801468c <_vfiprintf_r+0x254>)
 80145e6:	bb1b      	cbnz	r3, 8014630 <_vfiprintf_r+0x1f8>
 80145e8:	9b03      	ldr	r3, [sp, #12]
 80145ea:	3307      	adds	r3, #7
 80145ec:	f023 0307 	bic.w	r3, r3, #7
 80145f0:	3308      	adds	r3, #8
 80145f2:	9303      	str	r3, [sp, #12]
 80145f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145f6:	443b      	add	r3, r7
 80145f8:	9309      	str	r3, [sp, #36]	; 0x24
 80145fa:	e767      	b.n	80144cc <_vfiprintf_r+0x94>
 80145fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8014600:	460c      	mov	r4, r1
 8014602:	2001      	movs	r0, #1
 8014604:	e7a5      	b.n	8014552 <_vfiprintf_r+0x11a>
 8014606:	2300      	movs	r3, #0
 8014608:	3401      	adds	r4, #1
 801460a:	9305      	str	r3, [sp, #20]
 801460c:	4619      	mov	r1, r3
 801460e:	f04f 0c0a 	mov.w	ip, #10
 8014612:	4620      	mov	r0, r4
 8014614:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014618:	3a30      	subs	r2, #48	; 0x30
 801461a:	2a09      	cmp	r2, #9
 801461c:	d903      	bls.n	8014626 <_vfiprintf_r+0x1ee>
 801461e:	2b00      	cmp	r3, #0
 8014620:	d0c5      	beq.n	80145ae <_vfiprintf_r+0x176>
 8014622:	9105      	str	r1, [sp, #20]
 8014624:	e7c3      	b.n	80145ae <_vfiprintf_r+0x176>
 8014626:	fb0c 2101 	mla	r1, ip, r1, r2
 801462a:	4604      	mov	r4, r0
 801462c:	2301      	movs	r3, #1
 801462e:	e7f0      	b.n	8014612 <_vfiprintf_r+0x1da>
 8014630:	ab03      	add	r3, sp, #12
 8014632:	9300      	str	r3, [sp, #0]
 8014634:	462a      	mov	r2, r5
 8014636:	4b16      	ldr	r3, [pc, #88]	; (8014690 <_vfiprintf_r+0x258>)
 8014638:	a904      	add	r1, sp, #16
 801463a:	4630      	mov	r0, r6
 801463c:	f3af 8000 	nop.w
 8014640:	4607      	mov	r7, r0
 8014642:	1c78      	adds	r0, r7, #1
 8014644:	d1d6      	bne.n	80145f4 <_vfiprintf_r+0x1bc>
 8014646:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014648:	07d9      	lsls	r1, r3, #31
 801464a:	d405      	bmi.n	8014658 <_vfiprintf_r+0x220>
 801464c:	89ab      	ldrh	r3, [r5, #12]
 801464e:	059a      	lsls	r2, r3, #22
 8014650:	d402      	bmi.n	8014658 <_vfiprintf_r+0x220>
 8014652:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014654:	f7ff fc1b 	bl	8013e8e <__retarget_lock_release_recursive>
 8014658:	89ab      	ldrh	r3, [r5, #12]
 801465a:	065b      	lsls	r3, r3, #25
 801465c:	f53f af12 	bmi.w	8014484 <_vfiprintf_r+0x4c>
 8014660:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014662:	e711      	b.n	8014488 <_vfiprintf_r+0x50>
 8014664:	ab03      	add	r3, sp, #12
 8014666:	9300      	str	r3, [sp, #0]
 8014668:	462a      	mov	r2, r5
 801466a:	4b09      	ldr	r3, [pc, #36]	; (8014690 <_vfiprintf_r+0x258>)
 801466c:	a904      	add	r1, sp, #16
 801466e:	4630      	mov	r0, r6
 8014670:	f000 f880 	bl	8014774 <_printf_i>
 8014674:	e7e4      	b.n	8014640 <_vfiprintf_r+0x208>
 8014676:	bf00      	nop
 8014678:	08016e88 	.word	0x08016e88
 801467c:	08016ea8 	.word	0x08016ea8
 8014680:	08016e68 	.word	0x08016e68
 8014684:	08016ec8 	.word	0x08016ec8
 8014688:	08016ed2 	.word	0x08016ed2
 801468c:	00000000 	.word	0x00000000
 8014690:	08014413 	.word	0x08014413
 8014694:	08016ece 	.word	0x08016ece

08014698 <_printf_common>:
 8014698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801469c:	4616      	mov	r6, r2
 801469e:	4699      	mov	r9, r3
 80146a0:	688a      	ldr	r2, [r1, #8]
 80146a2:	690b      	ldr	r3, [r1, #16]
 80146a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80146a8:	4293      	cmp	r3, r2
 80146aa:	bfb8      	it	lt
 80146ac:	4613      	movlt	r3, r2
 80146ae:	6033      	str	r3, [r6, #0]
 80146b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80146b4:	4607      	mov	r7, r0
 80146b6:	460c      	mov	r4, r1
 80146b8:	b10a      	cbz	r2, 80146be <_printf_common+0x26>
 80146ba:	3301      	adds	r3, #1
 80146bc:	6033      	str	r3, [r6, #0]
 80146be:	6823      	ldr	r3, [r4, #0]
 80146c0:	0699      	lsls	r1, r3, #26
 80146c2:	bf42      	ittt	mi
 80146c4:	6833      	ldrmi	r3, [r6, #0]
 80146c6:	3302      	addmi	r3, #2
 80146c8:	6033      	strmi	r3, [r6, #0]
 80146ca:	6825      	ldr	r5, [r4, #0]
 80146cc:	f015 0506 	ands.w	r5, r5, #6
 80146d0:	d106      	bne.n	80146e0 <_printf_common+0x48>
 80146d2:	f104 0a19 	add.w	sl, r4, #25
 80146d6:	68e3      	ldr	r3, [r4, #12]
 80146d8:	6832      	ldr	r2, [r6, #0]
 80146da:	1a9b      	subs	r3, r3, r2
 80146dc:	42ab      	cmp	r3, r5
 80146de:	dc26      	bgt.n	801472e <_printf_common+0x96>
 80146e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80146e4:	1e13      	subs	r3, r2, #0
 80146e6:	6822      	ldr	r2, [r4, #0]
 80146e8:	bf18      	it	ne
 80146ea:	2301      	movne	r3, #1
 80146ec:	0692      	lsls	r2, r2, #26
 80146ee:	d42b      	bmi.n	8014748 <_printf_common+0xb0>
 80146f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80146f4:	4649      	mov	r1, r9
 80146f6:	4638      	mov	r0, r7
 80146f8:	47c0      	blx	r8
 80146fa:	3001      	adds	r0, #1
 80146fc:	d01e      	beq.n	801473c <_printf_common+0xa4>
 80146fe:	6823      	ldr	r3, [r4, #0]
 8014700:	68e5      	ldr	r5, [r4, #12]
 8014702:	6832      	ldr	r2, [r6, #0]
 8014704:	f003 0306 	and.w	r3, r3, #6
 8014708:	2b04      	cmp	r3, #4
 801470a:	bf08      	it	eq
 801470c:	1aad      	subeq	r5, r5, r2
 801470e:	68a3      	ldr	r3, [r4, #8]
 8014710:	6922      	ldr	r2, [r4, #16]
 8014712:	bf0c      	ite	eq
 8014714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014718:	2500      	movne	r5, #0
 801471a:	4293      	cmp	r3, r2
 801471c:	bfc4      	itt	gt
 801471e:	1a9b      	subgt	r3, r3, r2
 8014720:	18ed      	addgt	r5, r5, r3
 8014722:	2600      	movs	r6, #0
 8014724:	341a      	adds	r4, #26
 8014726:	42b5      	cmp	r5, r6
 8014728:	d11a      	bne.n	8014760 <_printf_common+0xc8>
 801472a:	2000      	movs	r0, #0
 801472c:	e008      	b.n	8014740 <_printf_common+0xa8>
 801472e:	2301      	movs	r3, #1
 8014730:	4652      	mov	r2, sl
 8014732:	4649      	mov	r1, r9
 8014734:	4638      	mov	r0, r7
 8014736:	47c0      	blx	r8
 8014738:	3001      	adds	r0, #1
 801473a:	d103      	bne.n	8014744 <_printf_common+0xac>
 801473c:	f04f 30ff 	mov.w	r0, #4294967295
 8014740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014744:	3501      	adds	r5, #1
 8014746:	e7c6      	b.n	80146d6 <_printf_common+0x3e>
 8014748:	18e1      	adds	r1, r4, r3
 801474a:	1c5a      	adds	r2, r3, #1
 801474c:	2030      	movs	r0, #48	; 0x30
 801474e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014752:	4422      	add	r2, r4
 8014754:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014758:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801475c:	3302      	adds	r3, #2
 801475e:	e7c7      	b.n	80146f0 <_printf_common+0x58>
 8014760:	2301      	movs	r3, #1
 8014762:	4622      	mov	r2, r4
 8014764:	4649      	mov	r1, r9
 8014766:	4638      	mov	r0, r7
 8014768:	47c0      	blx	r8
 801476a:	3001      	adds	r0, #1
 801476c:	d0e6      	beq.n	801473c <_printf_common+0xa4>
 801476e:	3601      	adds	r6, #1
 8014770:	e7d9      	b.n	8014726 <_printf_common+0x8e>
	...

08014774 <_printf_i>:
 8014774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014778:	7e0f      	ldrb	r7, [r1, #24]
 801477a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801477c:	2f78      	cmp	r7, #120	; 0x78
 801477e:	4691      	mov	r9, r2
 8014780:	4680      	mov	r8, r0
 8014782:	460c      	mov	r4, r1
 8014784:	469a      	mov	sl, r3
 8014786:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801478a:	d807      	bhi.n	801479c <_printf_i+0x28>
 801478c:	2f62      	cmp	r7, #98	; 0x62
 801478e:	d80a      	bhi.n	80147a6 <_printf_i+0x32>
 8014790:	2f00      	cmp	r7, #0
 8014792:	f000 80d8 	beq.w	8014946 <_printf_i+0x1d2>
 8014796:	2f58      	cmp	r7, #88	; 0x58
 8014798:	f000 80a3 	beq.w	80148e2 <_printf_i+0x16e>
 801479c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80147a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80147a4:	e03a      	b.n	801481c <_printf_i+0xa8>
 80147a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80147aa:	2b15      	cmp	r3, #21
 80147ac:	d8f6      	bhi.n	801479c <_printf_i+0x28>
 80147ae:	a101      	add	r1, pc, #4	; (adr r1, 80147b4 <_printf_i+0x40>)
 80147b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80147b4:	0801480d 	.word	0x0801480d
 80147b8:	08014821 	.word	0x08014821
 80147bc:	0801479d 	.word	0x0801479d
 80147c0:	0801479d 	.word	0x0801479d
 80147c4:	0801479d 	.word	0x0801479d
 80147c8:	0801479d 	.word	0x0801479d
 80147cc:	08014821 	.word	0x08014821
 80147d0:	0801479d 	.word	0x0801479d
 80147d4:	0801479d 	.word	0x0801479d
 80147d8:	0801479d 	.word	0x0801479d
 80147dc:	0801479d 	.word	0x0801479d
 80147e0:	0801492d 	.word	0x0801492d
 80147e4:	08014851 	.word	0x08014851
 80147e8:	0801490f 	.word	0x0801490f
 80147ec:	0801479d 	.word	0x0801479d
 80147f0:	0801479d 	.word	0x0801479d
 80147f4:	0801494f 	.word	0x0801494f
 80147f8:	0801479d 	.word	0x0801479d
 80147fc:	08014851 	.word	0x08014851
 8014800:	0801479d 	.word	0x0801479d
 8014804:	0801479d 	.word	0x0801479d
 8014808:	08014917 	.word	0x08014917
 801480c:	682b      	ldr	r3, [r5, #0]
 801480e:	1d1a      	adds	r2, r3, #4
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	602a      	str	r2, [r5, #0]
 8014814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801481c:	2301      	movs	r3, #1
 801481e:	e0a3      	b.n	8014968 <_printf_i+0x1f4>
 8014820:	6820      	ldr	r0, [r4, #0]
 8014822:	6829      	ldr	r1, [r5, #0]
 8014824:	0606      	lsls	r6, r0, #24
 8014826:	f101 0304 	add.w	r3, r1, #4
 801482a:	d50a      	bpl.n	8014842 <_printf_i+0xce>
 801482c:	680e      	ldr	r6, [r1, #0]
 801482e:	602b      	str	r3, [r5, #0]
 8014830:	2e00      	cmp	r6, #0
 8014832:	da03      	bge.n	801483c <_printf_i+0xc8>
 8014834:	232d      	movs	r3, #45	; 0x2d
 8014836:	4276      	negs	r6, r6
 8014838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801483c:	485e      	ldr	r0, [pc, #376]	; (80149b8 <_printf_i+0x244>)
 801483e:	230a      	movs	r3, #10
 8014840:	e019      	b.n	8014876 <_printf_i+0x102>
 8014842:	680e      	ldr	r6, [r1, #0]
 8014844:	602b      	str	r3, [r5, #0]
 8014846:	f010 0f40 	tst.w	r0, #64	; 0x40
 801484a:	bf18      	it	ne
 801484c:	b236      	sxthne	r6, r6
 801484e:	e7ef      	b.n	8014830 <_printf_i+0xbc>
 8014850:	682b      	ldr	r3, [r5, #0]
 8014852:	6820      	ldr	r0, [r4, #0]
 8014854:	1d19      	adds	r1, r3, #4
 8014856:	6029      	str	r1, [r5, #0]
 8014858:	0601      	lsls	r1, r0, #24
 801485a:	d501      	bpl.n	8014860 <_printf_i+0xec>
 801485c:	681e      	ldr	r6, [r3, #0]
 801485e:	e002      	b.n	8014866 <_printf_i+0xf2>
 8014860:	0646      	lsls	r6, r0, #25
 8014862:	d5fb      	bpl.n	801485c <_printf_i+0xe8>
 8014864:	881e      	ldrh	r6, [r3, #0]
 8014866:	4854      	ldr	r0, [pc, #336]	; (80149b8 <_printf_i+0x244>)
 8014868:	2f6f      	cmp	r7, #111	; 0x6f
 801486a:	bf0c      	ite	eq
 801486c:	2308      	moveq	r3, #8
 801486e:	230a      	movne	r3, #10
 8014870:	2100      	movs	r1, #0
 8014872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014876:	6865      	ldr	r5, [r4, #4]
 8014878:	60a5      	str	r5, [r4, #8]
 801487a:	2d00      	cmp	r5, #0
 801487c:	bfa2      	ittt	ge
 801487e:	6821      	ldrge	r1, [r4, #0]
 8014880:	f021 0104 	bicge.w	r1, r1, #4
 8014884:	6021      	strge	r1, [r4, #0]
 8014886:	b90e      	cbnz	r6, 801488c <_printf_i+0x118>
 8014888:	2d00      	cmp	r5, #0
 801488a:	d04d      	beq.n	8014928 <_printf_i+0x1b4>
 801488c:	4615      	mov	r5, r2
 801488e:	fbb6 f1f3 	udiv	r1, r6, r3
 8014892:	fb03 6711 	mls	r7, r3, r1, r6
 8014896:	5dc7      	ldrb	r7, [r0, r7]
 8014898:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801489c:	4637      	mov	r7, r6
 801489e:	42bb      	cmp	r3, r7
 80148a0:	460e      	mov	r6, r1
 80148a2:	d9f4      	bls.n	801488e <_printf_i+0x11a>
 80148a4:	2b08      	cmp	r3, #8
 80148a6:	d10b      	bne.n	80148c0 <_printf_i+0x14c>
 80148a8:	6823      	ldr	r3, [r4, #0]
 80148aa:	07de      	lsls	r6, r3, #31
 80148ac:	d508      	bpl.n	80148c0 <_printf_i+0x14c>
 80148ae:	6923      	ldr	r3, [r4, #16]
 80148b0:	6861      	ldr	r1, [r4, #4]
 80148b2:	4299      	cmp	r1, r3
 80148b4:	bfde      	ittt	le
 80148b6:	2330      	movle	r3, #48	; 0x30
 80148b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80148bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80148c0:	1b52      	subs	r2, r2, r5
 80148c2:	6122      	str	r2, [r4, #16]
 80148c4:	f8cd a000 	str.w	sl, [sp]
 80148c8:	464b      	mov	r3, r9
 80148ca:	aa03      	add	r2, sp, #12
 80148cc:	4621      	mov	r1, r4
 80148ce:	4640      	mov	r0, r8
 80148d0:	f7ff fee2 	bl	8014698 <_printf_common>
 80148d4:	3001      	adds	r0, #1
 80148d6:	d14c      	bne.n	8014972 <_printf_i+0x1fe>
 80148d8:	f04f 30ff 	mov.w	r0, #4294967295
 80148dc:	b004      	add	sp, #16
 80148de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148e2:	4835      	ldr	r0, [pc, #212]	; (80149b8 <_printf_i+0x244>)
 80148e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80148e8:	6829      	ldr	r1, [r5, #0]
 80148ea:	6823      	ldr	r3, [r4, #0]
 80148ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80148f0:	6029      	str	r1, [r5, #0]
 80148f2:	061d      	lsls	r5, r3, #24
 80148f4:	d514      	bpl.n	8014920 <_printf_i+0x1ac>
 80148f6:	07df      	lsls	r7, r3, #31
 80148f8:	bf44      	itt	mi
 80148fa:	f043 0320 	orrmi.w	r3, r3, #32
 80148fe:	6023      	strmi	r3, [r4, #0]
 8014900:	b91e      	cbnz	r6, 801490a <_printf_i+0x196>
 8014902:	6823      	ldr	r3, [r4, #0]
 8014904:	f023 0320 	bic.w	r3, r3, #32
 8014908:	6023      	str	r3, [r4, #0]
 801490a:	2310      	movs	r3, #16
 801490c:	e7b0      	b.n	8014870 <_printf_i+0xfc>
 801490e:	6823      	ldr	r3, [r4, #0]
 8014910:	f043 0320 	orr.w	r3, r3, #32
 8014914:	6023      	str	r3, [r4, #0]
 8014916:	2378      	movs	r3, #120	; 0x78
 8014918:	4828      	ldr	r0, [pc, #160]	; (80149bc <_printf_i+0x248>)
 801491a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801491e:	e7e3      	b.n	80148e8 <_printf_i+0x174>
 8014920:	0659      	lsls	r1, r3, #25
 8014922:	bf48      	it	mi
 8014924:	b2b6      	uxthmi	r6, r6
 8014926:	e7e6      	b.n	80148f6 <_printf_i+0x182>
 8014928:	4615      	mov	r5, r2
 801492a:	e7bb      	b.n	80148a4 <_printf_i+0x130>
 801492c:	682b      	ldr	r3, [r5, #0]
 801492e:	6826      	ldr	r6, [r4, #0]
 8014930:	6961      	ldr	r1, [r4, #20]
 8014932:	1d18      	adds	r0, r3, #4
 8014934:	6028      	str	r0, [r5, #0]
 8014936:	0635      	lsls	r5, r6, #24
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	d501      	bpl.n	8014940 <_printf_i+0x1cc>
 801493c:	6019      	str	r1, [r3, #0]
 801493e:	e002      	b.n	8014946 <_printf_i+0x1d2>
 8014940:	0670      	lsls	r0, r6, #25
 8014942:	d5fb      	bpl.n	801493c <_printf_i+0x1c8>
 8014944:	8019      	strh	r1, [r3, #0]
 8014946:	2300      	movs	r3, #0
 8014948:	6123      	str	r3, [r4, #16]
 801494a:	4615      	mov	r5, r2
 801494c:	e7ba      	b.n	80148c4 <_printf_i+0x150>
 801494e:	682b      	ldr	r3, [r5, #0]
 8014950:	1d1a      	adds	r2, r3, #4
 8014952:	602a      	str	r2, [r5, #0]
 8014954:	681d      	ldr	r5, [r3, #0]
 8014956:	6862      	ldr	r2, [r4, #4]
 8014958:	2100      	movs	r1, #0
 801495a:	4628      	mov	r0, r5
 801495c:	f7eb fc40 	bl	80001e0 <memchr>
 8014960:	b108      	cbz	r0, 8014966 <_printf_i+0x1f2>
 8014962:	1b40      	subs	r0, r0, r5
 8014964:	6060      	str	r0, [r4, #4]
 8014966:	6863      	ldr	r3, [r4, #4]
 8014968:	6123      	str	r3, [r4, #16]
 801496a:	2300      	movs	r3, #0
 801496c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014970:	e7a8      	b.n	80148c4 <_printf_i+0x150>
 8014972:	6923      	ldr	r3, [r4, #16]
 8014974:	462a      	mov	r2, r5
 8014976:	4649      	mov	r1, r9
 8014978:	4640      	mov	r0, r8
 801497a:	47d0      	blx	sl
 801497c:	3001      	adds	r0, #1
 801497e:	d0ab      	beq.n	80148d8 <_printf_i+0x164>
 8014980:	6823      	ldr	r3, [r4, #0]
 8014982:	079b      	lsls	r3, r3, #30
 8014984:	d413      	bmi.n	80149ae <_printf_i+0x23a>
 8014986:	68e0      	ldr	r0, [r4, #12]
 8014988:	9b03      	ldr	r3, [sp, #12]
 801498a:	4298      	cmp	r0, r3
 801498c:	bfb8      	it	lt
 801498e:	4618      	movlt	r0, r3
 8014990:	e7a4      	b.n	80148dc <_printf_i+0x168>
 8014992:	2301      	movs	r3, #1
 8014994:	4632      	mov	r2, r6
 8014996:	4649      	mov	r1, r9
 8014998:	4640      	mov	r0, r8
 801499a:	47d0      	blx	sl
 801499c:	3001      	adds	r0, #1
 801499e:	d09b      	beq.n	80148d8 <_printf_i+0x164>
 80149a0:	3501      	adds	r5, #1
 80149a2:	68e3      	ldr	r3, [r4, #12]
 80149a4:	9903      	ldr	r1, [sp, #12]
 80149a6:	1a5b      	subs	r3, r3, r1
 80149a8:	42ab      	cmp	r3, r5
 80149aa:	dcf2      	bgt.n	8014992 <_printf_i+0x21e>
 80149ac:	e7eb      	b.n	8014986 <_printf_i+0x212>
 80149ae:	2500      	movs	r5, #0
 80149b0:	f104 0619 	add.w	r6, r4, #25
 80149b4:	e7f5      	b.n	80149a2 <_printf_i+0x22e>
 80149b6:	bf00      	nop
 80149b8:	08016ed9 	.word	0x08016ed9
 80149bc:	08016eea 	.word	0x08016eea

080149c0 <_sbrk_r>:
 80149c0:	b538      	push	{r3, r4, r5, lr}
 80149c2:	4d06      	ldr	r5, [pc, #24]	; (80149dc <_sbrk_r+0x1c>)
 80149c4:	2300      	movs	r3, #0
 80149c6:	4604      	mov	r4, r0
 80149c8:	4608      	mov	r0, r1
 80149ca:	602b      	str	r3, [r5, #0]
 80149cc:	f000 f97c 	bl	8014cc8 <_sbrk>
 80149d0:	1c43      	adds	r3, r0, #1
 80149d2:	d102      	bne.n	80149da <_sbrk_r+0x1a>
 80149d4:	682b      	ldr	r3, [r5, #0]
 80149d6:	b103      	cbz	r3, 80149da <_sbrk_r+0x1a>
 80149d8:	6023      	str	r3, [r4, #0]
 80149da:	bd38      	pop	{r3, r4, r5, pc}
 80149dc:	20008350 	.word	0x20008350

080149e0 <__sread>:
 80149e0:	b510      	push	{r4, lr}
 80149e2:	460c      	mov	r4, r1
 80149e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149e8:	f000 f8d8 	bl	8014b9c <_read_r>
 80149ec:	2800      	cmp	r0, #0
 80149ee:	bfab      	itete	ge
 80149f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80149f2:	89a3      	ldrhlt	r3, [r4, #12]
 80149f4:	181b      	addge	r3, r3, r0
 80149f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80149fa:	bfac      	ite	ge
 80149fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80149fe:	81a3      	strhlt	r3, [r4, #12]
 8014a00:	bd10      	pop	{r4, pc}

08014a02 <__swrite>:
 8014a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a06:	461f      	mov	r7, r3
 8014a08:	898b      	ldrh	r3, [r1, #12]
 8014a0a:	05db      	lsls	r3, r3, #23
 8014a0c:	4605      	mov	r5, r0
 8014a0e:	460c      	mov	r4, r1
 8014a10:	4616      	mov	r6, r2
 8014a12:	d505      	bpl.n	8014a20 <__swrite+0x1e>
 8014a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a18:	2302      	movs	r3, #2
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	f000 f870 	bl	8014b00 <_lseek_r>
 8014a20:	89a3      	ldrh	r3, [r4, #12]
 8014a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014a2a:	81a3      	strh	r3, [r4, #12]
 8014a2c:	4632      	mov	r2, r6
 8014a2e:	463b      	mov	r3, r7
 8014a30:	4628      	mov	r0, r5
 8014a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a36:	f000 b817 	b.w	8014a68 <_write_r>

08014a3a <__sseek>:
 8014a3a:	b510      	push	{r4, lr}
 8014a3c:	460c      	mov	r4, r1
 8014a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a42:	f000 f85d 	bl	8014b00 <_lseek_r>
 8014a46:	1c43      	adds	r3, r0, #1
 8014a48:	89a3      	ldrh	r3, [r4, #12]
 8014a4a:	bf15      	itete	ne
 8014a4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8014a4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014a52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014a56:	81a3      	strheq	r3, [r4, #12]
 8014a58:	bf18      	it	ne
 8014a5a:	81a3      	strhne	r3, [r4, #12]
 8014a5c:	bd10      	pop	{r4, pc}

08014a5e <__sclose>:
 8014a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a62:	f000 b81b 	b.w	8014a9c <_close_r>
	...

08014a68 <_write_r>:
 8014a68:	b538      	push	{r3, r4, r5, lr}
 8014a6a:	4d07      	ldr	r5, [pc, #28]	; (8014a88 <_write_r+0x20>)
 8014a6c:	4604      	mov	r4, r0
 8014a6e:	4608      	mov	r0, r1
 8014a70:	4611      	mov	r1, r2
 8014a72:	2200      	movs	r2, #0
 8014a74:	602a      	str	r2, [r5, #0]
 8014a76:	461a      	mov	r2, r3
 8014a78:	f000 f934 	bl	8014ce4 <_write>
 8014a7c:	1c43      	adds	r3, r0, #1
 8014a7e:	d102      	bne.n	8014a86 <_write_r+0x1e>
 8014a80:	682b      	ldr	r3, [r5, #0]
 8014a82:	b103      	cbz	r3, 8014a86 <_write_r+0x1e>
 8014a84:	6023      	str	r3, [r4, #0]
 8014a86:	bd38      	pop	{r3, r4, r5, pc}
 8014a88:	20008350 	.word	0x20008350

08014a8c <abort>:
 8014a8c:	b508      	push	{r3, lr}
 8014a8e:	2006      	movs	r0, #6
 8014a90:	f000 f8be 	bl	8014c10 <raise>
 8014a94:	2001      	movs	r0, #1
 8014a96:	f000 f92d 	bl	8014cf4 <_exit>
	...

08014a9c <_close_r>:
 8014a9c:	b538      	push	{r3, r4, r5, lr}
 8014a9e:	4d06      	ldr	r5, [pc, #24]	; (8014ab8 <_close_r+0x1c>)
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	4604      	mov	r4, r0
 8014aa4:	4608      	mov	r0, r1
 8014aa6:	602b      	str	r3, [r5, #0]
 8014aa8:	f000 f8d6 	bl	8014c58 <_close>
 8014aac:	1c43      	adds	r3, r0, #1
 8014aae:	d102      	bne.n	8014ab6 <_close_r+0x1a>
 8014ab0:	682b      	ldr	r3, [r5, #0]
 8014ab2:	b103      	cbz	r3, 8014ab6 <_close_r+0x1a>
 8014ab4:	6023      	str	r3, [r4, #0]
 8014ab6:	bd38      	pop	{r3, r4, r5, pc}
 8014ab8:	20008350 	.word	0x20008350

08014abc <_fstat_r>:
 8014abc:	b538      	push	{r3, r4, r5, lr}
 8014abe:	4d07      	ldr	r5, [pc, #28]	; (8014adc <_fstat_r+0x20>)
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	4604      	mov	r4, r0
 8014ac4:	4608      	mov	r0, r1
 8014ac6:	4611      	mov	r1, r2
 8014ac8:	602b      	str	r3, [r5, #0]
 8014aca:	f000 f8cd 	bl	8014c68 <_fstat>
 8014ace:	1c43      	adds	r3, r0, #1
 8014ad0:	d102      	bne.n	8014ad8 <_fstat_r+0x1c>
 8014ad2:	682b      	ldr	r3, [r5, #0]
 8014ad4:	b103      	cbz	r3, 8014ad8 <_fstat_r+0x1c>
 8014ad6:	6023      	str	r3, [r4, #0]
 8014ad8:	bd38      	pop	{r3, r4, r5, pc}
 8014ada:	bf00      	nop
 8014adc:	20008350 	.word	0x20008350

08014ae0 <_isatty_r>:
 8014ae0:	b538      	push	{r3, r4, r5, lr}
 8014ae2:	4d06      	ldr	r5, [pc, #24]	; (8014afc <_isatty_r+0x1c>)
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	4604      	mov	r4, r0
 8014ae8:	4608      	mov	r0, r1
 8014aea:	602b      	str	r3, [r5, #0]
 8014aec:	f000 f8cc 	bl	8014c88 <_isatty>
 8014af0:	1c43      	adds	r3, r0, #1
 8014af2:	d102      	bne.n	8014afa <_isatty_r+0x1a>
 8014af4:	682b      	ldr	r3, [r5, #0]
 8014af6:	b103      	cbz	r3, 8014afa <_isatty_r+0x1a>
 8014af8:	6023      	str	r3, [r4, #0]
 8014afa:	bd38      	pop	{r3, r4, r5, pc}
 8014afc:	20008350 	.word	0x20008350

08014b00 <_lseek_r>:
 8014b00:	b538      	push	{r3, r4, r5, lr}
 8014b02:	4d07      	ldr	r5, [pc, #28]	; (8014b20 <_lseek_r+0x20>)
 8014b04:	4604      	mov	r4, r0
 8014b06:	4608      	mov	r0, r1
 8014b08:	4611      	mov	r1, r2
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	602a      	str	r2, [r5, #0]
 8014b0e:	461a      	mov	r2, r3
 8014b10:	f000 f8ca 	bl	8014ca8 <_lseek>
 8014b14:	1c43      	adds	r3, r0, #1
 8014b16:	d102      	bne.n	8014b1e <_lseek_r+0x1e>
 8014b18:	682b      	ldr	r3, [r5, #0]
 8014b1a:	b103      	cbz	r3, 8014b1e <_lseek_r+0x1e>
 8014b1c:	6023      	str	r3, [r4, #0]
 8014b1e:	bd38      	pop	{r3, r4, r5, pc}
 8014b20:	20008350 	.word	0x20008350

08014b24 <__malloc_lock>:
 8014b24:	4801      	ldr	r0, [pc, #4]	; (8014b2c <__malloc_lock+0x8>)
 8014b26:	f7ff b9b1 	b.w	8013e8c <__retarget_lock_acquire_recursive>
 8014b2a:	bf00      	nop
 8014b2c:	20008342 	.word	0x20008342

08014b30 <__malloc_unlock>:
 8014b30:	4801      	ldr	r0, [pc, #4]	; (8014b38 <__malloc_unlock+0x8>)
 8014b32:	f7ff b9ac 	b.w	8013e8e <__retarget_lock_release_recursive>
 8014b36:	bf00      	nop
 8014b38:	20008342 	.word	0x20008342

08014b3c <_realloc_r>:
 8014b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b40:	4680      	mov	r8, r0
 8014b42:	4614      	mov	r4, r2
 8014b44:	460e      	mov	r6, r1
 8014b46:	b921      	cbnz	r1, 8014b52 <_realloc_r+0x16>
 8014b48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014b4c:	4611      	mov	r1, r2
 8014b4e:	f7ff ba79 	b.w	8014044 <_malloc_r>
 8014b52:	b92a      	cbnz	r2, 8014b60 <_realloc_r+0x24>
 8014b54:	f7ff fa0a 	bl	8013f6c <_free_r>
 8014b58:	4625      	mov	r5, r4
 8014b5a:	4628      	mov	r0, r5
 8014b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b60:	f000 f872 	bl	8014c48 <_malloc_usable_size_r>
 8014b64:	4284      	cmp	r4, r0
 8014b66:	4607      	mov	r7, r0
 8014b68:	d802      	bhi.n	8014b70 <_realloc_r+0x34>
 8014b6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014b6e:	d812      	bhi.n	8014b96 <_realloc_r+0x5a>
 8014b70:	4621      	mov	r1, r4
 8014b72:	4640      	mov	r0, r8
 8014b74:	f7ff fa66 	bl	8014044 <_malloc_r>
 8014b78:	4605      	mov	r5, r0
 8014b7a:	2800      	cmp	r0, #0
 8014b7c:	d0ed      	beq.n	8014b5a <_realloc_r+0x1e>
 8014b7e:	42bc      	cmp	r4, r7
 8014b80:	4622      	mov	r2, r4
 8014b82:	4631      	mov	r1, r6
 8014b84:	bf28      	it	cs
 8014b86:	463a      	movcs	r2, r7
 8014b88:	f7fe fcda 	bl	8013540 <memcpy>
 8014b8c:	4631      	mov	r1, r6
 8014b8e:	4640      	mov	r0, r8
 8014b90:	f7ff f9ec 	bl	8013f6c <_free_r>
 8014b94:	e7e1      	b.n	8014b5a <_realloc_r+0x1e>
 8014b96:	4635      	mov	r5, r6
 8014b98:	e7df      	b.n	8014b5a <_realloc_r+0x1e>
	...

08014b9c <_read_r>:
 8014b9c:	b538      	push	{r3, r4, r5, lr}
 8014b9e:	4d07      	ldr	r5, [pc, #28]	; (8014bbc <_read_r+0x20>)
 8014ba0:	4604      	mov	r4, r0
 8014ba2:	4608      	mov	r0, r1
 8014ba4:	4611      	mov	r1, r2
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	602a      	str	r2, [r5, #0]
 8014baa:	461a      	mov	r2, r3
 8014bac:	f000 f884 	bl	8014cb8 <_read>
 8014bb0:	1c43      	adds	r3, r0, #1
 8014bb2:	d102      	bne.n	8014bba <_read_r+0x1e>
 8014bb4:	682b      	ldr	r3, [r5, #0]
 8014bb6:	b103      	cbz	r3, 8014bba <_read_r+0x1e>
 8014bb8:	6023      	str	r3, [r4, #0]
 8014bba:	bd38      	pop	{r3, r4, r5, pc}
 8014bbc:	20008350 	.word	0x20008350

08014bc0 <_raise_r>:
 8014bc0:	291f      	cmp	r1, #31
 8014bc2:	b538      	push	{r3, r4, r5, lr}
 8014bc4:	4604      	mov	r4, r0
 8014bc6:	460d      	mov	r5, r1
 8014bc8:	d904      	bls.n	8014bd4 <_raise_r+0x14>
 8014bca:	2316      	movs	r3, #22
 8014bcc:	6003      	str	r3, [r0, #0]
 8014bce:	f04f 30ff 	mov.w	r0, #4294967295
 8014bd2:	bd38      	pop	{r3, r4, r5, pc}
 8014bd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014bd6:	b112      	cbz	r2, 8014bde <_raise_r+0x1e>
 8014bd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014bdc:	b94b      	cbnz	r3, 8014bf2 <_raise_r+0x32>
 8014bde:	4620      	mov	r0, r4
 8014be0:	f000 f830 	bl	8014c44 <_getpid_r>
 8014be4:	462a      	mov	r2, r5
 8014be6:	4601      	mov	r1, r0
 8014be8:	4620      	mov	r0, r4
 8014bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014bee:	f000 b817 	b.w	8014c20 <_kill_r>
 8014bf2:	2b01      	cmp	r3, #1
 8014bf4:	d00a      	beq.n	8014c0c <_raise_r+0x4c>
 8014bf6:	1c59      	adds	r1, r3, #1
 8014bf8:	d103      	bne.n	8014c02 <_raise_r+0x42>
 8014bfa:	2316      	movs	r3, #22
 8014bfc:	6003      	str	r3, [r0, #0]
 8014bfe:	2001      	movs	r0, #1
 8014c00:	e7e7      	b.n	8014bd2 <_raise_r+0x12>
 8014c02:	2400      	movs	r4, #0
 8014c04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014c08:	4628      	mov	r0, r5
 8014c0a:	4798      	blx	r3
 8014c0c:	2000      	movs	r0, #0
 8014c0e:	e7e0      	b.n	8014bd2 <_raise_r+0x12>

08014c10 <raise>:
 8014c10:	4b02      	ldr	r3, [pc, #8]	; (8014c1c <raise+0xc>)
 8014c12:	4601      	mov	r1, r0
 8014c14:	6818      	ldr	r0, [r3, #0]
 8014c16:	f7ff bfd3 	b.w	8014bc0 <_raise_r>
 8014c1a:	bf00      	nop
 8014c1c:	200000a8 	.word	0x200000a8

08014c20 <_kill_r>:
 8014c20:	b538      	push	{r3, r4, r5, lr}
 8014c22:	4d07      	ldr	r5, [pc, #28]	; (8014c40 <_kill_r+0x20>)
 8014c24:	2300      	movs	r3, #0
 8014c26:	4604      	mov	r4, r0
 8014c28:	4608      	mov	r0, r1
 8014c2a:	4611      	mov	r1, r2
 8014c2c:	602b      	str	r3, [r5, #0]
 8014c2e:	f000 f833 	bl	8014c98 <_kill>
 8014c32:	1c43      	adds	r3, r0, #1
 8014c34:	d102      	bne.n	8014c3c <_kill_r+0x1c>
 8014c36:	682b      	ldr	r3, [r5, #0]
 8014c38:	b103      	cbz	r3, 8014c3c <_kill_r+0x1c>
 8014c3a:	6023      	str	r3, [r4, #0]
 8014c3c:	bd38      	pop	{r3, r4, r5, pc}
 8014c3e:	bf00      	nop
 8014c40:	20008350 	.word	0x20008350

08014c44 <_getpid_r>:
 8014c44:	f000 b818 	b.w	8014c78 <_getpid>

08014c48 <_malloc_usable_size_r>:
 8014c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c4c:	1f18      	subs	r0, r3, #4
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	bfbc      	itt	lt
 8014c52:	580b      	ldrlt	r3, [r1, r0]
 8014c54:	18c0      	addlt	r0, r0, r3
 8014c56:	4770      	bx	lr

08014c58 <_close>:
 8014c58:	4b02      	ldr	r3, [pc, #8]	; (8014c64 <_close+0xc>)
 8014c5a:	2258      	movs	r2, #88	; 0x58
 8014c5c:	601a      	str	r2, [r3, #0]
 8014c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8014c62:	4770      	bx	lr
 8014c64:	20008350 	.word	0x20008350

08014c68 <_fstat>:
 8014c68:	4b02      	ldr	r3, [pc, #8]	; (8014c74 <_fstat+0xc>)
 8014c6a:	2258      	movs	r2, #88	; 0x58
 8014c6c:	601a      	str	r2, [r3, #0]
 8014c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8014c72:	4770      	bx	lr
 8014c74:	20008350 	.word	0x20008350

08014c78 <_getpid>:
 8014c78:	4b02      	ldr	r3, [pc, #8]	; (8014c84 <_getpid+0xc>)
 8014c7a:	2258      	movs	r2, #88	; 0x58
 8014c7c:	601a      	str	r2, [r3, #0]
 8014c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8014c82:	4770      	bx	lr
 8014c84:	20008350 	.word	0x20008350

08014c88 <_isatty>:
 8014c88:	4b02      	ldr	r3, [pc, #8]	; (8014c94 <_isatty+0xc>)
 8014c8a:	2258      	movs	r2, #88	; 0x58
 8014c8c:	601a      	str	r2, [r3, #0]
 8014c8e:	2000      	movs	r0, #0
 8014c90:	4770      	bx	lr
 8014c92:	bf00      	nop
 8014c94:	20008350 	.word	0x20008350

08014c98 <_kill>:
 8014c98:	4b02      	ldr	r3, [pc, #8]	; (8014ca4 <_kill+0xc>)
 8014c9a:	2258      	movs	r2, #88	; 0x58
 8014c9c:	601a      	str	r2, [r3, #0]
 8014c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8014ca2:	4770      	bx	lr
 8014ca4:	20008350 	.word	0x20008350

08014ca8 <_lseek>:
 8014ca8:	4b02      	ldr	r3, [pc, #8]	; (8014cb4 <_lseek+0xc>)
 8014caa:	2258      	movs	r2, #88	; 0x58
 8014cac:	601a      	str	r2, [r3, #0]
 8014cae:	f04f 30ff 	mov.w	r0, #4294967295
 8014cb2:	4770      	bx	lr
 8014cb4:	20008350 	.word	0x20008350

08014cb8 <_read>:
 8014cb8:	4b02      	ldr	r3, [pc, #8]	; (8014cc4 <_read+0xc>)
 8014cba:	2258      	movs	r2, #88	; 0x58
 8014cbc:	601a      	str	r2, [r3, #0]
 8014cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8014cc2:	4770      	bx	lr
 8014cc4:	20008350 	.word	0x20008350

08014cc8 <_sbrk>:
 8014cc8:	4a04      	ldr	r2, [pc, #16]	; (8014cdc <_sbrk+0x14>)
 8014cca:	6811      	ldr	r1, [r2, #0]
 8014ccc:	4603      	mov	r3, r0
 8014cce:	b909      	cbnz	r1, 8014cd4 <_sbrk+0xc>
 8014cd0:	4903      	ldr	r1, [pc, #12]	; (8014ce0 <_sbrk+0x18>)
 8014cd2:	6011      	str	r1, [r2, #0]
 8014cd4:	6810      	ldr	r0, [r2, #0]
 8014cd6:	4403      	add	r3, r0
 8014cd8:	6013      	str	r3, [r2, #0]
 8014cda:	4770      	bx	lr
 8014cdc:	20008354 	.word	0x20008354
 8014ce0:	20008358 	.word	0x20008358

08014ce4 <_write>:
 8014ce4:	4b02      	ldr	r3, [pc, #8]	; (8014cf0 <_write+0xc>)
 8014ce6:	2258      	movs	r2, #88	; 0x58
 8014ce8:	601a      	str	r2, [r3, #0]
 8014cea:	f04f 30ff 	mov.w	r0, #4294967295
 8014cee:	4770      	bx	lr
 8014cf0:	20008350 	.word	0x20008350

08014cf4 <_exit>:
 8014cf4:	e7fe      	b.n	8014cf4 <_exit>
	...

08014cf8 <_init>:
 8014cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cfa:	bf00      	nop
 8014cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014cfe:	bc08      	pop	{r3}
 8014d00:	469e      	mov	lr, r3
 8014d02:	4770      	bx	lr

08014d04 <_fini>:
 8014d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d06:	bf00      	nop
 8014d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d0a:	bc08      	pop	{r3}
 8014d0c:	469e      	mov	lr, r3
 8014d0e:	4770      	bx	lr
